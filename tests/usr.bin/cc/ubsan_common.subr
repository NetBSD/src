#	$NetBSD: ubsan_common.subr,v 1.1.2.2 2019/06/10 22:10:12 christos Exp $
#
# Copyright (c) 2018, 2019 The NetBSD Foundation, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

test_target()
{
	SUPPORT='n'
	if ! echo __GNUC__ | cc -E - | grep -q __GNUC__; then
		SUPPORT='y'
	fi

	if ! echo __clang__ | cc -E - | grep -q __clang__; then
		SUPPORT='y'
	fi
}

atf_test_case target_not_supported
target_not_supported_head()
{
	atf_set "descr" "Test forced skip"
}

target_not_supported_body()
{
	atf_skip "Target is not supported"
}

# Add a new test case, with head & body.
# asan_test_case <test-name> <description> <check-output>
ubsan_test_case() {
	atf_test_case "$1"
	eval "$1_head() {
		atf_set 'descr' 'Test Undefined Behavior for $2'
		atf_set 'require.progs' 'cc'
	}"

	atf_test_case "$1_profile"
	eval "$1_head() {
		atf_set 'descr' 'Test Undefined Behavior for $2 with profiling option'
		atf_set 'require.progs' 'cc'
	}"

	atf_test_case "$1_pic"
	eval "$1_head() {
		atf_set 'descr' 'Test Undefined Behavior for $2 with position independent code (PIC) flag'
		atf_set 'require.progs' 'cc'
	}"

	atf_test_case "$1_pie"
	eval "$1_head() {
		atf_set 'descr' 'Test Undefined Behavior for $2 with position independent execution (PIE) flag'
		atf_set 'require.progs' 'cc'
	}"

	atf_test_case "${1}32"
	eval "$1_head() {
		atf_set 'descr' 'Test Undefined Behavior for $2 in NetBSD_32 emulation'
		atf_set 'require.progs' 'cc file diff cat'
	}"

	eval "$1_body() {
		echo \"\$UBSAN_CODE\" > test.c
		cc -fsanitize=undefined -o test test.c
		# note: ignoring exit status due to inconsistency between gcc/clang
		# (and between individual tests)
		atf_check -s ignore -e match:'$3' ./test
	}

	$1_profile_body() {
		echo \"\$UBSAN_CODE\" > test.c
		cc -fsanitize=undefined -o test -pg test.c
		atf_check -s ignore -e match:'$3' ./test
	}

	$1_pic_body() {
		echo \"\$UBSAN_CODE\" > test.c
		cc -DPIC_FOO -fsanitize=undefined -fPIC -shared -o libtest.so test.c
		cc -DPIC_MAIN -o test test.c -fsanitize=undefined -L. -ltest

		export LD_LIBRARY_PATH=.
		atf_check -s ignore -e match:'$3' ./test
	}

	$1_pie_body() {
		# check whether this arch supports -pice
		if ! cc -pie -dM -E - < /dev/null 2>/dev/null >/dev/null; then
			atf_set_skip 'cc -pie not supported on this architecture'
		fi
		echo \"\$UBSAN_CODE\" > test.c
		cc -fsanitize=undefined -o test -fpie -pie test.c
		atf_check -s ignore -e match:'$3' ./test
	}

	${1}32_body() {
		# check whether this arch is 64bit
		if ! cc -dM -E - < /dev/null | fgrep -q _LP64; then
			atf_skip 'this is not a 64 bit architecture'
		fi
		if ! cc -m32 -dM -E - < /dev/null 2>/dev/null > ./def32; then
			atf_skip 'cc -m32 not supported on this architecture'
		else
			if fgrep -q _LP64 ./def32; then
				atf_fail 'cc -m32 does not generate netbsd32 binaries'
			fi
		fi

		echo \"\$UBSAN_CODE\" > test.c
		cc -fsanitize=undefined -o df32 -m32 test.c
		cc -fsanitize=undefined -o df64 test.c
		file -b ./df32 > ./ftype32
		file -b ./df64 > ./ftype64
		if diff ./ftype32 ./ftype64 >/dev/null; then
			atf_fail 'generated binaries do not differ'
		fi
		echo '32bit binaries on this platform are:'
		cat ./ftype32
		echo 'While native (64bit) binaries are:'
		cat ./ftype64
		atf_check -s ignore -e match:'$3' ./df32

# and another test with profile 32bit binaries
		cc -fsanitize=undefined -o test -pg -m32 test.c
		atf_check -s ignore -e match:'$3' ./test
	}"
}

ubsan_add_test_cases() {
	test_target
	test $SUPPORT = 'n' && {
		atf_add_test_case target_not_supported
		return 0
	}

	atf_add_test_case "$1"
#	atf_add_test_case "$1_profile"
	atf_add_test_case "$1_pic"
	atf_add_test_case "$1_pie"
#	atf_add_test_case "${1}32"
}
