.\"	$NetBSD: mbrtoc16.3,v 1.10.2.2 2024/10/14 17:20:17 martin Exp $
.\"
.\" Copyright (c) 2024 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 14, 2024
.Dt MBRTOC16 3
.Os
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh NAME
.Nm mbrtoc16
.Nd Restartable multibyte to UTF-16 conversion
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh LIBRARY
.Lb libc
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh SYNOPSIS
.
.In uchar.h
.
.Ft size_t
.Fo mbrtoc16
.Fa "char16_t * restrict pc16"
.Fa "const char * restrict s"
.Fa "size_t n"
.Fa "mbstate_t * restrict ps"
.Fc
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh DESCRIPTION
The
.Nm
function decodes multibyte characters in the current locale and
converts them to UTF-16, keeping state so it can restart after
incremental progress.
.Pp
Each call to
.Nm :
.Bl -enum -compact
.It
examines up to
.Fa n
bytes starting at
.Fa s ,
.It
yields a UTF-16 code unit if available by storing it at
.Li * Ns Fa pc16 ,
.It
saves state at
.Fa ps ,
and
.It
returns either the number of bytes consumed if any or a special return
value.
.El
.Pp
Specifically:
.Bl -bullet
.It
If the multibyte sequence at
.Fa s
is invalid after any previous input saved at
.Fa ps ,
or if an error occurs in decoding,
.Nm
returns
.Li (size_t)-1
and sets
.Xr errno 2
to indicate the error.
.It
If the multibyte sequence at
.Fa s
is still incomplete after
.Fa n
bytes, including any previous input saved in
.Fa ps ,
.Nm
saves its state in
.Fa ps
after all the input so far and returns
.Li "(size_t)-2".
.Sy All
.Fa n
bytes of input are consumed in this case.
.It
If
.Nm
had previously decoded a multibyte character but has not yet yielded
all the code units of its UTF-16 encoding, it stores the next UTF-16
code unit at
.Li * Ns Fa pc16
and returns
.Li "(size_t)-3" .
.Sy \&No
bytes of input are consumed in this case.
.It
If
.Nm
decodes the null multibyte character, then it stores zero at
.Li * Ns Fa pc16
and returns zero.
.It
Otherwise,
.Nm
decodes a single multibyte character, stores the first (and possibly
only) code unit in its UTF-16 encoding at
.Li * Ns Fa pc16 ,
and returns the number of bytes consumed to decode the first multibyte
character.
.El
.Pp
If
.Fa pc16
is a null pointer, nothing is stored, but the effects on
.Fa ps
and the return value are unchanged.
.Pp
If
.Fa s
is a null pointer, the
.Nm
call is equivalent to:
.Bd -ragged -offset indent
.Fo mbrtoc16
.Li NULL ,
.Li \*q\*q ,
.Li 1 ,
.Fa ps
.Fc
.Ed
.Pp
This always returns zero, and has the effect of resetting
.Fa ps
to the initial conversion state, without writing to
.Fa pc16 ,
even if it is nonnull.
.Pp
If
.Fa ps
is a null pointer,
.Nm
uses an internal
.Vt mbstate_t
object with static storage duration, distinct from all other
.Vt mbstate_t
objects
.Po
including those used by
.Xr mbrtoc8 3 ,
.Xr mbrtoc32 3 ,
.Xr c8rtomb 3 ,
.Xr c16rtomb 3 ,
and
.Xr c32rtomb 3
.Pc ,
which is initialized at program startup to the initial conversion
state.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh IMPLEMENTATION NOTES
On well-formed input, the
.Nm
function yields either a Unicode scalar value in the Basic Multilingual
Plane (BMP), i.e., a 16-bit Unicode code point that is not a surrogate
code point, or, over two successive calls, yields the high and low
surrogate code points (in that order) of a Unicode scalar value outside
the BMP.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh RETURN VALUES
The
.Nm
function returns:
.Bl -tag -width Li
.It Li 0
.Bq null
if
.Nm
decoded a null multibyte character.
.It Ar i
.Bq code unit
where
.Li 1
\*(Le
.Ar i
\*(Le
.Fa n ,
if
.Nm
consumed
.Ar i
bytes of input to decode the next multibyte character, yielding a
UTF-16 code unit.
.It Li (size_t)-3
.Bq continuation
if
.Nm
consumed no new bytes of input but yielded a UTF-16 code unit that was
pending from previous input.
.It Li (size_t)-2
.Bq incomplete
if
.Nm
found only an incomplete multibyte sequence after all
.Fa n
bytes of input and any previous input, and saved its state to restart
in the next call with
.Fa ps .
.It Li (size_t)-1
.Bq error
if any encoding error was detected;
.Xr errno 2
is set to reflect the error.
.El
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh EXAMPLES
Print the UTF-16 code units of a multibyte string in hexadecimal text:
.Bd -literal -offset indent
char *s = ...;
size_t n = ...;
mbstate_t mbs = {0};    /* initial conversion state */

while (n) {
        char16_t c16;
        size_t len;

        len = mbrtoc16(&c16, s, n, &mbs);
        switch (len) {
        case 0:         /* NUL terminator */
                assert(c16 == 0);
                goto out;
        default:        /* scalar value or high surrogate */
                printf("U+%04"PRIx16"\en", (uint16_t)c16);
                break;
        case (size_t)-3: /* low surrogate */
                printf("continue U+%04"PRIx16"\en", (uint16_t)c16);
                break;
        case (size_t)-2: /* incomplete */
                printf("incomplete\en");
                goto readmore;
        case (size_t)-1: /* error */
                printf("error: %d\en", errno);
                goto out;
        }
        s += len;
        n -= len;
}
.Ed
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh ERRORS
.Bl -tag -width Bq
.It Bq Er EILSEQ
The multibyte sequence cannot be decoded in the current locale as a
Unicode scalar value.
.It Bq Er EIO
An error occurred in loading the locale's character conversions.
.El
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh SEE ALSO
.Xr c16rtomb 3 ,
.Xr c32rtomb 3 ,
.Xr c8rtomb 3 ,
.Xr mbrtoc32 3 ,
.Xr mbrtoc8 3 ,
.Xr uchar 3
.Rs
.%B The Unicode Standard
.%O Version 15.0 \(em Core Specification
.%Q The Unicode Consortium
.%D September 2022
.%U https://www.unicode.org/versions/Unicode15.0.0/UnicodeStandard-15.0.pdf
.Re
.Rs
.%A P. Hoffman
.%A F. Yergeau
.%T UTF-16, an encoding of ISO 10646
.%R RFC 2781
.%D February 2000
.%I Internet Engineering Task Force
.%U https://datatracker.ietf.org/doc/html/rfc2781
.Re
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh STANDARDS
The
.Nm
function conforms to
.St -isoC-2011 .
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh HISTORY
The
.Nm
function first appeared in
.Nx 11.0 .
