.\"	$NetBSD: access.2,v 1.26.12.1 2012/11/20 03:00:43 tls Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)access.2	8.2 (Berkeley) 4/1/94
.\"
.Dd May 3, 2010
.Dt ACCESS 2
.Os
.Sh NAME
.Nm access ,
.Nm faccessat
.Nd check access permissions of a file or pathname
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn access "const char *path" "int mode"
.In fcntl.h
.Ft int
.Fn faccessat "int fd" "const char *path" "int mode" "int flag"
.Sh DESCRIPTION
The
.Fn access
function checks the accessibility of the
file named by
.Fa path
for the access permissions indicated by
.Fa mode .
The value of
.Fa mode
is the bitwise inclusive OR of the access permissions to be
checked
.Pf ( Dv R_OK
for read permission,
.Dv W_OK
for write permission and
.Dv X_OK
for execute/search permission) or the existence test,
.Dv F_OK .
All components of the pathname
.Fa path
are checked for access permissions (including
.Dv F_OK ) .
.Pp
.Fn faccessat 
works the same way as 
.Fn access
except if 
.Fa path
is relative. In that case, it is looked up from a directory whose file
descriptor was passed as 
.Fa fd .
Search permission is required on
.Fa fd
except if that file descriptor was open with
.Dv O_SEARCH
option.
.Fa fd
can be set to
.Dv AT_FDCWD
in order to specify current directory. 
.Pp
The real user ID is used in place of the effective user ID
and the real group access list
(including the real group ID) are
used in place of the effective ID for verifying permission.
.Fn faccessat
can use
effective user ID and effective group ID if the 
.Dv AT_EACCESS
is passed in 
.Fa flag .
.Pp
If a process has super-user privileges and indicates success for
.Dv R_OK
or
.Dv W_OK ,
the file may not actually have read or write permission bits set.
If a process has super-user privileges and indicates success for
.Dv X_OK ,
at least one of the user, group, or other execute bits is set.
(However, the file may still not be executable.
See
.Xr execve 2 . )
.Sh RETURN VALUES
If
.Fa path
cannot be found or if any of the desired access modes would
not be granted, then a \-1 value is returned; otherwise
a 0 value is returned.
.Sh ERRORS
Access to the file is denied if:
.Bl -tag -width Er
.It Bq Er EACCES
Permission bits of the file mode do not permit the requested
access, or search permission is denied on a component of the
path prefix.
The owner of a file has permission checked with respect to the
.Dq owner
read, write, and execute mode bits, members of the file's group
other than the owner have permission checked with respect to the
.Dq group
mode bits, and all others have permissions checked with respect to
the
.Dq other
mode bits.
.It Bq Er EFAULT
.Fa path
points outside the process's allocated address space.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Brq Dv NAME_MAX
characters, or an entire path name exceeded
.Brq Dv PATH_MAX
characters.
.It Bq Er ENOENT
The named file does not exist.
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er EROFS
Write access is requested for a file on a read-only file system.
.It Bq Er ETXTBSY
Write access is requested for a pure procedure (shared text)
file presently being executed.
.El
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr execve 2 ,
.Xr stat 2 ,
.Xr secure_path 3
.Sh STANDARDS
The
.Fn access
function conforms to
.St -p1003.1-90 .
.Fn faccessat
function conforms to
.St -p1003.1-2008 .
.Sh SECURITY CONSIDERATIONS
The
.Fn access
system call is a potential security hole due to race conditions.
It should never be used.
Set-user-ID and set-group-ID applications should restore the
effective user or group ID, and perform actions directly rather than use
.Fn access
to simulate access checks for the real user or group ID.
.Pp
The
.Fn access
system call may however have some value in providing clues to users as to
whether certain operations make sense for a particular filesystem object.
Arguably it also allows a cheaper file existence test than
.Xr stat 2 .
