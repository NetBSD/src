.\"	$NetBSD: fork.2,v 1.24.18.1 2019/09/05 08:19:40 martin Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)fork.2	8.1 (Berkeley) 6/4/93
.\"
.Dd September 1, 2019
.Dt FORK 2
.Os
.Sh NAME
.Nm fork
.Nd create a new process
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft pid_t
.Fn fork void
.Sh DESCRIPTION
.Fn fork
causes creation of a new process.
The new process (child process) is an exact copy of the
calling process (parent process) except for the following:
.Bl -bullet -offset indent
.It
The child process has a unique process ID.
.It
The child process has a different parent
process ID (i.e., the process ID of the parent process).
.It
The child process has its own copy of the parent's descriptors.
These descriptors reference the same underlying objects, so that,
for instance, file pointers in file objects are shared between
the child and the parent, so that an
.Xr lseek 2
on a descriptor in the child process can affect a subsequent
.Xr read 2
or
.Xr write 2
by the parent.
This descriptor copying is also used by the shell to
establish standard input and output for newly created processes
as well as to set up pipes.
.It
The child process' resource utilizations
are set to 0; see
.Xr setrlimit 2 .
.El
.Pp
In general, the child process should call
.Xr _exit 2
rather than
.Xr exit 3 .
Otherwise, any stdio buffers that exist both in the parent and child
will be flushed twice.
Similarly,
.Xr _exit 2
should be used to prevent
.Xr atexit 3
routines from being called twice (once in the parent and once in the child).
.Pp
In case of a threaded program, only the thread calling
.Fn fork
is still running in the child processes.
.Pp
Child processes of a threaded program have additional restrictions,
a child must only call functions that are async-signal-safe.
Very few functions are asynchronously safe
(the list may be found in
.Xr sigaction 2 )
and applications should make sure they call
.Xr exec 3
as soon as possible.
.Sh RETURN VALUES
Upon successful completion,
.Fn fork
returns a value
of 0 to the child process and returns the process ID of the child
process to the parent process.
Otherwise, a value of \-1 is returned to the parent process, no
child process is created, and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn fork
will fail and no child process will be created if:
.Bl -tag -width XEAGAINXX
.It Bq Er EAGAIN
The system-imposed limit on the total
number of processes under execution would be exceeded.
This limit is configuration-dependent; or
the limit
.Dv RLIMIT_NPROC
on the total number of
processes under execution by this user id would be exceeded.
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh SEE ALSO
.Xr execve 2 ,
.Xr setrlimit 2 ,
.Xr vfork 2 ,
.Xr wait 2 ,
.Xr pthread_atfork 3
.Sh STANDARDS
The
.Fn fork
function conforms to
.St -p1003.1-90 .
.Sh HISTORY
A
.Fn fork
system call appeared in
.At v1 .
