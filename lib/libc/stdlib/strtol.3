.\"	$NetBSD: strtol.3,v 1.27 2015/01/16 18:37:21 christos Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     from: @(#)strtol.3	8.1 (Berkeley) 6/4/93
.\"
.Dd December 27, 2014
.Dt STRTOL 3
.Os
.Sh NAME
.Nm strtoi ,
.Nm strtol ,
.Nm strtoll ,
.Nm strtoimax ,
.Nm strtoq
.Nd convert string value to a long, long long, intmax_t or quad_t integer
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In stdlib.h
.In limits.h
.Ft long int
.Fn strtol "const char * restrict nptr" "char ** restrict endptr" "int base"
.Ft long long int
.Fn strtoll "const char * restrict nptr" "char ** restrict endptr" "int base"
.Pp
.In inttypes.h
.Ft intmax_t 
.Fn strtoi "const char * restrict nptr" "char ** restrict endptr" "int base" "intmax_t lo" "intmax_t hi" "int *rerror"
.Ft intmax_t
.Fn strtoimax "const char * restrict nptr" "char ** restrict endptr" "int base"
.Pp
.In sys/types.h
.In stdlib.h
.In limits.h
.Ft quad_t
.Fn strtoq "const char * restrict nptr" "char ** restrict endptr" "int base"
.Sh DESCRIPTION
The
.Fn strtol
function
converts the string in
.Fa nptr
to a
.Ft long int
value.
The
.Fn strtoll
function
converts the string in
.Fa nptr
to a
.Ft long long int
value.
The
.Fn strtoimax
function
converts the string in
.Fa nptr
to an
.Ft intmax_t
value.
The
.Fn strtoi
function
is using internally
.Fn strtoimax
and ensures that the result is always in the range [
.Fa lo ..
.Fa hi
].
In adddition it always places
.Dv 0
on success or an error value in the
.Fa rerror
argument, avoiding the
.Dv errno
gymnastics the other functions require.
The
.Fa rerror
argument can be
.Dv NULL
if errors are to be ignored.
The
.Fn strtoq
function
converts the string in
.Fa nptr
to a
.Ft quad_t
value.
The conversion is done according to the given
.Fa base ,
which must be between 2 and 36 inclusive,
or be the special value 0.
.Pp
The string may begin with an arbitrary amount of white space
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16,
the string may then include a
.Ql 0x
prefix,
and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to a
.Em long
value in the obvious manner,
stopping at the first character which is not a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case
represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is non-nil,
.Fn strtol
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtol
stores the original value of
.Fa nptr
in
.Fa *endptr .
(Thus, if
.Fa *nptr
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtoi
function
always returns the closest value in the range specified by
the
.Fa lo
and
.Fa hi
arguments.
The
.Fn strtol
function
returns the result of the conversion,
unless the value would underflow or overflow.
If an underflow occurs,
.Fn strtol
returns
.Dv LONG_MIN ,
.Fn strtoll
returns
.Dv LLONG_MIN ,
and
.Fn strtoimax
returns
.Dv INTMAX_MIN .
If an overflow occurs,
.Fn strtol
returns
.Dv LONG_MAX ,
.Fn strtoll
returns
.Dv LLONG_MAX ,
and
.Fn strtoimax
returns
.Dv INTMAX_MAX .
In these cases,
.Va errno
is set to
.Er ERANGE .
If the
.Fa base
argument is not supported then
.Va errno
is set to
.Er EINVAL
and the functions return 0.
.Pp
If no error occurs,
.Va errno
is left unchanged.
This behavior (which is unlike most library functions) is guaranteed
by the pertinent standards.
.Sh EXAMPLES
The
.Fn strtoi
function is the simplest to use:
.Bd -literal -offset indent
int e;
intmax_t lval = strtoi(buf, NULL, 0, 1, 99, &e);
if (e)
	warn("conversion of `%s' to a number failed, using %jd",
	    buf, lval);
.Ed
.Pp
This will always return a number in
.Dv [1..99]
range no matter what the input is, and warn if the conversion failed.
.Pp
Because the return value of
.Fn strtol
cannot be used unambiguously to detect an error,
.Va errno
is left unchanged after a successful call.
To ensure that a string is a valid number (i.e., in range and containing no
trailing characters), clear
.Va errno
beforehand explicitly, then check it afterwards:
.Bd -literal -offset indent
char *ep;
long lval;

\&...

errno = 0;
lval = strtol(buf, \*[Am]ep, 10);
if (buf[0] == '\e0' || *ep != '\e0')
	goto not_a_number;
if (errno == ERANGE \*[Am]\*[Am] (lval == LONG_MAX || lval == LONG_MIN))
	goto out_of_range;
.Ed
.Pp
This example will accept
.Dq 12
but not
.Dq 12foo
or
.Dq 12\en .
If trailing whitespace is acceptable, further checks must be done on
.Va *ep ;
alternately, use
.Xr sscanf 3 .
.Pp
If
.Fn strtol
is being used instead of
.Xr atoi 3 ,
error checking is further complicated because the desired return value is an
.Li int
rather than a
.Li long ;
however, on some architectures integers and long integers are the same size.
Thus the following is necessary:
.Bd -literal -offset indent
char *ep;
int ival;
long lval;

\&...

errno = 0;
lval = strtol(buf, \*[Am]ep, 10);
if (buf[0] == '\e0' || *ep != '\e0')
	goto not_a_number;
if ((errno == ERANGE \*[Am]\*[Am] (lval == LONG_MAX || lval == LONG_MIN)) ||
    (lval \*[Gt] INT_MAX || lval \*[Lt] INT_MIN))
	goto out_of_range;
ival = lval;
.Ed
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Ar base
is not between 2 and 36 and does not contain the special value 0.
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped.
.El
.Pp
In addition to the above errors
.Fn strtoi 
returns:
.Bl -tag -width Er
.It Bq Er ECANCELED
The string did not contain any characters that could be converted.
.It Bq Er ENOTSUP
The string contained non-numeric characters that did not get converted.
In this case,
.Fa endptr
points to the first unconverted character.
.It Bq Er ERANGE
The range given was invalid, i.e.
.Fa lo
\*[Gt]
.Fa hi .
.El
.Sh SEE ALSO
.Xr atof 3 ,
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr atoll 3 ,
.Xr strtod 3 ,
.Xr strtou 3 ,
.Xr strtoul 3 ,
.Xr strtoull 3 ,
.Xr strtoumax 3
.Sh STANDARDS
The
.Fn strtol
function
conforms to
.St -ansiC .
The
.Fn strtoll
and
.Fn strtoimax
functions conform to
.St -isoC-99 .
The
.Fn strtoi
function appeared in
.Nx 8 .
.Sh BUGS
Ignores the current locale.
