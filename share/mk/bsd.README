#	$NetBSD: bsd.README,v 1.447 2024/04/05 01:16:00 christos Exp $
#	@(#)bsd.README	8.2 (Berkeley) 4/2/94

This is the README file for the make "include" files for the NetBSD
source tree.  The files are installed in /usr/share/mk, and are,
by convention, named with the suffix ".mk".

Other sources of relevant documentation are BUILDING in the top
level of the NetBSD source tree, and the mk.conf(5) man page.

Note: this file is not intended to replace reading through the .mk
files for anything tricky.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

RANDOM THINGS WORTH KNOWING:

The files are simply C-style #include files, and pretty much behave like
you'd expect.  The syntax is slightly different in that a single '.' is
used instead of the hash mark, i.e. ".include <bsd.prog.mk>".

One difference that will save you lots of debugging time is that inclusion
of the file is normally done at the *end* of the Makefile.  The reason for
this is because .mk files often modify variables and behavior based on the
values of variables set in the Makefile.  To make this work, remember that
the FIRST target found is the target that is used, i.e. if the Makefile has:

	a:
		echo a
	a:
		echo a number two

the command "make a" will echo "a".  To make things confusing, the SECOND
variable assignment is the overriding one, i.e. if the Makefile has:

	a=	foo
	a=	bar

	b:
		echo ${a}

the command "make b" will echo "bar".  This is for compatibility with the
way the V7 make behaved.

It's fairly difficult to make the BSD .mk files work when you're building
multiple programs in a single directory.  It's a lot easier to split up the
programs than to deal with the problem.  Most of the agony comes from making
the "obj" directory stuff work right, not because we switched to a new version
of make.  So, don't get mad at us, figure out a better way to handle multiple
architectures so we can quit using the symbolic link stuff.  (Imake doesn't
count.)

The file .depend in the source directory is expected to contain dependencies
for the source files.  This file is read automatically by make after reading
the Makefile.

The variable DESTDIR works as before.  It's not set anywhere but will change
the tree where the file gets installed.

The profiled libraries are no longer built in a different directory than
the regular libraries.  A new suffix, ".po", is used to denote a profiled
object, and ".pico" denotes a shared (position-independent) object.

There are various make variables used during the build.

Many variables support a (case sensitive) value of "no" or "yes",
and are tested with  ${VAR} == "no"  and  ${VAR} != "no" .


The basic rule for the variable naming scheme is as follows:

HOST_<cmd>	A command that runs on the host machine regardless of
		whether or not the system is being cross compiled, or
		options for such a command.

MK<feature>	Can be set to "no" to disable feature <feature>,
		or "yes" to enable feature <feature>.
		Usually defaults to "yes", although some variables
		default to "no".
		Due to make(1) implementation issues, if a temporary
		command-line override of a mk.conf(5) or <bsd.own.mk>
		setting is required whilst still honoring a particular
		Makefile's setting of MK<feature>, use
			env MK<feature>=value make
		instead of
			make MK<feature>=value

NO<feature>	If defined, disables feature <feature>, overriding
		a user's MK<feature>=yes configuration.
		Not intended for users.
		This is to allow Makefiles to disable functionality
		that they don't support (such as missing man pages).
		NO<feature> variables must be defined before <bsd.own.mk>
		is included, which generally means define before
		any <*.mk> is included.
		See "Variables for a Makefile".

TOOL_<tool>	A tool that is provided as part of the USETOOLS
		framework.  When not using the USETOOLS framework,
		TOOL_<tool> variables should refer to tools that are
		already installed on the host system.

Various mk.conf(5) variables control the NetBSD system build.
These should not be set by Makefiles; they're for the user to define
in MAKECONF (see mk.conf(5) or <bsd.own.mk> documented below) or on
the make(1) command line.

The supported mk.conf(5) make variables are:

	BSDOBJDIR, BSDSRCDIR, BUILD, BUILDID, BUILDINFO, BUILDSEED,
	CDEXTRA, CONFIGOPTS, COPTS, CPUFLAGS, DESTDIR, EXTERNAL_TOOLCHAIN,
	INSTALLBOOT_BOARDS, INSTALLWORLDDIR, KERNARCHDIR, KERNCONFDIR,
	KERNEL_DIR, KERNOBJDIR, KERNSRCDIR, LOCALTIME, MAKEVERBOSE,
	MKAMDGPUFIRMWARE, MKARGON2, MKARZERO, MKATF, MKBINUTILS, MKBSDGREP,
	MKBSDTAR, MKCATPAGES, MKCLEANSRC, MKCLEANVERIFY, MKCOMPAT,
	MKCOMPATMODULES, MKCOMPATTESTS, MKCOMPATX11, MKCOMPLEX, MKCROSSGDB,
	MKCTF, MKCVS, MKCXX, MKDEBUG, MKDEBUGKERNEL, MKDEBUGLIB,
	MKDEBUGTOOLS, MKDEPINCLUDES, MKDOC, MKDTB, MKDTC, MKDTRACE,
	MKDYNAMICROOT, MKFIRMWARE, MKGCC, MKGCCCMDS, MKGDB, MKGROFF,
	MKGROFFHTMLDOC, MKHESIOD, MKHOSTOBJ, MKHTML, MKIEEEFP, MKINET6,
	MKINFO, MKIPFILTER, MKISCSI, MKKERBEROS, MKKMOD, MKKYUA, MKLDAP,
	MKLIBCSANITIZER, MKLIBCXX, MKLIBSTDCXX, MKLINKLIB, MKLINT, MKLLVM,
	MKLLVMRT, MKLVM, MKMAKEMANDB, MKMAN, MKMANDOC, MKMANZ, MKMDNS,
	MKNLS, MKNOUVEAUFIRMWARE, MKNPF, MKNSD, MKOBJ, MKOBJDIRS, MKPAM,
	MKPCC, MKPF, MKPIC, MKPICINSTALL, MKPICLIB, MKPIE, MKPIGZGZIP,
	MKPOSTFIX, MKPROFILE, MKRADEONFIRMWARE, MKRELRO, MKREPRO,
	MKREPRO_TIMESTAMP, MKRUMP, MKSANITIZER, MKSHARE, MKSKEY, MKSLJIT,
	MKSOFTFLOAT, MKSTATICLIB, MKSTATICPIE, MKSTRIPIDENT, MKSTRIPSYM,
	MKTEGRAFIRMWARE, MKTPM, MKUNBOUND, MKUNPRIVED, MKUPDATE, MKX11,
	MKX11FONTS, MKX11MOTIF, MKXORG_SERVER, MKYP, MKZFS, NETBSDSRCDIR,
	NETBSD_OFFICIAL_RELEASE, NOCLEANDIR, NODISTRIBDIRS, NOINCLUDES,
	OBJMACHINE, RELEASEDIR, RUMPUSER_THREADS, RUMP_CURLWP, RUMP_DEBUG,
	RUMP_DIAGNOSTIC, RUMP_KTRACE, RUMP_LOCKDEBUG, RUMP_LOCKS_UP,
	RUMP_NBCOMPAT, RUMP_VIRTIF, RUMP_VNODE_LOCKDEBUG,
	TOOLCHAIN_MISSING, TOOLDIR, USETOOLS, USE_FORT, USE_HESIOD,
	USE_INET6, USE_JEMALLOC, USE_KERBEROS, USE_LDAP, USE_LIBCSANITIZER,
	USE_PAM, USE_PIGZGZIP, USE_SANITIZER, USE_SKEY, USE_SSP,
	USE_XZ_SETS, USE_YP, X11MOTIFPATH, X11SRCDIR.

The obsolete mk.conf(5) make variables are:

	EXTSRCSRCDIR, MKBFD, MKCRYPTO, MKEXTSRC, MKKDEBUG, MKKERBEROS4,
	MKLLD, MKLLDB, MKMCLINKER, MKPERFUSE, MKTOOLSDEBUG, NBUILDJOBS,
	SHAREDSTRINGS, USE_COMBINE, USE_NEW_TOOLCHAIN.

Notable variables documented in mk.conf(5) and duplicated here:

DESTDIR		Directory to contain the built NetBSD system.  If set,
		special options are passed to the compilation tools to
		prevent their default use of the host system's
		/usr/include, /usr/lib, and so forth.  This pathname must
		be an absolute path, and should not end with a slash (/)
		character.  (For installation into the system's root
		directory, set DESTDIR to an empty string, not to "/").
		The directory must reside on a file system which supports
		long file names and hard links.

		Note: build.sh will provide a default of
		"destdir.MACHINE" (in the top-level .OBJDIR) unless run
		in `expert' mode with the -E option.

		Default: Empty string if USETOOLS=yes; otherwise unset.

RELEASEDIR	If set, specifies the directory to which a release(7)
		layout will be written at the end of a "make release".
		If specified, must be an absolute path.

		Note: build.sh will provide a default of "releasedir" (in
		the top-level .OBJDIR) unless run in `expert' mode with
		the -E option.

		Default: Unset.

COPTS.lib<lib>
OBJCOPTS.lib<lib>
LDADD.lib<lib>
CPPFLAGS.lib<lib>
CXXFLAGS.lib<lib>
COPTS.<prog>
OBJCOPTS.<prog>
LDADD.<prog>
CPPFLAGS.<prog>
CXXFLAGS.<prog> These provide a way to specify additions to the associated
		variables in a way that applies only to a particular library
		or program.  <lib> corresponds to the LIB variable set in
		the library's makefile.  <prog> corresponds to either PROG
		or PROG_CXX (if set).  For example, if COPTS.libcrypto is
		set to "-g", "-g" will be added to COPTS only when compiling
		the crypto library.
		See bsd.prog.mk below for more details about these variables.

The active compiler is selected using the following variables:
AVAILABLE_COMPILER
		List of available compiler suites.  Processed in order
		for selecting the active compiler for each frontend.
HAVE_PCC	If defined, PCC is present and enabled.
HAVE_LLVM	If defined, LLVM/Clang is present and enabled.
UNSUPPORTED_COMPILER.<comp>
		If defined, the support for compiler <comp> is disabled.

For the frontends (CC, CPP, CXX, FC and OBJC) the following variables exist:
ACTIVE_CC	Active compile suite for the CC frontend.
SUPPORTED_CC	Compile suite with support for the CC frontend.
TOOL_CC.<comp>	Path to the CC frontend for compiler <comp>.


=-=-=-=-=   Variables for a Makefile   =-=-=-=-=

If the following varialbes are defined in the Makefile before
any make(1) .include directives, they force the specific behavior.

NOCOMPAT	Force MKCOMPAT=no.
NOCTF		Force MKCTF=no.
NODEBUG		Force MKDEBUG=no.
NODEBUGLIB	Force MKDEBUGLIB=no.
NODOC		Force MKDOC=no.
NOFORT		Force USE_FORT=no.
NOHTML		Force MKHTML=no.
NOINFO		Force MKINFO=no.
NOLIBCSANITIZER Force MKLIBCSANITIZER=no (and USE_LIBCSANITIZER=no)
NOLINKLIB	Force MKLINKLIB=no.
NOLINT		Force MKLINT=no.
NOMAN		Force MKMAN=no.
NOMANDOC	Force MKMANDOC=no.
NONLS		Force MKNLS=no.
NOOBJ		Force MKOBJ=no.
NOPIC		Force MKPIC=no.
NOPICINSTALL	Force MKPICINSTALL=no.
NOPIE		Force MKPIE=no.
NOPROFILE	Force MKPROFILE=no.
NORELRO		Force MKREPRO=no.
NOSANITIZER	Force MKSANITIZER=no (and USE_SANITIZER=no)
NOSHARE		Force MKSHARE=no.
NOSSP		Force USE_SSP=no.
NOSTATICLIB	Force MKSTATICLIB=no.

Special variations:

NOFULLRELRO!=no Force MKRELRO=no if MKRELRO=full

TODO: NOFULLRELRO should just be a defined test for consistency.


=-=-=-=-=   sys.mk   =-=-=-=-=

The include file <sys.mk> has the default rules for all makes, in the BSD
environment or otherwise.  You probably don't want to touch this file.

=-=-=-=-=   bsd.own.mk   =-=-=-=-=

The include file <bsd.own.mk> contains source tree configuration parameters,
such as the owners, groups, etc. for both manual pages and binaries, and
a few global "feature configuration" parameters.

It has no targets.

To get system-specific configuration parameters, <bsd.own.mk> will try to
include the mk.conf(5) file specified by the MAKECONF variable, which may
be either set in the environment or provided on the make(1) command line.
MAKECONF defaults to /etc/mk.conf.  mk.conf(5) may define any of the
variables described below.

<bsd.own.mk> sets the following variables, if they are not already defined
(defaults are in brackets):

NETBSDSRCDIR	The path to the top level of the NetBSD sources.
		If _SRC_TOP_ != "", that will be used as the default,
		otherwise BSDSRCDIR will be used as the default.
		Various makefiles within the NetBSD source tree will
		use this to reference the top level of the source tree.
		Default: Top level of the NetBSD source tree (as
		determined by the presence of build.sh and tools/) if
		make(1) is run from within that tree; otherwise BSDSRCDIR
		will be used.

_SRC_TOP_	Top of the system source tree, as determined by <bsd.own.mk>
		based on the presence of tools/ and build.sh.  This variable
		is "internal" to <bsd.own.mk>, although its value is only
		determined once and then propagated to all sub-makes.

_NETBSD_VERSION_DEPENDS
		A list of files which contain information about
		the version of the NetBSD being built.  This is
		defined only if the current directory appears
		to be inside a NetBSD source tree.  The list of
		files includes ${NETBSDSRCDIR}/sys/sys/param.h
		(which contains the kernel version number),
		${NETBSDSRCDIR}/sys/conf/newvers.sh and
		${NETBSDSRCDIR}/sys/conf/osrelease.sh (which
		interpret the information in sys/sys/param.h), and
		${_SRC_TOP_OBJ_}/params (which is an optional file,
		created by "make build" in ${_SRC_TOP_}/Makefile,
		containing all the variables that may influence the
		build).

		Targets that depend on the NetBSD version, or on
		variables defined at build time, can declare a
		dependency on ${_NETBSD_VERSION_DEPENDS}, like this:

			version.c: ${_NETBSD_VERSION_DEPENDS}
				commands to create version.c

BSDSRCDIR	The real path to the NetBSD source tree, if NETBSDSRCDIR
		isn't defined.
		Default: "/usr/src".

BSDOBJDIR	The real path to the object directory tree for the NetBSD
		source tree.
		Default: "/usr/obj".

BINGRP		Binary group.  [wheel]

BINOWN		Binary owner.  [root]

BINMODE		Binary mode.  [555]

NONBINMODE	Mode for non-executable files.  [444]

MANDIR		Base path for manual installation.  [/usr/share/man/cat]

MANGRP		Manual group.  [wheel]

MANOWN		Manual owner.  [root]

MANMODE		Manual mode.  [${NONBINMODE}]

MANINSTALL	Manual installation type.  Space separated list:
			catinstall, htmlinstall, maninstall
		Default value derived from MKCATPAGES and MKHTML.

MAKELINKLIB	Defaults to ${MKLINKLIB} but can be overriden by Makefiles

MAKESTATICLIB	Defaults to ${MKSTATICLIB} but can be overriden by Makefiles

LDSTATIC	Control program linking; if set blank, link everything
		dynamically.  If set to "-static", link everything statically.
		If not set, programs link according to their makefile.

LIBDIR		Base path for library installation.  [/usr/lib]

LINTLIBDIR	Base path for lint(1) library installation.  [/usr/libdata/lint]

LIBGRP		Library group.  [${BINGRP}]

LIBOWN		Library owner.  [${BINOWN}]

LIBMODE		Library mode.  [${NONBINMODE}]

LINKINSTALL	Install libraries used by users to link against (.a/.so)
		defaults to ${MAKELINKLIB}

DOCDIR		Base path for system documentation (e.g. PSD, USD, etc.)
		installation.  [/usr/share/doc]

DOCGRP		Documentation group.  [wheel]

DOCOWN		Documentation owner.  [root]

DOCMODE		Documentation mode.  [${NONBINMODE}]

GZIP_N_FLAG	Options to pass to TOOL_GZIP to prevent it from inserting
		file names or timestamps in the compressed output.
		[-n, or -nT when TOOL_GZIP is really TOOL_PIGZ]

NLSDIR		Base path for Native Language Support files installation.
		[/usr/share/nls]

NLSGRP		Native Language Support files group.  [wheel]

NLSOWN		Native Language Support files owner.  [root]

NLSMODE		Native Language Support files mode.  [${NONBINMODE}]

X11SRCDIR	Directory containing the modular Xorg source.  If
		specified, must be an absolute path.  The main modular
		Xorg source is found in ${X11SRCDIR}/external/mit.

		Default: ${NETBSDSRCDIR}/../xsrc, if that exists; otherwise
		"/usr/xsrc".

X11SRCDIR.local The path to the local X11 src tree.  [${X11SRCDIR}/local]

X11SRCDIR.lib<package>
X11SRCDIR.<package>
		The path to the xorg src tree for the specified package>.
		[${X11SRCDIR}/external/mit/xorg/<package>/dist]

X11ROOTDIR	Root directory of the X11 installation.  [/usr/X11R7]

X11BINDIR	X11 bin directory.  [${X11ROOTDIR}/bin]

X11FONTDIR	X11 font directory.  [${X11ROOTDIR}/lib/X11/fonts]

X11INCDIR	X11 include directory.  [${X11ROOTDIR}/include]

X11LIBDIR	X11 lib/x11 (config) directory.  [${X11ROOTDIR}/lib/X11]

X11MANDIR	X11 manual directory.  [${X11ROOTDIR}/man]

X11USRLIBDIR	X11 library directory.  [${X11ROOTDIR}/lib]

STRIPFLAG	The option passed to the install program to cause the binary
		to be stripped.  This is to be used when building your
		own install script so that the entire system can be made
		stripped/not-stripped using a single knob.  []

COPY		The option passed to the install program to cause the binary
		to be copied rather than moved.  This is to be used when
		building our own install script so that the entire system
		can either be installed with copies, or with moves using
		a single knob.  [-c]

MAKEDIRTARGETENV
		Environment variables passed to the child make process
		invoked by MAKEDIRTARGET.

MAKEDIRTARGET dir target [params]
		Runs "cd $${dir} && ${MAKE} [params] $${target}",
		displaying a "pretty" message whilst doing so.

RELEASEMACHINEDIR
		Subdirectory used below RELEASEDIR when building
		a release.  [${MACHINE},
		or ${MACHINE}-${MACHINE_ARCH} for evb{arm,mips,sh3}*]

RELEASEMACHINE	Subdirectory or path component used for the following
		paths:
			distrib/${RELEASEMACHINE}
			distrib/notes/${RELEASEMACHINE}
			etc/etc.${RELEASEMACHINE}
		Used when building a release.  [${MACHINE}]

Additionally, the following variables may be set by <bsd.own.mk> or in a
make configuration file to modify the behavior of the system build
process (default values are in brackets along with comments, if set by
<bsd.own.mk>):

USETOOLS	Can be set to "yes" or "no".  Indicates whether the tools
		specified by ${TOOLDIR} should be used as part of a build in
		progress. Must be set to "yes" if cross-compiling.
		Supported values:

		yes	Use the tools from TOOLDIR.

		no	Do not use the tools from TOOLDIR, but refuse to
			build native compilation tool components that are
			version-specific for that tool.

		never	Do not use the tools from TOOLDIR, even when
			building native tool components.  This is similar to
			the traditional NetBSD build method, but does not
			verify that the compilation tools in use are
			up-to-date enough in order to build the tree
			successfully.  This may cause build or runtime
			problems when building the whole NetBSD source tree.

		Default: "no" when using <bsd.*.mk> outside the NetBSD
		source tree (detected automatically) or if
		TOOLCHAIN_MISSING=yes; otherwise "yes".

OBJECT_FMT	Object file format.  [set to "ELF" on architectures that
		use ELF -- currently all architectures].

TOOLCHAIN_MISSING
		Can be set to "yes" or "no".  If not "no", this
		indicates that the platform "MACHINE_ARCH" being built
		does not have a working in-tree toolchain.
		If the ${MACHINE_ARCH} in question falls into this category,
		TOOLCHAIN_MISSING is conditionally assigned the value "yes".
		Otherwise, the variable is unconditionally assigned the
		value "no".

		If not "no", acts as MKBINUTILS=no MKGCC=no MKGDB=no.

		Default: "no".

EXTERNAL_TOOLCHAIN
		This variable is not directly set by <bsd.own.mk>, but
		including <bsd.own.mk> is the canonical way to gain
		access to this variable.  The variable should be defined
		either in the user's environment or in the user's mk.conf(5)
		file.

		If defined, this variable indicates the root directory of
		an external toolchain which will be used to build the
		tree.  For example, if a platform is a ${TOOLCHAIN_MISSING}
		platform, EXTERNAL_TOOLCHAIN can be used to re-enable the
		cross-compile framework.

		If EXTERNAL_TOOLCHAIN is defined, act as MKGCC=no, since
		the external version of the compiler may not be able to build
		the library components of the in-tree compiler.

		This variable should be used in conjunction with an
		appropriate HAVE_GCC or HAVE_LLVM setting to control the
		compiler options.

		Note: This variable is not yet used in as many places as
		it should be.  Expect the exact semantics of this variable
		to change in the short term as parts of the cross-compile
		framework continue to be cleaned up.

The following variables are defined to commands to perform the
appropriate operation, with the default in [brackets].  Note that
the defaults change if USETOOLS == "yes":

TOOL_AMIGAAOUT2BB	aout to Amiga bootblock converter.  [amiga-aout2bb]

TOOL_AMIGAELF2BB	ELF to Amiga bootblock converter.  [amiga-elf2bb]

TOOL_AMIGATXLT		Amiga assembly language format translator.  [amiga-txlt]

TOOL_ARMELF2AOUT	ELF to a.out executable converter [arm-elf2aout}

TOOL_ASN1_COMPILE	ASN1 compiler.  [asn1_compile]

TOOL_AWK		Pattern-directed scanning/processing language.  [awk]

TOOL_CAP_MKDB		Create capability database.  [cap_mkdb]

TOOL_CAT		Concatenate and print files.  [cat]

TOOL_CKSUM		Display file checksums.  [cksum]

TOOL_COMPILE_ET		Error table compiler.  [compile_et]

TOOL_CONFIG		Build kernel compilation directories.  [config]

TOOL_CRUNCHGEN		Generate crunched binary build environment.  [crunchgen]

TOOL_CTAGS		Create a tags file.  [ctags]

TOOL_DB			Manipulate db(3) databases.  [db]

TOOL_DISKLABEL		Read and write disk pack label.  [disklabel]

TOOL_EQN		Format equations for groff.  [eqn]

TOOL_FDISK		MS-DOS partition maintenance program.  [fdisk]

TOOL_FGEN		IEEE 1275 Open Firmware FCode Tokenizer.  [fgen]

TOOL_GENASSYM		Generate constants for assembly files.  [genassym]

TOOL_GENCAT		Generate NLS message catalogs.  [gencat]

TOOL_GMAKE		GNU make utility.  [gmake]

TOOL_GREP		Print lines matching a pattern.  [grep]

TOOL_GROFF		Front end for groff document formatting system.  [groff]

TOOL_GZIP		Compression/decompression tool.  [gzip]

TOOL_GZIP_N		Same as TOOL_GZIP, plus a command line option to
			prevent it from inserting file names or timestamps
			into the compressed output.
			[${TOOL_GZIP} ${GZIP_N_FLAG}]

TOOL_HEXDUMP		Ascii, decimal, hexadecimal, octal dump.  [hexdump]

TOOL_HP300MKBOOT	Make bootable image for hp300.  [hp300-mkboot]

TOOL_HPPAMKBOOT		Make bootable image for hppa.  [hppa-mkboot]

TOOL_INDXBIB		Make bibliographic database's inverted index.  [indxbib]

TOOL_INSTALLBOOT	Install disk bootstrap software.  [installboot]

TOOL_INSTALL_INFO	Update info/dir entries.  [install-info]

TOOL_JOIN		Relational database operator.  [join]

TOOL_M4			M4 macro language processor.  [m4]

TOOL_M68KELF2AOUT	ELF to a.out executable converter [m68k-elf2aout}

TOOL_MACPPCFIXCOFF	Fix up xcoff headers for macppc.  [macppc-fixcoff]

TOOL_MAKEFS		Create file system image from directory tree.  [makefs]

TOOL_MAKEINFO		Translate Texinfo documents.  [makeinfo]

TOOL_MAKEWHATIS		Create a whatis.db database.  [makewhatis]

TOOL_MDSETIMAGE		Set kernel RAM disk image.  [mdsetimage]

TOOL_MENUC		Menu compiler.  [menuc]

TOOL_MIPSELF2ECOFF	Convert ELF-format executable to ECOFF for mips.
			[mips-elf2ecoff]

TOOL_MKCSMAPPER		Make charset mapping table.  [mkcsmapper]

TOOL_MKESDB		Make encoding scheme database.  [mkesdb]

TOOL_MKLOCALE		Make LC_CTYPE locale files.  [mklocale]

TOOL_MKMAGIC		Create database for file(1).  [file]

TOOL_MKNOD		Make device special file.  [mknod]

TOOL_MKTEMP		Make (unique) temporary file name.  [mktemp]

TOOL_MSGC		Simple message list compiler.  [msgc]

TOOL_MTREE		Map a directory hierarchy.  [mtree]

TOOL_NCDCS		Turn ELF kernel into a NCD firmware image. [ncdcs]

TOOL_PAX		Manipulate file archives and copy directories.  [pax]

TOOL_PIC		Compile pictures for groff.  [pic]

TOOL_PIGZ		Parallel compressor.  [pigz]

TOOL_POWERPCMKBOOTIMAGE Make bootable image for powerpc.  [powerpc-mkbootimage]

TOOL_PWD_MKDB		Generate the password databases.  [pwd_mkdb]

TOOL_REFER		Preprocess bibliographic references for groff.  [refer]

TOOL_ROFF_ASCII		Generate ASCII groff output.  [nroff]

TOOL_ROFF_DVI		Generate DVI groff output.  [${TOOL_GROFF} -Tdvi]

TOOL_ROFF_HTML		Generate HTML groff output.
			[${TOOL_GROFF} -Tlatin1 -mdoc2html]

TOOL_ROFF_PS		Generate PS groff output.  [${TOOL_GROFF} -Tps]

TOOL_ROFF_RAW		Generate "raw" groff output.  [${TOOL_GROFF} -Z]

TOOL_RPCGEN		Remote Procedure Call (RPC) protocol compiler.  [rpcgen]

TOOL_SED		Stream editor.  [sed]

TOOL_SOELIM		Eliminate .so's from groff input.  [soelim]

TOOL_SPARKCRC		Generate a crc suitable for use in a sparkive file.
			[sparkcrc]

TOOL_STAT		Display file status.  [stat]

TOOL_STRFILE		Create a random access file for storing strings.
			[strfile]

TOOL_SUNLABEL		Read or modify a SunOS disk label.  [sunlabel]

TOOL_TBL		Format tables for groff.  [tbl]

TOOL_UUDECODE		Uudecode a binary file.  [uudecode]

TOOL_VGRIND		Grind nice listings of programs.  [vgrind -f]

TOOL_ZIC		Time zone compiler.  [zic]

For each possible value of MACHINE_CPU, MACHINES.${MACHINE_CPU} contain a
list of what ports can be built for it.  This keeps those definitions in
centralized place.

<bsd.own.mk> is generally useful when building your own Makefiles so that
they use the same default owners etc. as the rest of the tree.


=-=-=-=-=   bsd.clean.mk   =-=-=-=-=

The include file <bsd.clean.mk> defines the clean and cleandir
targets.  It uses the following variables:

CLEANFILES	Files to remove for both the clean and cleandir targets.

CLEANDIRFILES	Files to remove for the cleandir target, but not for
		the clean target.

MKCLEANSRC	Controls whether or not the clean and cleandir targets
		will delete files from both the object directory,
		${.OBJDIR}, and the source directory, ${.CURDIR}.

		If MKCLEANSRC is set to "no", then the file names in
		CLEANFILES or CLEANDIRFILES are interpreted relative
		to the object directory, ${.OBJDIR}.  This is the
		traditional behaviour.

		If MKCLEANSRC is set to "yes", then the file deletion
		is performed relative to both the object directory,
		${.OBJDIR}, and the source directory, ${.CURDIR}.  (This
		has no effect if ${.OBJDIR} is the same as ${.CURDIR}.)
		Deleting files from ${.CURDIR} is intended to remove
		stray output files that had been left in the source
		directory by an earlier build that did not use object
		directories.

		The default is MKCLEANSRC=yes.  If you always build with
		separate object directories, and you are sure that there
		are no stray files in the source directories, then you
		may set MKCLEANSRC=no to save some time.

MKCLEANVERIFY	Controls whether or not the clean and cleandir targets
		will verify that files have been deleted.

		If MKCLEANVERIFY is set to "no", then the files will
		be deleted using a "rm -f" command, and its success or
		failure will be ignored.

		If MKCLEANVERIFY is set to "yes", then the success of
		the "rm -f" command will be verified using an "ls"
		command.

		The default is MKCLEANVERIFY=yes.  If you are sure that
		there will be no problems caused by file permissions,
		read-only file systems, or the like, then you may set
		MKCLEANVERIFY=no to save some time.

To use the clean and cleandir targets defined in <bsd.clean.mk>, other
Makefiles or bsd.*.mk files should append file names to the CLEANFILES
or CLEANDIRFILES variables.  For example:

	    CLEANFILES+= a.out
	    CLEANDIRFILES+= .depend

	    .include <bsd.clean.mk>

The files listed in CLEANFILES and CLEANDIRFILES must not be
directories, because the potential risk from running "rm -rf" commands
in bsd.clean.mk is considered too great.  If you want to recursively
delete a directory as part of "make clean" or "make cleandir" then you
need to provide your own target.

=-=-=-=-=   bsd.dep.mk   =-=-=-=-=

The include file <bsd.dep.mk> contains the default targets for building
.depend files.  It creates .d files from entries in SRCS and DPSRCS
that are C, C++, or Objective C source files, and builds .depend from the
.d files.  All other files in SRCS and all of DPSRCS will be used as
dependencies for the .d files.  In order for this to function correctly,
it should be .included after all other .mk files and directives that may
modify SRCS or DPSRCS.  It uses the following variables:

SRCS		List of source files to build the program.

DPSRCS		List of source files which are needed for generating
		dependencies, but are not needed in ${SRCS}.

NODPSRCS	TODO

=-=-=-=-=   bsd.files.mk   =-=-=-=-=

The include file <bsd.files.mk> handles the FILES variables and is included
from <bsd.lib.mk> and <bsd.prog.mk>, and uses the following variables:

FILES		The list of files to install.

CONFIGFILES	Similar semantics to FILES, except that the files
		are installed by the `configinstall' target,
		not the `install' target.
		The FILES* variables documented below also apply.

FILESOWN	File owner.  [${BINOWN}]

FILESGRP	File group.  [${BINGRP}]

FILESMODE	File mode.  [${NONBINMODE}]

FILESDIR	The location to install the files.

FILESNAME	Optional name to install each file as.

FILESOWN_<fn>	File owner of the specific file <fn>.

FILESGRP_<fn>	File group of the specific file <fn>.

FILESMODE_<fn>	File mode of the specific file <fn>.

FILESDIR_<fn>	The location to install the specific file <fn>.

FILESNAME_<fn>	Optional name to install <fn> as.

FILESBUILD	If this variable is defined, then its value will be
		used as the default for all FILESBUILD_<fn> variables.
		Otherwise, the default will be "no".

FILESBUILD_<fn> A value different from "no" will add the file to the list of
		targets to be built by `realall'.  Users of that variable
		should provide a target to build the file.


BUILDSYMLINKS	List of two word items:
			lnsrc lntgt
		For each lnsrc item, create a symlink named lntgt.
		The lntgt symlinks are removed by the cleandir target.

UUDECODE_FILES	List of files which are stored as <file>.uue in the source
		tree. Each one will be decoded with ${TOOL_UUDECODE}.
		The source files have a `.uue' suffix, the generated files do
		not.

UUDECODE_FILES_RENAME_<fn>
		Rename the output from the decode to the provided name.

		Note: These files are simply decoded, with no install or other
		rule applying implicitly except being added to the clean
		target.

=-=-=-=-=   bsd.gcc.mk   =-=-=-=-=

The include file <bsd.gcc.mk> computes various parameters related to GCC
support libraries.  It defines no targets.  <bsd.own.mk> MUST be included
before <bsd.gcc.mk>.

The primary users of <bsd.gcc.mk> are <bsd.prog.mk> and <bsd.lib.mk>, each
of which need to know where to find certain GCC support libraries.

The behavior of <bsd.gcc.mk> is influenced by the EXTERNAL_TOOLCHAIN variable,
which is generally set by the user.  If EXTERNAL_TOOLCHAIN it set, then
the compiler is asked where to find the support libraries, otherwise the
support libraries are found in ${DESTDIR}/usr/lib.

<bsd.gcc.mk> sets the following variables:

_GCC_CRTBEGIN	The full path name to crtbegin.o.

_GCC_CRTBEGINS	The full path name to crtbeginS.o.

_GCC_CRTEND	The full path name to crtend.o.

_GCC_CRTENDS	The full path name to crtendS.o.

_GCC_LIBGCCDIR	The directory where libgcc.a is located.


=-=-=-=-=   bsd.inc.mk   =-=-=-=-=

The include file <bsd.inc.mk> defines the includes target and uses the
variables:

INCS		The list of include files.

INCSDIR		The location to install the include files.

INCSNAME	Target name of the include file, if only one; same as
		FILESNAME, but for include files.

INCSYMLINKS	Similar to SYMLINKS in <bsd.links.mk>, except that these
		are installed in the 'includes' target and not the
		(much later) 'install' target.

INCSNAME_<file> The name file <file> should be installed as, if not <file>,
		same as FILESNAME_<file>, but for include files.


=-=-=-=-=   bsd.info.mk   =-=-=-=-=

The include file <bsd.info.mk> is used to generate and install GNU Info
documentation from respective Texinfo source files.  It defines three
implicit targets (.txi.info, .texi.info, and .texinfo.info), and uses the
following variables:

TEXINFO		List of Texinfo source files.  Info documentation will
		consist of single files with the extension replaced by
		.info.

INFOFLAGS	Options to pass to makeinfo.  []


=-=-=-=-=   bsd.kernobj.mk   =-=-=-=-=

The include file <bsd.kernobj.mk> defines variables related to the
location of kernel sources and object directories.

KERNSRCDIR	Directory at the top of the kernel source..
		[${NETBSDSRCDIR}/sys]

KERNARCHDIR	Directory under KERNSRCDIR containing the machine
		dependent kernel sources.
		[arch/${MACHINE}]

KERNCONFDIR	Directory containing the kernel configuration files.
		[${KERNSRCDIR}/${KERNARCHDIR}/conf]

KERNOBJDIR	Directory for kernel builds.  For example, the kernel
		GENERIC will be compiled in KERNOBJDIR/GENERIC.
		Default:
		${MAKEOBJDIRPREFIX}${KERNSRCDIR}/${KERNARCHDIR}/compile
		if it exists or the make(1) target 'obj' is being made;
		otherwise ${KERNSRCDIR}/${KERNARCHDIR}/compile.

It is important that Makefiles (such as those under src/distrib) that
wish to find compiled kernels use <bsd.kernobj.mk> and ${KERNOBJDIR}
rather than make assumptions about the location of the compiled kernel.


=-=-=-=-=   bsd.kinc.mk   =-=-=-=-=

The include file <bsd.kinc.mk> defines the many targets (includes,
subdirectories, etc.), and is used by kernel makefiles to handle
include file installation.  It is intended to be included alone, by
kernel Makefiles.  It uses similar variables to <bsd.inc.mk>.
Please see <bsd.kinc.mk> for more details, and keep the documentation
in that file up to date.

=-=-=-=-=   bsd.syscall.mk =-=-=-=-=

The include file <bsd.syscall.mk> contains the logic to create syscall
files for various emulations. It includes <bsd.kinc.mk> to handle the
rest of the targets.

=-=-=-=-=   bsd.lib.mk   =-=-=-=-=

The include file <bsd.lib.mk> has support for building libraries.  It has
the same eight targets as <bsd.prog.mk>: all, clean, cleandir, depend,
includes, install, lint, and tags.  Additionally, it has a checkver target
which checks for installed shared object libraries whose version is greater
that the version of the source. It has a limited number of suffixes,
consistent with the current needs of the BSD tree.  <bsd.lib.mk> includes
<bsd.shlib.mk> to get shared library parameters.

It sets/uses the following variables:

LIB		The name of the library to build.

LIBDIR		Target directory for libraries.

SHLIBINSTALLDIR Target directory for shared libraries if ${USE_SHLIBDIR}
		is not "no".

SHLIB_MAJOR
SHLIB_MINOR
SHLIB_TEENY	Major, minor, and teeny version numbers of shared library

USE_SHLIBDIR	If not "no", use ${SHLIBINSTALLDIR} instead of ${LIBDIR}
		as the path to install shared libraries to.
		USE_SHLIBDIR must be defined before <bsd.own.mk> is included.
		Default: no

LIBISMODULE	If not "no", install as ${LIB}.so (without the "lib" prefix),
		and act as "MKDEBUGLIB=no MKPICINSTALL=no MKPROFILE=no
		MKSTATICLIB=no". Also do not install the lint library.
		Default: no

LIBISPRIVATE	If not "no", act as "MKDEBUGLIB=no MKPIC=no MKPROFILE=no",
		and don't install the (.a) library or the lint library.
		This is useful for "build only" helper libraries.
		If set to "pic", then a _pic.a library is also produced,
		so that it can be incorporated into other shared objects.
		Default: no

LIBISCXX	If not "no", Use ${CXX} instead of ${CC} to link
		shared libraries.
		This is useful for C++ libraries.
		Default: no

LINTLIBDIR	Target directory for lint libraries.

LIBGRP		Library group.

LIBOWN		Library owner.

LIBMODE		Library mode.

LDADD		Additional loader objects.

MAN		The manual pages to be installed (use a .1 - .9 suffix).

NOCHECKVER_<library>
NOCHECKVER	If set, disables checking for installed shared object
		libraries with versions greater than the source.  A
		particular library name, without the "lib" prefix, may
		be appended to the variable name to disable the check for
		only that library.

SRCS		List of source files to build the library.  Suffix types
		.s, .c, and .f are supported.  Note, .s files are preferred
		to .c files of the same name.  (This is not the default for
		versions of make.)

LIBDPLIBS/
PROGDPLIBS	A list of the tuples:
			libname	 path-to-srcdir-of-libname

		Instead of depending on installed versions of the libraries,
		one can depend on their built version in the source directory.
		This is useful for finding private libraries (LIBISPRIVATE).

		For each tuple;
		     *	LIBDO.libname contains the .OBJDIR of the library
			`libname', and if it is not set it is determined
			from the srcdir and added to MAKEOVERRIDES (the
			latter is to allow for build time optimization).
		     *	LDADD gets  -L${LIBDO.libname} -llibname    added.
		     *	DPADD gets  ${LIBDO.libname}/liblibname.so  or
				    ${LIBDO.libname}/liblibname.a   added.

		The special value "_external" for LIBDO.lib makes the
		build system to assume the library comes from outside
		of the NetBSD source tree and only causes -llibname
		to be added to LDADD.

		This variable may be used for individual libraries/programs,
		as well as in parent directories to cache common libraries
		as a build-time optimization.

LIB_EXPSYM	File listing all symbols expected to be defined by the
		library.  Each line has a single symbol.  If the symbol
		is versioned, it is followed by `@@', if it is the
		default version, or `@', if not, and the symbol
		version.  The lines must be sorted in LANG=C.

		bsd.lib.mk checks to make sure exactly the set of
		symbols in this file is defined when the library is
		built; if not, the build will fail and print a diff
		from the expected symbols to the actual symbols.
		During development, you can update the expected symbols
		from the actual ones with `make update-symbols'.


The include file <bsd.lib.mk> includes the file named "../Makefile.inc"
if it exists, as well as the include file <bsd.man.mk>.

It has rules for building profiled objects; profiled libraries are
built by default.

Libraries are ranlib'd when made.


=-=-=-=-=   bsd.links.mk   =-=-=-=-=

The include file <bsd.links.mk> handles the LINKS and SYMLINKS variables
and is included from <bsd.lib.mk> and <bsd.prog.mk>.

LINKSOWN, LINKSGRP, and LINKSMODE, are relevant only if a metadata log
is used. The defaults may be modified by other bsd.*.mk files which
include bsd.links.mk.  In the future, these variables may be replaced
by a method for explicitly recording hard links in a metadata log.

LINKS		The list of hard links, consisting of pairs of paths:
			source-file target-file
		${DESTDIR} is prepended to both paths before linking.
		For example, to link /bin/test and /bin/[, use:
			LINKS=/bin/test /bin/[

CONFIGLINKS	Similar semantics to LINKS, except that the links
		are installed by the `configinstall' target,
		not the `install' target.

SYMLINKS	The list of symbolic links, consisting of pairs of paths:
			source-file target-file
		${DESTDIR} is only prepended to target-file before linking.
		For example, to symlink /usr/bin/tar to /bin/tar resulting
		in ${DESTDIR}/usr/bin/tar -> /bin/tar:
			SYMLINKS=/bin/tar /usr/bin/tar

CONFIGSYMLINKS	Similar semantics to SYMLINKS, except that the symbolic links
		are installed by the `configinstall' target,
		not the `install' target.

LINKSOWN	Link owner.  [${BINOWN}]

LINKSGRP	Link group.  [${BINGRP}]

LINKSMODE	Link mode.  [${NONBINMODE}]

LINKSOWN_<fn>	Link owner of the specific file <fn>.

LINKSGRP_<fn>	Link group of the specific file <fn>.

LINKSMODE_<fn>	Link mode of the specific file <fn>.


=-=-=-=-=   bsd.man.mk   =-=-=-=-=

The include file <bsd.man.mk> handles installing manual pages and their
links.

It has a three targets:

	catinstall:
		Install the preformatted manual pages and their links.
	htmlinstall:
		Install the HTML manual pages and their links.
	maninstall:
		Install the manual page sources and their links.

It sets/uses the following variables:

MANDIR		Base path for manual installation.

MANGRP		Manual group.

MANOWN		Manual owner.

MANMODE		Manual mode.

MANSUBDIR	Subdirectory under the manual page section, i.e. "/vax"
		or "/tahoe" for machine specific manual pages.

MAN		The manual pages to be installed (use a .1 - .9 suffix).

MLINKS		List of manual page links (using a .1 - .9 suffix).  The
		linked-to file must come first, the linked file second,
		and there may be multiple pairs.

The include file <bsd.man.mk> includes a file named "../Makefile.inc" if
it exists.


=-=-=-=-=   bsd.obj.mk   =-=-=-=-=

The include file <bsd.obj.mk> defines targets related to the creation
and use of separated object and source directories.

If an environment variable named MAKEOBJDIRPREFIX is set, make(1) uses
${MAKEOBJDIRPREFIX}${.CURDIR} as the name of the object directory if
it exists.  Otherwise make(1) looks for the existence of a
subdirectory (or a symlink to a directory) of the source directory
into which built targets should be placed.  If an environment variable
named MAKEOBJDIR is set, make(1) uses its value as the name of the
object directory; failing that, make first looks for a subdirectory
named "obj.${MACHINE}", and if that doesn't exist, it looks for "obj".

Object directories are not created automatically by make(1) if they
don't exist; you need to run a separate "make obj".  (This will happen
during a top-level build if "MKOBJDIRS" is set to a value other than
"no").  When the source directory is a subdirectory of ${BSDSRCDIR} --
and this is determined by a simple string prefix comparison -- object
directories are created in a separate object directory tree, and a
symlink to the object directory in that tree is created in the source
directory; otherwise, "make obj" assumes that you're not in the main
source tree and that it's not safe to use a separate object tree.

Several variables used by <bsd.obj.mk> control exactly what
directories and links get created during a "make obj":

MAKEOBJDIR	If set, this is the component name of the object
		directory.

OBJMACHINE	If this is set but MAKEOBJDIR is not set, creates
		object directories or links named "obj.${MACHINE}";
		otherwise, just creates ones named "obj".

OBJMACHINE_ARCH If set with OBJMACHINE, creates object directories or
		links named "obj.${MACHINE}-${MACHINE_ARCH}".

USR_OBJMACHINE	If set, and the current directory is a subdirectory of
		${BSDSRCDIR}, create object directory in the
		corresponding subdirectory of ${BSDOBJDIR}.${MACHINE};
		otherwise, create it in the corresponding subdirectory
		of ${BSDOBJDIR}

BUILDID		Identifier for the build.  If set, this should be a short
		string that is suitable for use as part of a file or
		directory name.  The identifier will be appended to
		object directory names; if OBJMACHINE is also set, then
		.BUILDID is appended after .MACHINE.  The identifier will
		also be used as part of the kernel version string, which
		can be shown by “uname -v”.

		Default: Unset.


=-=-=-=-=   bsd.prog.mk   =-=-=-=-=

The include file <bsd.prog.mk> handles building programs from one or
more source files, along with their manual pages.  It has a limited number
of suffixes, consistent with the current needs of the BSD tree.
<bsd.prog.mk> includes <bsd.shlib.mk> to get shared library parameters.

It has eight targets:

	all:
		build the program and its manual page.  This also
		creates a GDB initialization file (.gdbinit) in
		the objdir.  The .gdbinit file sets the shared library
		prefix to ${DESTDIR} to facilitate cross-debugging.
	clean:
		remove the program, any object files and the files a.out,
		Errs, errs, mklog, and ${PROG}.core.
	cleandir:
		remove all of the files removed by the target clean, as
		well as .depend, tags, and any manual pages.
		`distclean' is a synonym for `cleandir'.
	depend:
		make the dependencies for the source files, and store
		them in the file .depend.
	includes:
		install any header files.
	install:
		install the program and its manual pages; if the Makefile
		does not itself define the target install, the targets
		beforeinstall and afterinstall may also be used to cause
		actions immediately before and after the install target
		is executed.
	lint:
		run lint on the source files
	tags:
		create a tags file for the source files.

It sets/uses the following variables:

BINGRP		Binary group.

BINOWN		Binary owner.

BINMODE		Binary mode.

CLEANDIRFILES	Additional files to remove for the cleandir target.

CLEANFILES	Additional files to remove for the clean and cleandir targets.

CONFIGOPTS	Additional options to config(1) when building kernels.

		Default: Unset.

COPTS		Extra options for the C compiler.  Should be appended to
		(e.g., COPTS+=-g), rather than explicitly set.

		Note: CPUFLAGS, not COPTS, should be used for compiler
		options that select CPU-related options.

COPTS.<fn>	Extra options for the C compiler when creating the
		C objects for <fn>.
		For <fn>.[ly], "<fn>.c" must be used.

CPUFLAGS	Additional options passed to the compiler/assembler to
		select CPU instruction set options, CPU tuning options,
		etc.

		Note: Such options should not be specified in COPTS,
		because some parts of the build process need to override
		CPU-related compiler options.

		Default: Unset.

CPUFLAGS.<fn>	Additional options to the compiler/assembler for <fn>.
		For <fn>.[ly], "<fn>.c" must be used.

CPPFLAGS	Additional options to the C pre-processor.

CPPFLAGS.<fn>	Additional options to the C pre-processor for <fn>.
		For <fn>.[ly], "<fn>.c" must be used.

GDBINIT		List of GDB initialization files to add to "source"
		directives in the .gdbinit file that is created in the
		objdir.

LDADD		Additional loader objects.  Usually used for libraries.
		For example, to load with the compatibility and utility
		libraries, use:

			LDADD+=-lutil -lcompat

LDFLAGS		Additional linker options (passed to ${CC} during link).

LINKS		See <bsd.links.mk>

OBJCOPTS	Additional options to the compiler when creating ObjC objects.

OBJCOPTS.<fn>	Additional options to the compiler when creating the
		ObjC objects for <fn>.
		For <fn>.[ly], "<fn>.c" must be used.

SYMLINKS	See <bsd.links.mk>

MAN		Manual pages (should end in .1 - .9).  If no MAN variable is
		defined, "MAN=${PROG}.1" is assumed.

PAXCTL_FLAGS	If defined, run paxctl(1) on the program binary after link
		time, with the value of this variable as options to paxctl(1).

PAXCTL_FLAGS.${PROG} Custom override for PAXCTL_FLAGS.

PROG		The name of the program to build.  If not supplied, nothing
		is built.

PROG_CXX	If defined, the name of the program to build.  Also
		causes <bsd.prog.mk> to link the program with the C++
		compiler rather than the C compiler.  PROG_CXX overrides
		the value of PROG if PROG is also set.

PROGNAME	The name that the above program will be installed as, if
		different from ${PROG}.

PROGS		Multiple programs to build from a single directory.
		Defaults to PROG. For each program ${_P} in ${PROGS},
		uses SRCS.${_P}, defaulting to ${_P}.c.

PROGS_CXX	Multiple C++ programs to build from a single directory.
		Defaults to PROG_CXX. For each program ${_P} in ${PROGS_CXX},
		uses SRCS.${_P}, defaulting to ${_P}.cc.

SRCS		List of source files to build the program.  If SRCS is not
		defined, it's assumed to be ${PROG}.c or ${PROG_CXX}.cc.

DPSRCS		List of source files which are needed for generating
		dependencies, but are not needed in ${SRCS}.

DPADD		Additional dependencies for the program.  Usually used for
		libraries.  For example, to depend on the compatibility and
		utility libraries use:

			DPADD+=${LIBCOMPAT} ${LIBUTIL}

		The following system libraries are predefined for DPADD:

		LIBARCHIVE?=		${DESTDIR}/usr/lib/libarchive.a
		LIBASN1?=		${DESTDIR}/usr/lib/libasn1.a
		LIBATF_C?=		${DESTDIR}/usr/lib/libatf-c.a
		LIBATF_CXX?=		${DESTDIR}/usr/lib/libatf-c++.a
		LIBBIND9?=		${DESTDIR}/usr/lib/libbind9.a
		LIBBLOCKLIST?=		${DESTDIR}/usr/lib/libblocklist.a
		LIBBLUETOOTH?=		${DESTDIR}/usr/lib/libbluetooth.a
		LIBBSDMALLOC?=		${DESTDIR}/usr/lib/libbsdmalloc.a
		LIBBZ2?=		${DESTDIR}/usr/lib/libbz2.a
		LIBC?=			${DESTDIR}/usr/lib/libc.a
		LIBC_PIC?=		${DESTDIR}/usr/lib/libc_pic.a
		LIBCBOR?=		${DESTDIR}/usr/lib/libcbor.a
		LIBCOMPAT?=		${DESTDIR}/usr/lib/libcompat.a
		LIBCOM_ERR?=		${DESTDIR}/usr/lib/libcom_err.a
		LIBCRYPT?=		${DESTDIR}/usr/lib/libcrypt.a
		LIBCRYPTO?=		${DESTDIR}/usr/lib/libcrypto.a
		LIBCURSES?=		${DESTDIR}/usr/lib/libcurses.a
		LIBCXX?=		${DESTDIR}/usr/lib/libc++.a
		LIBDES?=		${DESTDIR}/usr/lib/libdes.a
		LIBDNS?=		${DESTDIR}/usr/lib/libdns.a
		LIBEDIT?=		${DESTDIR}/usr/lib/libedit.a
		LIBEVENT?=		${DESTDIR}/usr/lib/libevent.a
		LIBEVENT_OPENSSL?=	${DESTDIR}/usr/lib/libevent_openssl.a
		LIBEVENT_PTHREADS?=	${DESTDIR}/usr/lib/libevent_pthreads.a
		LIBEXECINFO?=		${DESTDIR}/usr/lib/libexecinfo.a
		LIBEXPAT?=		${DESTDIR}/usr/lib/libexpat.a
		LIBFETCH?=		${DESTDIR}/usr/lib/libfetch.a
		LIBFIDO2?=		${DESTDIR}/usr/lib/libfido2.a
		LIBFL?=			${DESTDIR}/usr/lib/libfl.a
		LIBFORM?=		${DESTDIR}/usr/lib/libform.a
		LIBGCC?=		${DESTDIR}/usr/lib/libgcc.a
		LIBGNUCTF?=		${DESTDIR}/usr/lib/libgnuctf.a
		LIBGNUMALLOC?=		${DESTDIR}/usr/lib/libgnumalloc.a
		LIBGSSAPI?=		${DESTDIR}/usr/lib/libgssapi.a
		LIBHDB?=		${DESTDIR}/usr/lib/libhdb.a
		LIBHEIMBASE?=		${DESTDIR}/usr/lib/libheimbase.a
		LIBHEIMNTLM?=		${DESTDIR}/usr/lib/libheimntlm.a
		LIBHX500?=		${DESTDIR}/usr/lib/libhx500.a
		LIBINTL?=		${DESTDIR}/usr/lib/libintl.a
		LIBIPSEC?=		${DESTDIR}/usr/lib/libipsec.a
		LIBISC?=		${DESTDIR}/usr/lib/libisc.a
		LIBISCCC?=		${DESTDIR}/usr/lib/libisccc.a
		LIBISCFG?=		${DESTDIR}/usr/lib/libiscfg.a
		LIBKADM5CLNT?=		${DESTDIR}/usr/lib/libkadm5clnt.a
		LIBKADM5SRV?=		${DESTDIR}/usr/lib/libkadm5srv.a
		LIBKAFS?=		${DESTDIR}/usr/lib/libkafs.a
		LIBKRB5?=		${DESTDIR}/usr/lib/libkrb5.a
		LIBKVM?=		${DESTDIR}/usr/lib/libkvm.a
		LIBL?=			${DESTDIR}/usr/lib/libl.a
		LIBLBER?=		${DESTDIR}/usr/lib/liblber.a
		LIBLDAP?=		${DESTDIR}/usr/lib/libldap.a
		LIBLDAP_R?=		${DESTDIR}/usr/lib/libldap_r.a
		LIBLUA?=		${DESTDIR}/usr/lib/liblua.a
		LIBM?=			${DESTDIR}/usr/lib/libm.a
		LIBMAGIC?=		${DESTDIR}/usr/lib/libmagic.a
		LIBMENU?=		${DESTDIR}/usr/lib/libmenu.a
		LIBNETPGPVERIFY?=	${DESTDIR}/usr/lib/libnetpgpverify.a
		LIBNS?=			${DESTDIR}/usr/lib/libns.a
		LIBOBJC?=		${DESTDIR}/usr/lib/libobjc.a
		LIBOSSAUDIO?=		${DESTDIR}/usr/lib/libossaudio.a
		LIBPAM?=		${DESTDIR}/usr/lib/libpam.a
		LIBPANEL?=		${DESTDIR}/usr/lib/libpanel.a
		LIBPCAP?=		${DESTDIR}/usr/lib/libpcap.a
		LIBPCI?=		${DESTDIR}/usr/lib/libpci.a
		LIBPOSIX?=		${DESTDIR}/usr/lib/libposix.a
		LIBPTHREAD?=		${DESTDIR}/usr/lib/libpthread.a
		LIBPUFFS?=		${DESTDIR}/usr/lib/libpuffs.a
		LIBQUOTA?=		${DESTDIR}/usr/lib/libquota.a
		LIBRADIUS?=		${DESTDIR}/usr/lib/libradius.a
		LIBREFUSE?=		${DESTDIR}/usr/lib/librefuse.a
		LIBRESOLV?=		${DESTDIR}/usr/lib/libresolv.a
		LIBRMT?=		${DESTDIR}/usr/lib/librmt.a
		LIBROKEN?=		${DESTDIR}/usr/lib/libroken.a
		LIBRPCSVC?=		${DESTDIR}/usr/lib/librpcsvc.a
		LIBRT?=			${DESTDIR}/usr/lib/librt.a
		LIBRUMP?=		${DESTDIR}/usr/lib/librump.a
		LIBRUMPFS_CD9660?=	${DESTDIR}/usr/lib/librumpfs_cd9660.a
		LIBRUMPFS_EFS?=		${DESTDIR}/usr/lib/librumpfs_efs.a
		LIBRUMPFS_EXT2FS?=	${DESTDIR}/usr/lib/librumpfs_ext2fs.a
		LIBRUMPFS_FFS?=		${DESTDIR}/usr/lib/librumpfs_ffs.a
		LIBRUMPFS_HFS?=		${DESTDIR}/usr/lib/librumpfs_hfs.a
		LIBRUMPFS_LFS?=		${DESTDIR}/usr/lib/librumpfs_lfs.a
		LIBRUMPFS_MSDOS?=	${DESTDIR}/usr/lib/librumpfs_msdos.a
		LIBRUMPFS_NFS?=		${DESTDIR}/usr/lib/librumpfs_nfs.a
		LIBRUMPFS_NTFS?=	${DESTDIR}/usr/lib/librumpfs_ntfs.a
		LIBRUMPFS_SYSPUFFS?=	${DESTDIR}/usr/lib/librumpfs_syspuffs.a
		LIBRUMPFS_TMPFS?=	${DESTDIR}/usr/lib/librumpfs_tmpfs.a
		LIBRUMPFS_UDF?=		${DESTDIR}/usr/lib/librumpfs_udf.a
		LIBRUMPUSER?=		${DESTDIR}/usr/lib/librumpuser.a
		LIBSASLC?=		${DESTDIR}/usr/lib/libsaslc.a
		LIBSKEY?=		${DESTDIR}/usr/lib/libskey.a
		LIBSL?=			${DESTDIR}/usr/lib/libsl.a
		LIBSQLITE3?=		${DESTDIR}/usr/lib/libsqlite3.a
		LIBSSH?=		${DESTDIR}/usr/lib/libssh.a
		LIBSSL?=		${DESTDIR}/usr/lib/libssl.a
		LIBSTDCXX?=		${DESTDIR}/usr/lib/libstdc++.a
		LIBSUPCXX?=		${DESTDIR}/usr/lib/libsupc++.a
		LIBTERMINFO?=		${DESTDIR}/usr/lib/libterminfo.a
		LIBTRE?=		${DESTDIR}/usr/lib/libtre.a
		LIBUNBOUND?=		${DESTDIR}/usr/lib/libunbound.a
		LIBUSBHID?=		${DESTDIR}/usr/lib/libusbhid.a
		LIBUTIL?=		${DESTDIR}/usr/lib/libutil.a
		LIBWIND?=		${DESTDIR}/usr/lib/libwind.a
		LIBWRAP?=		${DESTDIR}/usr/lib/libwrap.a
		LIBY?=			${DESTDIR}/usr/lib/liby.a
		LIBZ?=			${DESTDIR}/usr/lib/libz.a

		The following c startup files.

		LIBCRT0?=		${DESTDIR}/usr/lib/crt0.o
		LIBCRTI?=		${DESTDIR}/usr/lib/crti.o
		LIBCRTBEGIN?=		${DESTDIR}/usr/lib/crti.o
		LIBCRTEND?=		${DESTDIR}/usr/lib/crtn.o

		The following X-Windows libraries are predefined for DPADD:

		LIBDPS?=		${DESTDIR}/usr/X11R7/lib/libdps.a
		LIBFNTSTUBS?=		${DESTDIR}/usr/X11R7/lib/libfntstubs.a
		LIBFONTCACHE?=		${DESTDIR}/usr/X11R7/lib/libfontcache.a
		LIBFONTCONFIG?=		${DESTDIR}/usr/X11R7/lib/libfontconfig.a
		LIBFONTENC?=		${DESTDIR}/usr/X11R7/lib/libfontenc.a
		LIBFREETYPE?=		${DESTDIR}/usr/X11R7/lib/libfreetype.a
		LIBFS?=			${DESTDIR}/usr/X11R7/lib/libFS.a
		LIBGL?=			${DESTDIR}/usr/X11R7/lib/libGL.a
		LIBGLU?=		${DESTDIR}/usr/X11R7/lib/libGLU.a
		LIBICE?=		${DESTDIR}/usr/X11R7/lib/libICE.a
		LIBLBXUTIL?=		${DESTDIR}/usr/X11R7/lib/liblbxutil.a
		LIBSM?=			${DESTDIR}/usr/X11R7/lib/libSM.a
		LIBX11?=		${DESTDIR}/usr/X11R7/lib/libX11.a
		LIBX11_XCB?=		${DESTDIR}/usr/X11R7/lib/libX11-xcb.a
		LIBXAU?=		${DESTDIR}/usr/X11R7/lib/libXau.a
		LIBXAW?=		${DESTDIR}/usr/X11R7/lib/libXaw.a
		LIBXCB?=		${DESTDIR}/usr/X11R7/lib/libxcb.a
		LIBXCOMPOSITE?=		${DESTDIR}/usr/X11R7/lib/libXcomposite.a
		LIBXCVT?=		${DESTDIR}/usr/X11R7/lib/libxcvt.a
		LIBXDAMAGE?=		${DESTDIR}/usr/X11R7/lib/libXdamage.a
		LIBXDMCP?=		${DESTDIR}/usr/X11R7/lib/libXdmcp.a
		LIBXEXT?=		${DESTDIR}/usr/X11R7/lib/libXext.a
		LIBXFIXES?=		${DESTDIR}/usr/X11R7/lib/libXfixes.a
		LIBXFONT2?=		${DESTDIR}/usr/X11R7/lib/libXfont2.a
		LIBXFONT?=		${DESTDIR}/usr/X11R7/lib/libXfont.a
		LIBXFT?=		${DESTDIR}/usr/X11R7/lib/libXft.a
		LIBXI?=			${DESTDIR}/usr/X11R7/lib/libXi.a
		LIBXINERAMA?=		${DESTDIR}/usr/X11R7/lib/libXinerama.a
		LIBXKBFILE?=		${DESTDIR}/usr/X11R7/lib/libxkbfile.a
		LIBXMU?=		${DESTDIR}/usr/X11R7/lib/libXmu.a
		LIBXMUU?=		${DESTDIR}/usr/X11R7/lib/libXmuu.a
		LIBXPM?=		${DESTDIR}/usr/X11R7/lib/libXpm.a
		LIBXRANDR?=		${DESTDIR}/usr/X11R7/lib/libXrandr.a
		LIBXRENDER?=		${DESTDIR}/usr/X11R7/lib/libXrender.a
		LIBXSS?=		${DESTDIR}/usr/X11R7/lib/libXss.a
		LIBXT?=			${DESTDIR}/usr/X11R7/lib/libXt.a
		LIBXTRAP?=		${DESTDIR}/usr/X11R7/lib/libXTrap.a
		LIBXTST?=		${DESTDIR}/usr/X11R7/lib/libXtst.a
		LIBXV?=			${DESTDIR}/usr/X11R7/lib/libXv.a
		LIBXXF86DGA?=		${DESTDIR}/usr/X11R7/lib/libXxf86dga.a
		LIBXXF86MISC?=		${DESTDIR}/usr/X11R7/lib/libXxf86misc.a
		LIBXXF86VM?=		${DESTDIR}/usr/X11R7/lib/libXxf86vm.a

STRIPFLAG	The option passed to the install program to cause the binary
		to be stripped.

SUBDIR		A list of subdirectories that should be built as well.
		Each of the targets will execute the same target in the
		subdirectories.

SCRIPTS		A list of interpreter scripts [file.{sh,csh,pl,awk,...}].
		These are installed exactly like programs.

SCRIPTSDIR	The location to install the scripts.  Each script can be
		installed to a separate path by setting SCRIPTSDIR_<script>.

SCRIPTSNAME	The name that the above program will be installed as, if
		different from ${SCRIPTS}. These can be further specialized
		by setting SCRIPTSNAME_<script>.

FILES		See description of <bsd.files.mk>.

SHLINKDIR	Target directory for shared linker.  See description of
		<bsd.own.mk> for additional information about this variable.

The include file <bsd.prog.mk> includes the file named "../Makefile.inc"
if it exists, as well as the include file <bsd.man.mk>.

Some simple examples:

To build foo from foo.c with a manual page foo.1, use:

	PROG=	foo

	.include <bsd.prog.mk>

To build foo from foo.c with a manual page foo.2, add the line:

	MAN=	foo.2

If foo does not have a manual page at all, add the line
before any make(1) .include directives:

	NOMAN=

If foo has multiple source files, add the line:

	SRCS=	a.c b.c c.c d.c


=-=-=-=-=   bsd.rpc.mk   =-=-=-=-=

The include file <bsd.rpc.mk> contains a makefile fragment used to
construct source files built by rpcgen.

The following macros may be defined in makefiles which include
<bsd.rpc.mk> in order to control which files get built and how they
are to be built:

RPC_INCS	construct .h file from .x file
RPC_XDRFILES	construct _xdr.c from .x file
		(for marshalling/unmarshalling data types)
RPC_SVCFILES	construct _svc.c from .x file
		(server-side stubs)
RPC_SVCFLAGS	Additional options passed to builds of RPC_SVCFILES.

RPC_XDIR	Directory containing .x/.h files


=-=-=-=-=   bsd.shlib.mk   =-=-=-=-=

The include file <bsd.shlib.mk> computes parameters for shared library
installation and use.  It defines no targets.  <bsd.own.mk> MUST be
included before <bsd.shlib.mk>.

<bsd.own.mk> sets the following variables, if they are not already defined
(defaults are in brackets):

SHLIBINSTALLDIR If ${USE_SHLIBDIR} is not "no", use ${SHLIBINSTALLDIR}
		instead of ${LIBDIR} as the base path for shared library
		installation.  [/lib]

SHLIBDIR	The path to USE_SHLIBDIR shared libraries to use when building
		a program.  [/lib for programs in /bin and /sbin, /usr/lib
		for all others.]

_LIBSODIR	Set to ${SHLIBINSTALLDIR} if ${USE_SHLIBDIR} is not "no",
		otherwise set to ${LIBDIR}

SHLINKINSTALLDIR Base path for shared linker.  [/libexec]

SHLINKDIR	Path to use for shared linker when building a program.
		[/libexec for programs in /bin and /sbin, /usr/libexec for
		all others.]


=-=-=-=-=   bsd.subdir.mk   =-=-=-=-=

The include file <bsd.subdir.mk> contains the default targets for building
subdirectories.  It has the same eight targets as <bsd.prog.mk>: all,
clean, cleandir, depend, includes, install, lint, and tags.  It uses the
following variables:

NOSUBDIR	If this variable is defined, then the SUBDIR variable
		will be ignored and subdirectories will not be processed.

SUBDIR		For all of the directories listed in ${SUBDIR}, the
		specified directory will be visited and the target made.

		As a special case, the use of a token .WAIT as an
		entry in SUBDIR acts as a synchronization barrier
		when multiple make jobs are run; subdirs before the
		.WAIT must complete before any subdirs after .WAIT are
		started.  See make(1) for some caveats on use of .WAIT
		and other special sources.


=-=-=-=-=   bsd.x11.mk   =-=-=-=-=

The include file <bsd.x11.mk> contains parameters and targets for
cross-building X11 from ${X11SRCDIR.<package>}.  It should be included
after the general Makefile contents but before the include files such as
<bsd.prog.mk> and <bsd.lib.mk>.

It provides the following targets:
	.man.1 .man.3 .man.4 .man.5 .man.7:
		If ${MAN} or ${PROG} is set and ${MKMAN} != "no",
		these rules convert from X11's manual page source
		into an mdoc.old source file.

It sets the following variables:

BINDIR			Set to ${X11BINDIR}.
			To override, define after including <bsd.x11.mk>

LIBDIR			Set to ${X11USRLIBDIR}.
			To override, define after including <bsd.x11.mk>

MANDIR			Set to ${X11MANDIR}.
			To override, define after including <bsd.x11.mk>

CPPFLAGS		Appended with definitions to include from
			${DESTDIR}${X11INCDIR}

LDFLAGS			Appended with definitions to link from
			${DESTDIR}${X11USRLIBDIR}

X11FLAGS.CONNECTION	Equivalent to X11's CONNECTION_FLAGS.

X11FLAGS.EXTENSION	Equivalent to X11's EXT_DEFINES.

X11FLAGS.LOADABLE	Equivalent to X11's LOADABLE.

X11FLAGS.OS_DEFINES	Equivalent to X11's OS_DEFINES.

X11FLAGS.SERVER		Equivalent to X11's ServerDefines.

X11FLAGS.THREADLIB	Equivalent to X11's THREADS_DEFINES for libraries.

X11FLAGS.THREADS	Equivalent to X11's THREADS_DEFINES.

X11FLAGS.VERSION	cpp(1) definitions of OSMAJORVERSION and OSMINORVERSION.

X11FLAGS.DIX		Equivalent to X11's DIX_DEFINES.

X11TOOL_UNXCOMM		Commandline to convert `XCOMM' comments to `#'

It uses the following variables:

APPDEFS			List of app-default files to install.

CPPSCRIPTS		List of files/scripts to run through cpp(1)
			and then ${X11TOOL_UNXCOMM}.  The source files
			have a `.cpp' suffix, the generated files do not.

CPPSCRIPTFLAGS		Additional options to cpp(1) when building CPPSCRIPTS.

CPPSCRIPTFLAGS_<fn>	Additional options to cpp(1) when building CPPSCRIPT <fn>.


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The following files are described here for completion, but they are not
supposed to be included directly from other Makefiles; they are used
internally by other system files.

=-=-=-=-=   bsd.sys.mk   =-=-=-=-=

The include file <bsd.sys.mk> is used by other system mk files and
it is not intended to be included standalone. It contains rules and
system build variables. It requires bsd.own.mk to be included first.
It contains overrides that are used when building the NetBSD source tree.

The following variables control how various files are compiled/built.
(Note that these may be overridden in <bsd.own.mk> if USETOOLS == "yes"):

AR		Create, modify, and extract from archives.  [ar]

ARFLAGS		Options to ${AR}.  [rl]

ARM_ELF2AOUT	Convert ELF-format executable to a.out.  [elf2aout]

AS		Assembler.  [as]

AFLAGS		Options to ${CC} when compiling or linking .s or .S
		assembly source files.  []

BUILDSEED	g++(1) uses random numbers when compiling C++ code.  This
		variable seeds the g++(1) random number generator using
		-frandom-seed with this value.  By default, it is set to
		"NetBSD-(majorversion)".  Using a fixed value causes C++
		binaries to be the same when built from the same sources,
		resulting in identical (reproducible) builds.  Additional
		information is available in the g++(1) documentation of
		-frandom-seed.

		Default: Unset.

CC		C compiler.  [cc]

CFLAGS		Options to ${CC}.  [Usually -O or -O2]
		Note: CFLAGS should never be set in mk.conf(5).

CPP		C Pre-Processor.  [cpp]

CPPFLAGS	Options to ${CPP}.  []

CPUFLAGS	Optimization options for ${CC}.  []

CXX		C++ compiler.  [c++]

CXXFLAGS	Options to ${CXX}.  [${CFLAGS}]

M68K_ELF2AOUT	Convert ELF-format executable to a.out.  [elf2aout]

MIPS_ELF2ECOFF	Convert ELF-format executable to ECOFF.  [elf2ecoff]

FC		Fortran compiler.  [f77]

FFLAGS		Options to {$FC}.  [-O]

HOST_SH		Shell.  This must be an absolute path, because it may be
		substituted into "#!" lines in scripts.  [/bin/sh]

INSTALL		install(1) command.  [install]

LEX		Lexical analyzer.  [lex]

LFLAGS		Options to ${LEX}.  []

LPREFIX		Symbol prefix for ${LEX} (see -P option in lex(1)) [yy]

LD		Linker.  [ld]

LDFLAGS		Options to ${CC} during the link process.  []

LINT		C program verifier.  [lint]

LINTFLAGS	Options to ${LINT}.  [-chapbrxzgFS]

LORDER		List dependencies for object files.  [lorder]

MAKE		make(1).  [make]

MKDEP		Construct Makefile dependency list.  [mkdep]

MKDEPCXX	Construct Makefile dependency list for C++ files.  [mkdep]

NM		List symbols from object files.  [nm]

PC		Pascal compiler.  [pc]	(Not present)

PFLAGS		Options to ${PC}.  []

OBJC		Objective C compiler.  [${CC}]

OBJCFLAGS	Options to ${OBJC}.  [${CFLAGS}]

OBJCOPY		Copy and translate object files.  [objcopy]

OBJCOPYLIBFLAGS Options to pass to objcopy when library objects are
		being built. [${.TARGET} =~ "*.po" ? -X : -x]

OBJDUMP		Display information from object files.  [objdump]

RANLIB		Generate index to archive.  [ranlib]

READELF		Display information from ELF object files.  [readelf]

SIZE		List section sizes and total size.  [size]

STRINGS		Display printable character sequences in files.  [strings]

STRIP		Discard symbols from object files.  [strip]

TSORT		Topological sort of a directed graph.  [tsort -q]

YACC		LALR(1) parser generator.  [yacc]

YFLAGS		Options to ${YACC}.  []

YHEADER		If defined, add "-d" to YFLAGS, and add dependencies
		from <file>.y to <file>.h and <file>.c, and add
		<foo>.h to CLEANFILES.

YPREFIX		If defined, add "-p ${YPREFIX}" to YFLAGS.


Other variables of note (incomplete list):

NOCLANGERROR	If defined and clang is used as C compiler, -Werror is not
		passed to it.

NOGCCERROR	If defined, prevents passing certain ${CFLAGS} to GCC
		that cause warnings to be fatal, such as:
			-Werror -Wa,--fatal-warnings
		(The latter being for as(1).)

WARNS		Crank up compiler warning options; the distinct levels are:
			WARNS=1
			WARNS=2
			WARNS=3
			WARNS=4
			WARNS=5
			WARNS=6

=-=-=-=-=   bsd.host.mk   =-=-=-=-=

This file is automatically included from bsd.own.mk. It contains settings
for all the HOST_* variables that are used in host programs and libraries.

HOST_AR			The host archive processing command

HOST_CC			The host c compiler

HOST_CFLAGS		The host c compiler options

HOST_COMPILE.c		The host c compiler line with options

HOST_COMPILE.cc		The host c++ compiler line with options

HOST_CPP		The host c pre-processor

HOST_CPPFLAGS		The host c pre-processor options

HOST_CXX		The host c++ compiler

HOST_CXXFLAGS		The host c++ compiler options

HOST_INSTALL_DIR	The host command to install a directory

HOST_INSTALL_FILE	The host command to install a file

HOST_INSTALL_SYMLINK	The host command to install a symlink

HOST_LD			The host linker command

HOST_LDFLAGS		The host linker options

HOST_LINK.c		The host c linker line with options

HOST_LINK.cc		The host c++ linker line with options

HOST_LN			The host command to link two files

HOST_MKDEP		The host command to create dependencies for c programs

HOST_MKDEPCXX		The host command to create dependencies for c++ programs

HOST_OSTYPE		The host OSNAME-RELEASE-ARCH tupple

HOST_RANLIB		The host command to create random access archives

HOST_SH			The host Bourne shell interpreter name (absolute path)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
