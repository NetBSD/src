.\"	$NetBSD: aout2hux.1,v 1.5.102.1 2019/09/02 17:17:11 martin Exp $
.Dd September 1, 2019
.Dt AOUT2HUX 1 x68k
.Os
.Sh NAME
.Nm aout2hux
.Nd convert a.out/ELF executable to Human68k .x format
.Sh SYNOPSIS
.Nm
.Op Fl o Ar output_file
.Ar aout1
.Ar loadaddr1
.Ar aout2
.Ar loadaddr2
.Sh DESCRIPTION
.Nm
reads two
.Xr a.out 5
or ELF
format executables with different load addresses
and generates a Human68k
.Sq Li \&.x
format executable.
.Pp
If the input files are a.out, they must be static
.Dv OMAGIC
/
.Dv NMAGIC
m68k executables.
If the input files are ELF, they must be static m68k executables.
The two input executables must be created from the same objects,
but use different load addresses.
The load address is specified as a hexadecimal number.
Load addresses are a multiple of 4 for
.Xr as 1
and
.Xr ld 1
from
.Nx Ns Tn /m68k .
.Pp
If
.Ar output_file
is not specified with the
.Fl o
option, the default name
.Pa out.x
is used.
.Sh FILES
.Bl -tag -width out.xxxx -compact
.It Pa out.x
default output file.
.El
.Sh EXAMPLES
The following command sequence creates a Human68k executable
.Pa foo.x
from object files
.Pa a.o
and
.Pa b.o :
.Bd -literal -offset indent
cc -N -nostdlib -static -Wl,-Text,0        -o aout1 a.o b.o
cc -N -nostdlib -static -Wl,-Text,10203040 -o aout2 a.o b.o
aout2hux -o foo.x aout1 0 aout2 10203040
.Ed
.Pp
This example uses 0x0 and 0x10203040 as the load addresses.
.Sh SEE ALSO
.Xr as 1 ,
.Xr cc 1 ,
.Xr ld 1 ,
.Xr a.out 5
.Sh HISTORY
The
.Nm
utility first appeared in
.Nx 1.4 .
.Sh BUGS
Symbol and debugging information is not converted.
.Pp
The generated executable is not as effective as that of
Human68k native compiler.
