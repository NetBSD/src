.\"	$NetBSD: __USE.3,v 1.2.4.2 2014/05/22 11:37:50 yamt Exp $
.\"
.\" Copyright (c) 2013 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd October 17, 2013
.Dt __USE 3
.Os
.Sh NAME
.Nm __USE
.Nd compile time macro that marks a variable as being used
.Sh SYNOPSIS
.In sys/cdefs.h
.Ft void
.Fn __USE x
.Sh DESCRIPTION
The
.Nm __USE
macro can be used to omit warnings produced by certain compilers when
variables are being set, but not used in a function.
.Pp
There are cases where it is simpler to mark a variable as used, as opposed
to ifdef out its use:
.Bd -literal -offset indent
#ifdef DEBUG_FOO
#define DPRINTF(a) printf a
#else
#define DPRINTF(a)

void
foo(void) {
	int var;

	var = getval();

	DPRINTF(("val is %d\n", var));
}
.Ed
.Pp
In this case, ifdefing the code would make it:
.Bd -literal -offset indent
void
foo(void) {
#ifdef DEBUG_FOO
	int var;

	var = getval();

	DPRINTF(("val is %d\n", var));
#else
	(void)getval();
#endif
}
.Ed
.Pp
This is not desirable because it duplicates code.
With the
.Nm __USE
macro this can be written as:
.Bd -literal -offset indent
void
foo(void) {
	int var;

	var = getval();

#ifdef DEBUG_FOO
	DPRINTF(("val is %d\n", var));
#else
	__USE(var);
#endif
}
.Ed
.Pp
without producing compiler warnings.
.Pp
Although it is simple to write:
.Bd -literal -offset indent
	(void)var;
.Ed
.Pp
abstracting this into the macro allows for alternate implementations,
as well as changing it to an empty implementation so that the liveness
of the variable can be re-evaluated.
.Sh IMPLEMENTATION NOTES
.Nm
is implemented as:
.Bd -literal -offset indent
#define __USE(a)	((void)(a))
.Ed
.Sh SEE ALSO
.Xr cc 1 ,
.Xr cdefs 3
.Sh CAVEATS
.Nm
should be used sparingly as it can cause valid warnings to be hidden.
.Pp
Use of this macro is non-portable; this is part of the implementation
namespace and should only be used in
.Nx
code.
