.\"     $NetBSD: rasops.9,v 1.12.6.1 2012/04/17 00:05:49 yamt Exp $
.\"
.\" Copyright (c) 2001 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Gregory McGarry.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd January 13, 2012
.Dt RASOPS 9
.Os
.Sh NAME
.Nm rasops ,
.Nm rasops_init ,
.Nm rasops_reconfig
.Nd raster display operations
.Sh SYNOPSIS
.In dev/wscons/wsdisplayvar.h
.In dev/rasops/rasops.h
.Ft int
.Fn rasops_init "struct rasops_info *ri" "int wantrows" "int wantcols"
.Ft int
.Fn rasops_reconfig "struct rasops_info *ri" "int wantrows" "int wantcols"
.Sh DESCRIPTION
The
.Nm
subsystem is a set of raster operations for
.Xr wscons 9 .
.Pp
The primary data type for using the raster operations is the
.Em rasops_info
structure in
.Pa dev/rasops/rasops.h :
.Bd -literal
struct rasops_info {

	/*
	 * These must be filled in by the caller
	 */
	int	ri_depth;	/* depth in bits */
	u_char	*ri_bits;	/* ptr to bits */
	int	ri_width;	/* width (pels) */
	int	ri_height;	/* height (pels) */
	int	ri_stride;	/* stride in bytes */

	/*
	 * If you want shadow framebuffer support, point ri_hwbits
	 * to the real framebuffer, and ri_bits to the shadow framebuffer
	 */
	u_char	*ri_hwbits;

	/*
	 * These can optionally be left zeroed out. If you fill ri_font,
	 * but aren't using wsfont, set ri_wsfcookie to -1.
	 */
	struct	wsdisplay_font *ri_font;
	int	ri_wsfcookie;	/* wsfont cookie */
	void	*ri_hw;		/* driver private data */
	int	ri_crow;	/* cursor row */
	int	ri_ccol;	/* cursor column */
	int	ri_flg;		/* various operational flags */

	/*
	 * These are optional and will default if zero. Meaningless
	 * on depths other than 15, 16, 24 and 32 bits per pel. On
	 * 24 bit displays, ri_{r,g,b}num must be 8.
	 */
	u_char	ri_rnum;	/* number of bits for red */
	u_char	ri_gnum;	/* number of bits for green */
	u_char	ri_bnum;	/* number of bits for blue */
	u_char	ri_rpos;	/* which bit red starts at */
	u_char	ri_gpos;	/* which bit green starts at */
	u_char	ri_bpos;	/* which bit blue starts at */

	/*
	 * These are filled in by rasops_init()
	 */
	int	ri_emuwidth;	/* width we actually care about */
	int	ri_emuheight;	/* height we actually care about */
	int	ri_emustride;	/* bytes per row we actually care about */
	int	ri_rows;	/* number of rows (characters) */
	int	ri_cols;	/* number of columns (characters) */
	int	ri_delta;	/* row delta in bytes */
	int	ri_pelbytes;	/* bytes per pel (may be zero) */
	int	ri_fontscale;	/* fontheight * fontstride */
	int	ri_xscale;	/* fontwidth * pelbytes */
	int	ri_yscale;	/* fontheight * stride */
	u_char	*ri_origbits;	/* where screen bits actually start */
	int	ri_xorigin;	/* where ri_bits begins (x) */
	int	ri_yorigin;	/* where ri_bits begins (y) */
	int32_t	ri_devcmap[16]; /* color -\*[Gt] framebuffer data */

	/*
	 * The emulops you need to use, and the screen caps for wscons
	 */
	struct	wsdisplay_emulops ri_ops;
	int	ri_caps;

	/*
	 * Callbacks so we can share some code
	 */
	void	(*ri_do_cursor)(struct rasops_info *);
};
.Ed
.Pp
Valid values for the
.Em ri_flg
member are:
.Pp
.Bl -tag -offset indent -width RI_ENABLE_ALPHA_XX -compact
.It Dv RI_FULLCLEAR
.Fn eraserows
hack to clear full screen
.It Dv RI_FORCEMONO
monochrome output even if we can do color
.It Dv RI_BSWAP
framebuffer endianness doesn't match CPU
.It Dv RI_CURSOR
cursor is switched on
.It Dv RI_CLEAR
clear display on startup
.It Dv RI_CENTER
center onscreen output
.It Dv RI_CURSORCLIP
cursor is currently clipped
.It Dv RI_CFGDONE
.Fn rasops_reconfig
completed successfully
.It Dv RI_NO_AUTO
do not generate box drawing characters for ISO fonts.
Use this when it is not safe to allocate memory, for example when setting up
an early console.
.It Dv RI_ENABLE_ALPHA
set this if the caller supports anti-aliased fonts in the given colour depth.
Without this flag
.Fn rasops_init
will only pick bitmap fonts.
.It Dv RI_8BIT_IS_RGB
set this if the caller uses an R3G3B2 colour map in 8 bit.
.Fn rasops_init
will generate an appropriate ri_devcmap[] but the caller still needs to set up
the actual colour map.
.El
.Sh FUNCTIONS
.Bl -tag -width compact
.It Fn rasops_init "ri" "wantrows" "wantcols"
Initialise a
.Em rasops_info
descriptor.
The arguments
.Fa wantrows
and
.Fa wantcols
are the number of rows and columns we'd like.
In terms of optimization, fonts that are a multiple of 8 pixels wide
work the best.
.It Fn rasops_reconfig "ri" "wantrows" "wantcols"
Reconfigure a
.Em rasops_info
descriptor because parameters have changed in some way.
The arguments
.Fa wantrows
and
.Fa wantcols
are the number of rows and columns we'd like.
Passing zero for either one of
them uses the default - normally 80x25 but it can be changed with
.Bd -literal -offset indent
options RASOPS_DEFAULT_WIDTH=80
options RASOPS_DEFAULT_HEIGHT=25
.Ed
If calling
.Fn rasops_reconfig
to change the font and ri_wsfcookie \*[Ge] 0, you must call
.Fn wsfont_unlock
on it, and reset it to -1 (or a new, valid cookie).
.El
.Sh CODE REFERENCES
The rasops subsystem is implemented within the directory
.Pa sys/dev/rasops .
The
.Nm
module itself is implemented within the file
.Pa sys/dev/rasops/rasops.c .
.Sh SEE ALSO
.Xr intro 9 ,
.Xr wscons 9 ,
.Xr wsdisplay 9 ,
.Xr wsfont 9
.Sh HISTORY
The
.Nm
subsystem appeared in
.Nx 1.5 .
.Sh AUTHORS
The
.Nm
subsystem was written by
.An Andrew Doran
.Aq ad@NetBSD.org .
