.\"	$NetBSD: copy.9,v 1.20.6.2 2019/09/05 08:19:41 martin Exp $
.\"
.\" Copyright (c) 1996, 2002 Jason R. Thorpe.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed by Kenneth Stailey.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed for the NetBSD Project
.\"	by Jason R. Thorpe.
.\" 4. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
.\" AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd August 28, 2005
.Dt COPY 9
.Os
.Sh NAME
.Nm copy ,
.Nm copyin ,
.Nm copyout ,
.Nm copystr ,
.Nm copyinstr ,
.Nm copyoutstr
.Nd kernel space to/from user space copy functions
.Sh SYNOPSIS
.In sys/types.h
.In sys/systm.h
.Ft int
.Fn copyin "const void *uaddr" "void *kaddr" "size_t len"
.Ft int
.Fn copyout "const void *kaddr" "void *uaddr" "size_t len"
.Ft int
.Fn copystr "const void *kfaddr" "void *kdaddr" "size_t len" "size_t *done"
.Ft int
.Fn copyinstr "const void *uaddr" "void *kaddr" "size_t len" "size_t *done"
.Ft int
.Fn copyoutstr "const void *kaddr" "void *uaddr" "size_t len" "size_t *done"
.Ft int
.Fn copyin_proc "struct proc *p" "const void *uaddr" "void *kaddr" "size_t len"
.Ft int
.Fn copyout_proc "struct proc *p" "const void *kaddr" "void *uaddr" "size_t len"
.Ft int
.Fn ioctl_copyin "int ioctlflags" "const void *src" "void *dst" "size_t len"
.Ft int
.Fn ioctl_copyout "int ioctlflags" "const void *src" "void *dst" "size_t len"
.Sh DESCRIPTION
The
.Nm
functions are designed to copy contiguous data from one address
to another.
All but
.Fn copystr
copy data from user-space to kernel-space or vice-versa.
.Pp
The
.Nm
routines provide the following functionality:
.Bl -tag -width "copyout_proc()"
.It Fn copyin
Copies
.Fa len
bytes of data from the user-space address
.Fa uaddr
in the current process to the kernel-space address
.Fa kaddr .
.It Fn copyout
Copies
.Fa len
bytes of data from the kernel-space address
.Fa kaddr
to the user-space address
.Fa uaddr
in the current process.
.It Fn copystr
Copies a NUL-terminated string, at most
.Fa len
bytes long, from kernel-space address
.Fa kfaddr
to kernel-space address
.Fa kdaddr .
If the
.Fa done
argument is non-NULL,
the number of bytes actually copied, including the terminating
NUL, is returned in
.Fa *done .
.It Fn copyinstr
Copies a NUL-terminated string, at most
.Fa len
bytes long, from user-space address
.Fa uaddr
in the current process to kernel-space address
.Fa kaddr .
If the
.Fa done
argument is non-NULL,
the number of bytes actually copied, including the terminating
NUL, is returned in
.Fa *done .
.It Fn copyoutstr
Copies a NUL-terminated string, at most
.Fa len
bytes long, from kernel-space address
.Fa kaddr
to user-space address
.Fa uaddr
in the current process.
If the
.Fa done
argument is non-NULL,
the number of bytes actually copied, including the terminating
NUL, is returned in
.Fa *done .
.It Fn copyin_proc
Like
.Fn copyin ,
except it operates on the address space of the process
.Fa p .
.It Fn copyout_proc
Like
.Fn copyout ,
except it operates on the address space of the process
.Fa p .
.It Fn ioctl_copyin
Like
.Fn copyin ,
except it operates on kernel addresses when the
.Dv FKIOCTL
flag is passed in
.Fa ioctlflags
from the ioctl call.
.It Fn ioctl_copyout
Like
.Fn copyout ,
except it operates on kernel addresses when the
.Dv FKIOCTL
flag is passed in
.Fa ioctlflags
from the ioctl call.
.El
.Sh RETURN VALUES
The
.Nm
functions return 0 on success or
.Er EFAULT
if a bad address is encountered.
In addition, the
.Fn copystr ,
.Fn copyinstr ,
and
.Fn copyoutstr
functions return
.Er ENAMETOOLONG
if the string is longer than
.Fa len
bytes.
.Sh SEE ALSO
.Xr ufetch 9 ,
.Xr ustore 9
