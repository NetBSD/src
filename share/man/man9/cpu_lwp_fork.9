.\"     $NetBSD: cpu_lwp_fork.9,v 1.7 2018/04/26 14:59:11 scole Exp $
.\"
.\" Copyright (c) 2002, 2005, 2006 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Gregory McGarry; and Rui Paulo.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd April 26, 2018
.Dt CPU_LWP_FORK 9
.Os
.Sh NAME
.Nm cpu_lwp_fork ,
.Nm child_return ,
.Nm lwp_trampoline
.Nd finish a fork operation
.Sh SYNOPSIS
.In sys/proc.h
.Ft void
.Fn cpu_lwp_fork "struct lwp *l1" "struct lwp *l2" "void *stack" \
"size_t stacksize" "void (*func)(void *)" "void *arg"
.Ft void
.Fn child_return "void *arg"
.Sh DESCRIPTION
.Fn cpu_lwp_fork
is the machine-dependent portion of
.Fn fork1
which finishes a fork operation, with child lwp
.Fa l2
nearly set up.
It copies and updates the PCB and trap frame from the parent
.Fa l1 ,
making the child ready to run.
.Pp
.Fn cpu_lwp_fork
rigs the child's kernel stack so that it will start in
.Fn lwp_trampoline .
.Fn lwp_trampoline
does not have a normal calling sequence and is entered by
.Fn cpu_switchto .
If an alternate user-level stack is requested (with non-zero values
in both the
.Fa stack
and
.Fa stacksize
arguments), the user stack pointer is set up accordingly.
.Pp
After being entered by
.Fn cpu_switchto
and while running in user context (within the kernel)
.Fn lwp_trampoline
will invoke the function
.Fa func
with the argument
.Fa arg .
If a kernel thread is being created, the return path and argument
are specified with
.Fa func
and
.Fa arg .
If a user process is being created,
.Fn fork1
will pass
.Fn child_return
and
.Fa l2
to
.Fn cpu_lwp_fork
as
.Fa func
and
.Fa arg
respectively.
This causes the newly-created child process to go directly to user
level with an apparent return value of 0 from
.Xr fork 2 ,
while the parent process returns normally.
.Sh SEE ALSO
.Xr fork 2 ,
.Xr cpu_switchto 9 ,
.Xr fork1 9
