.\"	$NetBSD: RUN_ONCE.9,v 1.9.6.1 2019/06/10 22:05:41 christos Exp $
.\"
.\" Copyright (c)2005 YAMAMOTO Takashi,
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" ------------------------------------------------------------
.Dd March 19, 2019
.Dt RUN_ONCE 9
.Os
.\" ------------------------------------------------------------
.Sh NAME
.Nm RUN_ONCE ,
.Nm INIT_ONCE ,
.Nm FINI_ONCE
.Nd run a function exactly once
.\" ------------------------------------------------------------
.Sh SYNOPSIS
.In sys/once.h
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.Vt ONCE_DECL(control);
.\" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.Ft int
.Fn RUN_ONCE \
"once_t *control" "int (*init_func)(void)"
.Ft int
.Fn INIT_ONCE \
"once_t *control" "int (*init_func)(void)"
.Ft void
.Fn FINI_ONCE \
"once_t *control" "void (*fini_func)(void)"
.\" ------------------------------------------------------------
.Sh DESCRIPTION
.Fn RUN_ONCE
provides a functionality similar to
.Xr pthread_once 3 .
It ensures that, for a given
.Fa control ,
.Fn init_func
is executed (successfully) exactly once.
It is considered as a successful execution if and only if
.Fn init_func
returned 0.
As long as there was no successful execution,
.Fn RUN_ONCE
will try again each time it is called.
.Pp
.Fn RUN_ONCE
can sleep if it's called concurrently.
.Pp
.Fn INIT_ONCE
is used in pair with
.Fn FINI_ONCE .
.Fn INIT_ONCE
will only be run once similar to
.Fn RUN_ONCE .
.Fn FINI_ONCE
will only be run at last time if it is called as many times as calling
.Fn INIT_ONCE .
When
.Fn FINI_ONCE
is executed, the next call to
.Fn INIT_ONCE
will be executed again.
That is,
.Fn INIT_ONCE
and
.Fn FINI_ONCE
can be nested.
.\" ------------------------------------------------------------
.Sh RETURN VALUES
On failure,
.Fn RUN_ONCE
returns what
.Fn init_func
returned.
Otherwise, it returns 0.
.\" ------------------------------------------------------------
.Sh EXAMPLES
The following example shows how
.Fn RUN_ONCE
is used.
Regardless of how many times
.Fn some_func
is executed,
.Fn init_func
will be executed exactly once.
.Bd -literal
static int
init_func(void)
{

	/*
	 * do some initialization.
	 */

	return 0; /* success */
}

int
some_func(void)
{
	static ONCE_DECL(control);

	RUN_ONCE(&control, init_func);

	/*
	 * we are sure that init_func has already been completed here.
	 */
}
.Ed
.\" ------------------------------------------------------------
.Sh SEE ALSO
.Xr pthread_once 3 ,
.Xr condvar 9 ,
.Xr intro 9
