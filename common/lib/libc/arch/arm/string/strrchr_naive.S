/*-
 * Copyright (c) 2013 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Matt Thomas of 3am Software Foundry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <machine/asm.h>

RCSID("$NetBSD: strrchr_naive.S,v 1.1.2.3 2014/05/22 11:26:28 yamt Exp $")

/* LINTSTUB: char * strrchr(const char *, int) */
ENTRY(strrchr)
	mov	r2, r0		/* using r0 as return value */
	movs	r0, #0		/* default to no match */
#ifdef __thumb__
	movs	r3, #0xff
	ands	r1, r1, r3	/* restrict to a byte value */
1:	ldrb	r3, [r2]	/* read a byte */
	cmp	r3, r1		/* does it match? */
	bne	2f		/*   no, go and advance */
	mov	r0, r2		/*   yes, set return value to point to it */
2:	adds	r2, r2, #1	/* advance to next byte */
	cmp	r3, #0		/* was it a NUL? */
	bne	1b		/*   no, get next byte */
#else
	and	r1, r1, #0xff	/* restrict to a byte value */
1:	ldrb	r3, [r2], #1	/* read a byte */
	cmp	r3, r1		/* does it match? */
	subeq	r0, r2, #1	/*   yes, set return value to point to it */
	cmp	r3, #0		/* was it a NUL? */
	bne	1b		/*   no, get next byte */
#endif
	RET
END(strrchr)
