This is texinfo, produced by makeinfo version 4.8 from
/Users/sidqian/Downloads/summer/L2S/netbsd-src/tools/texinfo/../../external/gpl2/texinfo/dist/doc/texinfo.txi.

  This manual is for GNU Texinfo (version 4.8, 29 December 2004), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. Update info/dir entries.
* texi2dvi: (texinfo)Format with texi2dvi.      Print Texinfo documents.
* texi2pdf: (texinfo)PDF Output.                PDF output for Texinfo.
* texindex: (texinfo)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo: (texinfo)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo,  Node: Top,  Next: Copying Conditions,  Up: (dir)

Texinfo
*******

This manual is for GNU Texinfo (version 4.8, 29 December 2004), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

  The first part of this master menu lists the major nodes in this Info
document, including the @-command and concept indices.  The rest of the
menu lists all the lower level nodes in the document.

* Menu:

* Copying Conditions::            Your rights.
* Overview::                      Texinfo in brief.
* Texinfo Mode::                  Using the GNU Emacs Texinfo mode.
* Beginning a File::              What is at the beginning of a Texinfo file?
* Ending a File::                 What is at the end of a Texinfo file?
* Structuring::                   Creating chapters, sections, appendices, etc.
* Nodes::                         Writing nodes, the basic unit of Texinfo.
* Menus::                         Writing menus.
* Cross References::              Writing cross references.
* Marking Text::                  Marking words and phrases as code,
                                    keyboard input, meta-syntactic
                                    variables, and the like.
* Quotations and Examples::       Block quotations, examples, etc.
* Lists and Tables::              Itemized or numbered lists, and tables.
* Special Displays::              Floating figures and footnotes.
* Indices::                       Creating indices.
* Insertions::                    Inserting @-signs, braces, etc.
* Breaks::                        Forcing or preventing line and page breaks.
* Definition Commands::           Describing functions and the like uniformly.
* Conditionals::                  Specifying text for only some output cases.
* Internationalization::          Supporting languages other than English.
* Defining New Texinfo Commands:: User-defined macros and aliases.
* Hardcopy::                            Output for paper, with TeX.
* Creating and Installing Info Files::  Details on Info output.
* Generating HTML::               Details on HTML output.

* Command List::                  All the Texinfo @-commands.
* Tips::                          Hints on how to write a Texinfo document.
* Sample Texinfo Files::          Complete examples, including full texts.
* Include Files::                 How to incorporate other Texinfo files.
* Headings::                      How to write page headings and footings.
* Catching Mistakes::             How to find formatting mistakes.
* Copying This Manual::           The GNU Free Documentation License.
* Command and Variable Index::    A menu containing commands and variables.
* Concept Index::                 A menu covering many topics.

 --- The Detailed Node Listing ---

Overview of Texinfo

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Output Formats::              Overview of the supported output formats.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.

Using Texinfo Mode

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.

Updating Nodes and Menus

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.

Beginning a Texinfo File

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* Contents::                    How to create a table of contents.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.

Texinfo File Header

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.

Document Permissions

* copying::                     Declare the document's copying permissions.
* insertcopying::               Where to insert the permissions.

Title and Copyright Pages

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                 and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                 and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.

The `Top' Node and Master Menu

* Top Node Example::
* Master Menu Parts::

Global Document Commands

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* firstparagraphindent::        Suppress indentation of the first paragraph.
* exampleindent::               Specify environment indentation.

Ending a Texinfo File

* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* File End::                    How to mark the end of a file.

Chapter Structuring

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.

Nodes

* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.

The `@node' Command

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.

Menus

* Menu Location::               Menus go at the ends of short nodes.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.

Cross References

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.

`@xref'

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.

Marking Words and Phrases

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.

Indicating Definitions, Commands, etc.

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* abbr::                        Indicating abbreviations.
* acronym::                     Indicating acronyms.
* indicateurl::                 Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.

Emphasizing Text

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.

Quotations and Examples

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Examples in a smaller font.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* indent::                      Forcing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.

Lists and Tables

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.

Making a Two-column Table

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.

`@multitable': Multi-column Tables

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.

Special Displays

* Floats::                      Figures, tables, and the like.
* Images::                      Including graphics and images.
* Footnotes::                   Writing footnotes.

Floats

* float::                       Producing floating material.
* caption shortcaption::        Specifying descriptions for floats.
* listoffloats::                A table of contents for floats.

Inserting Images

* Image Syntax::
* Image Scaling::

Footnotes

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.

Indices

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entries.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.

Combining Indices

* syncodeindex::                How to merge two indices, using `@code'
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.

Special Insertions

* Atsign Braces Comma::         Inserting @ and {} and ,.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                 and the copyright symbol.
* euro::                        How to insert the Euro currency symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.

Inserting @ and {} and ,

* Inserting an Atsign::
* Inserting Braces::
* Inserting a Comma::

Inserting Space

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.

Inserting Ellipsis and Bullets

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.

Inserting TeX and Legal Symbols: (C), (R)

* tex::                         The TeX logos.
* copyright symbol::            The copyright symbol (c in a circle).
* registered symbol::           The registered symbol (R in a circle).

Glyphs for Examples

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.

Glyphs Summary

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::

Forcing and Preventing Breaks

* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping TeX with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.

Definition Commands

* Def Cmd Template::            Writing descriptions using definition commands.
* Def Cmd Continuation Lines::  Continuing the heading over source lines.
* Optional Arguments::          Handling optional and repeated arguments.
* deffnx::                      Group two or more `first' lines.
* Def Cmds in Detail::          Reference for all the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::  An example.

The Definition Commands

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Data Types::                  The definition command for data types.
* Abstract Objects::            Commands for object-oriented programming.

Object-Oriented Programming

* Variables: Object-Oriented Variables.
* Methods: Object-Oriented Methods.

Conditionally Visible Text

* Conditional Commands::        Text for a given format.
* Conditional Not Commands::    Text for any format other than a given one.
* Raw Formatter Commands::      Using raw formatter commands.
* set clear value::             Variable tests and substitutions.
* Conditional Nesting::         Using conditionals inside conditionals.

`@set', `@clear', and `@value'

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.

Internationalization

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.

Defining New Texinfo Commands

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Limitations of Texinfo macros.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.

Formatting and Printing Hardcopy

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification:: How to print marks to indicate the size
                                 of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.
* Obtaining TeX::               How to Obtain TeX.

Creating and Installing Info Files

* Creating an Info File::
* Installing an Info File::

Creating an Info File

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.

Installing an Info File

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       `install-info' options.

Generating HTML

* HTML Translation::       Details of the HTML output.
* HTML Splitting::         How HTML output is split.
* HTML CSS::               Influencing HTML output with Cascading Style Sheets.
* HTML Xref::              Cross-references in HTML output.

HTML Cross-references

* Link Basics:       HTML Xref Link Basics.
* Node Expansion:    HTML Xref Node Name Expansion.
* Command Expansion: HTML Xref Command Expansion.
* 8-bit Expansion:   HTML Xref 8-bit Character Expansion.
* Mismatch:          HTML Xref Mismatch.

@-Command List

* Command Syntax::    General syntax for varieties of @-commands.

Sample Texinfo Files

* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::

Copying This Manual

* GNU Free Documentation License::  License for copying this manual.

Include Files

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                     menus when using included files.
* Include Files Requirements::  `texinfo-multiple-files-update' needs.
* Sample Include File::         A sample outer file with included files
                                     within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                     has changed over time.

Page Headings

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.

Formatting Mistakes

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

Finding Badly Referenced Nodes

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.

Copying This Manual

* GNU Free Documentation License::  License for copying this manual.

     Documentation is like sex: when it is good, it is very, very good;
     and when it is bad, it is better than nothing.  --Dick Brandon


File: texinfo,  Node: Copying Conditions,  Next: Overview,  Prev: Top,  Up: Top

Texinfo Copying Conditions
**************************

The programs currently being distributed that relate to Texinfo include
`makeinfo', `info', `texindex', and `texinfo.tex'.  These programs are
"free"; this means that everyone is free to use them and free to
redistribute them on a free basis.  The Texinfo-related programs are
not in the public domain; they are copyrighted and there are
restrictions on their distribution, but these restrictions are designed
to permit everything that a good cooperating citizen would want to do.
What is not allowed is to try to prevent others from further sharing
any version of these programs that they might get from you.

  Specifically, we want to make sure that you have the right to give
away copies of the programs that relate to Texinfo, that you receive
source code or else can get it if you want it, that you can change these
programs or use pieces of them in new free programs, and that you know
you can do these things.

  To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the Texinfo related programs, you must give the recipients all
the rights that you have.  You must make sure that they, too, receive or
can get the source code.  And you must tell them their rights.

  Also, for our own protection, we must make certain that everyone finds
out that there is no warranty for the programs that relate to Texinfo.
If these programs are modified by someone else and passed on, we want
their recipients to know that what they have is not what we distributed,
so that any problems introduced by others will not reflect on our
reputation.

  The precise conditions of the licenses for the programs currently
being distributed that relate to Texinfo are found in the General Public
Licenses that accompany them.  This manual specifically is covered by
the GNU Free Documentation License (*note GNU Free Documentation
License::).


File: texinfo,  Node: Overview,  Next: Texinfo Mode,  Prev: Copying Conditions,  Up: Top

1 Overview of Texinfo
*********************

"Texinfo"(1)  is a documentation system that uses a single source file
to produce both online information and printed output.  This means that
instead of writing two different documents, one for the online
information and the other for a printed work, you need write only one
document.  Therefore, when the work is revised, you need revise only
that one document.

* Menu:

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Output Formats::              Overview of the supported output formats.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.

  ---------- Footnotes ----------

  (1) The first syllable of "Texinfo" is pronounced like "speck", not
"hex".  This odd pronunciation is derived from, but is not the same as,
the pronunciation of TeX.  In the word TeX, the `X' is actually the
Greek letter "chi" rather than the English letter "ex".  Pronounce TeX
as if the `X' were the last sound in the name `Bach'; but pronounce
Texinfo as if the `x' were a `k'.  Spell "Texinfo" with a capital "T"
and the other letters in lower case.


File: texinfo,  Node: Reporting Bugs,  Next: Using Texinfo,  Up: Overview

1.1 Reporting Bugs
==================

We welcome bug reports and suggestions for any aspect of the Texinfo
system, programs, documentation, installation, anything.  Please email
them to <bug-texinfo@gnu.org>.  You can get the latest version of
Texinfo from `ftp://ftp.gnu.org/gnu/texinfo/' and its mirrors worldwide.

  For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

   * the version number of Texinfo and the program(s) or manual(s)
     involved.

   * hardware and operating system names and versions.

   * the contents of any input files necessary to reproduce the bug.

   * a description of the problem and samples of any erroneous output.

   * any unusual options you gave to `configure'.

   * anything else that you think would be helpful.

  When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

  Patches are most welcome; if possible, please make them with
`diff -c' (*note Overview: (diff)Top.) and include `ChangeLog' entries
(*note Change Log: (emacs)Change Log.).

  When sending patches, if possible please do not encode or split them
in any way; it's much easier to deal with one plain text message,
however large, than many small ones.  GNU shar
(ftp://ftp.gnu.org/gnu/sharutils/) is a convenient way of packaging
multiple and/or binary files for email.


File: texinfo,  Node: Using Texinfo,  Next: Output Formats,  Prev: Reporting Bugs,  Up: Overview

1.2 Using Texinfo
=================

Using Texinfo, you can create a printed document (via the TeX
typesetting system) the normal features of a book, including chapters,
sections, cross references, and indices.  From the same Texinfo source
file, you can create an Info file with special features to make
documentation browsing easy.  You can also create from that same source
file an HTML output file suitable for use with a web browser, or an XML
file.  See the next section (*note Output Formats::) for details and
the exact commands to generate output from the source.

  TeX works with virtually all printers; Info works with virtually all
computer terminals; the HTML output works with virtually all web
browsers.  Thus Texinfo can be used by almost any computer user.

  A Texinfo source file is a plain ASCII file containing text
interspersed with "@-commands" (words preceded by an `@') that tell the
typesetting and formatting programs what to do.  You can edit a Texinfo
file with any text editor, but it is especially convenient to use GNU
Emacs since that editor has a special mode, called Texinfo mode, that
provides various Texinfo-related features.  (*Note Texinfo Mode::.)

  You can use Texinfo to create both online help and printed manuals;
moreover, Texinfo is freely redistributable.  For these reasons, Texinfo
is the official documentation format of the GNU project.  More
information is available at the GNU documentation web page
(http://www.gnu.org/doc/).


File: texinfo,  Node: Output Formats,  Next: Info Files,  Prev: Using Texinfo,  Up: Overview

1.3 Output Formats
==================

Here is a brief overview of the output formats currently supported by
Texinfo.

Info
     (Generated via `makeinfo'.)  This format is essentially a plain
     text transliteration of the Texinfo source.  It adds a few control
     characters to separate nodes and provide navigational information
     for menus, cross-references, indices, and so on.  See the next
     section (*note Info Files::) for more details on this format.  The
     Emacs Info subsystem (*note Getting Started: (info)Top.), and the
     standalone `info' program (*note Info Standalone:
     (info-stnd)Top.), among others, can read these files.  *Note
     Creating and Installing Info Files::.

Plain text
     (Generated via `makeinfo --no-headers'.)  This is almost the same
     as Info output, except the navigational control characters are
     omitted.  Also, standard output is used by default.

HTML
     (Generated via `makeinfo --html'.)  This is the Hyper Text Markup
     Language that has become the most commonly used language for
     writing documents on the World Wide Web.  Web browsers, such as
     Mozilla, Lynx, and Emacs-W3, can render this language online.
     There are many versions of HTML; `makeinfo' tries to use a subset
     of the language that can be interpreted by any common browser.  For
     details of the HTML language and much related information, see
     `http://www.w3.org/MarkUp/'.  *Note Generating HTML::.

DVI
     (Generated via `texi2dvi'.)  This DeVice Independent binary format
     is output by the TeX typesetting program (`http://tug.org').  This
     is then read by a DVI `driver', which writes the actual
     device-specific commands that can be viewed or printed, notably
     Dvips for translation to PostScript (*note Invoking Dvips:
     (dvips)Invoking Dvips.) and Xdvi for viewing on an X display
     (`http://sourceforge.net/projects/xdvi/').  *Note Hardcopy::.

     Be aware that the Texinfo language is very different from and much
     stricter than TeX's usual languages, plain TeX and LaTeX.  For
     more information on TeX in general, please see the book `TeX for
     the Impatient', available from
     `http://savannah.gnu.org/projects/teximpatient'.

PDF
     (Generated via `texi2dvi --pdf' or `texi2pdf'.)  This was
     developed by Adobe Systems for portable document interchange,
     based on their previous PostScript language.  It can represent the
     exact appearance of a document, including fonts, and supporting
     arbitrary scaling.  It is intended to be platform-independent and
     easily viewable, among other design goals; for a discussion, see
     `http://tug.org/TUGboat/Articles/tb22-3/tb72beebeI.pdf'.  Texinfo
     uses the `pdftex' program, a variant of TeX, to output PDF; see
     `http://tug.org/applications/pdftex'.  *Note PDF Output::.

XML
     (Generated via `makeinfo --xml'.)  XML is a generic syntax
     specification usable for any sort of content (see, for example,
     `http://www.w3.org/XML/').  The `makeinfo' xml output, unlike all
     the formats above, interprets very little of the Texinfo source.
     Rather, it merely translates the Texinfo markup commands into XML
     syntax, for processing by further XML tools.  The particular
     syntax output is defined in the file `texinfo.dtd' included in the
     Texinfo source distribution.

Docbook
     (Generated via `makeinfo --docbook'.)  This is an XML-based format
     developed some years ago, primarily for technical documentation.
     It therefore bears some resemblance, in broad outlines, to
     Texinfo.  See `http://www.docbook.org'.  If you want to convert
     from Docbook _to_ Texinfo, please see
     `http://docbook2X.sourceforge.net'.


  From time to time, proposals are made to generate traditional Unix man
pages from Texinfo source.  However, because man pages have a very
strict conventional format, generating a good man page requires a
completely different source than the typical Texinfo applications of
writing a good user tutorial and/or a good reference manual.  This
makes generating man pages incompatible with the Texinfo design goal of
not having to document the same information in different ways for
different output formats.  You might as well just write the man page
directly.

  Man pages still have their place, and if you wish to support them, you
may find the program `help2man' to be useful; it generates a
traditional man page from the `--help' output of a program.  In fact,
this is currently used to generate man pages for the programs in the
Texinfo distribution.  It is GNU software written by Brendan O'Dea,
available from `ftp://ftp.gnu.org/gnu/help2man/'.

  If you are a programmer and would like to contribute to the GNU
project by implementing additional output formats for Texinfo, that
would be excellent.  But please do not write a separate translator
texi2foo for your favorite format foo!  That is the hard way to do the
job, and makes extra work in subsequent maintenance, since the Texinfo
language is continually being enhanced and updated.  Instead, the best
approach is modify `makeinfo' to generate the new format.


File: texinfo,  Node: Info Files,  Next: Printed Books,  Prev: Output Formats,  Up: Overview

1.4 Info Files
==============

An Info file is a Texinfo file formatted so that the Info documentation
reading program can operate on it.  (`makeinfo' and
`texinfo-format-buffer' are two commands that convert a Texinfo file
into an Info file.)

  Info files are divided into pieces called "nodes", each of which
contains the discussion of one topic.  Each node has a name, and
contains both text for the user to read and pointers to other nodes,
which are identified by their names.  The Info program displays one node
at a time, and provides commands with which the user can move to other
related nodes.

  *Note Top: (info)Top, for more information about using Info.

  Each node of an Info file may have any number of child nodes that
describe subtopics of the node's topic.  The names of child nodes are
listed in a "menu" within the parent node; this allows you to use
certain Info commands to move to one of the child nodes.  Generally, an
Info file is organized like a book.  If a node is at the logical level
of a chapter, its child nodes are at the level of sections; likewise,
the child nodes of sections are at the level of subsections.

  All the children of any one parent are linked together in a
bidirectional chain of `Next' and `Previous' pointers.  The `Next'
pointer provides a link to the next section, and the `Previous' pointer
provides a link to the previous section.  This means that all the nodes
that are at the level of sections within a chapter are linked together.
Normally the order in this chain is the same as the order of the
children in the parent's menu.  Each child node records the parent node
name as its `Up' pointer.  The last child has no `Next' pointer, and the
first child has the parent both as its `Previous' and as its `Up'
pointer.(1)

  The book-like structuring of an Info file into nodes that correspond
to chapters, sections, and the like is a matter of convention, not a
requirement.  The `Up', `Previous', and `Next' pointers of a node can
point to any other nodes, and a menu can contain any other nodes.
Thus, the node structure can be any directed graph.  But it is usually
more comprehensible to follow a structure that corresponds to the
structure of chapters and sections in a printed book or report.

  In addition to menus and to `Next', `Previous', and `Up' pointers,
Info provides pointers of another kind, called references, that can be
sprinkled throughout the text.  This is usually the best way to
represent links that do not fit a hierarchical structure.

  Usually, you will design a document so that its nodes match the
structure of chapters and sections in the printed output.  But
occasionally there are times when this is not right for the material
being discussed.  Therefore, Texinfo uses separate commands to specify
the node structure for the Info file and the section structure for the
printed output.

  Generally, you enter an Info file through a node that by convention is
named `Top'.  This node normally contains just a brief summary of the
file's purpose, and a large menu through which the rest of the file is
reached.  From this node, you can either traverse the file
systematically by going from node to node, or you can go to a specific
node listed in the main menu, or you can search the index menus and then
go directly to the node that has the information you want.
Alternatively, with the standalone Info program, you can specify
specific menu items on the command line (*note Top: (info)Top.).

  If you want to read through an Info file in sequence, as if it were a
printed manual, you can hit <SPC> repeatedly, or you get the whole file
with the advanced Info command `g *'.  (*note Advanced Info commands:
(info)Advanced.)

  The `dir' file in the `info' directory serves as the departure point
for the whole Info system.  From it, you can reach the `Top' nodes of
each of the documents in a complete Info system.

  If you wish to refer to an Info file in a URI, you can use the
(unofficial) syntax exemplified in the following.  This works with
Emacs/W3, for example:
     info:///usr/info/emacs#Dissociated%20Press
     info:emacs#Dissociated%20Press
     info://localhost/usr/info/emacs#Dissociated%20Press

  The `info' program itself does not follow URI's of any kind.

  ---------- Footnotes ----------

  (1) In some documents, the first child has no `Previous' pointer.
Occasionally, the last child has the node name of the next following
higher level node as its `Next' pointer.


File: texinfo,  Node: Printed Books,  Next: Formatting Commands,  Prev: Info Files,  Up: Overview

1.5 Printed Books
=================

A Texinfo file can be formatted and typeset as a printed book or manual.
To do this, you need TeX, a powerful, sophisticated typesetting program
written by Donald Knuth.(1)

  A Texinfo-based book is similar to any other typeset, printed work: it
can have a title page, copyright page, table of contents, and preface,
as well as chapters, numbered or unnumbered sections and subsections,
page headers, cross references, footnotes, and indices.

  You can use Texinfo to write a book without ever having the intention
of converting it into online information.  You can use Texinfo for
writing a printed novel, and even to write a printed memo, although
this latter application is not recommended since electronic mail is so
much easier.

  TeX is a general purpose typesetting program.  Texinfo provides a
file `texinfo.tex' that contains information (definitions or "macros")
that TeX uses when it typesets a Texinfo file.  (`texinfo.tex' tells
TeX how to convert the Texinfo @-commands to TeX commands, which TeX
can then process to create the typeset document.)  `texinfo.tex'
contains the specifications for printing a document.  You can get the
latest version of `texinfo.tex' from
`ftp://ftp.gnu.org/gnu/texinfo/texinfo.tex'.

  In the United States, documents are most often printed on 8.5 inch by
11 inch pages (216mm by 280mm); this is the default size.  But you can
also print for 7 inch by 9.25 inch pages (178mm by 235mm, the
`@smallbook' size; or on A4 or A5 size paper (`@afourpaper',
`@afivepaper').  (*Note Printing "Small" Books: smallbook.  Also, see
*Note Printing on A4 Paper: A4 Paper.)

  By changing the parameters in `texinfo.tex', you can change the size
of the printed document.  In addition, you can change the style in
which the printed document is formatted; for example, you can change the
sizes and fonts used, the amount of indentation for each paragraph, the
degree to which words are hyphenated, and the like.  By changing the
specifications, you can make a book look dignified, old and serious, or
light-hearted, young and cheery.

  TeX is freely distributable.  It is written in a superset of Pascal
called WEB and can be compiled either in Pascal or (by using a
conversion program that comes with the TeX distribution) in C.  (*Note
TeX Mode: (emacs)TeX Mode, for information about TeX.)

  TeX is very powerful and has a great many features.  Because a
Texinfo file must be able to present information both on a
character-only terminal in Info form and in a typeset book, the
formatting commands that Texinfo supports are necessarily limited.

  To get a copy of TeX, see *Note How to Obtain TeX: Obtaining TeX.

  ---------- Footnotes ----------

  (1) You can also use the `texi2roff' (ftp://tug.org/texi2roff.tar.gz)
program if you do not have TeX; since Texinfo is designed for use with
TeX, `texi2roff' is not described here.  `texi2roff' is not part of the
standard GNU distribution and is not maintained or up-to-date with all
the Texinfo features described in this manual.


File: texinfo,  Node: Formatting Commands,  Next: Conventions,  Prev: Printed Books,  Up: Overview

1.6 @-commands
==============

In a Texinfo file, the commands that tell TeX how to typeset the
printed manual and tell `makeinfo' and `texinfo-format-buffer' how to
create an Info file are preceded by `@'; they are called "@-commands".
For example, `@node' is the command to indicate a node and `@chapter'
is the command to indicate the start of a chapter.

     Note: Almost all @ command names are entirely lower case.

  The Texinfo @-commands are a strictly limited set of constructs.  The
strict limits make it possible for Texinfo files to be understood both
by TeX and by the code that converts them into Info files.  You can
display Info files on any terminal that displays alphabetic and numeric
characters.  Similarly, you can print the output generated by TeX on a
wide variety of printers.

  Depending on what they do or what arguments(1) they take, you need to
write @-commands on lines of their own or as part of sentences:

   * Write a command such as `@quotation' at the beginning of a line as
     the only text on the line.  (`@quotation' begins an indented
     environment.)

   * Write a command such as `@chapter' at the beginning of a line
     followed by the command's arguments, in this case the chapter
     title, on the rest of the line.  (`@chapter' creates chapter
     titles.)

   * Write a command such as `@dots{}' wherever you wish but usually
     within a sentence. (`@dots{}' creates dots ...)

   * Write a command such as `@code{SAMPLE-CODE}' wherever you wish
     (but usually within a sentence) with its argument, SAMPLE-CODE in
     this example, between the braces.  (`@code' marks text as being
     code.)

   * Write a command such as `@example' on a line of its own; write the
     body-text on following lines; and write the matching `@end'
     command, `@end example' in this case, on a line of its own after
     the body-text. (`@example' ... `@end example' indents and typesets
     body-text as an example.)  It's usually ok to indent environment
     commands like this, but in complicated and hard-to-define
     circumstances the extra spaces cause extra space to appear in the
     output, so beware.

As a general rule, a command requires braces if it mingles among other
text; but it does not need braces if it starts a line of its own.  The
non-alphabetic commands, such as `@:', are exceptions to the rule; they
do not need braces.

  As you gain experience with Texinfo, you will rapidly learn how to
write the different commands: the different ways to write commands
actually make it easier to write and read Texinfo files than if all
commands followed exactly the same syntax.  *Note @-Command Syntax:
Command Syntax, for all the details.

  ---------- Footnotes ----------

  (1) The word "argument" comes from the way it is used in mathematics
and does not refer to a dispute between two people; it refers to the
information presented to the command.  According to the `Oxford English
Dictionary', the word derives from the Latin for "to make clear,
prove"; thus it came to mean `the evidence offered as proof', which is
to say, `the information offered', which led to its mathematical
meaning.  In its other thread of derivation, the word came to mean `to
assert in a manner against which others may make counter assertions',
which led to the meaning of `argument' as a dispute.


File: texinfo,  Node: Conventions,  Next: Comments,  Prev: Formatting Commands,  Up: Overview

1.7 General Syntactic Conventions
=================================

This section describes the general conventions used in all Texinfo
documents.

   * All printable ASCII characters except `@', `{' and `}' can appear
     in a Texinfo file and stand for themselves.  `@' is the escape
     character which introduces commands, while `{' and `}' are used to
     surround arguments to certain commands.  To put one of these
     special characters into the document, put an `@' character in
     front of it, like this: `@@', `@{', and `@}'.

   * Separate paragraphs with one or more blank lines.  Currently
     Texinfo only recognizes newline characters as end of line, not the
     CRLF sequence used on some systems; so a "blank line" means
     exactly two consecutive newlines.  Sometimes blank lines are
     useful or convenient in other cases as well; you can use the
     `@noindent' to inhibit paragraph indentation if required (*note
     `@noindent': noindent.).

   * Use doubled single-quote characters to begin and end quotations:
     ``...''.  TeX converts two single quotes to left- and right-hand
     doubled quotation marks, and Info converts doubled single-quote
     characters to ASCII double-quotes: ``...'' becomes "...".

     You may occasionally need to produce two consecutive single quotes;
     for example, in documenting a computer language such as Maxima
     where '' is a valid command.  You can do this with the input
     '@w{}'; the empty `@w' command stops the combination into the
     double-quote characters.

     The left quote character (`, ASCII code 96) used in Texinfo is a
     grave accent in ANSI and ISO character set standards.  We use it
     as a quote character because that is how TeX is set up, by
     default.  We hope to eventually support the various quotation
     characters in Unicode.

   * Use three hyphens in a row, `---', to produce a long dash--like
     this (called an "em dash"), used for punctuation in sentences.
     Use two hyphens, `--', to produce a medium dash (called an "en
     dash"), used primarily for numeric ranges, as in "June 25-26".
     Use a single hyphen, `-', to produce a standard hyphen used in
     compound words.  For display on the screen, Info reduces three
     hyphens to two and two hyphens to one (not transitively!).  Of
     course, any number of hyphens in the source remain as they are in
     literal contexts, such as `@code' and `@example'.

   * *Caution:* Last and most important, do not use tab characters in a
     Texinfo file (except in verbatim modes)!  TeX uses variable-width
     fonts, which means that it is impractical at best to define a tab
     to work in all circumstances.  Consequently, TeX treats tabs like
     single spaces, and that is not what they look like in the source.
     Furthermore, `makeinfo' does nothing special with tabs, and thus a
     tab character in your input file will usually appear differently
     in the output.

     To avoid this problem, Texinfo mode causes GNU Emacs to insert
     multiple spaces when you press the <TAB> key.

     Also, you can run `untabify' in Emacs to convert tabs in a region
     to multiple spaces, or use the `unexpand' command from the shell.



File: texinfo,  Node: Comments,  Next: Minimum,  Prev: Conventions,  Up: Overview

1.8 Comments
============

You can write comments in a Texinfo file that will not appear in either
the Info file or the printed manual by using the `@comment' command
(which may be abbreviated to `@c').  Such comments are for the person
who revises the Texinfo file.  All the text on a line that follows
either `@comment' or `@c' is a comment; the rest of the line does not
appear in either the Info file or the printed manual.

  Often, you can write the `@comment' or `@c' in the middle of a line,
and only the text that follows after the `@comment' or `@c' command
does not appear; but some commands, such as `@settitle' and
`@setfilename', work on a whole line.  You cannot use `@comment' or
`@c' in a line beginning with such a command.

  You can write long stretches of text that will not appear in either
the Info file or the printed manual by using the `@ignore' and `@end
ignore' commands.  Write each of these commands on a line of its own,
starting each command at the beginning of the line.  Text between these
two commands does not appear in the processed output.  You can use
`@ignore' and `@end ignore' for writing comments.

  Text enclosed by `@ignore' or by failing `@ifset' or `@ifclear'
conditions is ignored in the sense that it will not contribute to the
formatted output.  However, TeX and makeinfo must still parse the
ignored text, in order to understand when to _stop_ ignoring text from
the source file; that means that you may still get error messages if
you have invalid Texinfo commands within ignored text.


File: texinfo,  Node: Minimum,  Next: Six Parts,  Prev: Comments,  Up: Overview

1.9 What a Texinfo File Must Have
=================================

By convention, the namea of a Texinfo file ends with (in order of
preference) one of the extensions `.texinfo', `.texi', `.txi', or
`.tex'.  The longer extensions are preferred since they describe more
clearly to a human reader the nature of the file.  The shorter
extensions are for operating systems that cannot handle long file names.

  In order to be made into a printed manual and an Info file, a Texinfo
file *must* begin with lines like this:

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

The contents of the file follow this beginning, and then you *must* end
a Texinfo file with a line like this:

     @bye

Here's an explanation:

   * The `\input texinfo' line tells TeX to use the `texinfo.tex' file,
     which tells TeX how to translate the Texinfo @-commands into TeX
     typesetting commands.  (Note the use of the backslash, `\'; this
     is correct for TeX.)

   * The `@setfilename' line provides a name for the Info file and
     tells TeX to open auxiliary files.  *All text before
     `@setfilename' is ignored!*

   * The `@settitle' line specifies a title for the page headers (or
     footers) of the printed manual, and the default document
     description for the `<head>' in HTML format.  Strictly speaking,
     `@settitle' is optional--if you don't mind your document being
     titled `Untitled'.

   * The `@bye' line at the end of the file on a line of its own tells
     the formatters that the file is ended and to stop formatting.


  Typically, you will not use quite such a spare format, but will
include mode setting and start-of-header and end-of-header lines at the
beginning of a Texinfo file, like this:

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL
     @c %**end of header

In the first line, `-*-texinfo-*-' causes Emacs to switch into Texinfo
mode when you edit the file.

  The `@c' lines which surround the `@setfilename' and `@settitle'
lines are optional, but you need them in order to run TeX or Info on
just part of the file.  (*Note Start of Header::.)

  Furthermore, you will usually provide a Texinfo file with a title
page, indices, and the like, all of which are explained in this manual.
But the minimum, which can be useful for short documents, is just the
three lines at the beginning and the one line at the end.


File: texinfo,  Node: Six Parts,  Next: Short Sample,  Prev: Minimum,  Up: Overview

1.10 Six Parts of a Texinfo File
================================

Generally, a Texinfo file contains more than the minimal beginning and
end described in the previous section--it usually contains the six
parts listed below.  These are described fully in the following
sections.

1. Header
     The "Header" names the file, tells TeX which definitions file to
     use, and other such housekeeping tasks.

2. Summary and Copyright
     The "Summary and Copyright" segment describes the document and
     contains the copyright notice and copying permissions.  This is
     done with the `@copying' command.

3. Title and Copyright
     The "Title and Copyright" segment contains the title and copyright
     pages for the printed manual.  The segment must be enclosed between
     `@titlepage' and `@end titlepage' commands.  The title and
     copyright page appear only in the printed manual.

4. `Top' Node and Master Menu
     The `Top' node starts off the online output; it does not appear in
     the printed manual.  We recommend including the copying
     permissions here as well as the segments above.  And it contains
     at least a top-level menu listing the chapters, and possibly a
     "Master Menu" listing all the nodes in the entire document.

5. Body
     The "Body" of the document is typically structured like a
     traditional book or encyclopedia, but it may be free form.

6. End
     The "End" segment contains commands for printing indices and
     generating the table of contents, and the `@bye' command on a line
     of its own.


File: texinfo,  Node: Short Sample,  Next: History,  Prev: Six Parts,  Up: Overview

1.11 A Short Sample Texinfo File
================================

Here is a very short but complete Texinfo file, in the six conventional
parts enumerated in the previous section, so you can see how Texinfo
source appears in practice.  The first three parts of the file, from
`\input texinfo' through to `@end titlepage', look more intimidating
than they are: most of the material is standard boilerplate; when
writing a manual, you simply change the names as appropriate.

  *Note Beginning a File::, for full documentation on the commands
listed here.  *Note GNU Sample Texts::, for the full texts to be used
in GNU manuals.

  In the following, the sample text is _indented_; comments on it are
not.  The complete file, without interspersed comments, is shown in
*Note Short Sample Texinfo File::.

Part 1: Header
--------------

The header does not appear in either the Info file or the printed
output.  It sets various parameters, including the name of the Info
file and the title used in the header.

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

Part 2: Summary Description and Copyright
-----------------------------------------

A real manual includes more text here, according to the license under
which it is distributed.  *Note GNU Sample Texts::.

     @copying
     This is a short example of a complete Texinfo file, version 1.0.

     Copyright @copyright{} 2004 Free Software Foundation, Inc.
     @end copying

Part 3: Titlepage, Contents, Copyright
--------------------------------------

The titlepage segment does not appear in the online output, only in the
printed manual.  We use the `@insertcopying' command to include the
permission text from the previous section, instead of writing it out
again; it is output on the back of the title page.  The `@contents'
command generates a table of contents.

     @titlepage
     @title Sample Title

     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @c Output the table of contents at the beginning.
     @contents

Part 4: `Top' Node and Master Menu
----------------------------------

The `Top' node contains the master menu for the Info file.  Since the
printed manual uses a table of contents rather than a menu, it excludes
the `Top' node.  We also include the copying text again for the benefit
of online readers.  Since the copying text begins with a brief
description of the manual, no other text is needed in this case.  The
`@top' command itself helps `makeinfo' determine the relationships
between nodes.

     @ifnottex
     @node Top
     @top Short Sample

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu

Part 5: The Body of the Document
--------------------------------

The body segment contains all the text of the document, but not the
indices or table of contents.  This example illustrates a node and a
chapter containing an enumerated list.

     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first

     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate

Part 6: The End of the Document
-------------------------------

The end segment contains commands for generating an index in a node and
unnumbered chapter of its own, and the `@bye' command that marks the
end of the document.

     @node Index
     @unnumbered Index

     @printindex cp

     @bye

Some Results
------------

Here is what the contents of the first chapter of the sample look like:


     This is the first chapter.

     Here is a numbered list.

       1. This is the first item.

       2. This is the second item.


File: texinfo,  Node: History,  Prev: Short Sample,  Up: Overview

1.12 History
============

Richard M. Stallman invented the Texinfo format, wrote the initial
processors, and created Edition 1.0 of this manual.  Robert J.
Chassell greatly revised and extended the manual, starting with Edition
1.1.  Brian Fox was responsible for the standalone Texinfo distribution
until version 3.8, and wrote the standalone `makeinfo' and `info'
programs.  Karl Berry has continued maintenance since Texinfo 3.8
(manual edition 2.22).

  Our thanks go out to all who helped improve this work, particularly
the indefatigable Eli Zaretskii and Andreas Schwab, who have provided
patches beyond counting.  Franc,ois Pinard and David D. Zuhn,
tirelessly recorded and reported mistakes and obscurities.  Zack
Weinberg did the impossible by implementing the macro syntax in
`texinfo.tex'.  Special thanks go to Melissa Weisshaus for her frequent
reviews of nearly similar editions.  Dozens of others have contributed
patches and suggestions, they are gratefully acknowledged in the
`ChangeLog' file.  Our mistakes are our own.

  A bit of history: in the 1970's at CMU, Brian Reid developed a program
and format named Scribe to mark up documents for printing.  It used the
`@' character to introduce commands, as Texinfo does.  Much more
consequentially, it strived to describe document contents rather than
formatting, an idea wholeheartedly adopted by Texinfo.

  Meanwhile, people at MIT developed another, not too dissimilar format
called Bolio.  This then was converted to using TeX as its typesetting
language: BoTeX.  The earliest BoTeX version seems to have been 0.02 on
October 31, 1984.

  BoTeX could only be used as a markup language for documents to be
printed, not for online documents.  Richard Stallman (RMS) worked on
both Bolio and BoTeX.  He also developed a nifty on-line help format
called Info, and then combined BoTeX and Info to create Texinfo, a mark
up language for text that is intended to be read both online and as
printed hard copy.


File: texinfo,  Node: Texinfo Mode,  Next: Beginning a File,  Prev: Overview,  Up: Top

2 Using Texinfo Mode
********************

You may edit a Texinfo file with any text editor you choose.  A Texinfo
file is no different from any other ASCII file.  However, GNU Emacs
comes with a special mode, called Texinfo mode, that provides Emacs
commands and tools to help ease your work.

  This chapter describes features of GNU Emacs' Texinfo mode but not any
features of the Texinfo formatting language.  So if you are reading this
manual straight through from the beginning, you may want to skim through
this chapter briefly and come back to it after reading succeeding
chapters which describe the Texinfo formatting language in detail.

* Menu:

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.


File: texinfo,  Node: Texinfo Mode Overview,  Next: Emacs Editing,  Up: Texinfo Mode

2.1 Texinfo Mode Overview
=========================

Texinfo mode provides special features for working with Texinfo files.
You can:

   * Insert frequently used @-commands.

   * Automatically create `@node' lines.

   * Show the structure of a Texinfo source file.

   * Automatically create or update the `Next', `Previous', and `Up'
     pointers of a node.

   * Automatically create or update menus.

   * Automatically create a master menu.

   * Format a part or all of a file for Info.

   * Typeset and print part or all of a file.

  Perhaps the two most helpful features are those for inserting
frequently used @-commands and for creating node pointers and menus.


File: texinfo,  Node: Emacs Editing,  Next: Inserting,  Prev: Texinfo Mode Overview,  Up: Texinfo Mode

2.2 The Usual GNU Emacs Editing Commands
========================================

In most cases, the usual Text mode commands work the same in Texinfo
mode as they do in Text mode.  Texinfo mode adds new editing commands
and tools to GNU Emacs' general purpose editing features.  The major
difference concerns filling.  In Texinfo mode, the paragraph separation
variable and syntax table are redefined so that Texinfo commands that
should be on lines of their own are not inadvertently included in
paragraphs.  Thus, the `M-q' (`fill-paragraph') command will refill a
paragraph but not mix an indexing command on a line adjacent to it into
the paragraph.

  In addition, Texinfo mode sets the `page-delimiter' variable to the
value of `texinfo-chapter-level-regexp'; by default, this is a regular
expression matching the commands for chapters and their equivalents,
such as appendices.  With this value for the page delimiter, you can
jump from chapter title to chapter title with the `C-x ]'
(`forward-page') and `C-x [' (`backward-page') commands and narrow to a
chapter with the `C-x p' (`narrow-to-page') command.  (*Note Pages:
(emacs)Pages, for details about the page commands.)

  You may name a Texinfo file however you wish, but the convention is to
end a Texinfo file name with one of the extensions `.texinfo', `.texi',
`.txi', or `.tex'.  A longer extension is preferred, since it is
explicit, but a shorter extension may be necessary for operating
systems that limit the length of file names.  GNU Emacs automatically
enters Texinfo mode when you visit a file with a `.texinfo', `.texi' or
`.txi' extension.  Also, Emacs switches to Texinfo mode when you visit a
file that has `-*-texinfo-*-' in its first line.  If ever you are in
another mode and wish to switch to Texinfo mode, type `M-x
texinfo-mode'.

  Like all other Emacs features, you can customize or enhance Texinfo
mode as you wish.  In particular, the keybindings are very easy to
change.  The keybindings described here are the default or standard
ones.


File: texinfo,  Node: Inserting,  Next: Showing the Structure,  Prev: Emacs Editing,  Up: Texinfo Mode

2.3 Inserting Frequently Used Commands
======================================

Texinfo mode provides commands to insert various frequently used
@-commands into the buffer.  You can use these commands to save
keystrokes.

  The insert commands are invoked by typing `C-c' twice and then the
first letter of the @-command:

`C-c C-c c'
`M-x texinfo-insert-@code'
     Insert `@code{}' and put the cursor between the braces.

`C-c C-c d'
`M-x texinfo-insert-@dfn'
     Insert `@dfn{}' and put the cursor between the braces.

`C-c C-c e'
`M-x texinfo-insert-@end'
     Insert `@end' and attempt to insert the correct following word,
     such as `example' or `table'.  (This command does not handle
     nested lists correctly, but inserts the word appropriate to the
     immediately preceding list.)

`C-c C-c i'
`M-x texinfo-insert-@item'
     Insert `@item' and put the cursor at the beginning of the next
     line.

`C-c C-c k'
`M-x texinfo-insert-@kbd'
     Insert `@kbd{}' and put the cursor between the braces.

`C-c C-c n'
`M-x texinfo-insert-@node'
     Insert `@node' and a comment line listing the sequence for the
     `Next', `Previous', and `Up' nodes.  Leave point after the `@node'.

`C-c C-c o'
`M-x texinfo-insert-@noindent'
     Insert `@noindent' and put the cursor at the beginning of the next
     line.

`C-c C-c s'
`M-x texinfo-insert-@samp'
     Insert `@samp{}' and put the cursor between the braces.

`C-c C-c t'
`M-x texinfo-insert-@table'
     Insert `@table' followed by a <SPC> and leave the cursor after the
     <SPC>.

`C-c C-c v'
`M-x texinfo-insert-@var'
     Insert `@var{}' and put the cursor between the braces.

`C-c C-c x'
`M-x texinfo-insert-@example'
     Insert `@example' and put the cursor at the beginning of the next
     line.

`C-c C-c {'
`M-x texinfo-insert-braces'
     Insert `{}' and put the cursor between the braces.

`C-c C-c }'
`C-c C-c ]'
`M-x up-list'
     Move from between a pair of braces forward past the closing brace.
     Typing `C-c C-c ]' is easier than typing `C-c C-c }', which is,
     however, more mnemonic; hence the two keybindings.  (Also, you can
     move out from between braces by typing `C-f'.)

  To put a command such as `@code{...}' around an _existing_ word,
position the cursor in front of the word and type `C-u 1 C-c C-c c'.
This makes it easy to edit existing plain text.  The value of the
prefix argument tells Emacs how many words following point to include
between braces--`1' for one word, `2' for two words, and so on.  Use a
negative argument to enclose the previous word or words.  If you do not
specify a prefix argument, Emacs inserts the @-command string and
positions the cursor between the braces.  This feature works only for
those @-commands that operate on a word or words within one line, such
as `@kbd' and `@var'.

  This set of insert commands was created after analyzing the frequency
with which different @-commands are used in the `GNU Emacs Manual' and
the `GDB Manual'.  If you wish to add your own insert commands, you can
bind a keyboard macro to a key, use abbreviations, or extend the code
in `texinfo.el'.

  `C-c C-c C-d' (`texinfo-start-menu-description') is an insert command
that works differently from the other insert commands.  It inserts a
node's section or chapter title in the space for the description in a
menu entry line.  (A menu entry has three parts, the entry name, the
node name, and the description.  Only the node name is required, but a
description helps explain what the node is about.  *Note The Parts of a
Menu: Menu Parts.)

  To use `texinfo-start-menu-description', position point in a menu
entry line and type `C-c C-c C-d'.  The command looks for and copies
the title that goes with the node name, and inserts the title as a
description; it positions point at beginning of the inserted text so you
can edit it.  The function does not insert the title if the menu entry
line already contains a description.

  This command is only an aid to writing descriptions; it does not do
the whole job.  You must edit the inserted text since a title tends to
use the same words as a node name but a useful description uses
different words.


File: texinfo,  Node: Showing the Structure,  Next: Updating Nodes and Menus,  Prev: Inserting,  Up: Texinfo Mode

2.4 Showing the Section Structure of a File
===========================================

You can show the section structure of a Texinfo file by using the `C-c
C-s' command (`texinfo-show-structure').  This command shows the
section structure of a Texinfo file by listing the lines that begin
with the @-commands for `@chapter', `@section', and the like.  It
constructs what amounts to a table of contents.  These lines are
displayed in another buffer called the `*Occur*' buffer.  In that
buffer, you can position the cursor over one of the lines and use the
`C-c C-c' command (`occur-mode-goto-occurrence'), to jump to the
corresponding spot in the Texinfo file.

`C-c C-s'
`M-x texinfo-show-structure'
     Show the `@chapter', `@section', and such lines of a Texinfo file.

`C-c C-c'
`M-x occur-mode-goto-occurrence'
     Go to the line in the Texinfo file corresponding to the line under
     the cursor in the `*Occur*' buffer.

  If you call `texinfo-show-structure' with a prefix argument by typing
`C-u C-c C-s', it will list not only those lines with the @-commands
for `@chapter', `@section', and the like, but also the `@node' lines.
You can use `texinfo-show-structure' with a prefix argument to check
whether the `Next', `Previous', and `Up' pointers of an `@node' line
are correct.

  Often, when you are working on a manual, you will be interested only
in the structure of the current chapter.  In this case, you can mark
off the region of the buffer that you are interested in by using the
`C-x n n' (`narrow-to-region') command and `texinfo-show-structure'
will work on only that region.  To see the whole buffer again, use
`C-x n w' (`widen').  (*Note Narrowing: (emacs)Narrowing, for more
information about the narrowing commands.)

  In addition to providing the `texinfo-show-structure' command,
Texinfo mode sets the value of the page delimiter variable to match the
chapter-level @-commands.  This enables you to use the `C-x ]'
(`forward-page') and `C-x [' (`backward-page') commands to move forward
and backward by chapter, and to use the `C-x p' (`narrow-to-page')
command to narrow to a chapter.  *Note Pages: (emacs)Pages, for more
information about the page commands.


File: texinfo,  Node: Updating Nodes and Menus,  Next: Info Formatting,  Prev: Showing the Structure,  Up: Texinfo Mode

2.5 Updating Nodes and Menus
============================

Texinfo mode provides commands for automatically creating or updating
menus and node pointers.  The commands are called "update" commands
because their most frequent use is for updating a Texinfo file after you
have worked on it; but you can use them to insert the `Next',
`Previous', and `Up' pointers into an `@node' line that has none and to
create menus in a file that has none.

  If you do not use the updating commands, you need to write menus and
node pointers by hand, which is a tedious task.

* Menu:

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.


File: texinfo,  Node: Updating Commands,  Next: Updating Requirements,  Up: Updating Nodes and Menus

2.5.1 The Updating Commands
---------------------------

You can use the updating commands to:

   * insert or update the `Next', `Previous', and `Up' pointers of a
     node,

   * insert or update the menu for a section, and

   * create a master menu for a Texinfo source file.

  You can also use the commands to update all the nodes and menus in a
region or in a whole Texinfo file.

  The updating commands work only with conventional Texinfo files, which
are structured hierarchically like books.  In such files, a structuring
command line must follow closely after each `@node' line, except for
the `Top' `@node' line.  (A "structuring command line" is a line
beginning with `@chapter', `@section', or other similar command.)

  You can write the structuring command line on the line that follows
immediately after an `@node' line or else on the line that follows
after a single `@comment' line or a single `@ifinfo' line.  You cannot
interpose more than one line between the `@node' line and the
structuring command line; and you may interpose only an `@comment' line
or an `@ifinfo' line.

  Commands which work on a whole buffer require that the `Top' node be
followed by a node with an `@chapter' or equivalent-level command.  The
menu updating commands will not create a main or master menu for a
Texinfo file that has only `@chapter'-level nodes!  The menu updating
commands only create menus _within_ nodes for lower level nodes.  To
create a menu of chapters, you must provide a `Top' node.

  The menu updating commands remove menu entries that refer to other
Info files since they do not refer to nodes within the current buffer.
This is a deficiency.  Rather than use menu entries, you can use cross
references to refer to other Info files.  None of the updating commands
affect cross references.

  Texinfo mode has five updating commands that are used most often: two
are for updating the node pointers or menu of a single node (or a
region); two are for updating every node pointer and menu in a file;
and one, the `texinfo-master-menu' command, is for creating a master
menu for a complete file, and optionally, for updating every node and
menu in the whole Texinfo file.

  The `texinfo-master-menu' command is the primary command:

`C-c C-u m'
`M-x texinfo-master-menu'
     Create or update a master menu that includes all the other menus
     (incorporating the descriptions from pre-existing menus, if any).

     With an argument (prefix argument, `C-u,' if interactive), first
     create or update all the nodes and all the regular menus in the
     buffer before constructing the master menu.  (*Note The Top Node
     and Master Menu: The Top Node, for more about a master menu.)

     For `texinfo-master-menu' to work, the Texinfo file must have a
     `Top' node and at least one subsequent node.

     After extensively editing a Texinfo file, you can type the
     following:

          C-u M-x texinfo-master-menu
     or
          C-u C-c C-u m

     This updates all the nodes and menus completely and all at once.

  The other major updating commands do smaller jobs and are designed for
the person who updates nodes and menus as he or she writes a Texinfo
file.

  The commands are:

`C-c C-u C-n'
`M-x texinfo-update-node'
     Insert the `Next', `Previous', and `Up' pointers for the node that
     point is within (i.e., for the `@node' line preceding point).  If
     the `@node' line has pre-existing `Next', `Previous', or `Up'
     pointers in it, the old pointers are removed and new ones inserted.
     With an argument (prefix argument, `C-u', if interactive), this
     command updates all `@node' lines in the region (which is the text
     between point and mark).

`C-c C-u C-m'
`M-x texinfo-make-menu'
     Create or update the menu in the node that point is within.  With
     an argument (`C-u' as prefix argument, if interactive), the
     command makes or updates menus for the nodes which are either
     within or a part of the region.

     Whenever `texinfo-make-menu' updates an existing menu, the
     descriptions from that menu are incorporated into the new menu.
     This is done by copying descriptions from the existing menu to the
     entries in the new menu that have the same node names.  If the
     node names are different, the descriptions are not copied to the
     new menu.

`C-c C-u C-e'
`M-x texinfo-every-node-update'
     Insert or update the `Next', `Previous', and `Up' pointers for
     every node in the buffer.

`C-c C-u C-a'
`M-x texinfo-all-menus-update'
     Create or update all the menus in the buffer.  With an argument
     (`C-u' as prefix argument, if interactive), first insert or update
     all the node pointers before working on the menus.

     If a master menu exists, the `texinfo-all-menus-update' command
     updates it; but the command does not create a new master menu if
     none already exists.  (Use the `texinfo-master-menu' command for
     that.)

     When working on a document that does not merit a master menu, you
     can type the following:

          C-u C-c C-u C-a
     or
          C-u M-x texinfo-all-menus-update

     This updates all the nodes and menus.

  The `texinfo-column-for-description' variable specifies the column to
which menu descriptions are indented.  By default, the value is 32
although it is often useful to reduce it to as low as 24.  You can set
the variable via customization (*note Changing an Option:
(emacs)Changing an Option.) or with the `M-x set-variable' command
(*note Examining and Setting Variables: (emacs)Examining.).

  Also, the `texinfo-indent-menu-description' command may be used to
indent existing menu descriptions to a specified column.  Finally, if
you wish, you can use the `texinfo-insert-node-lines' command to insert
missing `@node' lines into a file.  (*Note Other Updating Commands::,
for more information.)


File: texinfo,  Node: Updating Requirements,  Next: Other Updating Commands,  Prev: Updating Commands,  Up: Updating Nodes and Menus

2.5.2 Updating Requirements
---------------------------

To use the updating commands, you must organize the Texinfo file
hierarchically with chapters, sections, subsections, and the like.
When you construct the hierarchy of the manual, do not `jump down' more
than one level at a time: you can follow the `Top' node with a chapter,
but not with a section; you can follow a chapter with a section, but
not with a subsection.  However, you may `jump up' any number of levels
at one time--for example, from a subsection to a chapter.

  Each `@node' line, with the exception of the line for the `Top' node,
must be followed by a line with a structuring command such as
`@chapter', `@section', or `@unnumberedsubsec'.

  Each `@node' line/structuring-command line combination must look
either like this:

     @node     Comments,  Minimum, Conventions, Overview
     @comment  node-name, next,    previous,    up
     @section Comments

  or like this (without the `@comment' line):

     @node Comments, Minimum, Conventions, Overview
     @section Comments

  or like this (without the explicit node pointers):

     @node Comments
     @section Comments

In this example, `Comments' is the name of both the node and the
section.  The next node is called `Minimum' and the previous node is
called `Conventions'.  The `Comments' section is within the `Overview'
node, which is specified by the `Up' pointer.  (Instead of an
`@comment' line, you may also write an `@ifinfo' line.)

  If a file has a `Top' node, it must be called `top' or `Top' and be
the first node in the file.

  The menu updating commands create a menu of sections within a chapter,
a menu of subsections within a section, and so on.  This means that you
must have a `Top' node if you want a menu of chapters.

  Incidentally, the `makeinfo' command will create an Info file for a
hierarchically organized Texinfo file that lacks `Next', `Previous' and
`Up' pointers.  Thus, if you can be sure that your Texinfo file will be
formatted with `makeinfo', you have no need for the update node
commands.  (*Note Creating an Info File::, for more information about
`makeinfo'.)  However, both `makeinfo' and the `texinfo-format-...'
commands require that you insert menus in the file.


File: texinfo,  Node: Other Updating Commands,  Prev: Updating Requirements,  Up: Updating Nodes and Menus

2.5.3 Other Updating Commands
-----------------------------

In addition to the five major updating commands, Texinfo mode possesses
several less frequently used updating commands:

`M-x texinfo-insert-node-lines'
     Insert `@node' lines before the `@chapter', `@section', and other
     sectioning commands wherever they are missing throughout a region
     in a Texinfo file.

     With an argument (`C-u' as prefix argument, if interactive), the
     `texinfo-insert-node-lines' command not only inserts `@node' lines
     but also inserts the chapter or section titles as the names of the
     corresponding nodes.  In addition, it inserts the titles as node
     names in pre-existing `@node' lines that lack names.  Since node
     names should be more concise than section or chapter titles, you
     must manually edit node names so inserted.

     For example, the following marks a whole buffer as a region and
     inserts `@node' lines and titles throughout:

          C-x h C-u M-x texinfo-insert-node-lines

     This command inserts titles as node names in `@node' lines; the
     `texinfo-start-menu-description' command (*note Inserting
     Frequently Used Commands: Inserting.) inserts titles as
     descriptions in menu entries, a different action.  However, in
     both cases, you need to edit the inserted text.

`M-x texinfo-multiple-files-update'
     Update nodes and menus in a document built from several separate
     files.  With `C-u' as a prefix argument, create and insert a
     master menu in the outer file.  With a numeric prefix argument,
     such as `C-u 2', first update all the menus and all the `Next',
     `Previous', and `Up' pointers of all the included files before
     creating and inserting a master menu in the outer file.  The
     `texinfo-multiple-files-update' command is described in the
     appendix on `@include' files.  *Note
     texinfo-multiple-files-update::.

`M-x texinfo-indent-menu-description'
     Indent every description in the menu following point to the
     specified column.  You can use this command to give yourself more
     space for descriptions.  With an argument (`C-u' as prefix
     argument, if interactive), the `texinfo-indent-menu-description'
     command indents every description in every menu in the region.
     However, this command does not indent the second and subsequent
     lines of a multi-line description.

`M-x texinfo-sequential-node-update'
     Insert the names of the nodes immediately following and preceding
     the current node as the `Next' or `Previous' pointers regardless
     of those nodes' hierarchical level.  This means that the `Next'
     node of a subsection may well be the next chapter.  Sequentially
     ordered nodes are useful for novels and other documents that you
     read through sequentially.  (However, in Info, the `g *' command
     lets you look through the file sequentially, so sequentially
     ordered nodes are not strictly necessary.)  With an argument
     (prefix argument, if interactive), the
     `texinfo-sequential-node-update' command sequentially updates all
     the nodes in the region.


File: texinfo,  Node: Info Formatting,  Next: Printing,  Prev: Updating Nodes and Menus,  Up: Texinfo Mode

2.6 Formatting for Info
=======================

Texinfo mode provides several commands for formatting part or all of a
Texinfo file for Info.  Often, when you are writing a document, you
want to format only part of a file--that is, a region.

  You can use either the `texinfo-format-region' or the
`makeinfo-region' command to format a region:

`C-c C-e C-r'
`M-x texinfo-format-region'
`C-c C-m C-r'
`M-x makeinfo-region'
     Format the current region for Info.

  You can use either the `texinfo-format-buffer' or the
`makeinfo-buffer' command to format a whole buffer:

`C-c C-e C-b'
`M-x texinfo-format-buffer'
`C-c C-m C-b'
`M-x makeinfo-buffer'
     Format the current buffer for Info.

  For example, after writing a Texinfo file, you can type the following:

     C-u C-c C-u m
or
     C-u M-x texinfo-master-menu

This updates all the nodes and menus.  Then type the following to create
an Info file:

     C-c C-m C-b
or
     M-x makeinfo-buffer

  For TeX or the Info formatting commands to work, the file _must_
include a line that has `@setfilename' in its header.

  *Note Creating an Info File::, for details about Info formatting.


File: texinfo,  Node: Printing,  Next: Texinfo Mode Summary,  Prev: Info Formatting,  Up: Texinfo Mode

2.7 Printing
============

Typesetting and printing a Texinfo file is a multi-step process in which
you first create a file for printing (called a DVI file), and then
print the file.  Optionally, you may also create indices.  To do this,
you must run the `texindex' command after first running the `tex'
typesetting command; and then you must run the `tex' command again.  Or
else run the `texi2dvi' command which automatically creates indices as
needed (*note Format with texi2dvi::).

  Often, when you are writing a document, you want to typeset and print
only part of a file to see what it will look like.  You can use the
`texinfo-tex-region' and related commands for this purpose.  Use the
`texinfo-tex-buffer' command to format all of a buffer.

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     Run `texi2dvi' on the buffer.  In addition to running TeX on the
     buffer, this command automatically creates or updates indices as
     needed.

`C-c C-t C-r'
`M-x texinfo-tex-region'
     Run TeX on the region.

`C-c C-t C-i'
`M-x texinfo-texindex'
     Run `texindex' to sort the indices of a Texinfo file formatted with
     `texinfo-tex-region'.  The `texinfo-tex-region' command does not
     run `texindex' automatically; it only runs the `tex' typesetting
     command.  You must run the `texinfo-tex-region' command a second
     time after sorting the raw index files with the `texindex'
     command.  (Usually, you do not format an index when you format a
     region, only when you format a buffer.  Now that the `texi2dvi'
     command exists, there is little or no need for this command.)

`C-c C-t C-p'
`M-x texinfo-tex-print'
     Print the file (or the part of the file) previously formatted with
     `texinfo-tex-buffer' or `texinfo-tex-region'.

  For `texinfo-tex-region' or `texinfo-tex-buffer' to work, the file
_must_ start with a `\input texinfo' line and must include an
`@settitle' line.  The file must end with `@bye' on a line by itself.
(When you use `texinfo-tex-region', you must surround the `@settitle'
line with start-of-header and end-of-header lines.)

  *Note Hardcopy::, for a description of the other TeX related
commands, such as `tex-show-print-queue'.


File: texinfo,  Node: Texinfo Mode Summary,  Prev: Printing,  Up: Texinfo Mode

2.8 Texinfo Mode Summary
========================

In Texinfo mode, each set of commands has default keybindings that
begin with the same keys.  All the commands that are custom-created for
Texinfo mode begin with `C-c'.  The keys are somewhat mnemonic.

Insert Commands
---------------

The insert commands are invoked by typing `C-c' twice and then the
first letter of the @-command to be inserted.  (It might make more
sense mnemonically to use `C-c C-i', for `custom insert', but `C-c C-c'
is quick to type.)

     C-c C-c c       Insert `@code'.
     C-c C-c d       Insert `@dfn'.
     C-c C-c e       Insert `@end'.
     C-c C-c i       Insert `@item'.
     C-c C-c n       Insert `@node'.
     C-c C-c s       Insert `@samp'.
     C-c C-c v       Insert `@var'.
     C-c C-c {       Insert braces.
     C-c C-c ]
     C-c C-c }       Move out of enclosing braces.

     C-c C-c C-d     Insert a node's section title
                    in the space for the description
                    in a menu entry line.

Show Structure
--------------

The `texinfo-show-structure' command is often used within a narrowed
region.

     C-c C-s         List all the headings.

The Master Update Command
-------------------------

The `texinfo-master-menu' command creates a master menu; and can be
used to update every node and menu in a file as well.

     C-c C-u m
     M-x texinfo-master-menu
                    Create or update a master menu.

     C-u C-c C-u m   With `C-u' as a prefix argument, first
                    create or update all nodes and regular
                    menus, and then create a master menu.

Update Pointers
---------------

The update pointer commands are invoked by typing `C-c C-u' and then
either `C-n' for `texinfo-update-node' or `C-e' for
`texinfo-every-node-update'.

     C-c C-u C-n     Update a node.
     C-c C-u C-e     Update every node in the buffer.

Update Menus
------------

Invoke the  update menu commands by typing `C-c C-u' and then either
`C-m' for `texinfo-make-menu' or `C-a' for `texinfo-all-menus-update'.
To update both nodes and menus at the same time, precede `C-c C-u C-a'
with `C-u'.

     C-c C-u C-m     Make or update a menu.

     C-c C-u C-a     Make or update all
                    menus in a buffer.

     C-u C-c C-u C-a With `C-u' as a prefix argument,
                    first create or update all nodes and
                    then create or update all menus.

Format for Info
---------------

The Info formatting commands that are written in Emacs Lisp are invoked
by typing `C-c C-e' and then either `C-r' for a region or `C-b' for the
whole buffer.

  The Info formatting commands that are written in C and based on the
`makeinfo' program are invoked by typing `C-c C-m' and then either
`C-r' for a region or `C-b' for the whole buffer.

Use the `texinfo-format...' commands:

     C-c C-e C-r     Format the region.
     C-c C-e C-b     Format the buffer.

Use `makeinfo':

     C-c C-m C-r     Format the region.
     C-c C-m C-b     Format the buffer.
     C-c C-m C-l     Recenter the `makeinfo' output buffer.
     C-c C-m C-k     Kill the `makeinfo' formatting job.

Typeset and Print
-----------------

The TeX typesetting and printing commands are invoked by typing `C-c
C-t' and then another control command: `C-r' for `texinfo-tex-region',
`C-b' for `texinfo-tex-buffer', and so on.

     C-c C-t C-r     Run TeX on the region.
     C-c C-t C-b     Run `texi2dvi' on the buffer.
     C-c C-t C-i     Run `texindex'.
     C-c C-t C-p     Print the DVI file.
     C-c C-t C-q     Show the print queue.
     C-c C-t C-d     Delete a job from the print queue.
     C-c C-t C-k     Kill the current TeX formatting job.
     C-c C-t C-x     Quit a currently stopped TeX formatting job.
     C-c C-t C-l     Recenter the output buffer.

Other Updating Commands
-----------------------

The remaining updating commands do not have standard keybindings because
they are rarely used.

     M-x texinfo-insert-node-lines
                    Insert missing `@node' lines in region.
                    With `C-u' as a prefix argument,
                    use section titles as node names.

     M-x texinfo-multiple-files-update
                    Update a multi-file document.
                    With `C-u 2' as a prefix argument,
                    create or update all nodes and menus
                    in all included files first.

     M-x texinfo-indent-menu-description
                    Indent descriptions.

     M-x texinfo-sequential-node-update
                    Insert node pointers in strict sequence.


File: texinfo,  Node: Beginning a File,  Next: Ending a File,  Prev: Texinfo Mode,  Up: Top

3 Beginning a Texinfo File
**************************

Certain pieces of information must be provided at the beginning of a
Texinfo file, such as the name for the output file(s), the title of the
document, and the Top node.  A table of contents is also generally
produced here.

  This chapter expands on the minimal complete Texinfo source file
previously given (*note Six Parts::).  It describes the numerous
commands for handling the traditional frontmatter items in Texinfo.

  Straight text outside of any command before the Top node should be
avoided.  Such text is treated differently in the different output
formats: visible in TeX and HTML, by default not shown in Info readers,
and so on.

* Menu:

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* Contents::                    How to create a table of contents.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.


File: texinfo,  Node: Sample Beginning,  Next: Texinfo File Header,  Up: Beginning a File

3.1 Sample Texinfo File Beginning
=================================

The following sample shows what is needed.  The elements given here are
explained in more detail in the following sections.  Other commands are
often included at the beginning of Texinfo files, but the ones here are
the most critical.

  *Note GNU Sample Texts::, for the full texts to be used in GNU
manuals.

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFONAME.info
     @settitle NAME-OF-MANUAL VERSION
     @c %**end of header

     @copying
     This manual is for PROGRAM, version VERSION.

     Copyright @copyright{} YEARS COPYRIGHT-OWNER.

     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR

     @c  The following two commands
     @c  start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying

     Published by ...
     @end titlepage

     @c So the toc is printed at the start.
     @contents

     @ifnottex
     @node Top
     @top TITLE

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    Getting started ...
     * Second Chapter::          ...
      ...
     * Copying::          Your rights and freedoms.
     @end menu

     @node First Chapter
     @chapter First Chapter

     @cindex first chapter
     @cindex chapter, first
     ...


File: texinfo,  Node: Texinfo File Header,  Next: Document Permissions,  Prev: Sample Beginning,  Up: Beginning a File

3.2 Texinfo File Header
=======================

Texinfo files start with at least three lines that provide Info and TeX
with necessary information.  These are the `\input texinfo' line, the
`@settitle' line, and the `@setfilename' line.

  Also, if you want to format just part of the Texinfo file, you must
write the `@settitle' and `@setfilename' lines between start-of-header
and end-of-header lines.  The start- and end-of-header lines are
optional, but they do no harm, so you might as well always include them.

  Any command that affects document formatting as a whole makes sense to
include in the header.  `@synindex' (*note synindex::), for instance,
is another command often included in the header.  *Note GNU Sample
Texts::, for complete sample texts.

  Thus, the beginning of a Texinfo file generally looks like this:

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

* Menu:

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.


File: texinfo,  Node: First Line,  Next: Start of Header,  Up: Texinfo File Header

3.2.1 The First Line of a Texinfo File
--------------------------------------

Every Texinfo file that is to be the top-level input to TeX must begin
with a line that looks like this:

     \input texinfo   @c -*-texinfo-*-

This line serves two functions:

  1. When the file is processed by TeX, the `\input texinfo' command
     tells TeX to load the macros needed for processing a Texinfo file.
     These are in a file called `texinfo.tex', which should have been
     installed on your system along with either the TeX or Texinfo
     software.  TeX uses the backslash, `\', to mark the beginning of a
     command, exactly as Texinfo uses `@'.  The `texinfo.tex' file
     causes the switch from `\' to `@'; before the switch occurs, TeX
     requires `\', which is why it appears at the beginning of the file.

  2. When the file is edited in GNU Emacs, the `-*-texinfo-*-' mode
     specification tells Emacs to use Texinfo mode.


File: texinfo,  Node: Start of Header,  Next: setfilename,  Prev: First Line,  Up: Texinfo File Header

3.2.2 Start of Header
---------------------

A start-of-header line is a Texinfo comment that looks like this:

     @c %**start of header

  Write the start-of-header line on the second line of a Texinfo file.
Follow the start-of-header line with `@setfilename' and `@settitle'
lines and, optionally, with other commands that globally affect the
document formatting, such as `@synindex' or `@footnotestyle'; and then
by an end-of-header line (*note End of Header::).

  The start- and end-of-header lines allow you to format only part of a
Texinfo file for Info or printing.  *Note texinfo-format commands::.

  The odd string of characters, `%**', is to ensure that no other
comment is accidentally taken for a start-of-header line.  You can
change it if you wish by setting the `tex-start-of-header' and/or
`tex-end-of-header' Emacs variables.  *Note Texinfo Mode Printing::.


File: texinfo,  Node: setfilename,  Next: settitle,  Prev: Start of Header,  Up: Texinfo File Header

3.2.3 `@setfilename': Set the output file name
----------------------------------------------

In order to serve as the primary input file for either `makeinfo' or
TeX, a Texinfo file must contain a line that looks like this:

     @setfilename INFO-FILE-NAME

  Write the `@setfilename' command at the beginning of a line and
follow it on the same line by the Info file name.  Do not write anything
else on the line; anything on the line after the command is considered
part of the file name, including what would otherwise be a comment.

  The Info formatting commands ignore everything written before the
`@setfilename' line, which is why the very first line of the file (the
`\input' line) does not show up in the output.

  The `@setfilename' line specifies the name of the output file to be
generated.  This name must be different from the name of the Texinfo
file.  There are two conventions for choosing the name: you can either
remove the extension (such as `.texi') entirely from the input file
name, or, preferably, replace it with the `.info' extension.

  Although an explicit `.info' extension is preferable, some operating
systems cannot handle long file names.  You can run into a problem even
when the file name you specify is itself short enough.  This occurs
because the Info formatters split a long Info file into short indirect
subfiles, and name them by appending `-1', `-2', ..., `-10', `-11', and
so on, to the original file name.  (*Note Tag and Split Files::.)  The
subfile name `texinfo.info-10', for example, is too long for old
systems with a 14-character limit on filenames; so the Info file name
for this document is `texinfo' rather than `texinfo.info'.  When
`makeinfo' is running on operating systems such as MS-DOS which impose
severe limits on file names, it may remove some characters from the
original file name to leave enough space for the subfile suffix, thus
producing files named `texin-10', `gcc.i12', etc.

  When producing HTML output, `makeinfo' will replace any extension
with `html', or add `.html' if the given name has no extension.

  The `@setfilename' line produces no output when you typeset a manual
with TeX, but it is nevertheless essential: it opens the index,
cross-reference, and other auxiliary files used by Texinfo, and also
reads `texinfo.cnf' if that file is present on your system (*note
Preparing for TeX: Preparing for TeX.).


File: texinfo,  Node: settitle,  Next: End of Header,  Prev: setfilename,  Up: Texinfo File Header

3.2.4 `@settitle': Set the document title
-----------------------------------------

In order to be made into a printed manual, a Texinfo file must contain
a line that looks like this:

     @settitle TITLE

  Write the `@settitle' command at the beginning of a line and follow
it on the same line by the title.  This tells TeX the title to use in a
header or footer.  Do not write anything else on the line; anything on
the line after the command is considered part of the title, including
what would otherwise be a comment.

  The `@settitle' command should precede everything that generates
actual output.  The best place for it is right after the `@setfilename'
command (see the previous section).

  In the HTML file produced by `makeinfo', TITLE serves as the document
`<title>'.  It also becomes the default document description in the
`<head>' part (*note documentdescription::).

  The title in the `@settitle' command does not affect the title as it
appears on the title page.  Thus, the two do not need not match
exactly.  A practice we recommend is to include the version or edition
number of the manual in the `@settitle' title; on the title page, the
version number generally appears as a `@subtitle' so it would be
omitted from the `@title'.  *Note titlepage::.

  Conventionally, when TeX formats a Texinfo file for double-sided
output, the title is printed in the left-hand (even-numbered) page
headings and the current chapter title is printed in the right-hand
(odd-numbered) page headings.  (TeX learns the title of each chapter
from each `@chapter' command.)  By default, no page footer is printed.

  Even if you are printing in a single-sided style, TeX looks for an
`@settitle' command line, in case you include the manual title in the
heading.

  TeX prints page headings only for that text that comes after the
`@end titlepage' command in the Texinfo file, or that comes after an
`@headings' command that turns on headings.  (*Note The `@headings'
Command: headings on off, for more information.)

  You may, if you wish, create your own, customized headings and
footings.  *Note Headings::, for a detailed discussion of this.


File: texinfo,  Node: End of Header,  Prev: settitle,  Up: Texinfo File Header

3.2.5 End of Header
-------------------

Follow the header lines with an end-of-header line, which is a Texinfo
comment that looks like this:

     @c %**end of header

  *Note Start of Header::.


File: texinfo,  Node: Document Permissions,  Next: Titlepage & Copyright Page,  Prev: Texinfo File Header,  Up: Beginning a File

3.3 Document Permissions
========================

The copyright notice and copying permissions for a document need to
appear in several places in the various Texinfo output formats.
Therefore, Texinfo provides a command (`@copying') to declare this text
once, and another command (`@insertcopying') to insert the text at
appropriate points.

* Menu:

* copying::                     Declare the document's copying permissions.
* insertcopying::               Where to insert the permissions.


File: texinfo,  Node: copying,  Next: insertcopying,  Up: Document Permissions

3.3.1 `@copying': Declare Copying Permissions
---------------------------------------------

The `@copying' command should be given very early in the document; the
recommended location is right after the header material (*note Texinfo
File Header::).  It conventionally consists of a sentence or two about
what the program is, identification of the documentation itself, the
legal copyright line, and the copying permissions.  Here is a skeletal
example:

     @copying
     This manual is for PROGRAM (version VERSION, updated
     DATE), which ...

     Copyright @copyright{} YEARS COPYRIGHT-OWNER.

     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

  The `@quotation' has no legal significance; it's there to improve
readability in some contexts.

  *Note GNU Sample Texts::, for the full text to be used in GNU manuals.
*Note GNU Free Documentation License::, for the license itself under
which GNU and other free manuals are distributed.  You need to include
the license as an appendix to your document.

  The text of `@copying' is output as a comment at the beginning of
Info, HTML, and XML output files.  It is _not_ output implicitly in
plain text or TeX; it's up to you to use `@insertcopying' to emit the
copying information.  See the next section for details.

  The `@copyright{}' command generates a `c' inside a circle in output
formats that support this (print and HTML).  In the other formats (Info
and plain text), it generates `(C)'.  The copyright notice itself has
the following legally defined sequence:

     Copyright (C) YEARS COPYRIGHT-OWNER.

  The word `Copyright' must always be written in English, even if the
document is otherwise written in another language.  This is due to
international law.

  The list of years should include all years in which a version was
completed (even if it was released in a subsequent year).  Ranges are
not allowed; each year must be written out individually and in full,
separated by commas.

  The copyright owner (or owners) is whoever holds legal copyright on
the work.  In the case of works assigned to the FSF, the owner is `Free
Software Foundation, Inc.'.

  The copyright `line' may actually be split across multiple lines,
both in the source document and in the output.  This often happens for
documents with a long history, having many different years of
publication.

  *Note Copyright Notices: (maintain)Copyright Notices, for additional
information.


File: texinfo,  Node: insertcopying,  Prev: copying,  Up: Document Permissions

3.3.2 `@insertcopying': Include Permissions Text
------------------------------------------------

The `@insertcopying' command is simply written on a line by itself,
like this:

     @insertcopying

  This inserts the text previously defined by `@copying'.  To meet
legal requirements, it must be used on the copyright page in the printed
manual (*note Copyright::).

  We also strongly recommend using `@insertcopying' in the Top node of
your manual (*note The Top Node::), although it is not required
legally.  Here's why:

  The `@copying' command itself causes the permissions text to appear
in an Info file _before_ the first node.  The text is also copied into
the beginning of each split Info output file, as is legally necessary.
This location implies a human reading the manual using Info does _not_
see this text (except when using the advanced Info command `g *').
Therefore, an explicit `@insertcopying' in the Top node makes it
apparent to readers that the manual is free.

  Similarly, the `@copying' text is automatically included at the
beginning of each HTML output file, as an HTML comment.  Again, this
text is not visible (unless the reader views the HTML source).  And
therefore again, the `@insertcopying' in the Top node is valuable
because it makes the copying permissions visible and thus promotes
freedom.

  The permissions text defined by `@copying' also appears automatically
at the beginning of the XML output file.


File: texinfo,  Node: Titlepage & Copyright Page,  Next: Contents,  Prev: Document Permissions,  Up: Beginning a File

3.4 Title and Copyright Pages
=============================

In hard copy output, the manual's name and author are usually printed on
a title page.  Copyright information is usually printed on the back of
the title page.

  The title and copyright pages appear in the printed manual, but not in
the Info file.  Because of this, it is possible to use several slightly
obscure TeX typesetting commands that cannot be used in an Info file.
In addition, this part of the beginning of a Texinfo file contains the
text of the copying permissions that appears in the printed manual.

  You may wish to include titlepage-like information for plain text
output.  Simply place any such leading material between `@ifplaintext'
and `@end ifplaintext'; `makeinfo' includes this when writing plain
text (`--no-headers'), along with an `@insertcopying'.

* Menu:

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                 and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                 and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.


File: texinfo,  Node: titlepage,  Next: titlefont center sp,  Up: Titlepage & Copyright Page

3.4.1 `@titlepage'
------------------

Start the material for the title page and following copyright page with
`@titlepage' on a line by itself and end it with `@end titlepage' on a
line by itself.

  The `@end titlepage' command starts a new page and turns on page
numbering.  (*Note Page Headings: Headings, for details about how to
generate page headings.)  All the material that you want to appear on
unnumbered pages should be put between the `@titlepage' and `@end
titlepage' commands.  You can force the table of contents to appear
there with the `@setcontentsaftertitlepage' command (*note Contents::).

  By using the `@page' command you can force a page break within the
region delineated by the `@titlepage' and `@end titlepage' commands and
thereby create more than one unnumbered page.  This is how the
copyright page is produced.  (The `@titlepage' command might perhaps
have been better named the `@titleandadditionalpages' command, but that
would have been rather long!)

  When you write a manual about a computer program, you should write the
version of the program to which the manual applies on the title page.
If the manual changes more frequently than the program or is independent
of it, you should also include an edition number(1) for the manual.
This helps readers keep track of which manual is for which version of
the program.  (The `Top' node should also contain this information; see
*Note The Top Node::.)

  Texinfo provides two main methods for creating a title page.  One
method uses the `@titlefont', `@sp', and `@center' commands to generate
a title page in which the words on the page are centered.

  The second method uses the `@title', `@subtitle', and `@author'
commands to create a title page with black rules under the title and
author lines and the subtitle text set flush to the right hand side of
the page.  With this method, you do not specify any of the actual
formatting of the title page.  You specify the text you want, and
Texinfo does the formatting.

  You may use either method, or you may combine them; see the examples
in the sections below.

  For extremely simple documents, and for the bastard title page in
traditional book frontmatter, Texinfo also provides a command
`@shorttitlepage' which takes the rest of the line as the title.  The
argument is typeset on a page by itself and followed by a blank page.

  ---------- Footnotes ----------

  (1) We have found that it is helpful to refer to versions of
independent manuals as `editions' and versions of programs as
`versions'; otherwise, we find we are liable to confuse each other in
conversation by referring to both the documentation and the software
with the same words.


File: texinfo,  Node: titlefont center sp,  Next: title subtitle author,  Prev: titlepage,  Up: Titlepage & Copyright Page

3.4.2 `@titlefont', `@center', and `@sp'
----------------------------------------

You can use the `@titlefont', `@sp', and `@center' commands to create a
title page for a printed document.  (This is the first of the two
methods for creating a title page in Texinfo.)

  Use the `@titlefont' command to select a large font suitable for the
title itself.  You can use `@titlefont' more than once if you have an
especially long title.

  For HTML output, each `@titlefont' command produces an `<h1>'
heading, but the HTML document `<title>' is not affected.  For that,
you must put an `@settitle' command before the `@titlefont' command
(*note settitle::).

  For example:

     @titlefont{Texinfo}

  Use the `@center' command at the beginning of a line to center the
remaining text on that line.  Thus,

     @center @titlefont{Texinfo}

centers the title, which in this example is "Texinfo" printed in the
title font.

  Use the `@sp' command to insert vertical space.  For example:

     @sp 2

This inserts two blank lines on the printed page.  (*Note `@sp': sp,
for more information about the `@sp' command.)

  A template for this method looks like this:

     @titlepage
     @sp 10
     @center @titlefont{NAME-OF-MANUAL-WHEN-PRINTED}
     @sp 2
     @center SUBTITLE-IF-ANY
     @sp 2
     @center AUTHOR
     ...
     @end titlepage

  The spacing of the example fits an 8.5 by 11 inch manual.

  You can in fact use these commands anywhere, not just on a title page,
but since they are not logical markup commands, we don't recommend them.


File: texinfo,  Node: title subtitle author,  Next: Copyright,  Prev: titlefont center sp,  Up: Titlepage & Copyright Page

3.4.3 `@title', `@subtitle', and `@author'
------------------------------------------

You can use the `@title', `@subtitle', and `@author' commands to create
a title page in which the vertical and horizontal spacing is done for
you automatically.  This contrasts with the method described in the
previous section, in which the `@sp' command is needed to adjust
vertical spacing.

  Write the `@title', `@subtitle', or `@author' commands at the
beginning of a line followed by the title, subtitle, or author.  These
commands are only effective in TeX output; it's an error to use them
anywhere except within `@titlepage'.

  The `@title' command produces a line in which the title is set flush
to the left-hand side of the page in a larger than normal font.  The
title is underlined with a black rule.  Only a single line is allowed;
the `@*' command may not be used to break the title into two lines.  To
handle very long titles, you may find it profitable to use both
`@title' and `@titlefont'; see the final example in this section.

  The `@subtitle' command sets subtitles in a normal-sized font flush
to the right-hand side of the page.

  The `@author' command sets the names of the author or authors in a
middle-sized font flush to the left-hand side of the page on a line
near the bottom of the title page.  The names are underlined with a
black rule that is thinner than the rule that underlines the title.
(The black rule only occurs if the `@author' command line is followed
by an `@page' command line.)

  There are two ways to use the `@author' command: you can write the
name or names on the remaining part of the line that starts with an
`@author' command:

     @author by Jane Smith and John Doe

or you can write the names one above each other by using two (or more)
`@author' commands:

     @author Jane Smith
     @author John Doe

(Only the bottom name is underlined with a black rule.)

  A template for this method looks like this:

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR
     @page
     ...
     @end titlepage

  You may also combine the `@titlefont' method described in the
previous section and `@title' method described in this one.  This may
be useful if you have a very long title.  Here is a real-life example:

     @titlepage
     @titlefont{GNU Software}
     @sp 1
     @title for MS-Windows and MS-DOS
     @subtitle Edition @value{e} for Release @value{cde}
     @author by Daniel Hagerty, Melissa Weisshaus
     @author and Eli Zaretskii

(The use of `@value' here is explained in *Note value Example::.


File: texinfo,  Node: Copyright,  Next: end titlepage,  Prev: title subtitle author,  Up: Titlepage & Copyright Page

3.4.4 Copyright Page
--------------------

By international treaty, the copyright notice for a book must be either
on the title page or on the back of the title page.  When the copyright
notice is on the back of the title page, that page is customarily not
numbered.  Therefore, in Texinfo, the information on the copyright page
should be within `@titlepage' and `@end titlepage' commands.

  Use the `@page' command to cause a page break.  To push the copyright
notice and the other text on the copyright page towards the bottom of
the page, use the following incantantion after `@page':

     @vskip 0pt plus 1filll

This is a TeX command that is not supported by the Info formatting
commands.  The `@vskip' command inserts whitespace.  The `0pt plus
1filll' means to put in zero points of mandatory whitespace, and as
much optional whitespace as needed to push the following text to the
bottom of the page.  Note the use of three `l's in the word `filll';
this is correct.

  To insert the copyright text itself, write `@insertcopying' next
(*note Document Permissions::):

     @insertcopying

  Follow the copying text by the publisher, ISBN numbers, cover art
credits, and other such information.

  Here is an example putting all this together:

     @titlepage
     ...
     @page
     @vskip 0pt plus 1filll
     @insertcopying

     Published by ...

     Cover art by ...
     @end titlepage


File: texinfo,  Node: end titlepage,  Next: headings on off,  Prev: Copyright,  Up: Titlepage & Copyright Page

3.4.5 Heading Generation
------------------------

Like all `@end' commands (*note Quotations and Examples::), the `@end
titlepage' command must be written at the beginning of a line by
itself, with only one space between the `@end' and the `titlepage'.  It
not only marks the end of the title and copyright pages, but also
causes TeX to start generating page headings and page numbers.

  To repeat what is said elsewhere,  Texinfo has two standard page
heading formats, one for documents which are printed on one side of
each sheet of paper (single-sided printing), and the other for
documents which are printed on both sides of each sheet (double-sided
printing).  You can specify these formats in different ways:

   * The conventional way is to write an `@setchapternewpage' command
     before the title page commands, and then have the `@end titlepage'
     command start generating page headings in the manner desired.
     (*Note setchapternewpage::.)

   * Alternatively, you can use the `@headings' command to prevent page
     headings from being generated or to start them for either single or
     double-sided printing.  (Write an `@headings' command immediately
     after the `@end titlepage' command.  *Note The `@headings'
     Command: headings on off, for more information.)

   * Or, you may specify your own page heading and footing format.
     *Note Page Headings: Headings, for detailed information about page
     headings and footings.

  Most documents are formatted with the standard single-sided or
double-sided format, using `@setchapternewpage odd' for double-sided
printing and no `@setchapternewpage' command for single-sided printing.


File: texinfo,  Node: headings on off,  Prev: end titlepage,  Up: Titlepage & Copyright Page

3.4.6 The `@headings' Command
-----------------------------

The `@headings' command is rarely used.  It specifies what kind of page
headings and footings to print on each page.  Usually, this is
controlled by the `@setchapternewpage' command.  You need the
`@headings' command only if the `@setchapternewpage' command does not
do what you want, or if you want to turn off pre-defined page headings
prior to defining your own.  Write an `@headings' command immediately
after the `@end titlepage' command.

  You can use `@headings' as follows:

`@headings off'
     Turn off printing of page headings.

`@headings single'
     Turn on page headings appropriate for single-sided printing.

`@headings double'
`@headings on'
     Turn on page headings appropriate for double-sided printing.  The
     two commands, `@headings on' and `@headings double', are
     synonymous.

`@headings singleafter'
`@headings doubleafter'
     Turn on `single' or `double' headings, respectively, after the
     current page is output.

`@headings on'
     Turn on page headings: `single' if `@setchapternewpage on',
     `double' otherwise.

  For example, suppose you write `@setchapternewpage off' before the
`@titlepage' command to tell TeX to start a new chapter on the same
page as the end of the last chapter.  This command also causes TeX to
typeset page headers for single-sided printing.  To cause TeX to
typeset for double sided printing, write `@headings double' after the
`@end titlepage' command.

  You can stop TeX from generating any page headings at all by writing
`@headings off' on a line of its own immediately after the line
containing the `@end titlepage' command, like this:

     @end titlepage
     @headings off

The `@headings off' command overrides the `@end titlepage' command,
which would otherwise cause TeX to print page headings.

  You can also specify your own style of page heading and footing.
*Note Page Headings: Headings, for more information.


File: texinfo,  Node: Contents,  Next: The Top Node,  Prev: Titlepage & Copyright Page,  Up: Beginning a File

3.5 Generating a Table of Contents
==================================

The `@chapter', `@section', and other structuring commands (*note
Structuring::) supply the information to make up a table of contents,
but they do not cause an actual table to appear in the manual.  To do
this, you must use the `@contents' and/or `@summarycontents' command(s).

`@contents'
     Generates a table of contents in a printed manual, including all
     chapters, sections, subsections, etc., as well as appendices and
     unnumbered chapters.  Headings generated by `@majorheading',
     `@chapheading', and the other `@...heading' commands do not appear
     in the table of contents (*note Structuring Command Types::).

`@shortcontents'
`@summarycontents'
     (`@summarycontents' is a synonym for `@shortcontents'.)

     Generates a short or summary table of contents that lists only the
     chapters, appendices, and unnumbered chapters.  Sections,
     subsections and subsubsections are omitted.  Only a long manual
     needs a short table of contents in addition to the full table of
     contents.


  Both contents commands should be written on a line by themselves, and
are best placed near the beginning of the file, after the `@end
titlepage' (*note titlepage::).  The contents commands automatically
generate a chapter-like heading at the top of the first table of
contents page, so don't include any sectioning command such as
`@unnumbered' before them.

  Since an Info file uses menus instead of tables of contents, the Info
formatting commands ignore the contents commands.  But the contents are
included in plain text output (generated by `makeinfo --no-headers'),
unless `makeinfo' is writing its output to standard output.

  When `makeinfo' writes a short table of contents while producing html
output, the links in the short table of contents point to corresponding
entries in the full table of contents rather than the text of the
document. The links in the full table of contents point to the main
text of the document.

  In the past, the contents commands were sometimes placed at the end of
the file, after any indices and just before the `@bye', but we no
longer recommend this.

  However, since many existing Texinfo documents still do have the
`@contents' at the end of the manual, if you are a user printing a
manual, you may wish to force the contents to be printed after the
title page.  You can do this by specifying `@setcontentsaftertitlepage'
and/or `@setshortcontentsaftertitlepage'.  The first prints only the
main contents after the `@end titlepage'; the second prints both the
short contents and the main contents.  In either case, any subsequent
`@contents' or `@shortcontents' is ignored (unless, erroneously, no
`@end titlepage' is ever encountered).

  You need to include the `@set...contentsaftertitlepage' commands
early in the document (just after `@setfilename', for example).  We
recommend using `texi2dvi' (*note Format with texi2dvi::) to specify
this without altering the source file at all.  For example:
     texi2dvi --texinfo=@setcontentsaftertitlepage foo.texi


File: texinfo,  Node: The Top Node,  Next: Global Document Commands,  Prev: Contents,  Up: Beginning a File

3.6 The `Top' Node and Master Menu
==================================

The `Top' node is the node in which a reader enters an Info manual.  As
such, it should begin with the `@insertcopying' command (*note Document
Permissions::) to provide a brief description of the manual (including
the version number) and copying permissions, and end with a master menu
for the whole manual.  Of course you should include any other general
information you feel a reader would find helpful.

  It is also conventional to write an `@top' sectioning command line
containing the title of the document immediately after the `@node Top'
line (*note The `@top' Sectioning Command: makeinfo top command.).

  The contents of the `Top' node should appear only in the online
output; none of it should appear in printed output, so enclose it
between `@ifnottex' and `@end ifnottex' commands.  (TeX does not print
either an `@node' line or a menu; they appear only in Info; strictly
speaking, you are not required to enclose these parts between
`@ifnottex' and `@end ifnottext', but it is simplest to do so.  *Note
Conditionally Visible Text: Conditionals.)

* Menu:

* Top Node Example::
* Master Menu Parts::


File: texinfo,  Node: Top Node Example,  Next: Master Menu Parts,  Up: The Top Node

3.6.1 Top Node Example
----------------------

Here is an example of a Top node.

     @ifnottex
     @node Top
     @top Sample Title

     @insertcopying

     Additional general information.

     @menu
     * First Chapter::
     * Second Chapter::
     ...
     * Index::
     @end menu


File: texinfo,  Node: Master Menu Parts,  Prev: Top Node Example,  Up: The Top Node

3.6.2 Parts of a Master Menu
----------------------------

A "master menu" is a detailed main menu listing all the nodes in a file.

  A master menu is enclosed in `@menu' and `@end menu' commands and
does not appear in the printed document.

  Generally, a master menu is divided into parts.

   * The first part contains the major nodes in the Texinfo file: the
     nodes for the chapters, chapter-like sections, and the appendices.

   * The second part contains nodes for the indices.

   * The third and subsequent parts contain a listing of the other,
     lower level nodes, often ordered by chapter.  This way, rather
     than go through an intermediary menu, an inquirer can go directly
     to a particular node when searching for specific information.
     These menu items are not required; add them if you think they are a
     convenience.  If you do use them, put `@detailmenu' before the
     first one, and `@end detailmenu' after the last; otherwise,
     `makeinfo' will get confused.

  Each section in the menu can be introduced by a descriptive line.  So
long as the line does not begin with an asterisk, it will not be
treated as a menu entry.  (*Note Writing a Menu::, for more
information.)

  For example, the master menu for this manual looks like the following
(but has many more entries):

     @menu
     * Copying Conditions::  Your rights.
     * Overview::            Texinfo in brief.
     ...
     * Command and Variable Index::
     * Concept Index::

     @detailmenu
     --- The Detailed Node Listing ---

     Overview of Texinfo

     * Reporting Bugs:: ...
     ...

     Beginning a Texinfo File

     * Sample Beginning:: ...
     ...
     @end detailmenu
     @end menu


File: texinfo,  Node: Global Document Commands,  Next: Software Copying Permissions,  Prev: The Top Node,  Up: Beginning a File

3.7 Global Document Commands
============================

Besides the basic commands mentioned in the previous sections, here are
additional commands which affect the document as a whole.  They are
generally all given before the Top node, if they are given at all.

* Menu:

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* firstparagraphindent::        Suppress indentation of the first paragraph.
* exampleindent::               Specify environment indentation.


File: texinfo,  Node: documentdescription,  Next: setchapternewpage,  Up: Global Document Commands

3.7.1 `@documentdescription': Summary Text
------------------------------------------

When producing HTML output for a document, `makeinfo' writes a `<meta>'
element in the `<head>' to give some idea of the content of the
document.  By default, this "description" is the title of the document,
taken from the `@settitle' command (*note settitle::).  To change this,
use the `@documentdescription' environment, as in:

     @documentdescription
     descriptive text.
     @end documentdescription

This will produce the following output in the `<head>' of the HTML:

     <meta name=description content="descriptive text.">

  `@documentdescription' must be specified before the first node of the
document.


File: texinfo,  Node: setchapternewpage,  Next: paragraphindent,  Prev: documentdescription,  Up: Global Document Commands

3.7.2 `@setchapternewpage':
---------------------------

In an officially bound book, text is usually printed on both sides of
the paper, chapters start on right-hand pages, and right-hand pages have
odd numbers.  But in short reports, text often is printed only on one
side of the paper.  Also in short reports, chapters sometimes do not
start on new pages, but are printed on the same page as the end of the
preceding chapter, after a small amount of vertical whitespace.

  You can use the `@setchapternewpage' command with various arguments
to specify how TeX should start chapters and whether it should format
headers for printing on one or both sides of the paper (single-sided or
double-sided printing).

  Write the `@setchapternewpage' command at the beginning of a line
followed by its argument.

  For example, you would write the following to cause each chapter to
start on a fresh odd-numbered page:

     @setchapternewpage odd

  You can specify one of three alternatives with the
`@setchapternewpage' command:

`@setchapternewpage off'
     Cause TeX to typeset a new chapter on the same page as the last
     chapter, after skipping some vertical whitespace.  Also, cause TeX
     to format page headers for single-sided printing.

`@setchapternewpage on'
     Cause TeX to start new chapters on new pages and to format page
     headers for single-sided printing.  This is the form most often
     used for short reports or personal printing. This is the default.

`@setchapternewpage odd'
     Cause TeX to start new chapters on new, odd-numbered pages
     (right-handed pages) and to typeset for double-sided printing.
     This is the form most often used for books and manuals.

  Texinfo does not have an `@setchapternewpage even' command, because
there is no printing tradition of starting chapters or books on an
even-numbered page.

  If you don't like the default headers that `@setchapternewpage' sets,
you can explicit control them with the `@headings' command.  *Note The
`@headings' Command: headings on off.

  At the beginning of a manual or book, pages are not numbered--for
example, the title and copyright pages of a book are not numbered.  By
convention, table of contents and frontmatter pages are numbered with
roman numerals and not in sequence with the rest of the document.

  Since an Info file does not have pages, the `@setchapternewpage'
command has no effect on it.

  We recommend not including any `@setchapternewpage' command in your
manual sources at all, since the desired output is not intrinsic to the
document.  For a particular hard copy run, if you don't want the
default option (no blank pages, same headers on all pages) use the
`--texinfo' option to `texi2dvi' to specify the output you want.


File: texinfo,  Node: paragraphindent,  Next: firstparagraphindent,  Prev: setchapternewpage,  Up: Global Document Commands

3.7.3 `@paragraphindent': Paragraph Indenting
---------------------------------------------

The Texinfo processors may insert whitespace at the beginning of the
first line of each paragraph, thereby indenting that paragraph.  You can
use the `@paragraphindent' command to specify this indentation.  Write
an `@paragraphindent' command at the beginning of a line followed by
either `asis' or a number:

     @paragraphindent INDENT

  The indentation is according to the value of INDENT:

`asis'
     Do not change the existing indentation (not implemented in TeX).

`none'
0
     Omit all indentation.

N
     Indent by N space characters in Info output, by N ems in TeX.


  The default value of INDENT is 3.  `@paragraphindent' is ignored for
HTML output.

  It is best to write the `@paragraphindent' command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note Start of
Header::.

  A peculiarity of the `texinfo-format-buffer' and
`texinfo-format-region' commands is that they do not indent (nor fill)
paragraphs that contain `@w' or `@*' commands.


File: texinfo,  Node: firstparagraphindent,  Next: exampleindent,  Prev: paragraphindent,  Up: Global Document Commands

3.7.4 `@firstparagraphindent': Indenting After Headings
-------------------------------------------------------

As you can see in the present manual, the first paragraph in any
section is not indented by default.  Typographically, indentation is a
paragraph separator, which means that it is unnecessary when a new
section begins.  This indentation is controlled with the
`@firstparagraphindent' command:

     @firstparagraphindent WORD

  The first paragraph after a heading is indented according to the value
of WORD:

`none'
     Prevents the first paragraph from being indented (default).  This
     option is ignored by `makeinfo' if `@paragraphindent asis' is in
     effect.

`insert'
     Include normal paragraph indentation.  This respects the paragraph
     indentation set by a `@paragraphindent' command (*note
     paragraphindent::).

  For HTML and XML output, the `@firstparagraphindent' setting is
ignored.

  It is best to write the `@paragraphindent' command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note Start of
Header::.


File: texinfo,  Node: exampleindent,  Prev: firstparagraphindent,  Up: Global Document Commands

3.7.5 `@exampleindent': Environment Indenting
---------------------------------------------

The Texinfo processors indent each line of `@example' and similar
environments.  You can use the `@exampleindent' command to specify this
indentation.  Write an `@exampleindent' command at the beginning of a
line followed by either `asis' or a number:

     @exampleindent INDENT

  `@exampleindent' is ignored for HTML output.  Otherwise, the
indentation is according to the value of INDENT:

`asis'
     Do not change the existing indentation (not implemented in TeX).

0
     Omit all indentation.

N
     Indent environments by N space characters in Info output, by N ems
     in TeX.


  The default value of INDENT is 5 spaces in Info, and 0.4in in TeX,
which is somewhat less.  (The reduction is to help TeX fit more
characters onto physical lines.)

  It is best to write the `@exampleindent' command before the
end-of-header line at the beginning of a Texinfo file, so the region
formatting commands indent paragraphs as specified.  *Note Start of
Header::.


File: texinfo,  Node: Software Copying Permissions,  Prev: Global Document Commands,  Up: Beginning a File

3.8 Software Copying Permissions
================================

If the Texinfo file has a section containing the "General Public
License" and the distribution information and a warranty disclaimer for
the software that is documented, we recommend placing this right after
the `Top' node.  The General Public License is very important to Project
GNU software.  It ensures that you and others will continue to have a
right to use and share the software.

  The copying and distribution information and the disclaimer are
followed by an introduction or else by the first chapter of the manual.

  Although an introduction is not a required part of a Texinfo file, it
is very helpful.  Ideally, it should state clearly and concisely what
the file is about and who would be interested in reading it.  In
general, an introduction would follow the licensing and distribution
information, although sometimes people put it earlier in the document.


File: texinfo,  Node: Ending a File,  Next: Structuring,  Prev: Beginning a File,  Up: Top

4 Ending a Texinfo File
***********************

The end of a Texinfo file should include commands to create indices,
and the `@bye' command to mark the last line to be processed.

  For example:

     @node Index
     @unnumbered Index

     @printindex cp

     @bye

* Menu:

* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* File End::                    How to mark the end of a file.


File: texinfo,  Node: Printing Indices & Menus,  Next: File End,  Up: Ending a File

4.1 Printing Indices and Menus
==============================

To print an index means to include it as part of a manual or Info file.
This does not happen automatically just because you use `@cindex' or
other index-entry generating commands in the Texinfo file; those just
cause the raw data for the index to be accumulated.  To generate an
index, you must include the `@printindex' command at the place in the
document where you want the index to appear.  Also, as part of the
process of creating a printed manual, you must run a program called
`texindex' (*note Hardcopy::) to sort the raw data to produce a sorted
index file.  The sorted index file is what is actually used to print
the index.

  Texinfo offers six separate types of predefined index, which suffice
in most cases.  *Note Indices::, for information on this, as well
defining your own new indices, combining indices, and, most importantly
advice on writing the actual index entries.  This section focuses on
printing indices, which is done with the `@printindex' command.

  `@printindex' takes one argument, a two-letter index abbreviation.
It reads the corresponding sorted index file (for printed output), and
formats it appropriately into an index.

  The `@printindex' command does not generate a chapter heading for the
index, since different manuals have different needs.  Consequently, you
should precede the `@printindex' command with a suitable section or
chapter command (usually `@appendix' or `@unnumbered') to supply the
chapter heading and put the index into the table of contents.  Precede
the chapter heading with an `@node' line as usual.

  For example:

     @node Variable Index
     @unnumbered Variable Index

     @printindex vr

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

  If you have more than one index, we recommend placing the concept
index last.

   * In printed output, `@printindex' produces a traditional two-column
     index, with dot leaders between the index terms and page numbers.

   * In Info output, `@printindex' produces a special menu containing
     the line number of the entry, relative to the start of the node.
     Info readers can use this to go to the exact line of an entry, not
     just the containing node.  (Older Info readers will just go to the
     node.)  Here's an example:

          * First index entry:   Top.   (line  7)

     The actual number of spaces is variable, to right-justify the line
     number; it's been reduced here to make the line fit in the printed
     manual.

   * In plain text output, `@printindex' produces the same menu, but
     the line numbers are relative to the start of the file, since
     that's more convenient for that format.

   * In HTML and Docbook output, `@printindex' produces links to the
     index entries.

   * In XML output, it simply records the index to be printed.

  It's not possible to generate an index when writing to standard
output; `makeinfo' generates a warning in this case.


File: texinfo,  Node: File End,  Prev: Printing Indices & Menus,  Up: Ending a File

4.2 `@bye' File Ending
======================

An `@bye' command terminates Texinfo processing.  None of the
formatters read anything following `@bye'.  The `@bye' command should
be on a line by itself.

  If you wish, you may follow the `@bye' line with notes. These notes
will not be formatted and will not appear in either Info or a printed
manual; it is as if text after `@bye' were within `@ignore' ... `@end
ignore'.  Also, you may follow the `@bye' line with a local variables
list for Emacs.  *Note Using Local Variables and the Compile Command:
Compile-Command, for more information.


File: texinfo,  Node: Structuring,  Next: Nodes,  Prev: Ending a File,  Up: Top

5 Chapter Structuring
*********************

The "chapter structuring" commands divide a document into a hierarchy of
chapters, sections, subsections, and subsubsections.  These commands
generate large headings; they also provide information for the table of
contents of a printed manual (*note Generating a Table of Contents:
Contents.).

  The chapter structuring commands do not create an Info node structure,
so normally you should put an `@node' command immediately before each
chapter structuring command (*note Nodes::).  The only time you are
likely to use the chapter structuring commands without using the node
structuring commands is if you are writing a document that contains no
cross references and will never be transformed into Info format.

  It is unlikely that you will ever write a Texinfo file that is
intended only as an Info file and not as a printable document.  If you
do, you might still use chapter structuring commands to create a
heading at the top of each node--but you don't need to.

* Menu:

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.


File: texinfo,  Node: Tree Structuring,  Next: Structuring Command Types,  Up: Structuring

5.1 Tree Structure of Sections
==============================

A Texinfo file is usually structured like a book with chapters,
sections, subsections, and the like.  This structure can be visualized
as a tree (or rather as an upside-down tree) with the root at the top
and the levels corresponding to chapters, sections, subsection, and
subsubsections.

  Here is a diagram that shows a Texinfo file with three chapters, each
of which has two sections.

                              Top
                               |
             -------------------------------------
            |                  |                  |
         Chapter 1          Chapter 2          Chapter 3
            |                  |                  |
         --------           --------           --------
        |        |         |        |         |        |
     Section  Section   Section  Section   Section  Section
       1.1      1.2       2.1      2.2       3.1      3.2

  In a Texinfo file that has this structure, the beginning of Chapter 2
looks like this:

     @node    Chapter 2,  Chapter 3, Chapter 1, top
     @chapter Chapter 2

  The chapter structuring commands are described in the sections that
follow; the `@node' and `@menu' commands are described in following
chapters. (*Note Nodes::, and see *Note Menus::.)


File: texinfo,  Node: Structuring Command Types,  Next: makeinfo top,  Prev: Tree Structuring,  Up: Structuring

5.2 Structuring Command Types
=============================

The chapter structuring commands fall into four groups or series, each
of which contains structuring commands corresponding to the
hierarchical levels of chapters, sections, subsections, and
subsubsections.

  The four groups are the `@chapter' series, the `@unnumbered' series,
the `@appendix' series, and the `@heading' series.

  Each command produces titles that have a different appearance on the
printed page or Info file; only some of the commands produce titles
that are listed in the table of contents of a printed book or manual.

   * The `@chapter' and `@appendix' series of commands produce numbered
     or lettered entries both in the body of a printed work and in its
     table of contents.

   * The `@unnumbered' series of commands produce unnumbered entries
     both in the body of a printed work and in its table of contents.
     The `@top' command, which has a special use, is a member of this
     series (*note `@top': makeinfo top.).  An `@unnumbered' section
     should be associated with a node and be a normal part of the
     document structure.

   * The `@heading' series of commands produce simple unnumbered
     headings that do not appear in a table of contents, are not
     associated with nodes, and cannot be cross-referenced.  The
     heading commands never start a new page.

   * The `@majorheading' command is similar to `@chapheading', except
     that it generates a larger vertical whitespace before the heading.

   * When an `@setchapternewpage' command says to do so, the
     `@chapter', `@unnumbered', and `@appendix' commands start new
     pages in the printed manual; the `@heading' commands do not.

  Here are the four groups of chapter structuring commands:

                                                            No new page
Numbered       Unnumbered             Lettered/numbered     Unnumbered
In contents    In contents            In contents           Not in contents
               `@top'                                       `@majorheading'
`@chapter'     `@unnumbered'          `@appendix'           `@chapheading'
`@section'     `@unnumberedsec'       `@appendixsec'        `@heading'
`@subsection'  `@unnumberedsubsec'    `@appendixsubsec'     `@subheading'
`@subsubsection'`@unnumberedsubsubsec' `@appendixsubsubsec'  `@subsubheading'


File: texinfo,  Node: makeinfo top,  Next: chapter,  Prev: Structuring Command Types,  Up: Structuring

5.3 `@top'
==========

The `@top' command is a special sectioning command that you use only
after an `@node Top' line at the beginning of a Texinfo file.  The
`@top' command tells the `makeinfo' formatter which node is the `Top'
node, so it can use it as the root of the node tree if your manual uses
implicit node pointers.  It has the same typesetting effect as
`@unnumbered' (*note `@unnumbered' and `@appendix': unnumbered &
appendix.).  For detailed information, see *Note The `@top' Command:
makeinfo top command.

  The `@top' node and its menu (if any) is conventionally wrapped in an
`@ifnottex' conditional so that it will appear only in Info and HTML
output, not TeX.


File: texinfo,  Node: chapter,  Next: unnumbered & appendix,  Prev: makeinfo top,  Up: Structuring

5.4 `@chapter'
==============

`@chapter' identifies a chapter in the document.  Write the command at
the beginning of a line and follow it on the same line by the title of
the chapter.

  For example, this chapter in this manual is entitled "Chapter
Structuring"; the `@chapter' line looks like this:

     @chapter Chapter Structuring

  In TeX, the `@chapter' command creates a chapter in the document,
specifying the chapter title.  The chapter is numbered automatically.

  In Info, the `@chapter' command causes the title to appear on a line
by itself, with a line of asterisks inserted underneath.  Thus, in
Info, the above example produces the following output:

     Chapter Structuring
     *******************

  Texinfo also provides a command `@centerchap', which is analogous to
`@unnumbered', but centers its argument in the printed output.  This
kind of stylistic choice is not usually offered by Texinfo.


File: texinfo,  Node: unnumbered & appendix,  Next: majorheading & chapheading,  Prev: chapter,  Up: Structuring

5.5 `@unnumbered' and `@appendix'
=================================

Use the `@unnumbered' command to create a chapter that appears in a
printed manual without chapter numbers of any kind.  Use the
`@appendix' command to create an appendix in a printed manual that is
labelled by letter instead of by number.

  For Info file output, the `@unnumbered' and `@appendix' commands are
equivalent to `@chapter': the title is printed on a line by itself with
a line of asterisks underneath.  (*Note `@chapter': chapter.)

  To create an appendix or an unnumbered chapter, write an `@appendix'
or `@unnumbered' command at the beginning of a line and follow it on
the same line by the title, as you would if you were creating a chapter.


File: texinfo,  Node: majorheading & chapheading,  Next: section,  Prev: unnumbered & appendix,  Up: Structuring

5.6 `@majorheading', `@chapheading'
===================================

The `@majorheading' and `@chapheading' commands put chapter-like
headings in the body of a document.

  However, neither command causes TeX to produce a numbered heading or
an entry in the table of contents; and neither command causes TeX to
start a new page in a printed manual.

  In TeX, an `@majorheading' command generates a larger vertical
whitespace before the heading than an `@chapheading' command but is
otherwise the same.

  In Info, the `@majorheading' and `@chapheading' commands are
equivalent to `@chapter': the title is printed on a line by itself with
a line of asterisks underneath.  (*Note `@chapter': chapter.)


File: texinfo,  Node: section,  Next: unnumberedsec appendixsec heading,  Prev: majorheading & chapheading,  Up: Structuring

5.7 `@section'
==============

In a printed manual, an `@section' command identifies a numbered
section within a chapter.  The section title appears in the table of
contents.  In Info, an `@section' command provides a title for a
segment of text, underlined with `='.

  This section is headed with an `@section' command and looks like this
in the Texinfo file:

     @section @code{@@section}

  To create a section, write the `@section' command at the beginning of
a line and follow it on the same line by the section title.

  Thus,

     @section This is a section

produces

     This is a section
     =================

in Info.


File: texinfo,  Node: unnumberedsec appendixsec heading,  Next: subsection,  Prev: section,  Up: Structuring

5.8 `@unnumberedsec', `@appendixsec', `@heading'
================================================

The `@unnumberedsec', `@appendixsec', and `@heading' commands are,
respectively, the unnumbered, appendix-like, and heading-like
equivalents of the `@section' command.  (*Note `@section': section.)

`@unnumberedsec'
     The `@unnumberedsec' command may be used within an unnumbered
     chapter or within a regular chapter or appendix to provide an
     unnumbered section.

`@appendixsec'
`@appendixsection'
     `@appendixsection' is a longer spelling of the `@appendixsec'
     command; the two are synonymous.  

     Conventionally, the `@appendixsec' or `@appendixsection' command
     is used only within appendices.

`@heading'
     You may use the `@heading' command anywhere you wish for a
     section-style heading that will not appear in the table of
     contents.


File: texinfo,  Node: subsection,  Next: unnumberedsubsec appendixsubsec subheading,  Prev: unnumberedsec appendixsec heading,  Up: Structuring

5.9 The `@subsection' Command
=============================

Subsections are to sections as sections are to chapters.  (*Note
`@section': section.)  In Info, subsection titles are underlined with
`-'.  For example,

     @subsection This is a subsection

produces

     This is a subsection
     --------------------

  In a printed manual, subsections are listed in the table of contents
and are numbered three levels deep.


File: texinfo,  Node: unnumberedsubsec appendixsubsec subheading,  Next: subsubsection,  Prev: subsection,  Up: Structuring

5.10 The `@subsection'-like Commands
====================================

The `@unnumberedsubsec', `@appendixsubsec', and `@subheading' commands
are, respectively, the unnumbered, appendix-like, and heading-like
equivalents of the `@subsection' command.  (*Note `@subsection':
subsection.)

  In Info, the `@subsection'-like commands generate a title underlined
with hyphens.  In a printed manual, an `@subheading' command produces a
heading like that of a subsection except that it is not numbered and
does not appear in the table of contents.  Similarly, an
`@unnumberedsubsec' command produces an unnumbered heading like that of
a subsection and an `@appendixsubsec' command produces a
subsection-like heading labelled with a letter and numbers; both of
these commands produce headings that appear in the table of contents.


File: texinfo,  Node: subsubsection,  Next: Raise/lower sections,  Prev: unnumberedsubsec appendixsubsec subheading,  Up: Structuring

5.11 The `subsub' Commands
==========================

The fourth and lowest level sectioning commands in Texinfo are the
`subsub' commands.  They are:

`@subsubsection'
     Subsubsections are to subsections as subsections are to sections.
     (*Note `@subsection': subsection.)  In a printed manual,
     subsubsection titles appear in the table of contents and are
     numbered four levels deep.

`@unnumberedsubsubsec'
     Unnumbered subsubsection titles appear in the table of contents of
     a printed manual, but lack numbers.  Otherwise, unnumbered
     subsubsections are the same as subsubsections.  In Info, unnumbered
     subsubsections look exactly like ordinary subsubsections.

`@appendixsubsubsec'
     Conventionally, appendix commands are used only for appendices and
     are lettered and numbered appropriately in a printed manual.  They
     also appear in the table of contents.  In Info, appendix
     subsubsections look exactly like ordinary subsubsections.

`@subsubheading'
     The `@subsubheading' command may be used anywhere that you need a
     small heading that will not appear in the table of contents.  In
     Info, subsubheadings look exactly like ordinary subsubsection
     headings.

  In Info,  `subsub' titles are underlined with periods.  For example,

     @subsubsection This is a subsubsection

produces

     This is a subsubsection
     .......................


File: texinfo,  Node: Raise/lower sections,  Prev: subsubsection,  Up: Structuring

5.12 `@raisesections' and `@lowersections'
==========================================

The `@raisesections' and `@lowersections' commands implicitly raise and
lower the hierarchical level of following chapters, sections and the
other sectioning commands.

  That is, the `@raisesections' command changes sections to chapters,
subsections to sections, and so on.  Conversely, the `@lowersections'
command changes chapters to sections, sections to subsections, and so
on.  Thus, an `@lowersections' command cancels an `@raisesections'
command, and vice versa.

  You can use `@lowersections' to include text written as an outer or
standalone Texinfo file in another Texinfo file as an inner, included
file.  Typical usage looks like this:

     @lowersections
     @include somefile.texi
     @raisesections

(Without the `@raisesections', all the subsequent sections in the
document would be lowered.)

  If the included file being lowered has a `@top' node, you'll need to
conditionalize its inclusion with a flag (*note set value::).

  Another difficulty can arise with documents that use the (recommended)
feature of `makeinfo' for implicitly determining node pointers.  Since
`makeinfo' must assume a hierarchically organized document to determine
the pointers, you cannot just arbitrarily sprinkle `@raisesections' and
`@lowersections' commands in the document.  The final result has to
have menus that take the raising and lowering into account.  Therefore,
as a practical matter, you generally only want to raise or lower large
chunks, usually in external files as shown above.

  Repeated use of the commands continue to raise or lower the
hierarchical level a step at a time.  An attempt to raise above
`chapter' reproduces chapter commands; an attempt to lower below
`subsubsection' reproduces subsubsection commands.  Also, lowered
subsubsections and raised chapters will not work with `makeinfo''s
feature of implicitly determining node pointers, since the menu
structure won't be correct.

  Write each `@raisesections' and `@lowersections' command on a line of
its own.


File: texinfo,  Node: Nodes,  Next: Menus,  Prev: Structuring,  Up: Top

6 Nodes
*******

"Nodes" are the primary segments of a Texinfo file.  They do not in and
of themselves impose a hierarchical or any other kind of structure on a
file.  Nodes contain "node pointers" that name other nodes, and can
contain "menus" which are lists of nodes.  In Info, the movement
commands can carry you to a pointed-to node or to a node listed in a
menu.

  Node pointers and menus provide structure for Info files just as
chapters, sections, subsections, and the like, provide structure for
printed books.

  Because node names are used in cross-references, it is not desirable
to casually change them.  Such name changes invalidate references from
other manuals, from mail archives, and so on.

* Menu:

* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.


File: texinfo,  Node: Two Paths,  Next: Node Menu Illustration,  Up: Nodes

6.1 Two Paths
=============

The node and menu commands and the chapter structuring commands are
technically independent of each other:

   * In Info, node and menu commands provide structure.  The chapter
     structuring commands generate headings with different kinds of
     underlining--asterisks for chapters, hyphens for sections, and so
     on; they do nothing else.

   * In TeX, the chapter structuring commands generate chapter and
     section numbers and tables of contents.  The node and menu
     commands provide information for cross references; they do nothing
     else.

  You can use node pointers and menus to structure an Info file any way
you want; and you can write a Texinfo file so that its Info output has a
different structure than its printed output.  However, virtually all
Texinfo files are written such that the structure for the Info output
corresponds to the structure for the printed output.  It is neither
convenient nor understandable to the reader to do otherwise.

  Generally, printed output is structured in a tree-like hierarchy in
which the chapters are the major limbs from which the sections branch
out.  Similarly, node pointers and menus are organized to create a
matching structure in the Info output.


File: texinfo,  Node: Node Menu Illustration,  Next: node,  Prev: Two Paths,  Up: Nodes

6.2 Node and Menu Illustration
==============================

Here is a copy of the diagram shown earlier that illustrates a Texinfo
file with three chapters, each of which contains two sections.

  The "root" is at the top of the diagram and the "leaves" are at the
bottom.  This is how such a diagram is drawn conventionally; it
illustrates an upside-down tree.  For this reason, the root node is
called the `Top' node, and `Up' node pointers carry you closer to the
root.

                              Top
                               |
             -------------------------------------
            |                  |                  |
         Chapter 1          Chapter 2          Chapter 3
            |                  |                  |
         --------           --------           --------
        |        |         |        |         |        |
     Section  Section   Section  Section   Section  Section
       1.1      1.2       2.1      2.2       3.1      3.2

  The fully-written command to start Chapter 2 would be this:

     @node     Chapter 2,  Chapter 3, Chapter 1, Top
     @comment  node-name,  next,      previous,  up

This `@node' line says that the name of this node is "Chapter 2", the
name of the `Next' node is "Chapter 3", the name of the `Previous' node
is "Chapter 1", and the name of the `Up' node is "Top".  You can omit
writing out these node names if your document is hierarchically
organized (*note makeinfo Pointer Creation::), but the pointer
relationships still obtain.

     Note: *Please Note:* `Next' refers to the next node at the same
     hierarchical level in the manual, not necessarily to the next node
     within the Texinfo file.  In the Texinfo file, the subsequent node
     may be at a lower level--a section-level node most often follows a
     chapter-level node, for example.  `Next' and `Previous' refer to
     nodes at the _same_ hierarchical level.  (The `Top' node contains
     the exception to this rule.  Since the `Top' node is the only node
     at that level, `Next' refers to the first following node, which is
     almost always a chapter or chapter-level node.)

  To go to Sections 2.1 and 2.2 using Info, you need a menu inside
Chapter 2.  (*Note Menus::.)  You would write the menu just before the
beginning of Section 2.1, like this:

        @menu
        * Sect. 2.1::    Description of this section.
        * Sect. 2.2::
        @end menu

  Write the node for Sect. 2.1 like this:

        @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
        @comment  node-name, next,      previous,  up

  In Info format, the `Next' and `Previous' pointers of a node usually
lead to other nodes at the same level--from chapter to chapter or from
section to section (sometimes, as shown, the `Previous' pointer points
up); an `Up' pointer usually leads to a node at the level above (closer
to the `Top' node); and a `Menu' leads to nodes at a level below (closer
to `leaves').  (A cross reference can point to a node at any level; see
*Note Cross References::.)

  Usually, an `@node' command and a chapter structuring command are
used in sequence, along with indexing commands.  (You may follow the
`@node' line with a comment line that reminds you which pointer is
which.)

  Here is the beginning of the chapter in this manual called "Ending a
Texinfo File".  This shows an `@node' line followed by a comment line,
an `@chapter' line, and then by indexing lines.

     @node    Ending a File, Structuring, Beginning a File, Top
     @comment node-name,     next,        previous,         up
     @chapter Ending a Texinfo File
     @cindex Ending a Texinfo file
     @cindex Texinfo file ending
     @cindex File ending


File: texinfo,  Node: node,  Next: makeinfo Pointer Creation,  Prev: Node Menu Illustration,  Up: Nodes

6.3 The `@node' Command
=======================

A "node" is a segment of text that begins at an `@node' command and
continues until the next `@node' command.  The definition of node is
different from that for chapter or section.  A chapter may contain
sections and a section may contain subsections; but a node cannot
contain subnodes; the text of a node continues only until the next
`@node' command in the file.  A node usually contains only one chapter
structuring command, the one that follows the `@node' line.  On the
other hand, in printed output nodes are used only for cross references,
so a chapter or section may contain any number of nodes.  Indeed, a
chapter usually contains several nodes, one for each section,
subsection, and subsubsection.

  To create a node, write an `@node' command at the beginning of a
line, and follow it with up to four arguments, separated by commas, on
the rest of the same line.  The first argument is required; it is the
name of this node.  The subsequent arguments are the names of the
`Next', `Previous', and `Up' pointers, in that order, and may be omitted
if your Texinfo document is hierarchically organized (*note makeinfo
Pointer Creation::).

  You may insert spaces before each name if you wish; the spaces are
ignored.  You must write the name of the node and (if present) the names
of the `Next', `Previous', and `Up' pointers all on the same line.
Otherwise, the formatters fail.  (*note info: (info)Top, for more
information about nodes in Info.)

  Usually, you write one of the chapter-structuring command lines
immediately after an `@node' line--for example, an `@section' or
`@subsection' line.  (*Note Structuring Command Types::.)

     Note: The GNU Emacs Texinfo mode updating commands work only with
     Texinfo files in which `@node' lines are followed by chapter
     structuring lines.  *Note Updating Requirements::.

  TeX uses `@node' lines to identify the names to use for cross
references.  For this reason, you must write `@node' lines in a Texinfo
file that you intend to format for printing, even if you do not intend
to format it for Info.  (Cross references, such as the one at the end
of this sentence, are made with `@xref' and related commands; see *Note
Cross References::.)

* Menu:

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.


File: texinfo,  Node: Node Names,  Next: Writing a Node,  Up: node

6.3.1 Choosing Node and Pointer Names
-------------------------------------

The name of a node identifies the node.  The pointers enable you to
reach other nodes and consist simply of the names of those nodes.

  Normally, a node's `Up' pointer contains the name of the node whose
menu mentions that node.  The node's `Next' pointer contains the name
of the node that follows that node in that menu and its `Previous'
pointer contains the name of the node that precedes it in that menu.
When a node's `Previous' node is the same as its `Up' node, both node
pointers name the same node.

  Usually, the first node of a Texinfo file is the `Top' node, and its
`Up' and `Previous' pointers point to the `dir' file, which contains
the main menu for all of Info.

  The `Top' node itself contains the main or master menu for the manual.
Also, it is helpful to include a brief description of the manual in the
`Top' node.  *Note First Node::, for information on how to write the
first node of a Texinfo file.

  Even when you explicitly specify all pointers, that does not mean you
can write the nodes in the Texinfo source file in an arbitrary order!
Because TeX processes the file sequentially, irrespective of node
pointers, you must write the nodes in the order you wish them to appear
in the printed output.


File: texinfo,  Node: Writing a Node,  Next: Node Line Tips,  Prev: Node Names,  Up: node

6.3.2 How to Write an `@node' Line
----------------------------------

The easiest way to write an `@node' line is to write `@node' at the
beginning of a line and then the name of the node, like this:

     @node NODE-NAME

  If you are using GNU Emacs, you can use the update node commands
provided by Texinfo mode to insert the names of the pointers; or you
can leave the pointers out of the Texinfo file and let `makeinfo'
insert node pointers into the Info file it creates.  (*Note Texinfo
Mode::, and *Note makeinfo Pointer Creation::.)

  Alternatively, you can insert the `Next', `Previous', and `Up'
pointers yourself.  If you do this, you may find it helpful to use the
Texinfo mode keyboard command `C-c C-c n'.  This command inserts
`@node' and a comment line listing the names of the pointers in their
proper order.  The comment line helps you keep track of which arguments
are for which pointers.  This comment line is especially useful if you
are not familiar with Texinfo.

  The template for a fully-written-out node line with `Next',
`Previous', and `Up' pointers looks like this:

     @node NODE-NAME, NEXT, PREVIOUS, UP

  If you wish, you can ignore `@node' lines altogether in your first
draft and then use the `texinfo-insert-node-lines' command to create
`@node' lines for you.  However, we do not recommend this practice.  It
is better to name the node itself at the same time that you write a
segment so you can easily make cross references.  A large number of
cross references are an especially important feature of a good Info
file.

  After you have inserted an `@node' line, you should immediately write
an @-command for the chapter or section and insert its name.  Next (and
this is important!), put in several index entries.  Usually, you will
find at least two and often as many as four or five ways of referring
to the node in the index.  Use them all.  This will make it much easier
for people to find the node.


File: texinfo,  Node: Node Line Tips,  Next: Node Line Requirements,  Prev: Writing a Node,  Up: node

6.3.3 `@node' Line Tips
-----------------------

Here are three suggestions:

   * Try to pick node names that are informative but short.

     In the Info file, the file name, node name, and pointer names are
     all inserted on one line, which may run into the right edge of the
     window.  (This does not cause a problem with Info, but is ugly.)

   * Try to pick node names that differ from each other near the
     beginnings of their names.  This way, it is easy to use automatic
     name completion in Info.

   * By convention, node names are capitalized just as they would be for
     section or chapter titles--initial and significant words are
     capitalized; others are not.


File: texinfo,  Node: Node Line Requirements,  Next: First Node,  Prev: Node Line Tips,  Up: node

6.3.4 `@node' Line Requirements
-------------------------------

Here are several requirements for `@node' lines:

   * All the node names for a single Info file must be unique.

     Duplicates confuse the Info movement commands.  This means, for
     example, that if you end every chapter with a summary, you must
     name each summary node differently.  You cannot just call each one
     "Summary".  You may, however, duplicate the titles of chapters,
     sections, and the like.  Thus you can end each chapter in a book
     with a section called "Summary", so long as the node names for
     those sections are all different.

   * A pointer name must be the name of a node.

     The node to which a pointer points may come before or after the
     node containing the pointer.

   * @-commands in node names are not allowed.  This includes
     punctuation characters that are escaped with a `@', such as `@' and
     `{', and accent commands such as `@''.  (For a few cases when this
     is useful, Texinfo has limited support for using @-commands in
     node names; see *Note Pointer Validation::.)  Perhaps this
     limitation will be removed some day.

   * Unfortunately, you cannot use periods, commas, colons or
     parentheses within a node name; these confuse the Texinfo
     processors.  Perhaps this limitation will be removed some day, too.

     For example, the following is a section title in this manual:

          @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}

     But the corresponding node name lacks the commas and the @'s:

          unnumberedsec appendixsec heading

   * Case is significant in node names.

     Spaces before and after names on the `@node' line are ignored, but
     spaces "inside" a name are significant.  For example:

          @node  foo bar,
          @node foo bar ,
          @node  foo bar ,

     all define the same node, `foo bar'.  References to the node
     should all use that name, without the leading or trailing spaces,
     but with the internal spaces.


File: texinfo,  Node: First Node,  Next: makeinfo top command,  Prev: Node Line Requirements,  Up: node

6.3.5 The First Node
--------------------

The first node of a Texinfo file is the "Top" node, except in an
included file (*note Include Files::).  The Top node should contain a
short summary, copying permissions, and a master menu.  *Note The Top
Node::, for more information on the Top node contents and examples.

  Here is a description of the node pointers to be used in the Top node:

   * The Top node (which must be named `top' or `Top') should have as
     its `Up' node the name of a node in another file, where there is a
     menu that leads to this file.  Specify the file name in
     parentheses.

     Usually, all Info files are installed in the same Info directory
     tree; in this case, use `(dir)' as the parent of the Top node;
     this is short for `(dir)top', and specifies the Top node in the
     `dir' file, which contains the main menu for the Info system as a
     whole.

   * On the other hand, do not define the `Previous' node of the Top
     node to be `(dir)', as it causes confusing behavior for users: if
     you are in the Top node and hits <DEL> to go backwards, you wind
     up in the middle of the some other entry in the `dir' file, which
     has nothing to do with what you were reading.

   * The `Next' node of the Top node should be the first chapter in your
     document.


  *Note Installing an Info File::, for more information about installing
an Info file in the `info' directory.

  For concreteness, here is an example with explicit pointers (which you
can maintain automatically with the texinfo mode commands):

  Or you can leave the pointers off entirely and let the tools
implicitly define them.  This is recommended.  Thus:

     @node Top


File: texinfo,  Node: makeinfo top command,  Prev: First Node,  Up: node

6.3.6 The `@top' Sectioning Command
-----------------------------------

A special sectioning command, `@top' should be used with the `@node
Top' line.  The `@top' sectioning command tells `makeinfo' that it
marks the `Top' node in the file.  It provides the information that
`makeinfo' needs to insert node pointers automatically.  Write the
`@top' command at the beginning of the line immediately following the
`@node Top' line.  Write the title on the remaining part of the same
line as the `@top' command.

  In Info, the `@top' sectioning command causes the title to appear on
a line by itself, with a line of asterisks inserted underneath, as
other sectioning commands do.

  In TeX and `texinfo-format-buffer', the `@top' sectioning command is
merely a synonym for `@unnumbered'.  Neither of these formatters
require an `@top' command, and do nothing special with it.  You can use
`@chapter' or `@unnumbered' after the `@node Top' line when you use
these formatters.  Also, you can use `@chapter' or `@unnumbered' when
you use the Texinfo updating commands to create or update pointers and
menus.

  Thus, in practice, a Top node starts like this:

     @node Top
     @top Your Manual Title


File: texinfo,  Node: makeinfo Pointer Creation,  Next: anchor,  Prev: node,  Up: Nodes

6.4 Creating Pointers with `makeinfo'
=====================================

The `makeinfo' program has a feature for automatically determining node
pointers for a hierarchically organized document.

  When you take advantage of this feature, you do not need to write the
`Next', `Previous', and `Up' pointers after the name of a node.
However, you must write a sectioning command, such as `@chapter' or
`@section', on the line immediately following each truncated `@node'
line (except that comment lines may intervene).

  In addition, you must follow the `Top' `@node' line with a line
beginning with `@top' to mark the `Top' node in the file.  *Note
`@top': makeinfo top.

  Finally, you must write the name of each node (except for the `Top'
node) in a menu that is one or more hierarchical levels above the
node's hierarchical level.

  This implicit node pointer insertion feature in `makeinfo' relieves
you from the need to update menus and pointers manually or with Texinfo
mode commands.  (*Note Updating Nodes and Menus::.)

  In most cases, you will want to take advantage of this feature and not
redundantly specify node pointers.  However, Texinfo documents are not
required to be organized hierarchically or in fact to contain
sectioning commands at all (for example, if you never intend the
document to be printed).  The special procedure for handling the short
text before a menu (*note Menus::) also disables this feature, for that
group of nodes.  In those cases, you will need to explicitly specify
the pointers.


File: texinfo,  Node: anchor,  Prev: makeinfo Pointer Creation,  Up: Nodes

6.5 `@anchor': Defining Arbitrary Cross-reference Targets
=========================================================

An "anchor" is a position in your document, labeled so that
cross-references can refer to it, just as they can to nodes.  You create
an anchor with the `@anchor' command, and give the label as a normal
brace-delimited argument.  For example:

     This marks the @anchor{x-spot}spot.
     ...
     @xref{x-spot,,the spot}.

produces:

     This marks the spot.
     ...
     See [the spot], page 1.

  As you can see, the `@anchor' command itself produces no output.
This example defines an anchor `x-spot' just before the word `spot'.
You can refer to it later with an `@xref' or other cross-reference
command, as shown.  *Note Cross References::, for details on the
cross-reference commands.

  It is best to put `@anchor' commands just before the position you
wish to refer to; that way, the reader's eye is led on to the correct
text when they jump to the anchor.  You can put the `@anchor' command
on a line by itself if that helps readability of the source.  Spaces
are always ignored after `@anchor'.

  Anchor names and node names may not conflict.  Anchors and nodes are
given similar treatment in some ways; for example, the `goto-node'
command in standalone Info takes either an anchor name or a node name as
an argument.  (*Note goto-node: (info-stnd)goto-node.)


File: texinfo,  Node: Menus,  Next: Cross References,  Prev: Nodes,  Up: Top

7 Menus
*******

"Menus" contain pointers to subordinate nodes.  In online output, you
use menus to go to such nodes.  Menus have no effect in printed manuals
and do not appear in them.

  A node with a menu should not contain much text.  If you find yourself
writing a lot of before a menu, we generally recommend moving most of
the text into a new subnode--all but a paragraph or two.  Otherwise, a
reader with a terminal that displays only a few lines may miss the menu
and its associated text.  As a practical matter, it is best to locate a
menu within 20 or so lines of the beginning of the node.

* Menu:

* Menu Location::               Menus go at the ends of short nodes.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.


File: texinfo,  Node: Menu Location,  Next: Writing a Menu,  Up: Menus

7.1 Menu Location
=================

A menu must be located at the end of a node, without any regular text
or additional commands between the `@end menu' and the beginning of the
next node.  (As a consequence, there may be at most one menu in a node.)

  This is actually a useful restriction, since a reader who uses the
menu could easily miss any such text.  Technically, it is necessary
because in Info format, there is no marker for the end of a menu, so
Info-reading programs would have no way to know when the menu ends and
normal text resumes.

  Technically, menus can carry you to any node, regardless of the
structure of the document; even to nodes in a different Info file.
However, we do not recommend ever making use of this, because the
`makeinfo' implicit pointer creation feature (*note makeinfo Pointer
Creation::) and GNU Emacs Texinfo mode updating commands work only to
create menus of subordinate nodes in a hierarchically structured
document.  Instead, use cross references to refer to arbitrary nodes.

  In the past, we recommended using a `@heading' command within an
`@ifinfo' conditional instead of the normal sectioning commands after a
very short node with a menu.  This had the advantage of making the
printed output look better, because there was no very short text
between two headings on the page.  But aside from not working with
`makeinfo''s implicit pointer creation, it also makes the XML output
incorrect, since it does not reflect the true document structure.  So,
unfortunately we can no longer recommend this.


File: texinfo,  Node: Writing a Menu,  Next: Menu Parts,  Prev: Menu Location,  Up: Menus

7.2 Writing a Menu
==================

A menu consists of an `@menu' command on a line by itself followed by
menu entry lines or menu comment lines and then by an `@end menu'
command on a line by itself.

  A menu looks like this:

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

  In a menu, every line that begins with an `* ' is a "menu entry".
(Note the space after the asterisk.)  A line that does not start with
an `* ' may also appear in a menu.  Such a line is not a menu entry but
is a menu comment line that appears in the Info file.  In the example
above, the line `Larger Units of Text' is a menu comment line; the two
lines starting with `* ' are menu entries.  Space characters in a menu
are preserved as-is; this allows you to format the menu as you wish.


File: texinfo,  Node: Menu Parts,  Next: Less Cluttered Menu Entry,  Prev: Writing a Menu,  Up: Menus

7.3 The Parts of a Menu
=======================

A menu entry has three parts, only the second of which is required:

  1. The menu entry name (optional).

  2. The name of the node (required).

  3. A description of the item (optional).

  The template for a menu entry looks like this:

     * MENU-ENTRY-NAME: NODE-NAME.   DESCRIPTION

  Follow the menu entry name with a single colon and follow the node
name with tab, comma, period, or newline.

  In Info, a user selects a node with the `m' (`Info-menu') command.
The menu entry name is what the user types after the `m' command.

  The third part of a menu entry is a descriptive phrase or sentence.
Menu entry names and node names are often short; the description
explains to the reader what the node is about.  A useful description
complements the node name rather than repeats it.  The description,
which is optional, can spread over two or more lines; if it does, some
authors prefer to indent the second line while others prefer to align it
with the first (and all others).  It's up to you.


File: texinfo,  Node: Less Cluttered Menu Entry,  Next: Menu Example,  Prev: Menu Parts,  Up: Menus

7.4 Less Cluttered Menu Entry
=============================

When the menu entry name and node name are the same, you can write the
name immediately after the asterisk and space at the beginning of the
line and follow the name with two colons.

  For example, write

     * Name::                                    DESCRIPTION

instead of

     * Name: Name.                               DESCRIPTION

  You should use the node name for the menu entry name whenever
possible, since it reduces visual clutter in the menu.


File: texinfo,  Node: Menu Example,  Next: Other Info Files,  Prev: Less Cluttered Menu Entry,  Up: Menus

7.5 A Menu Example
==================

A menu looks like this in Texinfo:

     @menu
     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.
     @end menu

This produces:

     * menu:

     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.

  Here is an example as you might see it in a Texinfo file:

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

This produces:

     * menu:
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.

  In this example, the menu has two entries.  `Files' is both a menu
entry name and the name of the node referred to by that name.
`Multiples' is the menu entry name; it refers to the node named
`Buffers'. The line `Larger Units of Text' is a comment; it appears in
the menu, but is not an entry.

  Since no file name is specified with either `Files' or `Buffers',
they must be the names of nodes in the same Info file (*note Referring
to Other Info Files: Other Info Files.).


File: texinfo,  Node: Other Info Files,  Prev: Menu Example,  Up: Menus

7.6 Referring to Other Info Files
=================================

You can create a menu entry that enables a reader in Info to go to a
node in another Info file by writing the file name in parentheses just
before the node name.  In this case, you should use the three-part menu
entry format, which saves the reader from having to type the file name.

  The format looks like this:

     @menu
     * FIRST-ENTRY-NAME:(FILENAME)NODENAME.     DESCRIPTION
     * SECOND-ENTRY-NAME:(FILENAME)SECOND-NODE. DESCRIPTION
     @end menu

  For example, to refer directly to the `Outlining' and `Rebinding'
nodes in the `Emacs Manual', you would write a menu like this:

     @menu
     * Outlining: (emacs)Outline Mode. The major mode for
                                      editing outlines.
     * Rebinding: (emacs)Rebinding.    How to redefine the
                                      meaning of a key.
     @end menu

  If you do not list the node name, but only name the file, then Info
presumes that you are referring to the `Top' node.

  The `dir' file that contains the main menu for Info has menu entries
that list only file names.  These take you directly to the `Top' nodes
of each Info document.  (*Note Installing an Info File::.)

  For example:

     * Info: (info).         Documentation browsing system.
     * Emacs: (emacs).       The extensible, self-documenting
                            text editor.

(The `dir' top level directory for the Info system is an Info file, not
a Texinfo file, but a menu entry looks the same in both types of file.)

  The GNU Emacs Texinfo mode menu updating commands only work with nodes
within the current buffer, so you cannot use them to create menus that
refer to other files.  You must write such menus by hand.


File: texinfo,  Node: Cross References,  Next: Marking Text,  Prev: Menus,  Up: Top

8 Cross References
******************

"Cross references" are used to refer the reader to other parts of the
same or different Texinfo files.  In Texinfo, nodes and anchors are the
places to which cross references can refer.

* Menu:

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.


File: texinfo,  Node: References,  Next: Cross Reference Commands,  Up: Cross References

8.1 What References Are For
===========================

Often, but not always, a printed document should be designed so that it
can be read sequentially.  People tire of flipping back and forth to
find information that should be presented to them as they need it.

  However, in any document, some information will be too detailed for
the current context, or incidental to it; use cross references to
provide access to such information.  Also, an online help system or a
reference manual is not like a novel; few read such documents in
sequence from beginning to end.  Instead, people look up what they
need.  For this reason, such creations should contain many cross
references to help readers find other information that they may not
have read.

  In a printed manual, a cross reference results in a page reference,
unless it is to another manual altogether, in which case the cross
reference names that manual.

  In Info, a cross reference results in an entry that you can follow
using the Info `f' command.  (*note Following cross-references:
(info)Help-Xref.)

  The various cross reference commands use nodes (or anchors, *note
`@anchor': anchor.) to define cross reference locations.  This is
evident in Info, in which a cross reference takes you to the specified
location.  TeX also uses nodes to define cross reference locations, but
the action is less obvious.  When TeX generates a DVI file, it records
each node's page number and uses the page numbers in making references.
Thus, if you are writing a manual that will only be printed, and will
not be used online, you must nonetheless write `@node' lines to name
the places to which you make cross references.


File: texinfo,  Node: Cross Reference Commands,  Next: Cross Reference Parts,  Prev: References,  Up: Cross References

8.2 Different Cross Reference Commands
======================================

There are four different cross reference commands:

`@xref'
     Used to start a sentence in the printed manual saying `See ...'
     or an Info cross-reference saying `*Note NAME: NODE.'.

`@ref'
     Used within or, more often, at the end of a sentence; same as
     `@xref' for Info; produces just the reference in the printed
     manual without a preceding `See'.

`@pxref'
     Used within parentheses to make a reference that suits both an Info
     file and a printed book.  Starts with a lower case `see' within the
     printed manual. (`p' is for `parenthesis'.)

`@inforef'
     Used to make a reference to an Info file for which there is no
     printed manual.

(The `@cite' command is used to make references to books and manuals
for which there is no corresponding Info file and, therefore, no node
to which to point.   *Note `@cite': cite.)


File: texinfo,  Node: Cross Reference Parts,  Next: xref,  Prev: Cross Reference Commands,  Up: Cross References

8.3 Parts of a Cross Reference
==============================

A cross reference command requires only one argument, which is the name
of the node to which it refers.  But a cross reference command may
contain up to four additional arguments.  By using these arguments, you
can provide a cross reference name for Info, a topic description or
section title for the printed output, the name of a different Info
file, and the name of a different printed manual.

  Here is a simple cross reference example:

     @xref{Node name}.

which produces

     *Note Node name::.

and

     See Section NNN [Node name], page PPP.

  Here is an example of a full five-part cross reference:

     @xref{Node name, Cross Reference Name, Particular Topic,
     info-file-name, A Printed Manual}, for details.

which produces

     *Note Cross Reference Name: (info-file-name)Node name,
     for details.

in Info and

     See section "Particular Topic" in A Printed Manual, for details.

in a printed book.

  The five possible arguments for a cross reference are:

  1. The node or anchor name (required).  This is the location to which
     the cross reference takes you.  In a printed document, the
     location of the node provides the page reference only for
     references within the same document.

  2. The cross reference name for the Info reference, if it is to be
     different from the node name.  If you include this argument, it
     becomes the first part of the cross reference.  It is usually
     omitted.

  3. A topic description or section name.  Often, this is the title of
     the section.  This is used as the name of the reference in the
     printed manual.  If omitted, the node name is used.

  4. The name of the Info file in which the reference is located, if it
     is different from the current file.  You need not include any
     `.info' suffix on the file name, since Info readers try appending
     it automatically.

  5. The name of a printed manual from a different Texinfo file.

  The template for a full five argument cross reference looks like this:

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

  Cross references with one, two, three, four, and five arguments are
described separately following the description of `@xref'.

  Write a node name in a cross reference in exactly the same way as in
the `@node' line, including the same capitalization; otherwise, the
formatters may not find the reference.

  You can write cross reference commands within a paragraph, but note
how Info and TeX format the output of each of the various commands:
write `@xref' at the beginning of a sentence; write `@pxref' only
within parentheses, and so on.


File: texinfo,  Node: xref,  Next: Top Node Naming,  Prev: Cross Reference Parts,  Up: Cross References

8.4 `@xref'
===========

The `@xref' command generates a cross reference for the beginning of a
sentence.  The Info formatting commands convert it into an Info cross
reference, which the Info `f' command can use to bring you directly to
another node.  The TeX typesetting commands convert it into a page
reference, or a reference to another book or manual.

* Menu:

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.


File: texinfo,  Node: Reference Syntax,  Next: One Argument,  Up: xref

8.4.1 What a Reference Looks Like and Requires
----------------------------------------------

Most often, an Info cross reference looks like this:

     *Note NODE-NAME::.

or like this

     *Note CROSS-REFERENCE-NAME: NODE-NAME.

In TeX, a cross reference looks like this:

     See Section SECTION-NUMBER [NODE-NAME], page PAGE.

or like this

     See Section SECTION-NUMBER [TITLE-OR-TOPIC], page PAGE.

  The `@xref' command does not generate a period or comma to end the
cross reference in either the Info file or the printed output.  You
must write that period or comma yourself; otherwise, Info will not
recognize the end of the reference.  (The `@pxref' command works
differently.  *Note `@pxref': pxref.)

     Caution: A period or comma *must* follow the closing brace of an
     `@xref'.  It is required to terminate the cross reference.  This
     period or comma will appear in the output, both in the Info file
     and in the printed manual.

  `@xref' must refer to an Info node by name.  Use `@node' to define
the node (*note Writing a Node::).

  `@xref' is followed by several arguments inside braces, separated by
commas.  Whitespace before and after these commas is ignored.

  A cross reference requires only the name of a node; but it may contain
up to four additional arguments.  Each of these variations produces a
cross reference that looks somewhat different.

     Note: Commas separate arguments in a cross reference; avoid
     including them in the title or other part lest the formatters
     mistake them for separators.


File: texinfo,  Node: One Argument,  Next: Two Arguments,  Prev: Reference Syntax,  Up: xref

8.4.2 `@xref' with One Argument
-------------------------------

The simplest form of `@xref' takes one argument, the name of another
node in the same Info file.    The Info formatters produce output that
the Info readers can use to jump to the reference; TeX produces output
that specifies the page and section number for you.

For example,

     @xref{Tropical Storms}.

produces

     *Note Tropical Storms::.

and

     See Section 3.1 [Tropical Storms], page 24.

(Note that in the preceding example the closing brace is followed by a
period.)

  You can write a clause after the cross reference, like this:

     @xref{Tropical Storms}, for more info.

which produces

     *Note Tropical Storms::, for more info.

and

     See Section 3.1 [Tropical Storms], page 24, for more info.

(Note that in the preceding example the closing brace is followed by a
comma, and then by the clause, which is followed by a period.)


File: texinfo,  Node: Two Arguments,  Next: Three Arguments,  Prev: One Argument,  Up: xref

8.4.3 `@xref' with Two Arguments
--------------------------------

With two arguments, the second is used as the name of the Info cross
reference, while the first is still the name of the node to which the
cross reference points.

The template is like this:

     @xref{NODE-NAME, CROSS-REFERENCE-NAME}.

For example,

     @xref{Electrical Effects, Lightning}.

produces:

     *Note Lightning: Electrical Effects.

and

     See Section 5.2 [Electrical Effects], page 57.

(Note that in the preceding example the closing brace is followed by a
period; and that the node name is printed, not the cross reference
name.)

  You can write a clause after the cross reference, like this:

     @xref{Electrical Effects, Lightning}, for more info.

which produces
     *Note Lightning: Electrical Effects, for more info.

and

     See Section 5.2 [Electrical Effects], page 57, for more info.

(Note that in the preceding example the closing brace is followed by a
comma, and then by the clause, which is followed by a period.)


File: texinfo,  Node: Three Arguments,  Next: Four and Five Arguments,  Prev: Two Arguments,  Up: xref

8.4.4 `@xref' with Three Arguments
----------------------------------

A third argument replaces the node name in the TeX output.  The third
argument should be the name of the section in the printed output, or
else state the topic discussed by that section.  Often, you will want to
use initial upper case letters so it will be easier to read when the
reference is printed.  Use a third argument when the node name is
unsuitable because of syntax or meaning.

  Remember to avoid placing a comma within the title or topic section of
a cross reference, or within any other section.  The formatters divide
cross references into arguments according to the commas; a comma within
a title or other section will divide it into two arguments.  In a
reference, you need to write a title such as "Clouds, Mist, and Fog"
without the commas.

  Also, remember to write a comma or period after the closing brace of
an `@xref' to terminate the cross reference.  In the following
examples, a clause follows a terminating comma.

The template is like this:

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC}.

For example,

     @xref{Electrical Effects, Lightning, Thunder and Lightning},
     for details.

produces

     *Note Lightning: Electrical Effects, for details.

and

     See Section 5.2 [Thunder and Lightning], page 57, for details.

  If a third argument is given and the second one is empty, then the
third argument serves both.  (Note how two commas, side by side, mark
the empty second argument.)

     @xref{Electrical Effects, , Thunder and Lightning},
     for details.

produces

     *Note Thunder and Lightning: Electrical Effects, for details.

and

     See Section 5.2 [Thunder and Lightning], page 57, for details.

  As a practical matter, it is often best to write cross references with
just the first argument if the node name and the section title are the
same, and with the first and third arguments if the node name and title
are different.

  Here are several examples from `The GNU Awk User's Guide':

     @xref{Sample Program}.
     @xref{Glossary}.
     @xref{Case-sensitivity, ,Case-sensitivity in Matching}.
     @xref{Close Output, , Closing Output Files and Pipes},
       for more information.
     @xref{Regexp, , Regular Expressions as Patterns}.


File: texinfo,  Node: Four and Five Arguments,  Prev: Three Arguments,  Up: xref

8.4.5 `@xref' with Four and Five Arguments
------------------------------------------

In a cross reference, a fourth argument specifies the name of another
Info file, different from the file in which the reference appears, and
a fifth argument specifies its title as a printed manual.

  Remember that a comma or period must follow the closing brace of an
`@xref' command to terminate the cross reference.  In the following
examples, a clause follows a terminating comma.

The template is:

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

For example,

     @xref{Electrical Effects, Lightning, Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

produces

     *Note Lightning: (weather)Electrical Effects, for details.

The name of the Info file is enclosed in parentheses and precedes the
name of the node.

In a printed manual, the reference looks like this:

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

The title of the printed manual is typeset in italics; and the
reference lacks a page number since TeX cannot know to which page a
reference refers when that reference is to another manual.

  Often, you will leave out the second argument when you use the long
version of `@xref'.  In this case, the third argument, the topic
description, will be used as the cross reference name in Info.

The template looks like this:

     @xref{NODE-NAME, , TITLE-OR-TOPIC, INFO-FILE-NAME,
     PRINTED-MANUAL-TITLE}, for details.

which produces

     *Note TITLE-OR-TOPIC: (INFO-FILE-NAME)NODE-NAME, for details.

and

     See section TITLE-OR-TOPIC in PRINTED-MANUAL-TITLE, for details.

For example,

     @xref{Electrical Effects, , Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

produces

     *Note Thunder and Lightning: (weather)Electrical Effects,
     for details.

and

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

  On rare occasions, you may want to refer to another Info file that is
within a single printed manual--when multiple Texinfo files are
incorporated into the same TeX run but make separate Info files.  In
this case, you need to specify only the fourth argument, and not the
fifth.


File: texinfo,  Node: Top Node Naming,  Next: ref,  Prev: xref,  Up: Cross References

8.5 Naming a `Top' Node
=======================

In a cross reference, you must always name a node.  This means that in
order to refer to a whole manual, you must identify the `Top' node by
writing it as the first argument to the `@xref' command.  (This is
different from the way you write a menu entry; see *Note Referring to
Other Info Files: Other Info Files.)  At the same time, to provide a
meaningful section topic or title in the printed cross reference
(instead of the word `Top'), you must write an appropriate entry for
the third argument to the `@xref' command.

Thus, to make a cross reference to `The GNU Make Manual', write:

     @xref{Top, , Overview, make, The GNU Make Manual}.

which produces

     *Note Overview: (make)Top.

and

     See section "Overview" in The GNU Make Manual.

In this example, `Top' is the name of the first node, and `Overview' is
the name of the first section of the manual.


File: texinfo,  Node: ref,  Next: pxref,  Prev: Top Node Naming,  Up: Cross References

8.6 `@ref'
==========

`@ref' is nearly the same as `@xref' except that it does not generate a
`See' in the printed output, just the reference itself.  This makes it
useful as the last part of a sentence.

For example,

     For more information, see @ref{Hurricanes}.

produces (in Info):

     For more information, see *Note Hurricanes::.

and (in printed output):

     For more information, see Section 8.2 [Hurricanes], page 123.

  The `@ref' command sometimes tempts writers to express themselves in
a manner that is suitable for a printed manual but looks awkward in the
Info format.  Bear in mind that your audience will be using both the
printed and the Info format.  For example:

     Sea surges are described in @ref{Hurricanes}.

looks ok in the printed output:

     Sea surges are described in Section 6.7 [Hurricanes], page 72.

but is awkward to read in Info:

     Sea surges are described in *Note Hurricanes::.

  As a general rule, you should write a period or comma immediately
after an `@ref' command with two or more arguments.

  If there is no such following punctuation, `makeinfo' will generate a
(grammatically incorrect) period in the Info output; otherwise, the
cross-reference would fail completely, due to the current syntax of
Info format.


File: texinfo,  Node: pxref,  Next: inforef,  Prev: ref,  Up: Cross References

8.7 `@pxref'
============

The parenthetical reference command, `@pxref', is nearly the same as
`@xref', but you use it _only_ inside parentheses and you do _not_ type
a comma or period (or anything else) after the command's closing brace.
The command differs from `@xref' in two ways:

  1. TeX typesets the reference for the printed manual with a lower case
     `see' rather than an upper case `See'.

  2. The Info formatting commands automatically end the reference with a
     closing colon or period.

  Because one type of formatting automatically inserts closing
punctuation and the other does not, you should use `@pxref' _only_
inside parentheses as part of another sentence.  Also, you yourself
should not insert punctuation after the reference (or any other text),
as you do with `@xref'.  In the Info output, such text would follow a
period, which is grammatically wrong.

  `@pxref' is designed so that the output looks right and works right
between parentheses both in printed output and in an Info file.  In a
printed manual, a closing comma or period should not follow a cross
reference within parentheses; such punctuation is wrong.  But in an
Info file, suitable closing punctuation must follow the cross reference
so Info can recognize its end.  `@pxref' spares you the need to use
complicated methods to put a terminator into one form of the output and
not the other.

With one argument, a parenthetical cross reference looks like this:

     ... storms cause flooding (@pxref{Hurricanes}) ...

which produces

     ... storms cause flooding (*Note Hurricanes::) ...

and

     ... storms cause flooding (see Section 6.7 [Hurricanes], page 72)
     ...

  With two arguments, a parenthetical cross reference has this template:

     ... (@pxref{NODE-NAME, CROSS-REFERENCE-NAME}) ...

which produces

     ... (*Note CROSS-REFERENCE-NAME: NODE-NAME.) ...

and

     ... (see Section NNN [NODE-NAME], page PPP) ...

  `@pxref' can be used with up to five arguments just like `@xref'
(*note `@xref': xref.).

     Caution: Use `@pxref' only as a parenthetical reference.  Do not
     try to use `@pxref' as a clause in a sentence.  It will look bad
     in either the Info file, the printed output, or both.

  Parenthetical cross references look best at the ends of sentences.
Although they technically work in the middle of a sentence, that
location breaks up the flow of reading.


File: texinfo,  Node: inforef,  Next: uref,  Prev: pxref,  Up: Cross References

8.8 `@inforef'
==============

`@inforef' is used for making cross references to Info documents--even
from a printed manual.  This might be because you want to refer to
conditional `@ifinfo' text (*note Conditionals::), or because printed
output is not available (perhaps because there is no Texinfo source),
among other possibilities.

  The command takes either two or three arguments, in the following
order:

  1. The node name.

  2. The cross reference name (optional).

  3. The Info file name.

Separate the arguments with commas, as with `@xref'.  Also, you must
terminate the reference with a comma or period after the `}', as you do
with `@xref'.

The template is:

     @inforef{NODE-NAME, CROSS-REFERENCE-NAME, INFO-FILE-NAME},

For example,

     @inforef{Advanced, Advanced Info commands, info},
     for more information.

produces (in Info):

     *Note Advanced Info commands: (info)Advanced,
     for more information.

and (in the printed output):

     See Info file `info', node `Advanced', for more information.

  (This particular example is not realistic, since the Info manual is
written in Texinfo, so all formats are available.)

  The converse of `@inforef' is `@cite', which is used to refer to
printed works for which no Info form exists.  *Note `@cite': cite.


File: texinfo,  Node: uref,  Prev: inforef,  Up: Cross References

8.9 `@url', `@uref{URL[, TEXT][, REPLACEMENT]}'
===============================================

`@uref' produces a reference to a uniform resource locator (url).  It
takes one mandatory argument, the url, and two optional arguments which
control the text that is displayed.  In HTML output, `@uref' produces a
link you can follow.

  `@url' is a synonym for `@uref'.  Originally, `@url' had the meaning
of `@indicateurl' (*note `@indicateurl': indicateurl.), but in actual
practice it was misused the vast majority of the time.  So we've
changed the definitions.

  The second argument, if specified, is the text to display (the default
is the url itself); in Info and DVI output, but not in HTML output, the
url is also output.

  The third argument, if specified, is the text to display, but in this
case the url is _not_ output in any format.  This is useful when the
text is already sufficiently referential, as in a man page.  If the
third argument is given, the second argument is ignored.

  If the url is long enough to cause problems with line breaking, you
may find it useful to insert `@/' at places where a line break would be
acceptable (after `/' characters, for instance).  This tells TeX to
allow (but not force) a line break at those places.  *Note Line
Breaks::.

  Here is an example of the simple one argument form, where the url is
both the target and the text of the link:

     The official GNU ftp site is @uref{ftp://ftp.gnu.org/gnu}.

produces:
     The official GNU ftp site is `ftp://ftp.gnu.org/gnu'.

  An example of the two-argument form:
     The official @uref{ftp://ftp.gnu.org/gnu, GNU ftp site}
     holds programs and texts.

produces:
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

that is, the Info output is this:
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

and the HTML output is this:
     The official <a href="ftp://ftp.gnu.org/gnu">GNU ftp site</a>
     holds programs and texts.

  An example of the three-argument form:
     The @uref{/man.cgi/1/ls,,ls(1)} program ...

produces:
     The ls(1) program ...

but with HTML:
     The <a href="/man.cgi/1/ls">ls(1)</a> program ...

  To merely indicate a url without creating a link people can follow,
use `@indicateurl' (*note `@indicateurl': indicateurl.).

  Some people prefer to display url's in the unambiguous format:

     <URL:http://HOST/PATH>

You can use this form in the input file if you wish.  We feel it's not
necessary to include the `<URL:' and `>' in the output, since any
software that tries to detect url's in text already has to detect them
without the `<URL:' to be useful.


File: texinfo,  Node: Marking Text,  Next: Quotations and Examples,  Prev: Cross References,  Up: Top

9 Marking Words and Phrases
***************************

In Texinfo, you can mark words and phrases in a variety of ways.  The
Texinfo formatters use this information to determine how to highlight
the text.  You can specify, for example, whether a word or phrase is a
defining occurrence, a metasyntactic variable, or a symbol used in a
program.  Also, you can emphasize text, in several different ways.

* Menu:

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.


File: texinfo,  Node: Indicating,  Next: Emphasis,  Up: Marking Text

9.1 Indicating Definitions, Commands, etc.
==========================================

Texinfo has commands for indicating just what kind of object a piece of
text refers to.  For example, metasyntactic variables are marked by
`@var', and code by `@code'.  Since the pieces of text are labelled by
commands that tell what kind of object they are, it is easy to change
the way the Texinfo formatters prepare such text.  (Texinfo is an
_intentional_ formatting language rather than a _typesetting_
formatting language.)

  For example, in a printed manual, code is usually illustrated in a
typewriter font; `@code' tells TeX to typeset this text in this font.
But it would be easy to change the way TeX highlights code to use
another font, and this change would not affect how keystroke examples
are highlighted.  If straight typesetting commands were used in the body
of the file and you wanted to make a change, you would need to check
every single occurrence to make sure that you were changing code and
not something else that should not be changed.

* Menu:

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        Indicating a literal sequence of characters.
* verb::                        Indicating a verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the Info system.
* abbr::                        Indicating abbreviations.
* acronym::                     Indicating acronyms.
* indicateurl::                 Indicating an example URL.
* email::                       Indicating an electronic mail address.


File: texinfo,  Node: Useful Highlighting,  Next: code,  Up: Indicating

9.1.1 Highlighting Commands are Useful
--------------------------------------

The highlighting commands can be used to extract useful information
from the file, such as lists of functions or file names.  It is
possible, for example, to write a program in Emacs Lisp (or a keyboard
macro) to insert an index entry after every paragraph that contains
words or phrases marked by a specified command.  You could do this to
construct an index of functions if you had not already made the entries.

  The commands serve a variety of purposes:

`@code{SAMPLE-CODE}'
     Indicate text that is a literal example of a piece of a program.
     *Note `@code': code.

`@kbd{KEYBOARD-CHARACTERS}'
     Indicate keyboard input.  *Note `@kbd': kbd.

`@key{KEY-NAME}'
     Indicate the conventional name for a key on a keyboard.  *Note
     `@key': key.

`@samp{TEXT}'
     Indicate text that is a literal example of a sequence of
     characters.  *Note `@samp': samp.

`@verb{TEXT}'
     Write a verbatim sequence of characters.  *Note `@verb': verb.

`@var{METASYNTACTIC-VARIABLE}'
     Indicate a metasyntactic variable.  *Note `@var': var.

`@env{ENVIRONMENT-VARIABLE}'
     Indicate an environment variable.  *Note `@kenv': env.

`@file{FILE-NAME}'
     Indicate the name of a file.  *Note `@file': file.

`@command{COMMAND-NAME}'
     Indicate the name of a command.  *Note `@command': command.

`@option{OPTION}'
     Indicate a command-line option.  *Note `@option': option.

`@dfn{TERM}'
     Indicate the introductory or defining use of a term.  *Note
     `@dfn': dfn.

`@cite{REFERENCE}'
     Indicate the name of a book.  *Note `@cite': cite.

`@abbr{ABBREVIATION}'
     Indicate an abbreviation.

`@acronym{ACRONYM}'
     Indicate an acronym.  *Note `@acronym': acronym.

`@indicateurl{UNIFORM-RESOURCE-LOCATOR}'
     Indicate an example (that is, nonfunctional) uniform resource
     locator.  *Note `@indicateurl': indicateurl.  (Use `@url' (*note
     `@url': uref.) for live url's.)

`@email{EMAIL-ADDRESS[, DISPLAYED-TEXT]}'
     Indicate an electronic mail address.  *Note `@email': email.



File: texinfo,  Node: code,  Next: kbd,  Prev: Useful Highlighting,  Up: Indicating

9.1.2 `@code'{SAMPLE-CODE}
--------------------------

Use the `@code' command to indicate text that is a piece of a program
and which consists of entire syntactic tokens.  Enclose the text in
braces.

  Thus, you should use `@code' for an expression in a program, for the
name of a variable or function used in a program, or for a keyword in a
programming language.

  Use `@code' for command names in languages that resemble programming
languages, such as Texinfo.  For example, `@code' and `@samp' are
produced by writing `@code{@@code}' and `@code{@@samp}' in the Texinfo
source, respectively.

  It is incorrect to alter the case of a word inside an `@code' command
when it appears at the beginning of a sentence.  Most computer
languages are case sensitive.  In C, for example, `Printf' is different
from the identifier `printf', and most likely is a misspelling of it.
Even in languages which are not case sensitive, it is confusing to a
human reader to see identifiers spelled in different ways.  Pick one
spelling and always use that.  If you do not want to start a sentence
with a command name written all in lower case, you should rearrange the
sentence.

  In the printed manual, `@code' causes TeX to typeset the argument in
a typewriter face.  In the Info file, it causes the Info formatting
commands to use single quotation marks around the text.

  For example,

     The function returns @code{nil}.

produces this in the printed manual:

     The function returns `nil'.

  Here are some cases for which it is preferable not to use `@code':

   * For shell command names such as `ls' (use `@command').

   * For shell options such as `-c' when such options stand alone (use
     `@option').

   * Also, an entire shell command often looks better if written using
     `@samp' rather than `@code'.  In this case, the rule is to choose
     the more pleasing format.

   * For environment variable such as `TEXINPUTS' (use `@env').

   * For a string of characters shorter than a syntactic token.  For
     example, if you are writing about `goto-ch', which is just a part
     of the name for the `goto-char' Emacs Lisp function, you should use
     `@samp'.

   * In general, when writing about the characters used in a token; for
     example, do not use `@code' when you are explaining what letters
     or printable symbols can be used in the names of functions.  (Use
     `@samp'.)  Also, you should not use `@code' to mark text that is
     considered input to programs unless the input is written in a
     language that is like a programming language.  For example, you
     should not use `@code' for the keystroke commands of GNU Emacs (use
     `@kbd' instead) although you may use `@code' for the names of the
     Emacs Lisp functions that the keystroke commands invoke.


  Since `@command', `@option', and `@env' were introduced relatively
recently, it is acceptable to use `@code' or `@samp' for command names,
options, and environment variables.  The new commands allow you to
express the markup more precisely, but there is no real harm in using
the older commands, and of course the long-standing manuals do so.


File: texinfo,  Node: kbd,  Next: key,  Prev: code,  Up: Indicating

9.1.3 `@kbd'{KEYBOARD-CHARACTERS}
---------------------------------

Use the `@kbd' command for characters of input to be typed by users.
For example, to refer to the characters `M-a', write:

     @kbd{M-a}

and to refer to the characters `M-x shell', write:

     @kbd{M-x shell}

  By default, the `@kbd' command produces a different font (slanted
typewriter instead of normal typewriter) in the printed manual, so
users can distinguish the characters that they are supposed to type
from those that the computer outputs.

  In Info output, `@kbd' is usually the same as `@code', producing
`quotes' around its argument.  However, in typewriter-like contexts
such as the `@example' environment (*note example::) and `@code'
command itself, the quotes are omitted, since Info format cannot use
distinguishing fonts.

  Since the usage of `@kbd' varies from manual to manual, you can
control the font switching with the `@kbdinputstyle' command.  This
command has no effect on Info output.  Write this command at the
beginning of a line with a single word as an argument, one of the
following:

`code'
     Always use the same font for `@kbd' as `@code'.

`example'
     Use the distinguishing font for `@kbd' only in `@example' and
     similar environments.

`distinct'
     (the default) Always use the distinguishing font for `@kbd'.

  You can embed another @-command inside the braces of an `@kbd'
command.  Here, for example, is the way to describe a command that
would be described more verbosely as "press the `r' key and then press
the <RETURN> key":

     @kbd{r @key{RET}}

This produces: `r <RET>'.  (The present manual accepts the default for
`@kbdinputstyle'.)

  You also use the `@kbd' command if you are spelling out the letters
you type; for example:

     To give the @code{logout} command,
     type the characters @kbd{l o g o u t @key{RET}}.

This produces:

     To give the `logout' command, type the characters `l o g o u t
     <RET>'.

  (Also, this example shows that you can add spaces for clarity.  If you
explicitly want to mention a space character as one of the characters of
input, write `@key{SPC}' for it.)


File: texinfo,  Node: key,  Next: samp,  Prev: kbd,  Up: Indicating

9.1.4 `@key'{KEY-NAME}
----------------------

Use the `@key' command for the conventional name for a key on a
keyboard, as in:

     @key{RET}

  You can use the `@key' command within the argument of an `@kbd'
command when the sequence of characters to be typed includes one or
more keys that are described by name.

  For example, to produce `C-x <ESC>' you would type:

     @kbd{C-x @key{ESC}}

  Here is a list of the recommended names for keys: 

    SPC
          Space

    RET
          Return

    LFD
          Linefeed (however, since most keyboards nowadays do not have
          a Linefeed key, it might be better to call this character
          `C-j'.

    TAB
          Tab

    BS
          Backspace

    ESC
          Escape

    DEL
          Delete

    SHIFT
          Shift

    CTRL
          Control

    META
          Meta

  There are subtleties to handling words like `meta' or `ctrl' that are
names of modifier keys.  When mentioning a character in which the
modifier key is used, such as `Meta-a', use the `@kbd' command alone;
do not use the `@key' command; but when you are referring to the
modifier key in isolation, use the `@key' command.  For example, write
`@kbd{Meta-a}' to produce `Meta-a' and `@key{META}' to produce <META>.


File: texinfo,  Node: samp,  Next: verb,  Prev: key,  Up: Indicating

9.1.5 `@samp'{TEXT}
-------------------

Use the `@samp' command to indicate text that is a literal example or
`sample' of a sequence of characters in a file, string, pattern, etc.
Enclose the text in braces.  The argument appears within single
quotation marks in both the Info file and the printed manual; in
addition, it is printed in a fixed-width font.

     To match @samp{foo} at the end of the line,
     use the regexp @samp{foo$}.

produces

     To match `foo' at the end of the line, use the regexp `foo$'.

  Any time you are referring to single characters, you should use
`@samp' unless `@kbd' or `@key' is more appropriate.  Also, you may use
`@samp' for entire statements in C and for entire shell commands--in
this case, `@samp' often looks better than `@code'.  Basically, `@samp'
is a catchall for whatever is not covered by `@code', `@kbd', or `@key'.

  Only include punctuation marks within braces if they are part of the
string you are specifying.  Write punctuation marks outside the braces
if those punctuation marks are part of the English text that surrounds
the string.  In the following sentence, for example, the commas and
period are outside of the braces:

     In English, the vowels are @samp{a}, @samp{e},
     @samp{i}, @samp{o}, @samp{u}, and sometimes
     @samp{y}.

This produces:

     In English, the vowels are `a', `e', `i', `o', `u',  and sometimes
     `y'.


File: texinfo,  Node: verb,  Next: var,  Prev: samp,  Up: Indicating

9.1.6 `@verb'{<char>TEXT<char>}
-------------------------------

Use the `@verb' command to print a verbatim sequence of characters.

  Like LaTeX's `\verb' command, the verbatim text can be quoted using
any unique delimiter character.  Enclose the verbatim text, including
the delimiters, in braces.  Text is printed in a fixed-width font:

     How many @verb{|@|}-escapes does one need to print this
     @verb{.@a @b @c.} string or @verb{+@'e?`!`{}\+} this?

produces

     How many @-escapes does one need to print this
     @a @b @c string or these @'e?`{}!`\ this?

  This is in contrast to `@samp' (see the previous section), `@code',
and similar commands; in those cases, the argument is normal Texinfo
text, where the three characters `@{}' are special.  With `@verb',
nothing is special except the delimiter character you choose.

  It is not reliable to use `@verb' inside other Texinfo constructs.
In particular, it does not work to use `@verb' in anything related to
cross-referencing, such as section titles or figure captions.


File: texinfo,  Node: var,  Next: env,  Prev: verb,  Up: Indicating

9.1.7 `@var'{METASYNTACTIC-VARIABLE}
------------------------------------

Use the `@var' command to indicate metasyntactic variables.  A
"metasyntactic variable" is something that stands for another piece of
text.  For example, you should use a metasyntactic variable in the
documentation of a function to describe the arguments that are passed
to that function.

  Do not use `@var' for the names of particular variables in
programming languages.  These are specific names from a program, so
`@code' is correct for them (*note code::).  For example, the Emacs
Lisp variable `texinfo-tex-command' is not a metasyntactic variable; it
is properly formatted using `@code'.

  Do not use `@var' for environment variables either; `@env' is correct
for them (see the next section).

  The effect of `@var' in the Info file is to change the case of the
argument to all upper case.  In the printed manual and HTML output, the
argument is printed in slanted type.

  For example,

     To delete file @var{filename},
     type @samp{rm @var{filename}}.

produces

     To delete file FILENAME, type `rm FILENAME'.

(Note that `@var' may appear inside `@code', `@samp', `@file', etc.)

  Write a metasyntactic variable all in lower case without spaces, and
use hyphens to make it more readable.  Thus, the Texinfo source for the
illustration of how to begin a Texinfo manual looks like this:

     \input texinfo
     @@setfilename @var{info-file-name}
     @@settitle @var{name-of-manual}

This produces:

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

  In some documentation styles, metasyntactic variables are shown with
angle brackets, for example:

     ..., type rm <filename>

However, that is not the style that Texinfo uses.  (You can, of course,
modify the sources to `texinfo.tex' and the Info formatting commands to
output the `<...>' format if you wish.)


File: texinfo,  Node: env,  Next: file,  Prev: var,  Up: Indicating

9.1.8 `@env'{ENVIRONMENT-VARIABLE}
----------------------------------

Use the `@env' command to indicate environment variables, as used by
many operating systems, including GNU.  Do not use it for metasyntactic
variables; use `@var' instead (see the previous section).

  `@env' is equivalent to `@code' in its effects.  For example:

     The @env{PATH} environment variable ...
  produces

     The `PATH' environment variable ...


File: texinfo,  Node: file,  Next: command,  Prev: env,  Up: Indicating

9.1.9 `@file'{FILE-NAME}
------------------------

Use the `@file' command to indicate text that is the name of a file,
buffer, or directory, or is the name of a node in Info.  You can also
use the command for file name suffixes.  Do not use `@file' for symbols
in a programming language; use `@code'.

  Currently, `@file' is equivalent to `@samp' in its effects.  For
example,

     The @file{.el} files are in
     the @file{/usr/local/emacs/lisp} directory.

produces

     The `.el' files are in the `/usr/local/emacs/lisp' directory.


File: texinfo,  Node: command,  Next: option,  Prev: file,  Up: Indicating

9.1.10 `@command'{COMMAND-NAME}
-------------------------------

Use the `@command' command to indicate command names, such as `ls' or
`cc'.

  `@command' is equivalent to `@code' in its effects.  For example:

     The command @command{ls} lists directory contents.
  produces

     The command `ls' lists directory contents.

  You should write the name of a program in the ordinary text font,
rather than using `@command', if you regard it as a new English word,
such as `Emacs' or `Bison'.

  When writing an entire shell command invocation, as in `ls -l', you
should use either `@samp' or `@code' at your discretion.


File: texinfo,  Node: option,  Next: dfn,  Prev: command,  Up: Indicating

9.1.11 `@option'{OPTION-NAME}
-----------------------------

Use the `@option' command to indicate a command-line option; for
example, `-l' or `--version' or `--output=FILENAME'.

  `@option' is equivalent to `@samp' in its effects.  For example:

     The option @option{-l} produces a long listing.
  produces

     The option `-l' produces a long listing.

  In tables, putting options inside `@code' produces a more pleasing
effect.


File: texinfo,  Node: dfn,  Next: cite,  Prev: option,  Up: Indicating

9.1.12 `@dfn'{TERM}
-------------------

Use the `@dfn' command to identify the introductory or defining use of
a technical term.  Use the command only in passages whose purpose is to
introduce a term which will be used again or which the reader ought to
know.  Mere passing mention of a term for the first time does not
deserve `@dfn'.  The command generates italics in the printed manual,
and double quotation marks in the Info file.  For example:

     Getting rid of a file is called @dfn{deleting} it.

produces

     Getting rid of a file is called "deleting" it.

  As a general rule, a sentence containing the defining occurrence of a
term should be a definition of the term.  The sentence does not need to
say explicitly that it is a definition, but it should contain the
information of a definition--it should make the meaning clear.


File: texinfo,  Node: cite,  Next: abbr,  Prev: dfn,  Up: Indicating

9.1.13 `@cite'{REFERENCE}
-------------------------

Use the `@cite' command for the name of a book that lacks a companion
Info file.  The command produces italics in the printed manual, and
quotation marks in the Info file.

  If a book is written in Texinfo, it is better to use a cross reference
command since a reader can easily follow such a reference in Info.
*Note `@xref': xref.


File: texinfo,  Node: abbr,  Next: acronym,  Prev: cite,  Up: Indicating

9.1.14 `@abbr'{ABBREVIATION[, MEANING]}
---------------------------------------

You can use the `@abbr' command for general abbreviations.  The
abbreviation is given as the single argument in braces, as in
`@abbr{Comput.}'.  As a matter of style, or for particular
abbreviations, you may prefer to omit periods, as in `@abbr{Mr}
Stallman'.

  `@abbr' accepts an optional second argument, intended to be used for
the meaning of the abbreviation.

  If the abbreviation ends with a lowercase letter and a period, and is
not at the end of a sentence, and has no second argument, remember to
use the `@.' command (*note Not Ending a Sentence::) to get the correct
spacing.  However, you do not have to use `@.' within the abbreviation
itself; Texinfo automatically assumes periods within the abbreivation
do not end a sentence.

  In TeX and in the Info output, the first argument is printed as-is;
if the second argument is present, it is printed in parentheses after
the abbreviation.  In HTML and XML, the `<abbr>' tag is used; in
Docbook, the `<abbrev>' tag is used.  For instance:

     @abbr{Comput. J., Computer Journal}

produces:

     Comput. J. (Computer Journal)

  For abbreviations consisting of all capital letters, you may prefer to
use the `@acronym' command instead.  See the next section for more on
the usage of these two commands.


File: texinfo,  Node: acronym,  Next: indicateurl,  Prev: abbr,  Up: Indicating

9.1.15 `@acronym'{ACRONYM[, MEANING]}
-------------------------------------

Use the `@acronym' command for abbreviations written in all capital
letters, such as `NASA'.  The abbreviation is given as the single
argument in braces, as in `@acronym{NASA}'.  As a matter of style, or
for particular acronyms, you may prefer to use periods, as in
`@acronym{N.A.S.A.}'.

  `@acronym' accepts an optional second argument, intended to be used
for the meaning of the acronym.

  If the acronym is at the end of a sentence, and if there is no second
argument, remember to use the `@.' or similar command (*note Ending a
Sentence::) to get the correct spacing.

  In TeX, the acronym is printed in slightly smaller font.  In the Info
output, the argument is printed as-is.  In either format, if the second
argument is present, it is printed in parentheses after the acronym.
In HTML, Docbook, and XML, the `<acronym>' tag is used.

  For instance (since GNU is a recursive acronym, we use `@acronym'
recursively):

     @acronym{GNU, @acronym{GNU}'s Not Unix}

produces:

     GNU (@acronym{GNU}'s Not Unix)

  In some circumstances, it is conventional to print family names in all
capitals.  Don't use `@acronym' for this, since a name is not an
acronym.  Use `@sc' instead (*note Smallcaps::).

  `@abbr' and `@acronym' are closely related commands: they both signal
to the reader that a shortened form is being used, and possibly give a
meaning.  When choosing whether to use these two commands, please bear
the following in mind.

   - In standard English usage, acronyms are a subset of abbreviations:
     they include pronounceable words like `NATO', `radar', and
     `snafu', and some sources also include syllable acronyms like
     `Usenet', hybrids like `SIGGRAPH', and unpronounceable initialisms
     like `FBI'.

   - In Texinfo, an acronym (but not an abbreviation) should consist
     only of capital letters and periods, no lowercase.

   - In TeX, an acronym (but not an abbreviation) is printed in a
     slightly smaller font.

   - Some browsers place a dotted bottom border under abbreviations but
     not acronyms.

   - It's not essential to use these commands for all abbreviations.
     Text is perfectly readable without them, and for common
     abbreviations like `etc.', we consider them to be overkill.



File: texinfo,  Node: indicateurl,  Next: email,  Prev: acronym,  Up: Indicating

9.1.16 `@indicateurl'{UNIFORM-RESOURCE-LOCATOR}
-----------------------------------------------

Use the `@indicateurl' command to indicate a uniform resource locator
on the World Wide Web.  This is analogous to `@file', `@var', etc., and
is purely for markup purposes.  It does not produce a link you can
follow in HTML output (use the `@uref' command for that, *note `@uref':
uref.).  It is useful for url's which do not actually exist.  For
example:

     For example, the url might be @indicateurl{http://example.org/path}.

which produces:

     For example, the url might be <http://example.org/path>.


File: texinfo,  Node: email,  Prev: indicateurl,  Up: Indicating

9.1.17 `@email'{EMAIL-ADDRESS[, DISPLAYED-TEXT]}
------------------------------------------------

Use the `@email' command to indicate an electronic mail address.  It
takes one mandatory argument, the address, and one optional argument,
the text to display (the default is the address itself).

  In Info, the address is shown in angle brackets, preceded by the text
to display if any.  In TeX, the angle brackets are omitted.  In HTML
output, `@email' produces a `mailto' link that usually brings up a mail
composition window.  For example:

     Send bug reports to @email{bug-texinfo@@gnu.org},
     suggestions to the @email{bug-texinfo@@gnu.org, same place}.
  produces
     Send bug reports to <bug-texinfo@gnu.org>,
     suggestions to the same place <bug-texinfo@gnu.org>.


File: texinfo,  Node: Emphasis,  Prev: Indicating,  Up: Marking Text

9.2 Emphasizing Text
====================

Usually, Texinfo changes the font to mark words in the text according to
what category the words belong to; an example is the `@code' command.
Most often, this is the best way to mark words.  However, sometimes you
will want to emphasize text without indicating a category.  Texinfo has
two commands to do this.  Also, Texinfo has several commands that
specify the font in which TeX will typeset text.  These commands have
no effect on Info and only one of them, the `@r' command, has any
regular use.

* Menu:

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.


File: texinfo,  Node: emph & strong,  Next: Smallcaps,  Up: Emphasis

9.2.1 `@emph'{TEXT} and `@strong'{TEXT}
---------------------------------------

The `@emph' and `@strong' commands are for emphasis; `@strong' is
stronger.  In printed output, `@emph' produces _italics_ and `@strong'
produces *bold*.

  For example,

     @strong{Caution:} @samp{rm * .[^.]*}
     removes @emph{all} files in the directory.

produces the following in printed output and HTML:

     *Caution*: `rm * .[^.]*' removes _all_ files in the directory.

and the following in Info:

     *Caution:* `rm * .[^.]*' removes _all_
     files in the directory.

  The `@strong' command is seldom used except to mark what is, in
effect, a typographical element, such as the word `Caution' in the
preceding example.

  In the Info output, `@emph' surrounds the text with underscores
(`_'), and `@strong' puts asterisks around the text.

     Caution: Do not use `@strong' with the word `Note'; Info will
     mistake the combination for a cross reference.  (It's usually
     redundant, anyway.)  Use a phrase such as *Please notice* or
     *Caution* instead, or the optional argument to
     `@quotation'--`Note' is allowable there.


File: texinfo,  Node: Smallcaps,  Next: Fonts,  Prev: emph & strong,  Up: Emphasis

9.2.2 `@sc'{TEXT}: The Small Caps Font
--------------------------------------

Use the `@sc' command to set text in A SMALL CAPS FONT (where
possible).  Write the text you want to be in small caps between braces
in lower case, like this:

     Richard @sc{Stallman} founded @acronym{GNU}.

This produces:

     Richard STALLMAN founded GNU.

  As shown here, we recommend using `@acronym' for actual acronyms
(*note acronym::), and reserving `@sc' for special cases where you want
small caps.  The output is not the same (`@acronym' prints in a smaller
text font, not the small caps font), but more importantly it describes
the actual text more accurately.

  Family names are one case where small capitals are sometimes
desirable, also as shown here.

  TeX typesets any uppercase letters between the braces of an `@sc'
command in full-size capitals; only lowercase letters are printed in
the small caps font.  In the Info output, the argument to `@sc' is
printed in all upper case.  In HTML, the argument is uppercased and the
output marked with the `<small>' tag to reduce the font size.

  Since it's redundant to mark all-uppercase text with `@sc',
`makeinfo' warns about such usage.

  We recommend using regular mixed case wherever possible.


File: texinfo,  Node: Fonts,  Prev: Smallcaps,  Up: Emphasis

9.2.3 Fonts for Printing, Not Info
----------------------------------

Texinfo provides a number of font commands that specify font changes in
the printed manual and (where possible) in the HTML output, but have no
effect in the Info file.  All the commands apply to an argument that
follows, surrounded by braces.

`@b'
     selects bold face;

`@i'
     selects an italic font;

`@r'
     selects a roman font, which is the usual font in which text is
     printed.  It may or may not be seriffed.

`@sansserif'
     selects a sans serif font;

`@slanted'
     rselects a slanted font;

`@t'
     selects the fixed-width, typewriter-style font used by `@code';


  (The commands with longer names were invented much later than the
others, when it did not seem desirable to use very short names for such
an infrequently needed feature.)

  Only the `@r' command has much use: in example-like environments, you
can use the `@r' command to write comments in the standard roman font
instead of the fixed-width font.  This looks better in printed output,
and produces a `<lineannotation>' tag in Docbook output.

  For example,

     @lisp
     (+ 2 2)    ; @r{Add two plus two.}
     @end lisp

produces

     (+ 2 2)    ; Add two plus two.

  In general, you should avoid using the other font commands.  Some of
them are only useful when documenting functionality with specific font
effects, such as in \TeX\ and related packages.


File: texinfo,  Node: Quotations and Examples,  Next: Lists and Tables,  Prev: Marking Text,  Up: Top

10 Quotations and Examples
**************************

Quotations and examples are blocks of text consisting of one or more
whole paragraphs that are set off from the bulk of the text and treated
differently.  They are usually indented in the output.

  In Texinfo, you always begin a quotation or example by writing an
@-command at the beginning of a line by itself, and end it by writing
an `@end' command that is also at the beginning of a line by itself.
For instance, you begin an example by writing `@example' by itself at
the beginning of a line and end the example by writing `@end example'
on a line by itself, at the beginning of that line, and with only one
space between the `@end' and the `example'.

* Menu:

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Examples in a smaller font.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* indent::                      Forcing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.


File: texinfo,  Node: Block Enclosing Commands,  Next: quotation,  Up: Quotations and Examples

10.1 Block Enclosing Commands
=============================

Here are commands for quotations and examples, explained further in the
following sections:

`@quotation'
     Indicate text that is quoted. The text is filled, indented (from
     both margins), and printed in a roman font by default.

`@example'
     Illustrate code, commands, and the like. The text is printed in a
     fixed-width font, and indented but not filled.

`@verbatim'
     Mark a piece of text that is to be printed verbatim; no character
     substitutions are made and all commands are ignored, until the next
     `@end verbatim'.  The text is printed in a fixed-width font, and
     not indented or filled.  Extra spaces and blank lines are
     significant, and tabs are expanded.

`@smallexample'
     Same as `@example', except that in TeX this command typesets text
     in a smaller font.

`@lisp'
     Like `@example', but specifically for illustrating Lisp code. The
     text is printed in a fixed-width font, and indented but not filled.

`@smalllisp'
     Is to `@lisp' as `@smallexample' is to `@example'.

`@display'
     Display illustrative text.  The text is indented but not filled,
     and no font is selected (so, by default, the font is roman).

`@smalldisplay'
     Is to `@display' as `@smallexample' is to `@example'.

`@format'
     Like `@display' (the text is not filled and no font is selected),
     but the text is not indented.

`@smallformat'
     Is to `@format' as `@smallexample' is to `@example'.

  The `@exdent' command is used within the above constructs to undo the
indentation of a line.

  The `@flushleft' and `@flushright' commands are used to line up the
left or right margins of unfilled text.

  The `@noindent' command may be used after one of the above constructs
to prevent the following text from being indented as a new paragraph.

  You can use the `@cartouche' environment around one of the above
constructs to highlight the example or quotation by drawing a box with
rounded corners around it.  *Note Drawing Cartouches Around Examples:
cartouche.


File: texinfo,  Node: quotation,  Next: example,  Prev: Block Enclosing Commands,  Up: Quotations and Examples

10.2 `@quotation': Block quotations
===================================

The text of a quotation is processed normally (regular font, text is
filled) except that:

   * the margins are closer to the center of the page, so the whole of
     the quotation is indented;

   * and the first lines of paragraphs are indented no more than other
     lines.


     This is an example of text written between an `@quotation' command
     and an `@end quotation' command.  An `@quotation' command is most
     often used to indicate text that is excerpted from another (real
     or hypothetical) printed work.

  Write an `@quotation' command as text on a line by itself.  This line
will disappear from the output.  Mark the end of the quotation with a
line beginning with and containing only `@end quotation'.  The `@end
quotation' line will likewise disappear from the output.

  `@quotation' takes one optional argument, given on the remainder of
the line.  This text, if present, is included at the beginning of the
quotation in bold or otherwise emphasized, and followed with a `:'.
For example:

     @quotation Note
     This is
     a foo.
     @end quotation

produces

     Note: This is a foo.

  If the `@quotation' argument is exactly one of these words:

     Caution  Important  Note  Tip  Warning

then the Docbook output uses corresponding special tags (`<note>',
etc.) instead of the default `<blockquote>'.  HTML output always uses
`<blockquote>'.


File: texinfo,  Node: example,  Next: verbatim,  Prev: quotation,  Up: Quotations and Examples

10.3 `@example': Example Text
=============================

The `@example' environment is used to indicate an example that is not
part of the running text, such as computer input or output.  Write an
`@example' command at the beginning of a line by itself.  Mark the end
of the example with an `@end example' command, also written at the
beginning of a line by itself.

  An `@example' environment has the following characteristics:

   * Each line in the input file is a line in the output; that is, the
     source text is not filled as it normally is.

   * Extra spaces and blank lines are significant.

   * The output is indented.

   * The output uses a fixed-width font.

   * Texinfo commands _are_ expanded; if you want the output to be the
     input verbatim, use the `@verbatim' environment instead (*note
     `@verbatim': verbatim.).

  For example,

     @example
     cp foo @var{dest1}; \
      cp foo @var{dest2}
     @end example

produces

     cp foo DEST1; \
      cp foo DEST2

  The lines containing `@example' and `@end example' will disappear
from the output.  To make the output look good, you should put a blank
line before the `@example' and another blank line after the `@end
example'.  Blank lines inside the beginning `@example' and the ending
`@end example', on the other hand, do appear in the output.

     Caution: Do not use tabs in the lines of an example!  (Or anywhere
     else in Texinfo, except in verbatim environments.)  TeX treats
     tabs as single spaces, and that is not what they look like.  In
     Emacs, you can use `M-x untabify' to convert tabs in a region to
     multiple spaces.

  Examples are often, logically speaking, "in the middle" of a
paragraph, and the text that continues afterwards should not be
indented, as in the example above.  The `@noindent' command prevents a
piece of text from being indented as if it were a new paragraph (*note
`@noindent': noindent.

  If you want to embed code fragments within sentences, instead of
displaying them, use the `@code' command or its relatives (*note
`@code': code.).

  If you wish to write a "comment" on a line of an example in the
normal roman font, you can use the `@r' command (*note Fonts::).


File: texinfo,  Node: verbatim,  Next: verbatiminclude,  Prev: example,  Up: Quotations and Examples

10.4 `@verbatim': Literal Text
==============================

Use the `@verbatim' environment for printing of text that may contain
special characters or commands that should not be interpreted, such as
computer input or output (`@example' interprets its text as regular
Texinfo commands).  This is especially useful for including
automatically generated output in a Texinfo manual.  Here is an example;
the output you see is just the same as the input, with a line
`@verbatim' before and a line `@end verbatim' after.


This is an example of text written in a @verbatim
block.  No character substitutions are made.  All commands
are ignored, until `<at>end verbatim'.

In the printed manual, the text is typeset in a
fixed-width font, and not indented or filled.  All
spaces and blank lines are significant, including tabs.

  Write a `@verbatim' command at the beginning of a line by itself.
This line will disappear from the output.  Mark the end of the verbatim
block with a `@end verbatim' command, also written at the beginning of
a line by itself.  The `@end verbatim' will also disappear from the
output.

  For example:

@verbatim
{
<TAB>@command with strange characters: @'e
expand<TAB>me
}
@end verbatim


produces


{
        @command with strange characters: @'e
expand	me
}

  Since the lines containing `@verbatim' and `@end verbatim' produce no
output, typically you should put a blank line before the `@verbatim'
and another blank line after the `@end verbatim'.  Blank lines between
the beginning `@verbatim' and the ending `@end verbatim' will appear in
the output.

  It is not reliable to use `@verbatim' inside other Texinfo constructs.


File: texinfo,  Node: verbatiminclude,  Next: lisp,  Prev: verbatim,  Up: Quotations and Examples

10.5 `@verbatiminclude' FILE: Include a File Verbatim
=====================================================

You can include the exact contents of a file in the document with the
`@verbatiminclude' command:

     @verbatiminclude FILENAME

  The contents of FILENAME is printed in a verbatim environment (*note
`@verbatim': verbatim.).  Generally, the file is printed exactly as it
is, with all special characters and white space retained.  No
indentation is added; if you want indentation, enclose the
`@verbatiminclude' within `@example' (*note `@example': example.).

  The name of the file is taken literally, with a single exception:
`@value{VAR}' references are expanded.  This makes it possible to
reliably include files in other directories in a distribution, for
instance:

     @include @value{top_srcdir}/NEWS

(You still have to get `top_srcdir' defined in the first place.)


File: texinfo,  Node: lisp,  Next: small,  Prev: verbatiminclude,  Up: Quotations and Examples

10.6 `@lisp': Marking a Lisp Example
====================================

The `@lisp' command is used for Lisp code.  It is synonymous with the
`@example' command.

     This is an example of text written between an
     `@lisp' command and an `@end lisp' command.

  Use `@lisp' instead of `@example' to preserve information regarding
the nature of the example.  This is useful, for example, if you write a
function that evaluates only and all the Lisp code in a Texinfo file.
Then you can use the Texinfo file as a Lisp library.(1)

  Mark the end of `@lisp' with `@end lisp' on a line by itself.

  ---------- Footnotes ----------

  (1) It would be straightforward to extend Texinfo to work in a
similar fashion for C, Fortran, or other languages.


File: texinfo,  Node: small,  Next: display,  Prev: lisp,  Up: Quotations and Examples

10.7 `@small...' Block Commands
===============================

In addition to the regular `@example' and `@lisp' commands, Texinfo has
"small" example-style commands.  These are `@smalldisplay',
`@smallexample', `@smallformat', and `@smalllisp'.

  In Info, the `@small...' commands are equivalent to their non-small
companion commands.

  In TeX, however, the `@small...' commands typeset text in a smaller
font than the non-small example commands.  Consequently, many examples
containing long lines fit on a page without needing to be shortened.

  Mark the end of an `@small...' block with a corresponding `@end
small...'.  For example, pair `@smallexample' with `@end smallexample'.

  Here is an example of the font used by the `@small...' commands (in
Info, the output will be the same as usual):

     ... to make sure that you have the freedom to
     distribute copies of free software (and charge for
     this service if you wish), that you receive source
     code or can get it if you want it, that you can
     change the software or use pieces of it in new free
     programs; and that you know you can do these things.

  The `@small...' commands make it easier to prepare manuals without
forcing you to edit examples by hand to fit them onto narrower pages.

  As a general rule, a printed document looks much better if you use
only one of (for instance) `@example' or `@smallexample' consistently
within a chapter.


File: texinfo,  Node: display,  Next: format,  Prev: small,  Up: Quotations and Examples

10.8 `@display' and `@smalldisplay'
===================================

The `@display' command begins a kind of example, where each line of
input produces a line of output, and the output is indented.  It is
thus like the `@example' command except that, in a printed manual,
`@display' does not select the fixed-width font.  In fact, it does not
specify the font at all, so that the text appears in the same font it
would have appeared in without the `@display' command.

     This is an example of text written between an `@display' command
     and an `@end display' command.  The `@display' command
     indents the text, but does not fill it.

  Texinfo also provides a command `@smalldisplay', which is like
`@display' but uses a smaller font in `@smallbook' format.  *Note
small::.

  The `@table' command (*note table::) does not work inside `@display'.
Since `@display' is line-oriented, it doesn't make sense to use them
together.  If you want to indent a table, try `@quotation' (*note
quotation::).


File: texinfo,  Node: format,  Next: exdent,  Prev: display,  Up: Quotations and Examples

10.9 `@format' and `@smallformat'
=================================

The `@format' command is similar to `@example' except that, in the
printed manual, `@format' does not select the fixed-width font and does
not narrow the margins.

This is an example of text written between an `@format' command
and an `@end format' command.  As you can see
from this example,
the `@format' command does not fill the text.

  Texinfo also provides a command `@smallformat', which is like
`@format' but uses a smaller font in `@smallbook' format.  *Note
small::.


File: texinfo,  Node: exdent,  Next: flushleft & flushright,  Prev: format,  Up: Quotations and Examples

10.10 `@exdent': Undoing a Line's Indentation
=============================================

The `@exdent' command removes any indentation a line might have.  The
command is written at the beginning of a line and applies only to the
text that follows the command that is on the same line.  Do not use
braces around the text.  In a printed manual, the text on an `@exdent'
line is printed in the roman font.

  `@exdent' is usually used within examples.  Thus,

     @example
     This line follows an @@example command.
     @exdent This line is exdented.
     This line follows the exdented line.
     The @@end example comes on the next line.
     @end group

produces

     This line follows an @example command.
This line is exdented.
     This line follows the exdented line.
     The @end example comes on the next line.

  In practice, the `@exdent' command is rarely used.  Usually, you
un-indent text by ending the example and returning the page to its
normal width.


File: texinfo,  Node: flushleft & flushright,  Next: noindent,  Prev: exdent,  Up: Quotations and Examples

10.11 `@flushleft' and `@flushright'
====================================

The `@flushleft' and `@flushright' commands line up the ends of lines
on the left and right margins of a page, but do not fill the text.  The
commands are written on lines of their own, without braces.  The
`@flushleft' and `@flushright' commands are ended by `@end flushleft'
and `@end flushright' commands on lines of their own.

  For example,

     @flushleft
     This text is
     written flushleft.
     @end flushleft

produces

     This text is
     written flushleft.

  `@flushright' produces the type of indentation often used in the
return address of letters.  For example,

     @flushright
     Here is an example of text written
     flushright.  The @code{@flushright} command
     right justifies every line but leaves the
     left end ragged.
     @end flushright

produces

                                     Here is an example of text written
                                 flushright.  The `@flushright' command
                              right justifies every line but leaves the
                                                       left end ragged.


File: texinfo,  Node: noindent,  Next: indent,  Prev: flushleft & flushright,  Up: Quotations and Examples

10.12 `@noindent': Omitting Indentation
=======================================

An example or other inclusion can break a paragraph into segments.
Ordinarily, the formatters indent text that follows an example as a new
paragraph.  You can prevent this on a case-by-case basis by writing
`@noindent' at the beginning of a line, preceding the continuation
text.  You can also disable indentation for all paragraphs globally with
`@paragraphindent' (*note Paragraph Indenting: paragraphindent.).

  It is best to write `@noindent' on a line by itself, since in most
environments, spaces following the command will not be ignored.  It's ok
to use it at the beginning of a line, with text following, outside of
any environment.

  For example:

     @example
     This is an example
     @end example

     @noindent
     This line is not indented.  As you can see, the
     beginning of the line is fully flush left with the line
     that follows after it.  (This whole example is between
     @code{@@display} and @code{@@end display}.)

produces:


          This is an example

     This line is not indented.  As you can see, the
     beginning of the line is fully flush left with the line
     that follows after it.  (This whole example is between
     `@display' and `@end display'.)

  To adjust the number of blank lines properly in the Info file output,
remember that the line containing `@noindent' does not generate a blank
line, and neither does the `@end example' line.

  In the Texinfo source file for this manual, each line that says
`produces' is preceded by `@noindent'.

  Do not put braces after an `@noindent' command; they are not
necessary, since `@noindent' is a command used outside of paragraphs
(*note Command Syntax::).


File: texinfo,  Node: indent,  Next: cartouche,  Prev: noindent,  Up: Quotations and Examples

10.13 `@indent': Forcing Indentation
====================================

  To complement the `@noindent' command (see the previous section),
Texinfo provides the `@indent' command that forces a paragraph to be
indented.  This paragraph, for instance, is indented using an `@indent'
command.  The first paragraph of a section is the most likely place to
use `@indent', to override the normal behavior of no indentation there
(*note paragraphindent::).

  It is best to write `@indent' on a line by itself, since in most
environments, spaces following the command will not be ignored.  The
`@indent' line will not generate a blank line in the Info output within
an environment.

  However, it is ok to use it at the beginning of a line, with text
following, outside of any environment.

  Do not put braces after an `@indent' command; they are not necessary,
since `@indent' is a command used outside of paragraphs (*note Command
Syntax::).


File: texinfo,  Node: cartouche,  Prev: indent,  Up: Quotations and Examples

10.14 `@cartouche': Rounded Rectangles Around Examples
======================================================

In a printed manual, the `@cartouche' command draws a box with rounded
corners around its contents.  In HTML, a normal rectangle is drawn
(that's the best HTML can do).  `@cartouche' has no effect in Info
output.

  You can use this command to further highlight an example or quotation.
For instance, you could write a manual in which one type of example is
surrounded by a cartouche for emphasis.

  For example,

     @cartouche
     @example
     % pwd
     /usr/local/share/emacs
     @end example
     @end cartouche

surrounds the two-line example with a box with rounded corners, in the
printed manual.

  The output from the example looks like this (if you're reading this in
Info, you'll see the `@cartouche' had no effect):

     % pwd
     /usr/local/info

  For proper output in HTML, it's necessary to put the `@cartouche'
around the `@example', and not the other way around.  This limitation
of `makeinfo' may be removed one day.

  `@cartouche' also implies `@group' (*note group::).


File: texinfo,  Node: Lists and Tables,  Next: Special Displays,  Prev: Quotations and Examples,  Up: Top

11 Lists and Tables
*******************

Texinfo has several ways of making lists and tables.  Lists can be
bulleted or numbered; two-column tables can highlight the items in the
first column; multi-column tables are also supported.

* Menu:

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.


File: texinfo,  Node: Introducing Lists,  Next: itemize,  Up: Lists and Tables

11.1 Introducing Lists
======================

Texinfo automatically indents the text in lists or tables, and numbers
an enumerated list.  This last feature is useful if you modify the
list, since you do not need to renumber it yourself.

  Numbered lists and tables begin with the appropriate @-command at the
beginning of a line, and end with the corresponding `@end' command on a
line by itself.  The table and itemized-list commands also require that
you write formatting information on the same line as the beginning
@-command.

  Begin an enumerated list, for example, with an `@enumerate' command
and end the list with an `@end enumerate' command.  Begin an itemized
list with an `@itemize' command, followed on the same line by a
formatting command such as `@bullet', and end the list with an `@end
itemize' command.  

  Precede each element of a list with an `@item' or `@itemx' command.


Here is an itemized list of the different kinds of table and lists:

   * Itemized lists with and without bullets.

   * Enumerated lists, using numbers or letters.

   * Two-column tables with highlighting.


Here is an enumerated list with the same items:

  1. Itemized lists with and without bullets.

  2. Enumerated lists, using numbers or letters.

  3. Two-column tables with highlighting.


And here is a two-column table with the same items and their @-commands:

`@itemize'
     Itemized lists with and without bullets.

`@enumerate'
     Enumerated lists, using numbers or letters.

`@table'
`@ftable'
`@vtable'
     Two-column tables, optionally with indexing.


File: texinfo,  Node: itemize,  Next: enumerate,  Prev: Introducing Lists,  Up: Lists and Tables

11.2 `@itemize': Making an Itemized List
========================================

The `@itemize' command produces sequences of indented paragraphs, with
a bullet or other mark inside the left margin at the beginning of each
paragraph for which such a mark is desired.

  Begin an itemized list by writing `@itemize' at the beginning of a
line.  Follow the command, on the same line, with a character or a
Texinfo command that generates a mark.  Usually, you will write
`@bullet' after `@itemize', but you can use `@minus', or any command or
character that results in a single character in the Info file.  If you
don't want any mark at all, use `@w'.  (When you write the mark command
such as `@bullet' after an `@itemize' command, you may omit the `{}'.)
If you don't specify a mark command, the default is `@bullet'.

  Write the text of the indented paragraphs themselves after the
`@itemize', up to another line that says `@end itemize'.

  At the beginning of each paragraph for which a mark in the margin is
desired, write a line that starts with `@item'.  It is ok to have text
following the `@item'.

  Usually, you should put a blank line before an `@item'.  This puts a
blank line in the Info file. (TeX inserts the proper interline
whitespace in either case.)  Except when the entries are very brief,
these blank lines make the list look better.

  Here is an example of the use of `@itemize', followed by the output
it produces.  `@bullet' produces an `*' in Info and a round dot in TeX.

     @itemize @bullet
     @item
     Some text for foo.

     @item
     Some text
     for bar.
     @end itemize

This produces:

        * Some text for foo.

        * Some text for bar.

  Itemized lists may be embedded within other itemized lists.  Here is a
list marked with dashes embedded in a list marked with bullets:

     @itemize @bullet
     @item
     First item.

     @itemize @minus
     @item
     Inner item.

     @item
     Second inner item.
     @end itemize

     @item
     Second outer item.
     @end itemize

This produces:

        * First item.

             - Inner item.

             - Second inner item.

        * Second outer item.


File: texinfo,  Node: enumerate,  Next: Two-column Tables,  Prev: itemize,  Up: Lists and Tables

11.3 `@enumerate': Making a Numbered or Lettered List
=====================================================

`@enumerate' is like `@itemize' (*note `@itemize': itemize.), except
that the labels on the items are successive integers or letters instead
of bullets.

  Write the `@enumerate' command at the beginning of a line.  The
command does not require an argument, but accepts either a number or a
letter as an option.  Without an argument, `@enumerate' starts the list
with the number `1'.  With a numeric argument, such as `3', the command
starts the list with that number.  With an upper or lower case letter,
such as `a' or `A', the command starts the list with that letter.

  Write the text of the enumerated list in the same way as an itemized
list: write a line starting with `@item' at the beginning of each
paragraph that you want enumerated.  It is ok to have text following
the `@item'.

  You should put a blank line between entries in the list.  This
generally makes it easier to read the Info file.

  Here is an example of `@enumerate' without an argument:

     @enumerate
     @item
     Underlying causes.

     @item
     Proximate causes.
     @end enumerate

This produces:

  1. Underlying causes.

  2. Proximate causes.


  Here is an example with an argument of `3':

     @enumerate 3
     @item
     Predisposing causes.

     @item
     Precipitating causes.

     @item
     Perpetuating causes.
     @end enumerate

This produces:

  3. Predisposing causes.

  4. Precipitating causes.

  5. Perpetuating causes.


  Here is a brief summary of the alternatives.  The summary is
constructed using `@enumerate' with an argument of `a'.

  a. `@enumerate'

     Without an argument, produce a numbered list, starting with the
     number 1.

  b. `@enumerate POSITIVE-INTEGER'

     With a (positive) numeric argument, start a numbered list with that
     number.  You can use this to continue a list that you interrupted
     with other text.

  c. `@enumerate UPPER-CASE-LETTER'

     With an upper case letter as argument, start a list in which each
     item is marked by a letter, beginning with that upper case letter.

  d. `@enumerate LOWER-CASE-LETTER'

     With a lower case letter as argument, start a list in which each
     item is marked by a letter, beginning with that lower case letter.

  You can also nest enumerated lists, as in an outline.


File: texinfo,  Node: Two-column Tables,  Next: Multi-column Tables,  Prev: enumerate,  Up: Lists and Tables

11.4 Making a Two-column Table
==============================

`@table' is similar to `@itemize' (*note `@itemize': itemize.), but
allows you to specify a name or heading line for each item.  The
`@table' command is used to produce two-column tables, and is
especially useful for glossaries, explanatory exhibits, and
command-line option summaries.

* Menu:

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.


File: texinfo,  Node: table,  Next: ftable vtable,  Up: Two-column Tables

11.4.1 Using the `@table' Command
---------------------------------

Use the `@table' command to produce two-column tables.  It is usually
listed for "definition lists" of various sorts, where you have a list
of terms and a brief text with each one.

  Write the `@table' command at the beginning of a line, after a blank
line, and follow it on the same line with an argument that is a Texinfo
"indicating" command such as `@code', `@samp', `@var', `@option', or
`@kbd' (*note Indicating::).

  This command will be applied to the text that goes into the first
column of each item and thus determines how it will be highlighted.
For example, `@table @code' will cause the text in the first column to
be output as if it `@code' command.

  You may also use the `@asis' command as an argument to `@table'.
`@asis' is a command that does nothing; if you use this command after
`@table', the first column entries are output without added
highlighting ("as is").

  The `@table' command works with other commands besides those
explicitly mentioned here.  However, you can only use commands that
normally take arguments in braces.  (In this case, however, you use the
command name without an argument, because the subsequent `@item''s will
supply the argument.)

  Begin each table entry with an `@item' command at the beginning of a
line.  Write the first column text on the same line as the `@item'
command.  Write the second column text on the line following the
`@item' line and on subsequent lines.  (You do not need to type
anything for an empty second column entry.)  You may write as many
lines of supporting text as you wish, even several paragraphs.  But
only the text on the same line as the `@item' will be placed in the
first column (including any footnotes).

  Normally, you should put a blank line before an `@item' line.  This
puts a blank line in the Info file.  Except when the entries are very
brief, a blank line looks better.

  End the table with a line consisting of `@end table', followed by a
blank line.  TeX will always start a new paragraph after the table, so
the blank line is needed for the Info output to be analogous.

  The following table, for example, highlights the text in the first
column with an `@samp' command:

     @table @samp
     @item foo
     This is the text for
     @samp{foo}.

     @item bar
     Text for @samp{bar}.
     @end table

This produces:

`foo'
     This is the text for `foo'.

`bar'
     Text for `bar'.

  If you want to list two or more named items with a single block of
text, use the `@itemx' command.  (*Note `@itemx': itemx.)


File: texinfo,  Node: ftable vtable,  Next: itemx,  Prev: table,  Up: Two-column Tables

11.4.2 `@ftable' and `@vtable'
------------------------------

The `@ftable' and `@vtable' commands are the same as the `@table'
command except that `@ftable' automatically enters each of the items in
the first column of the table into the index of functions and `@vtable'
automatically enters each of the items in the first column of the table
into the index of variables.  This simplifies the task of creating
indices.  Only the items on the same line as the `@item' commands are
indexed, and they are indexed in exactly the form that they appear on
that line.  *Note Indices::, for more information about indices.

  Begin a two-column table using `@ftable' or `@vtable' by writing the
@-command at the beginning of a line, followed on the same line by an
argument that is a Texinfo command such as `@code', exactly as you
would for an `@table' command; and end the table with an `@end ftable'
or `@end vtable' command on a line by itself.

  See the example for `@table' in the previous section.


File: texinfo,  Node: itemx,  Prev: ftable vtable,  Up: Two-column Tables

11.4.3 `@itemx'
---------------

Use the `@itemx' command inside a table when you have two or more first
column entries for the same item, each of which should appear on a line
of its own.

  Use `@item' for the first entry, and `@itemx' for all subsequent
entries; `@itemx' must always follow an `@item' command, with no blank
line intervening.

  The `@itemx' command works exactly like `@item' except that it does
not generate extra vertical space above the first column text.  If you
have multiple consecutive `@itemx' commands, do not insert any blank
lines between them.

  For example,

     @table @code
     @item upcase
     @itemx downcase
     These two functions accept a character or a string as
     argument, and return the corresponding upper case (lower
     case) character or string.
     @end table

This produces:

`upcase'
`downcase'
     These two functions accept a character or a string as argument,
     and return the corresponding upper case (lower case) character or
     string.

(Note also that this example illustrates multi-line supporting text in
a two-column table.)


File: texinfo,  Node: Multi-column Tables,  Prev: Two-column Tables,  Up: Lists and Tables

11.5 `@multitable': Multi-column Tables
=======================================

`@multitable' allows you to construct tables with any number of
columns, with each column having any width you like.

  You define the column widths on the `@multitable' line itself, and
write each row of the actual table following an `@item' command, with
columns separated by an `@tab' command.  Finally, `@end multitable'
completes the table.  Details in the sections below.

* Menu:

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.


File: texinfo,  Node: Multitable Column Widths,  Next: Multitable Rows,  Up: Multi-column Tables

11.5.1 Multitable Column Widths
-------------------------------

You can define the column widths for a multitable in two ways: as
fractions of the line length; or with a prototype row.  Mixing the two
methods is not supported.  In either case, the widths are defined
entirely on the same line as the `@multitable' command.

  1. To specify column widths as fractions of the line length, write
     `@columnfractions' and the decimal numbers (presumably less than
     1; a leading zero is allowed and ignored) after the `@multitable'
     command, as in:

          @multitable @columnfractions .33 .33 .33

     The fractions need not add up exactly to 1.0, as these do not.
     This allows you to produce tables that do not need the full line
     length.

  2. To specify a prototype row, write the longest entry for each column
     enclosed in braces after the `@multitable' command.  For example:

          @multitable {some text for column one} {for column two}

     The first column will then have the width of the typeset `some
     text for column one', and the second column the width of `for
     column two'.

     The prototype entries need not appear in the table itself.

     Although we used simple text in this example, the prototype
     entries can contain Texinfo commands; markup commands such as
     `@code' are particularly likely to be useful.



File: texinfo,  Node: Multitable Rows,  Prev: Multitable Column Widths,  Up: Multi-column Tables

11.5.2 Multitable Rows
----------------------

After the `@multitable' command defining the column widths (see the
previous section), you begin each row in the body of a multitable with
`@item', and separate the column entries with `@tab'.  Line breaks are
not special within the table body, and you may break input lines in
your source file as necessary.

  You can also use `@headitem' instead of `@item' to produce a "heading
row".  The TeX output for such a row is in bold, and the HTML, XML, and
Docbook output uses the `<thead>' tag.

  Here is a complete example of a multi-column table (the text is from
`The GNU Emacs Manual', *note Splitting Windows: (emacs)Split Window.):

     @multitable @columnfractions .15 .45 .4
     @headitem Key @tab Command @tab Description
     @item C-x 2
     @tab @code{split-window-vertically}
     @tab Split the selected window into two windows,
     with one above the other.
     @item C-x 3
     @tab @code{split-window-horizontally}
     @tab Split the selected window into two windows
     positioned side by side.
     @item C-Mouse-2
     @tab
     @tab In the mode line or scroll bar of a window,
     split that window.
     @end multitable

produces:

Key         Command                          Description
--------------------------------------------------------------------------- 
C-x 2       `split-window-vertically'        Split the selected window
                                             into two windows, with one
                                             above the other.
C-x 3       `split-window-horizontally'      Split the selected window
                                             into two windows positioned
                                             side by side.
C-Mouse-2                                    In the mode line or scroll
                                             bar of a window, split that
                                             window.


File: texinfo,  Node: Special Displays,  Next: Indices,  Prev: Lists and Tables,  Up: Top

12 Special Displays
*******************

The commands in this chapter allow you to write text that is specially
displayed (output format permitting), outside of the normal document
flow.

  One set of such commands is for creating "floats", that is, figures,
tables, and the like, set off from the main text, possibly numbered,
captioned, and/or referred to from elsewhere in the document.  Images
are often included in these displays.

  Another group of commands is for creating footnotes in Texinfo.

* Menu:

* Floats::                      Figures, tables, and the like.
* Images::                      Including graphics and images.
* Footnotes::                   Writing footnotes.


File: texinfo,  Node: Floats,  Next: Images,  Up: Special Displays

12.1 Floats
===========

A "float" is a display which is set off from the main text.  It is
typically labelled as being a "Figure", "Table", "Example", or some
similar type.

  A float is so-named because, in principle, it can be moved to the
bottom or top of the current page, or to a following page, in the
printed output.  (Floating does not make sense in other output
formats.)  In the present version of Texinfo, however, this floating is
unfortunately not yet implemented.  Instead, the floating material is
simply output at the current location, more or less as if it were an
`@group' (*note `@group': group.).

* Menu:

* float::                       Producing floating material.
* caption shortcaption::        Specifying descriptions for floats.
* listoffloats::                A table of contents for floats.


File: texinfo,  Node: float,  Next: caption shortcaption,  Up: Floats

12.1.1 `@float' [TYPE][,LABEL]: Floating material
-------------------------------------------------

To produce floating material, enclose the material you want to be
displayed separate between `@float' and `@end float' commands, on lines
by themselves.

  Floating material uses `@image' to display an already-existing
graphic (*note Images::), or `@multitable' to display a table (*note
Multi-column Tables::).  However, the contents of the float can be
anything.  Here's an example with simple text:

     @float Figure,fig:ex1
     This is an example float.
     @end float

And the output:

This is an example float.

Figure 12.1

  As shown in the example, `@float' takes two arguments (separated by a
comma), TYPE and LABEL.  Both are optional.

TYPE
     Specifies the sort of float this is; typically a word such as
     "Figure", "Table", etc.  If not given, and LABEL is, any
     cross-referencing will simply use a bare number.

LABEL
     Specifies a cross-reference label for this float.  If given, this
     float is automatically given a number, and will appear in any
     `@listofloats' output (*note listoffloats::).  Cross-references to
     LABEL are allowed.

     On the other hand, if LABEL is not given, then the float will not
     be numbered and consequently will not appear in the
     `@listoffloats' output or be cross-referenceable.

Normally, you specify both TYPE and LABEL, to get a labeled and
numbered float.

  In Texinfo, all floats are numbered the same way: with the chapter
number (or appendix letter), a period, and the float number, which
simply counts 1, 2, 3, ..., and is reset at each chapter.  Each float
type is counted independently.

  Floats within an `@unnumbered' are numbered, or outside of any
chapter, are simply numbered consecutively from 1.

  These numbering conventions are not, at present, changeable.


File: texinfo,  Node: caption shortcaption,  Next: listoffloats,  Prev: float,  Up: Floats

12.1.2 `@caption' & `@shortcaption'
-----------------------------------

You may write an `@caption' anywhere within a `@float' environment, to
define a caption for the float.  It is not allowed in any other
context.  `@caption' takes a single argument, enclosed in braces.
Here's an example:

     @float
     An example float, with caption.
     @caption{Caption for example float.}
     @end float

The output is:

An example float, with caption.

Caption for example float.

  `@caption' can appear anywhere within the float; it is not processed
until the `@end float'.  The caption text is usually a sentence or two,
but may consist of several paragraphs if necessary.

  In the output, the caption always appears below the float; this is not
currently changeable.  It is preceded by the float type and/or number,
as specified to the `@float' command (see the previous section).

  The `@shortcaption' command likewise may be used only within
`@float', and takes a single argument in braces.  The short caption
text is used instead of the caption text in a list of floats (see the
next section).  Thus, you can write a long caption for the main
document, and a short title to appear in the list of floats.  For
example:

     @float
     ... as above ...
     @shortcaption{Text for list of floats.}
     @end float

  The text for `@caption' and `@shortcaption' may not contain comments
(`@c'), verbatim text (`@verb'), environments such as `@example', or
other complex constructs.


File: texinfo,  Node: listoffloats,  Prev: caption shortcaption,  Up: Floats

12.1.3 `@listoffloats': Tables of contents for floats
-----------------------------------------------------

You can write a `@listoffloats' command to generate a list of floats
for a given float type (*note float::), analogous to the document's
overall table of contents.  Typically, it is written in its own
`@unnumbered' node to provide a heading and structure, rather like
`@printindex' (*note Printing Indices & Menus::).

  `@listoffloats' takes one optional argument, the float type.  Here's
an example:

     @node List of Figures
     @unnumbered List of Figures
     @listoffloats Figure

And the output from `@listoffloats':

* Menu:

* Figure 12.1:                           fig:ex1.


  Without any argument, `@listoffloats' generates a list of floats for
which no float type was specified, i.e., no first argument to the
`@float' command (*note float::).

  Each line in the list of floats contains the float type (if any), the
float number, and the caption, if any--the `@shortcaption' argument, if
it was specified, else the `@caption' argument.  In Info, the result is
a menu where each float can be selected.  In HTML, each line is a link
to the float.  In printed output, the page number is included.

  Unnumbered floats (those without cross-reference labels) are omitted
from the list of floats.


File: texinfo,  Node: Images,  Next: Footnotes,  Prev: Floats,  Up: Special Displays

12.2 Inserting Images
=====================

You can insert an image given in an external file with the `@image'
command.  Although images can be used anywhere, including the middle of
a paragraph, we describe them in this chapter since they are most often
part of a displayed figure or example.

* Menu:

* Image Syntax::
* Image Scaling::


File: texinfo,  Node: Image Syntax,  Next: Image Scaling,  Up: Images

12.2.1 Image Syntax
-------------------

Here is the basic synopsis of the `@image' command:

     @image{FILENAME[, WIDTH[, HEIGHT[, ALTTEXT[, EXTENSION]]]]}

  The FILENAME argument is mandatory, and must not have an extension,
because the different processors support different formats:

   * TeX reads the file `FILENAME.eps' (Encapsulated PostScript format).

   * PDFTeX reads `FILENAME.pdf' (Adobe's Portable Document Format).

   * `makeinfo' includes `FILENAME.txt' verbatim for Info output (more
     or less as if it was an `@example').

   * `makeinfo' uses the optional fifth argument EXTENSION to `@image'
     for the filename extension, if it is specified.  For example:

          @image{foo,,,,.xpm}

     will cause `makeinfo' to look for `foo.xpm' before any others.


  The WIDTH and HEIGHT arguments are described in the next section.

  For TeX output, if an image is the first thing in a paragraph, for
example if you want two images side-by-side, you must precede it with
`@noindent' (*note `@noindent': noindent.).  Otherwise it will be
displayed on a line by itself.  If you want it centered, use `@center'
(*note `@titlefont @center @sp': titlefont center sp.).

  When producing html, `makeinfo' sets the "alt attribute" for inline
images to the optional ALTTEXT (fourth) argument to `@image', if
supplied.  If not supplied, `makeinfo' uses the full file name of the
image being displayed.  If you want an empty `alt' string, use `@-'.
The ALTTEXT is taken as Texinfo text, so special characters such as `"'
and `<' and `&' are escaped in the HTML and XML output.

  If you do not supply the optional EXTENSION (fifth) argument,
`makeinfo' first tries `FILENAME.png'; if that does not exist, it tries
`FILENAME.jpg'.  If that does not exist either, it complains.  (We
cannot support GIF format directly due to software patents.)

  In Info output, `makeinfo' writes a reference to the binary image
file (trying FILENAME suffixed with `EXTENSION', `.EXTENSION', `.png',
or `.jpg', in that order) if one exists.  It also literally includes
the `.txt' file if one exists.  This way, Info readers which can
display images (such as the Emacs Info browser, running under X) can do
so, whereas Info readers which can only use text (such as the
standalone Info reader) can display the textual version.

  The implementation of this is to put the following construct into the
Info output:

     ^@^H[image src="BINARYFILE" text="TXTFILE"
                alt="ALTTEXT ... ^@^H]

where `^@' and `^H' stand for the actual null and backspace control
characters.  If one of the files is not present, the corresponding
argument is omitted.

  The reason for mentioning this here is that older Info browsers (this
feature was introduced in Texinfo version 4.6) will display the above
literally, which, although not pretty, should not be harmful.


File: texinfo,  Node: Image Scaling,  Prev: Image Syntax,  Up: Images

12.2.2 Image Scaling
--------------------

The optional WIDTH and HEIGHT arguments to the `@image' command (see
the previous section) specify the size to scale the image to.  They are
ignored for Info output.  If neither is specified, the image is
presented in its natural size (given in the file); if only one is
specified, the other is scaled proportionately; and if both are
specified, both are respected, thus possibly distorting the original
image by changing its aspect ratio.

  The WIDTH and HEIGHT may be specified using any valid TeX dimension,
namely:

pt
     point (72.27pt = 1in)

pc
     pica (1pc = 12pt)

bp
     big point (72bp = 1in)

in
     inch

cm
     centimeter (2.54cm = 1in)

mm
     millimeter (10mm = 1cm)

dd
     dido^t point (1157dd = 1238pt)

cc
     cicero (1cc = 12dd)

sp
     scaled point (65536sp = 1pt)

  For example, the following will scale a file `ridt.eps' to one inch
vertically, with the width scaled proportionately:

     @image{ridt,,1in}

  For `@image' to work with TeX, the file `epsf.tex' must be installed
somewhere that TeX can find it.  (The standard location is
`TEXMF/tex/generic/dvips/epsf.tex', where TEXMF is a root of your TeX
directory tree.)  This file is included in the Texinfo distribution and
is also available from `ftp://tug.org/tex/epsf.tex', among other places.

  `@image' can be used within a line as well as for displayed figures.
Therefore, if you intend it to be displayed, be sure to leave a blank
line before the command, or the output will run into the preceding text.

  Image scaling is presently implemented only in TeX, not in HTML or
any other sort of output.


File: texinfo,  Node: Footnotes,  Prev: Images,  Up: Special Displays

12.3 Footnotes
==============

A "footnote" is for a reference that documents or elucidates the
primary text.(1)  Footnotes are distracting; use them sparingly, if at
all.  Standard bibliographical references are better placed in a
bibliography at the end of a document than in footnotes throughout.

* Menu:

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.

  ---------- Footnotes ----------

  (1) A footnote should complement or expand upon the primary text, but
a reader should not need to read a footnote to understand the primary
text.  For a thorough discussion of footnotes, see `The Chicago Manual
of Style', which is published by the University of Chicago Press.

