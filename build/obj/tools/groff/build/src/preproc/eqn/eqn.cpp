/* original parser id follows */
/* yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */

#define YYBYACC 1
#define YYMAJOR 2
#define YYMINOR 0

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
#undef YYBTYACC
#define YYBTYACC 0
#define YYDEBUGSTR YYPREFIX "debug"
#define YYPREFIX "yy"

#define YYPURE 0

#line 22 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "lib.h"
#include "box.h"
extern int non_empty_flag;
int yylex();
void yyerror(const char *);
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#line 33 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
typedef union {
	char *str;
	box *b;
	pile_box *pb;
	matrix_box *mb;
	int n;
	column *col;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 49 "y.tab.c"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

#if !(defined(yylex) || defined(YYSTATE))
int YYLEX_DECL();
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define OVER 257
#define SMALLOVER 258
#define SQRT 259
#define SUB 260
#define SUP 261
#define LPILE 262
#define RPILE 263
#define CPILE 264
#define PILE 265
#define LEFT 266
#define RIGHT 267
#define TO 268
#define FROM 269
#define SIZE 270
#define FONT 271
#define ROMAN 272
#define BOLD 273
#define ITALIC 274
#define FAT 275
#define ACCENT 276
#define BAR 277
#define UNDER 278
#define ABOVE 279
#define TEXT 280
#define QUOTED_TEXT 281
#define FWD 282
#define BACK 283
#define DOWN 284
#define UP 285
#define MATRIX 286
#define COL 287
#define LCOL 288
#define RCOL 289
#define CCOL 290
#define MARK 291
#define LINEUP 292
#define TYPE 293
#define VCENTER 294
#define PRIME 295
#define SPLIT 296
#define NOSPLIT 297
#define UACCENT 298
#define SPECIAL 299
#define SPACE 300
#define GFONT 301
#define GSIZE 302
#define DEFINE 303
#define NDEFINE 304
#define TDEFINE 305
#define SDEFINE 306
#define UNDEF 307
#define IFDEF 308
#define INCLUDE 309
#define DELIM 310
#define CHARTYPE 311
#define SET 312
#define GRFONT 313
#define GBFONT 314
#define YYERRCODE 256
typedef int YYINT;
static const YYINT yylhs[] = {                           -1,
    0,    0,    6,    6,    1,    1,    1,    2,    2,    2,
    2,    2,    3,    3,    3,    3,    4,    4,    7,    7,
    7,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    8,   11,   11,   12,   12,   13,
   13,   16,   16,   15,   15,   14,   14,   14,   14,    9,
    9,   10,   10,   10,
};
static const YYINT yylen[] = {                            2,
    0,    1,    1,    2,    1,    2,    2,    1,    3,    3,
    5,    5,    1,    2,    3,    3,    1,    3,    1,    3,
    5,    1,    1,    2,    2,    1,    1,    1,    3,    2,
    2,    2,    2,    4,    5,    3,    2,    2,    2,    3,
    3,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    2,    3,    1,    1,    3,    3,    4,    1,
    2,    1,    3,    3,    4,    2,    2,    2,    2,    1,
    1,    1,    1,    1,
};
static const YYINT yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   22,   23,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   26,   27,   28,    0,
    0,    3,    5,    0,   13,    0,    0,   17,   14,   70,
   71,    0,    0,   55,   31,   32,   33,   30,   73,   74,
   72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    6,    7,    0,    0,   24,   25,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,   38,
   39,    0,    4,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   60,    0,
    0,   29,   15,   16,    9,    0,    0,   20,   18,   40,
   41,    0,   58,    0,    0,    0,    0,   66,   67,   68,
   69,   34,   61,    0,    0,    0,    0,   59,   35,    0,
    0,    0,   11,   12,   21,    0,   64,    0,    0,   65,
};
#if defined(YYDESTRUCT_CALL) || defined(YYSTYPE_TOSTRING)
static const YYINT yystos[] = {                           0,
  259,  262,  263,  264,  265,  266,  270,  271,  272,  273,
  274,  275,  280,  281,  282,  283,  284,  285,  286,  291,
  292,  293,  294,  296,  297,  299,   94,  126,    9,  123,
  316,  317,  318,  319,  320,  321,  322,  323,  319,  280,
  281,  123,  324,  325,  328,  328,  328,  328,  123,  125,
  325,  326,  325,  325,  321,  321,  321,  321,  324,  324,
  324,  324,  123,  317,  317,  325,  321,  281,  280,  325,
  322,  257,  258,  268,  269,  260,  261,  276,  277,  278,
  295,  298,  317,  322,  327,  123,  322,  321,  321,  321,
  321,  321,  321,  287,  288,  289,  290,  329,  330,  321,
  321,  125,  319,  319,  318,  319,  321,  323,  320,  321,
  321,  279,  125,  327,  267,  123,  324,  331,  331,  331,
  331,  125,  330,  268,  269,  261,  322,  125,  326,  322,
  332,  123,  318,  318,  320,  279,  125,  332,  322,  125,
};
#endif /* YYDESTRUCT_CALL || YYSTYPE_TOSTRING */
static const YYINT yydgoto[] = {                         31,
   32,   33,   34,   35,   36,   84,   38,   43,   44,   52,
   85,   45,   98,   99,  118,  131,
};
static const YYINT yysindex[] = {                      1488,
 1527, -120, -120, -120, -120, -123, -249, -249, 1566, 1566,
 1566, 1566,    0,    0, -249, -249, -249, -249, -115, 1488,
 1488, -249, 1566, -256, -251, -249,    0,    0,    0, 1488,
    0,    0,    0, -221,    0, -233, 1488,    0,    0,    0,
    0, 1488,  -85,    0,    0,    0,    0,    0,    0,    0,
    0, 1488, 1566, 1566, -195, -195, -195, -195, 1566, 1566,
 1566, 1566, -272,    0,    0, 1566, -195,    0,    0, 1566,
 1402, 1527, 1527, 1527, 1527, 1566, 1566, 1566,    0,    0,
    0, 1566,    0, 1488, -113, 1488, 1444, -195, -195, -195,
 -195, -195, -195, -117, -117, -117, -117, -118,    0, -195,
 -195,    0,    0,    0,    0, -167, -189,    0,    0,    0,
    0, 1488,    0, -106, -123, 1488,  -83,    0,    0,    0,
    0,    0,    0, 1527, 1527, 1566, 1488,    0,    0, 1488,
 -105, 1488,    0,    0,    0, 1488,    0, -104, 1488,    0,
};
static const YYINT yyrindex[] = {                        41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0, 1220,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   85,  128,  363,  406,    0,    0,
    0,    0,    0,    0,    0,    0,  449,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -103,    0,    0,  185,  492,  727,  770,
  813,  856, 1091,    0,    0,    0,    0,    0,    0, 1134,
 1177,    0,    0,    0,    0,   42, 1220,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -102,    0,    0, -101,
    0,    0,    0,    0,    0,    0,    0,    0,  -99,    0,
};
#if YYBTYACC
static const YYINT yycindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
#endif
static const YYINT yygindex[] = {                         0,
   -7,  -69,    3,  -66,  458,    9,  -26,   52,   27,  -63,
  -32,   54,    0,  -35,    2,  -59,
};
#define YYTABLESIZE 1865
static const YYINT yytable[] = {                         49,
    8,   50,   42,   39,  105,  116,  122,   63,   37,    8,
  109,  113,   64,   65,   94,   95,   96,   97,  128,  137,
  140,   56,   57,   62,   68,   63,   76,   77,   69,   83,
   40,   41,   51,   53,   54,   72,   73,   86,   71,  132,
    1,   10,   78,   79,   80,    2,   74,   75,   66,  108,
   10,  129,   70,  114,  133,  134,   46,   47,   48,  135,
   87,   81,  123,   83,   82,    0,   59,   60,   61,   62,
   76,  126,  138,    0,  103,  104,   83,  106,    0,   83,
   78,   79,   80,    0,   42,    0,   78,   79,   80,   72,
   73,    0,    0,   42,    8,    0,  119,  120,  121,   81,
  124,  125,   82,    0,    0,   81,    0,    0,   82,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
  127,    0,   83,    8,  130,    8,    8,   43,    0,    0,
    0,   83,    0,    0,    0,   10,   43,    0,    0,    0,
  130,   51,    0,    0,  139,  117,  117,  117,  117,    0,
    0,    0,    0,    0,    0,    0,   40,   41,    0,   40,
   41,    0,   40,   41,   10,  112,   10,   10,   94,   95,
   96,   97,  112,  136,  136,   56,   57,   62,   42,   63,
    0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   42,    0,   42,
   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   43,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   43,   43,    0,    0,    0,    0,    0,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    0,    0,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
    0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   36,
    0,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,    0,    0,
    0,    0,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
    0,    0,   44,   42,   42,   42,   42,   42,   42,   42,
   42,   44,    0,    0,    0,   42,   42,   42,   42,    0,
   42,   42,    0,   42,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,    0,    0,   45,   43,   43,   43,   43,
   43,   43,   43,   43,   45,    0,    0,    0,   43,   43,
   43,   43,    0,   43,   43,    0,   43,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,   36,    0,   36,   36,    0,    0,   53,    0,
    0,    0,   36,   36,    0,    0,   44,   53,    0,    0,
   36,   36,   36,   36,    0,    0,   55,   56,   57,   58,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
   67,    0,   36,    0,    0,   44,    0,   44,   44,    0,
    0,   47,    0,    0,    0,    0,    0,    0,    0,   45,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   88,   89,    0,    0,    0,    0,   90,   91,   92,   93,
    0,    0,    0,  100,    0,    0,    0,  101,   45,    0,
   45,   45,    0,  107,    0,  110,    0,    0,    0,  111,
    0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,   53,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,    0,   47,   47,    0,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,    0,    0,
    0,   44,   44,   44,   44,   44,   44,   44,   44,    0,
    0,    0,    0,   44,   44,   44,   44,    0,   44,   44,
    0,   44,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,    0,    0,    0,   45,   45,   45,   45,   45,   45,
   45,   45,    0,    0,    0,    0,   45,   45,   45,   45,
    0,   45,   45,    0,   45,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,    0,    0,   46,   53,   53,   53,
   53,   53,   53,   53,   53,   46,    0,    0,    0,   53,
   53,   53,   53,    0,   53,   53,    0,   53,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,    0,    0,   48,
   47,   47,   47,   47,   47,   47,   47,   47,   48,    0,
    0,    0,   47,   47,   47,   47,    0,   47,   47,    0,
   47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
   46,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
    0,   46,   46,    0,    0,   51,    0,    0,    0,    0,
    0,    0,    0,   48,   51,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,   48,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,    0,   49,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
   51,   51,    0,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,    0,    0,    0,   46,   46,   46,   46,   46,
   46,   46,   46,    0,    0,    0,    0,   46,   46,   46,
   46,    0,   46,   46,    0,   46,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,    0,    0,    0,   48,   48,
   48,   48,   48,   48,   48,   48,    0,    0,    0,    0,
   48,   48,   48,   48,    0,   48,   48,    0,   48,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,    0,    0,
   50,   49,   49,   49,   49,   49,   49,   49,   49,   50,
    0,    0,    0,   49,   49,   49,   49,    0,   49,   49,
    0,   49,   51,   51,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
   51,    0,    0,   52,   51,   51,   51,   51,   51,   51,
   51,   51,   52,    0,    0,    0,   51,   51,   51,   51,
    0,   51,   51,    0,   51,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,   50,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   50,    0,   50,   50,    0,    0,   19,
    0,    0,    0,    0,    0,    0,    0,   52,   19,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   52,    0,   52,   52,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
    0,   54,   54,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   19,    0,   19,   19,    0,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,    0,    0,    0,   50,
   50,   50,   50,   50,   50,   50,   50,    0,    0,    0,
    0,   50,   50,   50,   50,    0,   50,   50,    0,   50,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,    0,
   29,    0,   52,   52,   52,   52,   52,   52,   52,   52,
    0,    0,    0,    0,   52,   52,   52,   52,    0,   52,
   52,    0,   52,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   29,    0,    0,   54,   54,   54,   54,   54,
   54,   54,   54,    0,    0,    0,    0,   54,   54,   54,
   54,    0,   54,   54,    0,   54,   19,   19,   19,    0,
    0,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   27,   29,    0,   19,   19,
   19,   19,   19,   19,   19,   19,    0,    0,    0,    0,
   19,   19,   19,   19,    0,   19,   19,    0,   19,    0,
    0,    0,    0,    0,   30,    0,  102,   28,    0,    0,
    0,    0,    0,    0,    0,   29,    0,   27,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,   28,
    0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
    0,   27,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,   28,    0,    0,    0,    0,    0,    0,
   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,   28,    0,    0,    0,    0,    0,    0,   27,
    1,    0,    0,    2,    3,    4,    5,    6,    0,    0,
    0,    7,    8,    9,   10,   11,   12,    0,    0,    0,
    0,   13,   14,   15,   16,   17,   18,   19,   30,    0,
    0,   28,   20,   21,   22,   23,    0,   24,   25,    0,
   26,    0,    1,    0,    0,    2,    3,    4,    5,    6,
  115,    0,    0,    7,    8,    9,   10,   11,   12,    0,
    0,    0,    0,   13,   14,   15,   16,   17,   18,   19,
    0,    0,    0,    0,   20,   21,   22,   23,    0,   24,
   25,    0,   26,    0,    0,    0,    1,    0,    0,    2,
    3,    4,    5,    6,    0,    0,    0,    7,    8,    9,
   10,   11,   12,    0,    0,    0,    0,   13,   14,   15,
   16,   17,   18,   19,    0,    0,    0,    0,   20,   21,
   22,   23,    0,   24,   25,    1,   26,    0,    2,    3,
    4,    5,    6,    0,    0,    0,    7,    8,    9,   10,
   11,   12,    0,    0,    0,    0,   13,   14,   15,   16,
   17,   18,   19,    0,    0,    0,    0,    0,    0,   22,
   23,    0,   24,   25,    0,   26,    0,    2,    3,    4,
    5,    6,    0,    0,    0,    7,    8,    9,   10,   11,
   12,    0,    0,    0,    0,   13,   14,   15,   16,   17,
   18,   19,    0,    0,    0,    0,    0,    0,   22,   23,
    0,   24,   25,    0,   26,
};
static const YYINT yycheck[] = {                        123,
    0,  125,  123,    1,   74,  123,  125,  123,    0,    9,
   77,  125,   20,   21,  287,  288,  289,  290,  125,  125,
  125,  125,  125,  125,  281,  125,  260,  261,  280,   37,
  280,  281,    6,    7,    8,  257,  258,  123,   30,  123,
    0,    0,  276,  277,  278,    0,  268,  269,   22,   76,
    9,  115,   26,   86,  124,  125,    3,    4,    5,  126,
   52,  295,   98,   71,  298,   -1,   15,   16,   17,   18,
  260,  261,  132,   -1,   72,   73,   84,   75,   -1,   87,
  276,  277,  278,   -1,    0,   -1,  276,  277,  278,  257,
  258,   -1,   -1,    9,   94,   -1,   95,   96,   97,  295,
  268,  269,  298,   -1,   -1,  295,   -1,   -1,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  127,
  112,   -1,  130,  123,  116,  125,  126,    0,   -1,   -1,
   -1,  139,   -1,   -1,   -1,   94,    9,   -1,   -1,   -1,
  132,  115,   -1,   -1,  136,   94,   95,   96,   97,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,   -1,  280,
  281,   -1,  280,  281,  123,  279,  125,  126,  287,  288,
  289,  290,  279,  279,  279,  279,  279,  279,   94,  279,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  125,
   -1,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
   -1,   -1,    0,  279,  280,  281,  282,  283,  284,  285,
  286,    9,   -1,   -1,   -1,  291,  292,  293,  294,   -1,
  296,  297,   -1,  299,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,   -1,   -1,    0,  279,  280,  281,  282,
  283,  284,  285,  286,    9,   -1,   -1,   -1,  291,  292,
  293,  294,   -1,  296,  297,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,   -1,  260,  261,   -1,   -1,    0,   -1,
   -1,   -1,  268,  269,   -1,   -1,   94,    9,   -1,   -1,
  276,  277,  278,  279,   -1,   -1,    9,   10,   11,   12,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   23,   -1,  298,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,
    9,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   53,   54,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,   66,   -1,   -1,   -1,   70,  123,   -1,
  125,  126,   -1,   76,   -1,   78,   -1,   -1,   -1,   82,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,   -1,   -1,
   -1,  279,  280,  281,  282,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,   -1,  296,  297,
   -1,  299,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,   -1,   -1,   -1,  279,  280,  281,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
   -1,  296,  297,   -1,  299,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,   -1,   -1,    0,  279,  280,  281,
  282,  283,  284,  285,  286,    9,   -1,   -1,   -1,  291,
  292,  293,  294,   -1,  296,  297,   -1,  299,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,   -1,   -1,    0,
  279,  280,  281,  282,  283,  284,  285,  286,    9,   -1,
   -1,   -1,  291,  292,  293,  294,   -1,  296,  297,   -1,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   94,    9,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,    9,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,   -1,   -1,   -1,  279,  280,  281,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,   -1,  296,  297,   -1,  299,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   -1,   -1,   -1,  279,  280,
  281,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,   -1,  296,  297,   -1,  299,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,   -1,   -1,
    0,  279,  280,  281,  282,  283,  284,  285,  286,    9,
   -1,   -1,   -1,  291,  292,  293,  294,   -1,  296,  297,
   -1,  299,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,   -1,   -1,    0,  279,  280,  281,  282,  283,  284,
  285,  286,    9,   -1,   -1,   -1,  291,  292,  293,  294,
   -1,  296,  297,   -1,  299,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   94,    9,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,    9,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,   -1,   -1,   -1,  279,
  280,  281,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,   -1,  296,  297,   -1,  299,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,   -1,
    9,   -1,  279,  280,  281,  282,  283,  284,  285,  286,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,   -1,  296,
  297,   -1,  299,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,    9,   -1,   -1,  279,  280,  281,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,   -1,  296,  297,   -1,  299,  257,  258,  259,   -1,
   -1,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   94,    9,   -1,  279,  280,
  281,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,   -1,  296,  297,   -1,  299,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    9,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,    9,   -1,   -1,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   94,
  259,   -1,   -1,  262,  263,  264,  265,  266,   -1,   -1,
   -1,  270,  271,  272,  273,  274,  275,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  123,   -1,
   -1,  126,  291,  292,  293,  294,   -1,  296,  297,   -1,
  299,   -1,  259,   -1,   -1,  262,  263,  264,  265,  266,
  267,   -1,   -1,  270,  271,  272,  273,  274,  275,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,  286,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,   -1,  296,
  297,   -1,  299,   -1,   -1,   -1,  259,   -1,   -1,  262,
  263,  264,  265,  266,   -1,   -1,   -1,  270,  271,  272,
  273,  274,  275,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,   -1,  296,  297,  259,  299,   -1,  262,  263,
  264,  265,  266,   -1,   -1,   -1,  270,  271,  272,  273,
  274,  275,   -1,   -1,   -1,   -1,  280,  281,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,  296,  297,   -1,  299,   -1,  262,  263,  264,
  265,  266,   -1,   -1,   -1,  270,  271,  272,  273,  274,
  275,   -1,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,  296,  297,   -1,  299,
};
#if YYBTYACC
static const YYINT yyctable[] = {                        -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,
};
#endif
#define YYFINAL 31
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 314
#define YYUNDFTOKEN 333
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
#if YYDEBUG
static const char *const yyname[] = {

"$end",0,0,0,0,0,0,0,0,"'\\t'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"error","OVER",
"SMALLOVER","SQRT","SUB","SUP","LPILE","RPILE","CPILE","PILE","LEFT","RIGHT",
"TO","FROM","SIZE","FONT","ROMAN","BOLD","ITALIC","FAT","ACCENT","BAR","UNDER",
"ABOVE","TEXT","QUOTED_TEXT","FWD","BACK","DOWN","UP","MATRIX","COL","LCOL",
"RCOL","CCOL","MARK","LINEUP","TYPE","VCENTER","PRIME","SPLIT","NOSPLIT",
"UACCENT","SPECIAL","SPACE","GFONT","GSIZE","DEFINE","NDEFINE","TDEFINE",
"SDEFINE","UNDEF","IFDEF","INCLUDE","DELIM","CHARTYPE","SET","GRFONT","GBFONT",
"$accept","top","mark","from_to","sqrt_over","script","simple","equation",
"nonsup","number","text","delim","pile_element_list","pile_arg","column_list",
"column","column_arg","column_element_list","illegal-symbol",
};
static const char *const yyrule[] = {
"$accept : top",
"top :",
"top : equation",
"equation : mark",
"equation : equation mark",
"mark : from_to",
"mark : MARK mark",
"mark : LINEUP mark",
"from_to : sqrt_over",
"from_to : sqrt_over TO from_to",
"from_to : sqrt_over FROM sqrt_over",
"from_to : sqrt_over FROM sqrt_over TO from_to",
"from_to : sqrt_over FROM sqrt_over FROM from_to",
"sqrt_over : script",
"sqrt_over : SQRT sqrt_over",
"sqrt_over : sqrt_over OVER sqrt_over",
"sqrt_over : sqrt_over SMALLOVER sqrt_over",
"script : nonsup",
"script : simple SUP script",
"nonsup : simple",
"nonsup : simple SUB nonsup",
"nonsup : simple SUB simple SUP script",
"simple : TEXT",
"simple : QUOTED_TEXT",
"simple : SPLIT QUOTED_TEXT",
"simple : NOSPLIT TEXT",
"simple : '^'",
"simple : '~'",
"simple : '\\t'",
"simple : '{' equation '}'",
"simple : PILE pile_arg",
"simple : LPILE pile_arg",
"simple : RPILE pile_arg",
"simple : CPILE pile_arg",
"simple : MATRIX '{' column_list '}'",
"simple : LEFT delim equation RIGHT delim",
"simple : LEFT delim equation",
"simple : simple BAR",
"simple : simple UNDER",
"simple : simple PRIME",
"simple : simple ACCENT simple",
"simple : simple UACCENT simple",
"simple : ROMAN simple",
"simple : BOLD simple",
"simple : ITALIC simple",
"simple : FAT simple",
"simple : FONT text simple",
"simple : SIZE text simple",
"simple : FWD number simple",
"simple : BACK number simple",
"simple : UP number simple",
"simple : DOWN number simple",
"simple : TYPE text simple",
"simple : VCENTER simple",
"simple : SPECIAL text simple",
"number : text",
"pile_element_list : equation",
"pile_element_list : pile_element_list ABOVE equation",
"pile_arg : '{' pile_element_list '}'",
"pile_arg : number '{' pile_element_list '}'",
"column_list : column",
"column_list : column_list column",
"column_element_list : equation",
"column_element_list : column_element_list ABOVE equation",
"column_arg : '{' column_element_list '}'",
"column_arg : number '{' column_element_list '}'",
"column : COL column_arg",
"column : LCOL column_arg",
"column : RCOL column_arg",
"column : CCOL column_arg",
"text : TEXT",
"text : QUOTED_TEXT",
"delim : text",
"delim : '{'",
"delim : '}'",

};
#endif

#if YYDEBUG
int      yydebug;
#endif

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;
int      yynerrs;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
YYLTYPE  yyloc; /* position returned by actions */
YYLTYPE  yylloc; /* position from the lexer */
#endif

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
#ifndef YYLLOC_DEFAULT
#define YYLLOC_DEFAULT(loc, rhs, n) \
do \
{ \
    if (n == 0) \
    { \
        (loc).first_line   = YYRHSLOC(rhs, 0).last_line; \
        (loc).first_column = YYRHSLOC(rhs, 0).last_column; \
        (loc).last_line    = YYRHSLOC(rhs, 0).last_line; \
        (loc).last_column  = YYRHSLOC(rhs, 0).last_column; \
    } \
    else \
    { \
        (loc).first_line   = YYRHSLOC(rhs, 1).first_line; \
        (loc).first_column = YYRHSLOC(rhs, 1).first_column; \
        (loc).last_line    = YYRHSLOC(rhs, n).last_line; \
        (loc).last_column  = YYRHSLOC(rhs, n).last_column; \
    } \
} while (0)
#endif /* YYLLOC_DEFAULT */
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#if YYBTYACC

#ifndef YYLVQUEUEGROWTH
#define YYLVQUEUEGROWTH 32
#endif
#endif /* YYBTYACC */

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#ifndef YYINITSTACKSIZE
#define YYINITSTACKSIZE 200
#endif

typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE  *p_base;
    YYLTYPE  *p_mark;
#endif
} YYSTACKDATA;
#if YYBTYACC

struct YYParseState_s
{
    struct YYParseState_s *save;    /* Previously saved parser state */
    YYSTACKDATA            yystack; /* saved parser stack */
    int                    state;   /* saved parser state */
    int                    errflag; /* saved error recovery status */
    int                    lexeme;  /* saved index of the conflict lexeme in the lexical queue */
    YYINT                  ctry;    /* saved index in yyctable[] for this conflict */
};
typedef struct YYParseState_s YYParseState;
#endif /* YYBTYACC */
/* variables for the parser stack */
static YYSTACKDATA yystack;
#if YYBTYACC

/* Current parser state */
static YYParseState *yyps = 0;

/* yypath != NULL: do the full parse, starting at *yypath parser state. */
static YYParseState *yypath = 0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals = 0;

/* Current position at lexical value queue */
static YYSTYPE *yylvp = 0;

/* End position of lexical value queue */
static YYSTYPE *yylve = 0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim = 0;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
/* Base of the lexical position queue */
static YYLTYPE *yylpsns = 0;

/* Current position at lexical position queue */
static YYLTYPE *yylpp = 0;

/* End position of lexical position queue */
static YYLTYPE *yylpe = 0;

/* The last allocated position at the lexical position queue */
static YYLTYPE *yylplim = 0;
#endif

/* Current position at lexical token queue */
static YYINT  *yylexp = 0;

static YYINT  *yylexemes = 0;
#endif /* YYBTYACC */

/* For use in generated program */
#define yydepth (int)(yystack.s_mark - yystack.s_base)
#if YYBTYACC
#define yytrial (yyps->save)
#endif /* YYBTYACC */

#if YYDEBUG
#include <stdio.h>	/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE *newps;
#endif

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return YYENOMEM;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return YYENOMEM;

    data->l_base = newvs;
    data->l_mark = newvs + i;

#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    newps = (YYLTYPE *)realloc(data->p_base, newsize * sizeof(*newps));
    if (newps == 0)
        return YYENOMEM;

    data->p_base = newps;
    data->p_mark = newps + i;
#endif

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;

#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "%sdebug: stack size increased to %d\n", YYPREFIX, newsize);
#endif
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    free(data->p_base);
#endif
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif /* YYPURE || defined(YY_NO_LEAKS) */
#if YYBTYACC

static YYParseState *
yyNewState(unsigned size)
{
    YYParseState *p = (YYParseState *) malloc(sizeof(YYParseState));
    if (p == NULL) return NULL;

    p->yystack.stacksize = size;
    if (size == 0)
    {
        p->yystack.s_base = NULL;
        p->yystack.l_base = NULL;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        p->yystack.p_base = NULL;
#endif
        return p;
    }
    p->yystack.s_base    = (YYINT *) malloc(size * sizeof(YYINT));
    if (p->yystack.s_base == NULL) return NULL;
    p->yystack.l_base    = (YYSTYPE *) malloc(size * sizeof(YYSTYPE));
    if (p->yystack.l_base == NULL) return NULL;
    memset(p->yystack.l_base, 0, size * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    p->yystack.p_base    = (YYLTYPE *) malloc(size * sizeof(YYLTYPE));
    if (p->yystack.p_base == NULL) return NULL;
    memset(p->yystack.p_base, 0, size * sizeof(YYLTYPE));
#endif

    return p;
}

static void
yyFreeState(YYParseState *p)
{
    yyfreestack(&p->yystack);
    free(p);
}
#endif /* YYBTYACC */

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#if YYBTYACC
#define YYVALID        do { if (yyps->save)            goto yyvalid; } while(0)
#define YYVALID_NESTED do { if (yyps->save && \
                                yyps->save->save == 0) goto yyvalid; } while(0)
#endif /* YYBTYACC */

int
YYPARSE_DECL()
{
    int yym, yyn, yystate, yyresult;
#if YYBTYACC
    int yynewerrflag;
    YYParseState *yyerrctx = NULL;
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    YYLTYPE  yyerror_loc_range[3]; /* position of error start/end (0 unused) */
#endif
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
    if (yydebug)
        fprintf(stderr, "%sdebug[<# of symbols on state stack>]\n", YYPREFIX);
#endif
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    memset(yyerror_loc_range, 0, sizeof(yyerror_loc_range));
#endif

#if YYBTYACC
    yyps = yyNewState(0); if (yyps == 0) goto yyenomem;
    yyps->save = 0;
#endif /* YYBTYACC */
    yym = 0;
    yyn = 0;
    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark = yystack.p_base;
#endif
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
#if YYBTYACC
        do {
        if (yylvp < yylve)
        {
            /* we're currently re-reading tokens */
            yylval = *yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylloc = *yylpp++;
#endif
            yychar = *yylexp++;
            break;
        }
        if (yyps->save)
        {
            /* in trial mode; save scanner results for future parse attempts */
            if (yylvp == yylvlim)
            {   /* Enlarge lexical value queue */
                size_t p = (size_t) (yylvp - yylvals);
                size_t s = (size_t) (yylvlim - yylvals);

                s += YYLVQUEUEGROWTH;
                if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL) goto yyenomem;
                if ((yylvals   = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL) goto yyenomem;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                if ((yylpsns   = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL) goto yyenomem;
#endif
                yylvp   = yylve = yylvals + p;
                yylvlim = yylvals + s;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp   = yylpe = yylpsns + p;
                yylplim = yylpsns + s;
#endif
                yylexp  = yylexemes + p;
            }
            *yylexp = (YYINT) YYLEX;
            *yylvp++ = yylval;
            yylve++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            *yylpp++ = yylloc;
            yylpe++;
#endif
            yychar = *yylexp++;
            break;
        }
        /* normal operation, no conflict encountered */
#endif /* YYBTYACC */
        yychar = YYLEX;
#if YYBTYACC
        } while (0);
#endif /* YYBTYACC */
        if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            fprintf(stderr, "%s[%d]: state %d, reading token %d (%s)",
                            YYDEBUGSTR, yydepth, yystate, yychar, yys);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
            if (!yytrial)
#endif /* YYBTYACC */
                fprintf(stderr, " <%s>", YYSTYPE_TOSTRING(yychar, yylval));
#endif
            fputc('\n', stderr);
        }
#endif
    }
#if YYBTYACC

    /* Do we have a conflict? */
    if (((yyn = yycindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
        yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
        YYINT ctry;

        if (yypath)
        {
            YYParseState *save;
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%s[%d]: CONFLICT in state %d: following successful trial parse\n",
                                YYDEBUGSTR, yydepth, yystate);
#endif
            /* Switch to the next conflict context */
            save = yypath;
            yypath = save->save;
            save->save = NULL;
            ctry = save->ctry;
            if (save->state != yystate) YYABORT;
            yyFreeState(save);

        }
        else
        {

            /* Unresolved conflict - start/continue trial parse */
            YYParseState *save;
#if YYDEBUG
            if (yydebug)
            {
                fprintf(stderr, "%s[%d]: CONFLICT in state %d. ", YYDEBUGSTR, yydepth, yystate);
                if (yyps->save)
                    fputs("ALREADY in conflict, continuing trial parse.\n", stderr);
                else
                    fputs("Starting trial parse.\n", stderr);
            }
#endif
            save                  = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));
            if (save == NULL) goto yyenomem;
            save->save            = yyps->save;
            save->state           = yystate;
            save->errflag         = yyerrflag;
            save->yystack.s_mark  = save->yystack.s_base + (yystack.s_mark - yystack.s_base);
            memcpy (save->yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            save->yystack.l_mark  = save->yystack.l_base + (yystack.l_mark - yystack.l_base);
            memcpy (save->yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            save->yystack.p_mark  = save->yystack.p_base + (yystack.p_mark - yystack.p_base);
            memcpy (save->yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            ctry                  = yytable[yyn];
            if (yyctable[ctry] == -1)
            {
#if YYDEBUG
                if (yydebug && yychar >= YYEOF)
                    fprintf(stderr, "%s[%d]: backtracking 1 token\n", YYDEBUGSTR, yydepth);
#endif
                ctry++;
            }
            save->ctry = ctry;
            if (yyps->save == NULL)
            {
                /* If this is a first conflict in the stack, start saving lexemes */
                if (!yylexemes)
                {
                    yylexemes = (YYINT *) malloc((YYLVQUEUEGROWTH) * sizeof(YYINT));
                    if (yylexemes == NULL) goto yyenomem;
                    yylvals   = (YYSTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYSTYPE));
                    if (yylvals == NULL) goto yyenomem;
                    yylvlim   = yylvals + YYLVQUEUEGROWTH;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpsns   = (YYLTYPE *) malloc((YYLVQUEUEGROWTH) * sizeof(YYLTYPE));
                    if (yylpsns == NULL) goto yyenomem;
                    yylplim   = yylpsns + YYLVQUEUEGROWTH;
#endif
                }
                if (yylvp == yylve)
                {
                    yylvp  = yylve = yylvals;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpp  = yylpe = yylpsns;
#endif
                    yylexp = yylexemes;
                    if (yychar >= YYEOF)
                    {
                        *yylve++ = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                        *yylpe++ = yylloc;
#endif
                        *yylexp  = (YYINT) yychar;
                        yychar   = YYEMPTY;
                    }
                }
            }
            if (yychar >= YYEOF)
            {
                yylvp--;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp--;
#endif
                yylexp--;
                yychar = YYEMPTY;
            }
            save->lexeme = (int) (yylvp - yylvals);
            yyps->save   = save;
        }
        if (yytable[yyn] == ctry)
        {
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%s[%d]: state %d, shifting to state %d\n",
                                YYDEBUGSTR, yydepth, yystate, yyctable[ctry]);
#endif
            if (yychar < 0)
            {
                yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylpp++;
#endif
                yylexp++;
            }
            if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM)
                goto yyoverflow;
            yystate = yyctable[ctry];
            *++yystack.s_mark = (YYINT) yystate;
            *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            *++yystack.p_mark = yylloc;
#endif
            yychar  = YYEMPTY;
            if (yyerrflag > 0) --yyerrflag;
            goto yyloop;
        }
        else
        {
            yyn = yyctable[ctry];
            goto yyreduce;
        }
    } /* End of code dealing with conflicts */
#endif /* YYBTYACC */
    if (((yyn = yysindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "%s[%d]: state %d, shifting to state %d\n",
                            YYDEBUGSTR, yydepth, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        *++yystack.p_mark = yylloc;
#endif
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if (((yyn = yyrindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag != 0) goto yyinrecovery;
#if YYBTYACC

    yynewerrflag = 1;
    goto yyerrhandler;
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */

yyerrlab:
    /* explicit YYERROR from an action -- pop the rhs of the rule reduced
     * before looking for error recovery */
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark -= yym;
#endif

    yynewerrflag = 0;
yyerrhandler:
    while (yyps->save)
    {
        int ctry;
        YYParseState *save = yyps->save;
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "%s[%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
                            YYDEBUGSTR, yydepth, yystate, yyps->save->state,
                    (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
        /* Memorize most forward-looking error state in case it's really an error. */
        if (yyerrctx == NULL || yyerrctx->lexeme < yylvp - yylvals)
        {
            /* Free old saved error context state */
            if (yyerrctx) yyFreeState(yyerrctx);
            /* Create and fill out new saved error context state */
            yyerrctx                 = yyNewState((unsigned)(yystack.s_mark - yystack.s_base + 1));
            if (yyerrctx == NULL) goto yyenomem;
            yyerrctx->save           = yyps->save;
            yyerrctx->state          = yystate;
            yyerrctx->errflag        = yyerrflag;
            yyerrctx->yystack.s_mark = yyerrctx->yystack.s_base + (yystack.s_mark - yystack.s_base);
            memcpy (yyerrctx->yystack.s_base, yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            yyerrctx->yystack.l_mark = yyerrctx->yystack.l_base + (yystack.l_mark - yystack.l_base);
            memcpy (yyerrctx->yystack.l_base, yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yyerrctx->yystack.p_mark = yyerrctx->yystack.p_base + (yystack.p_mark - yystack.p_base);
            memcpy (yyerrctx->yystack.p_base, yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            yyerrctx->lexeme         = (int) (yylvp - yylvals);
        }
        yylvp          = yylvals   + save->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        yylpp          = yylpsns   + save->lexeme;
#endif
        yylexp         = yylexemes + save->lexeme;
        yychar         = YYEMPTY;
        yystack.s_mark = yystack.s_base + (save->yystack.s_mark - save->yystack.s_base);
        memcpy (yystack.s_base, save->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
        yystack.l_mark = yystack.l_base + (save->yystack.l_mark - save->yystack.l_base);
        memcpy (yystack.l_base, save->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        yystack.p_mark = yystack.p_base + (save->yystack.p_mark - save->yystack.p_base);
        memcpy (yystack.p_base, save->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
        ctry           = ++save->ctry;
        yystate        = save->state;
        /* We tried shift, try reduce now */
        if ((yyn = yyctable[ctry]) >= 0) goto yyreduce;
        yyps->save     = save->save;
        save->save     = NULL;
        yyFreeState(save);

        /* Nothing left on the stack -- error */
        if (!yyps->save)
        {
#if YYDEBUG
            if (yydebug)
                fprintf(stderr, "%sdebug[%d,trial]: trial parse FAILED, entering ERROR mode\n",
                                YYPREFIX, yydepth);
#endif
            /* Restore state as it was in the most forward-advanced error */
            yylvp          = yylvals   + yyerrctx->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylpp          = yylpsns   + yyerrctx->lexeme;
#endif
            yylexp         = yylexemes + yyerrctx->lexeme;
            yychar         = yylexp[-1];
            yylval         = yylvp[-1];
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yylloc         = yylpp[-1];
#endif
            yystack.s_mark = yystack.s_base + (yyerrctx->yystack.s_mark - yyerrctx->yystack.s_base);
            memcpy (yystack.s_base, yyerrctx->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
            yystack.l_mark = yystack.l_base + (yyerrctx->yystack.l_mark - yyerrctx->yystack.l_base);
            memcpy (yystack.l_base, yyerrctx->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            yystack.p_mark = yystack.p_base + (yyerrctx->yystack.p_mark - yyerrctx->yystack.p_base);
            memcpy (yystack.p_base, yyerrctx->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
            yystate        = yyerrctx->state;
            yyFreeState(yyerrctx);
            yyerrctx       = NULL;
        }
        yynewerrflag = 1;
    }
    if (yynewerrflag == 0) goto yyinrecovery;
#endif /* YYBTYACC */

    YYERROR_CALL("syntax error");
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yyerror_loc_range[1] = yylloc; /* lookahead position is error start position */
#endif

#if !YYBTYACC
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */
yyerrlab:
#endif
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if (((yyn = yysindex[*yystack.s_mark]) != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr, "%s[%d]: state %d, error recovery shifting to state %d\n",
                                    YYDEBUGSTR, yydepth, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                /* lookahead position is error end position */
                yyerror_loc_range[2] = yylloc;
                YYLLOC_DEFAULT(yyloc, yyerror_loc_range, 2); /* position of error span */
                *++yystack.p_mark = yyloc;
#endif
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr, "%s[%d]: error recovery discarding state %d\n",
                                    YYDEBUGSTR, yydepth, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                /* the current TOS position is the error start position */
                yyerror_loc_range[1] = *yystack.p_mark;
#endif
#if defined(YYDESTRUCT_CALL)
#if YYBTYACC
                if (!yytrial)
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    YYDESTRUCT_CALL("error: discarding state",
                                    yystos[*yystack.s_mark], yystack.l_mark, yystack.p_mark);
#else
                    YYDESTRUCT_CALL("error: discarding state",
                                    yystos[*yystack.s_mark], yystack.l_mark);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#endif /* defined(YYDESTRUCT_CALL) */
                --yystack.s_mark;
                --yystack.l_mark;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                --yystack.p_mark;
#endif
            }
        }
    }
    else
    {
        if (yychar == YYEOF) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            fprintf(stderr, "%s[%d]: state %d, error recovery discarding token %d (%s)\n",
                            YYDEBUGSTR, yydepth, yystate, yychar, yys);
        }
#endif
#if defined(YYDESTRUCT_CALL)
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
            YYDESTRUCT_CALL("error: discarding token", yychar, &yylval, &yylloc);
#else
            YYDESTRUCT_CALL("error: discarding token", yychar, &yylval);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
#endif /* defined(YYDESTRUCT_CALL) */
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
    yym = yylen[yyn];
#if YYDEBUG
    if (yydebug)
    {
        fprintf(stderr, "%s[%d]: state %d, reducing by rule %d (%s)",
                        YYDEBUGSTR, yydepth, yystate, yyn, yyrule[yyn]);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
            if (yym > 0)
            {
                int i;
                fputc('<', stderr);
                for (i = yym; i > 0; i--)
                {
                    if (i != yym) fputs(", ", stderr);
                    fputs(YYSTYPE_TOSTRING(yystos[yystack.s_mark[1-i]],
                                           yystack.l_mark[1-i]), stderr);
                }
                fputc('>', stderr);
            }
#endif
        fputc('\n', stderr);
    }
#endif
    if (yym > 0)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)

    /* Perform position reduction */
    memset(&yyloc, 0, sizeof(yyloc));
#if YYBTYACC
    if (!yytrial)
#endif /* YYBTYACC */
    {
        YYLLOC_DEFAULT(yyloc, &yystack.p_mark[-yym], yym);
        /* just in case YYERROR is invoked within the action, save
           the start of the rhs as the error start position */
        yyerror_loc_range[1] = yystack.p_mark[1-yym];
    }
#endif

    switch (yyn)
    {
case 2:
#line 127 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].b->top_level(); non_empty_flag = 1; }
#line 1 ""
break;
case 3:
#line 132 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 4:
#line 134 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{
		  list_box *lb = yystack.l_mark[-1].b->to_list_box();
		  if (!lb)
		    lb = new list_box(yystack.l_mark[-1].b);
		  lb->append(yystack.l_mark[0].b);
		  yyval.b = lb;
		}
#line 1 ""
break;
case 5:
#line 145 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 6:
#line 147 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_mark_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 7:
#line 149 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_lineup_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 8:
#line 154 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 9:
#line 156 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_limit_box(yystack.l_mark[-2].b, 0, yystack.l_mark[0].b); }
#line 1 ""
break;
case 10:
#line 158 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_limit_box(yystack.l_mark[-2].b, yystack.l_mark[0].b, 0); }
#line 1 ""
break;
case 11:
#line 160 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_limit_box(yystack.l_mark[-4].b, yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 12:
#line 162 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_limit_box(yystack.l_mark[-4].b, make_limit_box(yystack.l_mark[-2].b, yystack.l_mark[0].b, 0), 0); }
#line 1 ""
break;
case 13:
#line 167 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 14:
#line 169 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_sqrt_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 15:
#line 171 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_over_box(yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 16:
#line 173 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_small_over_box(yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 17:
#line 178 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 18:
#line 180 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_script_box(yystack.l_mark[-2].b, 0, yystack.l_mark[0].b); }
#line 1 ""
break;
case 19:
#line 185 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 20:
#line 187 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_script_box(yystack.l_mark[-2].b, yystack.l_mark[0].b, 0); }
#line 1 ""
break;
case 21:
#line 189 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_script_box(yystack.l_mark[-4].b, yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 22:
#line 194 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = split_text(yystack.l_mark[0].str); }
#line 1 ""
break;
case 23:
#line 196 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new quoted_text_box(yystack.l_mark[0].str); }
#line 1 ""
break;
case 24:
#line 198 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = split_text(yystack.l_mark[0].str); }
#line 1 ""
break;
case 25:
#line 200 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new quoted_text_box(yystack.l_mark[0].str); }
#line 1 ""
break;
case 26:
#line 202 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new half_space_box; }
#line 1 ""
break;
case 27:
#line 204 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new space_box; }
#line 1 ""
break;
case 28:
#line 206 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new tab_box; }
#line 1 ""
break;
case 29:
#line 208 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[-1].b; }
#line 1 ""
break;
case 30:
#line 210 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].pb->set_alignment(CENTER_ALIGN); yyval.b = yystack.l_mark[0].pb; }
#line 1 ""
break;
case 31:
#line 212 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].pb->set_alignment(LEFT_ALIGN); yyval.b = yystack.l_mark[0].pb; }
#line 1 ""
break;
case 32:
#line 214 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].pb->set_alignment(RIGHT_ALIGN); yyval.b = yystack.l_mark[0].pb; }
#line 1 ""
break;
case 33:
#line 216 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].pb->set_alignment(CENTER_ALIGN); yyval.b = yystack.l_mark[0].pb; }
#line 1 ""
break;
case 34:
#line 218 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = yystack.l_mark[-1].mb; }
#line 1 ""
break;
case 35:
#line 220 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_delim_box(yystack.l_mark[-3].str, yystack.l_mark[-2].b, yystack.l_mark[0].str); }
#line 1 ""
break;
case 36:
#line 222 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_delim_box(yystack.l_mark[-1].str, yystack.l_mark[0].b, 0); }
#line 1 ""
break;
case 37:
#line 224 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_overline_box(yystack.l_mark[-1].b); }
#line 1 ""
break;
case 38:
#line 226 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_underline_box(yystack.l_mark[-1].b); }
#line 1 ""
break;
case 39:
#line 228 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_prime_box(yystack.l_mark[-1].b); }
#line 1 ""
break;
case 40:
#line 230 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_accent_box(yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 41:
#line 232 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_uaccent_box(yystack.l_mark[-2].b, yystack.l_mark[0].b); }
#line 1 ""
break;
case 42:
#line 234 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new font_box(strsave(get_grfont()), yystack.l_mark[0].b); }
#line 1 ""
break;
case 43:
#line 236 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new font_box(strsave(get_gbfont()), yystack.l_mark[0].b); }
#line 1 ""
break;
case 44:
#line 238 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new font_box(strsave(get_gfont()), yystack.l_mark[0].b); }
#line 1 ""
break;
case 45:
#line 240 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new fat_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 46:
#line 242 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new font_box(yystack.l_mark[-1].str, yystack.l_mark[0].b); }
#line 1 ""
break;
case 47:
#line 244 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new size_box(yystack.l_mark[-1].str, yystack.l_mark[0].b); }
#line 1 ""
break;
case 48:
#line 246 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new hmotion_box(yystack.l_mark[-1].n, yystack.l_mark[0].b); }
#line 1 ""
break;
case 49:
#line 248 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new hmotion_box(-yystack.l_mark[-1].n, yystack.l_mark[0].b); }
#line 1 ""
break;
case 50:
#line 250 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new vmotion_box(yystack.l_mark[-1].n, yystack.l_mark[0].b); }
#line 1 ""
break;
case 51:
#line 252 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new vmotion_box(-yystack.l_mark[-1].n, yystack.l_mark[0].b); }
#line 1 ""
break;
case 52:
#line 254 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].b->set_spacing_type(yystack.l_mark[-1].str); yyval.b = yystack.l_mark[0].b; }
#line 1 ""
break;
case 53:
#line 256 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = new vcenter_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 54:
#line 258 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.b = make_special_box(yystack.l_mark[-1].str, yystack.l_mark[0].b); }
#line 1 ""
break;
case 55:
#line 263 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{
		  int n;
		  if (sscanf(yystack.l_mark[0].str, "%d", &n) == 1)
		    yyval.n = n;
		  a_delete yystack.l_mark[0].str;
		}
#line 1 ""
break;
case 56:
#line 273 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.pb = new pile_box(yystack.l_mark[0].b); }
#line 1 ""
break;
case 57:
#line 275 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[-2].pb->append(yystack.l_mark[0].b); yyval.pb = yystack.l_mark[-2].pb; }
#line 1 ""
break;
case 58:
#line 280 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.pb = yystack.l_mark[-1].pb; }
#line 1 ""
break;
case 59:
#line 282 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[-1].pb->set_space(yystack.l_mark[-3].n); yyval.pb = yystack.l_mark[-1].pb; }
#line 1 ""
break;
case 60:
#line 287 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.mb = new matrix_box(yystack.l_mark[0].col); }
#line 1 ""
break;
case 61:
#line 289 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[-1].mb->append(yystack.l_mark[0].col); yyval.mb = yystack.l_mark[-1].mb; }
#line 1 ""
break;
case 62:
#line 294 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.col = new column(yystack.l_mark[0].b); }
#line 1 ""
break;
case 63:
#line 296 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[-2].col->append(yystack.l_mark[0].b); yyval.col = yystack.l_mark[-2].col; }
#line 1 ""
break;
case 64:
#line 301 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.col = yystack.l_mark[-1].col; }
#line 1 ""
break;
case 65:
#line 303 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[-1].col->set_space(yystack.l_mark[-3].n); yyval.col = yystack.l_mark[-1].col; }
#line 1 ""
break;
case 66:
#line 308 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].col->set_alignment(CENTER_ALIGN); yyval.col = yystack.l_mark[0].col; }
#line 1 ""
break;
case 67:
#line 310 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].col->set_alignment(LEFT_ALIGN); yyval.col = yystack.l_mark[0].col; }
#line 1 ""
break;
case 68:
#line 312 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].col->set_alignment(RIGHT_ALIGN); yyval.col = yystack.l_mark[0].col; }
#line 1 ""
break;
case 69:
#line 314 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yystack.l_mark[0].col->set_alignment(CENTER_ALIGN); yyval.col = yystack.l_mark[0].col; }
#line 1 ""
break;
case 70:
#line 318 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.str = yystack.l_mark[0].str; }
#line 1 ""
break;
case 71:
#line 320 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.str = yystack.l_mark[0].str; }
#line 1 ""
break;
case 72:
#line 325 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.str = yystack.l_mark[0].str; }
#line 1 ""
break;
case 73:
#line 327 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.str = strsave("{"); }
#line 1 ""
break;
case 74:
#line 329 "/Users/sidqian/Downloads/summer/L2S/netbsd-src/external/gpl2/groff/dist/src/preproc/eqn/eqn.y"
	{ yyval.str = strsave("}"); }
#line 1 ""
break;
#line 2107 "y.tab.c"
    default:
        break;
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark -= yym;
#endif
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
        {
            fprintf(stderr, "%s[%d]: after reduction, ", YYDEBUGSTR, yydepth);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
            if (!yytrial)
#endif /* YYBTYACC */
                fprintf(stderr, "result is <%s>, ", YYSTYPE_TOSTRING(yystos[YYFINAL], yyval));
#endif
            fprintf(stderr, "shifting from state 0 to final state %d\n", YYFINAL);
        }
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        *++yystack.p_mark = yyloc;
#endif
        if (yychar < 0)
        {
#if YYBTYACC
            do {
            if (yylvp < yylve)
            {
                /* we're currently re-reading tokens */
                yylval = *yylvp++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                yylloc = *yylpp++;
#endif
                yychar = *yylexp++;
                break;
            }
            if (yyps->save)
            {
                /* in trial mode; save scanner results for future parse attempts */
                if (yylvp == yylvlim)
                {   /* Enlarge lexical value queue */
                    size_t p = (size_t) (yylvp - yylvals);
                    size_t s = (size_t) (yylvlim - yylvals);

                    s += YYLVQUEUEGROWTH;
                    if ((yylexemes = (YYINT *)realloc(yylexemes, s * sizeof(YYINT))) == NULL)
                        goto yyenomem;
                    if ((yylvals   = (YYSTYPE *)realloc(yylvals, s * sizeof(YYSTYPE))) == NULL)
                        goto yyenomem;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    if ((yylpsns   = (YYLTYPE *)realloc(yylpsns, s * sizeof(YYLTYPE))) == NULL)
                        goto yyenomem;
#endif
                    yylvp   = yylve = yylvals + p;
                    yylvlim = yylvals + s;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                    yylpp   = yylpe = yylpsns + p;
                    yylplim = yylpsns + s;
#endif
                    yylexp  = yylexemes + p;
                }
                *yylexp = (YYINT) YYLEX;
                *yylvp++ = yylval;
                yylve++;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
                *yylpp++ = yylloc;
                yylpe++;
#endif
                yychar = *yylexp++;
                break;
            }
            /* normal operation, no conflict encountered */
#endif /* YYBTYACC */
            yychar = YYLEX;
#if YYBTYACC
            } while (0);
#endif /* YYBTYACC */
            if (yychar < 0) yychar = YYEOF;
#if YYDEBUG
            if (yydebug)
            {
                if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
                fprintf(stderr, "%s[%d]: state %d, reading token %d (%s)\n",
                                YYDEBUGSTR, yydepth, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == YYEOF) goto yyaccept;
        goto yyloop;
    }
    if (((yyn = yygindex[yym]) != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
    {
        fprintf(stderr, "%s[%d]: after reduction, ", YYDEBUGSTR, yydepth);
#ifdef YYSTYPE_TOSTRING
#if YYBTYACC
        if (!yytrial)
#endif /* YYBTYACC */
            fprintf(stderr, "result is <%s>, ", YYSTYPE_TOSTRING(yystos[yystate], yyval));
#endif
        fprintf(stderr, "shifting from state %d to state %d\n", *yystack.s_mark, yystate);
    }
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    *++yystack.p_mark = yyloc;
#endif
    goto yyloop;
#if YYBTYACC

    /* Reduction declares that this path is valid. Set yypath and do a full parse */
yyvalid:
    if (yypath) YYABORT;
    while (yyps->save)
    {
        YYParseState *save = yyps->save;
        yyps->save = save->save;
        save->save = yypath;
        yypath = save;
    }
#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "%s[%d]: state %d, CONFLICT trial successful, backtracking to state %d, %d tokens\n",
                        YYDEBUGSTR, yydepth, yystate, yypath->state, (int)(yylvp - yylvals - yypath->lexeme));
#endif
    if (yyerrctx)
    {
        yyFreeState(yyerrctx);
        yyerrctx = NULL;
    }
    yylvp          = yylvals + yypath->lexeme;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yylpp          = yylpsns + yypath->lexeme;
#endif
    yylexp         = yylexemes + yypath->lexeme;
    yychar         = YYEMPTY;
    yystack.s_mark = yystack.s_base + (yypath->yystack.s_mark - yypath->yystack.s_base);
    memcpy (yystack.s_base, yypath->yystack.s_base, (size_t) (yystack.s_mark - yystack.s_base + 1) * sizeof(YYINT));
    yystack.l_mark = yystack.l_base + (yypath->yystack.l_mark - yypath->yystack.l_base);
    memcpy (yystack.l_base, yypath->yystack.l_base, (size_t) (yystack.l_mark - yystack.l_base + 1) * sizeof(YYSTYPE));
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
    yystack.p_mark = yystack.p_base + (yypath->yystack.p_mark - yypath->yystack.p_base);
    memcpy (yystack.p_base, yypath->yystack.p_base, (size_t) (yystack.p_mark - yystack.p_base + 1) * sizeof(YYLTYPE));
#endif
    yystate        = yypath->state;
    goto yyloop;
#endif /* YYBTYACC */

yyoverflow:
    YYERROR_CALL("yacc stack overflow");
#if YYBTYACC
    goto yyabort_nomem;
yyenomem:
    YYERROR_CALL("memory exhausted");
yyabort_nomem:
#endif /* YYBTYACC */
    yyresult = 2;
    goto yyreturn;

yyabort:
    yyresult = 1;
    goto yyreturn;

yyaccept:
#if YYBTYACC
    if (yyps->save) goto yyvalid;
#endif /* YYBTYACC */
    yyresult = 0;

yyreturn:
#if defined(YYDESTRUCT_CALL)
    if (yychar != YYEOF && yychar != YYEMPTY)
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        YYDESTRUCT_CALL("cleanup: discarding token", yychar, &yylval, &yylloc);
#else
        YYDESTRUCT_CALL("cleanup: discarding token", yychar, &yylval);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */

    {
        YYSTYPE *pv;
#if defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED)
        YYLTYPE *pp;

        for (pv = yystack.l_base, pp = yystack.p_base; pv <= yystack.l_mark; ++pv, ++pp)
             YYDESTRUCT_CALL("cleanup: discarding state",
                             yystos[*(yystack.s_base + (pv - yystack.l_base))], pv, pp);
#else
        for (pv = yystack.l_base; pv <= yystack.l_mark; ++pv)
             YYDESTRUCT_CALL("cleanup: discarding state",
                             yystos[*(yystack.s_base + (pv - yystack.l_base))], pv);
#endif /* defined(YYLTYPE) || defined(YYLTYPE_IS_DECLARED) */
    }
#endif /* defined(YYDESTRUCT_CALL) */

#if YYBTYACC
    if (yyerrctx)
    {
        yyFreeState(yyerrctx);
        yyerrctx = NULL;
    }
    while (yyps)
    {
        YYParseState *save = yyps;
        yyps = save->save;
        save->save = NULL;
        yyFreeState(save);
    }
    while (yypath)
    {
        YYParseState *save = yypath;
        yypath = save->save;
        save->save = NULL;
        yyFreeState(save);
    }
#endif /* YYBTYACC */
    yyfreestack(&yystack);
    return (yyresult);
}
