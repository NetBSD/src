This is texinfo, produced by makeinfo version 4.8 from
/Users/sidqian/Downloads/summer/L2S/netbsd-src/tools/texinfo/../../external/gpl2/texinfo/dist/doc/texinfo.txi.

  This manual is for GNU Texinfo (version 4.8, 29 December 2004), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. Update info/dir entries.
* texi2dvi: (texinfo)Format with texi2dvi.      Print Texinfo documents.
* texi2pdf: (texinfo)PDF Output.                PDF output for Texinfo.
* texindex: (texinfo)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo: (texinfo)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo,  Node: Footnote Commands,  Next: Footnote Styles,  Up: Footnotes

12.3.1 Footnote Commands
------------------------

In Texinfo, footnotes are created with the `@footnote' command.  This
command is followed immediately by a left brace, then by the text of
the footnote, and then by a terminating right brace.  Footnotes may be
of any length (they will be broken across pages if necessary), but are
usually short.  The template is:

     ordinary text@footnote{TEXT OF FOOTNOTE}

  As shown here, the `@footnote' command should come right after the
text being footnoted, with no intervening space; otherwise, the footnote
marker might end up starting a line.

  For example, this clause is followed by a sample footnote(1); in the
Texinfo source, it looks like this:

     ...a sample footnote@footnote{Here is the sample
     footnote.}; in the Texinfo source...

  As you can see, the source includes two punctuation marks next to each
other; in this case, `.};' is the sequence.  This is normal (the first
ends the footnote and the second belongs to the sentence being
footnoted), so don't worry that it looks odd.

  In a printed manual or book, the reference mark for a footnote is a
small, superscripted number; the text of the footnote appears at the
bottom of the page, below a horizontal line.

  In Info, the reference mark for a footnote is a pair of parentheses
with the footnote number between them, like this: `(1)'.  The reference
mark is followed by a cross-reference link to the footnote's text.

  In the HTML output, footnote references are marked with a small,
superscripted number which is rendered as a hypertext link to the
footnote text.

  By the way, footnotes in the argument of an `@item' command for a
`@table' must be on the same line as the `@item' (as usual).  *Note
Two-column Tables::.

  ---------- Footnotes ----------

  (1) Here is the sample footnote.


File: texinfo,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

12.3.2 Footnote Styles
----------------------

Info has two footnote styles, which determine where the text of the
footnote is located:

   * In the `End' node style, all the footnotes for a single node are
     placed at the end of that node.  The footnotes are separated from
     the rest of the node by a line of dashes with the word `Footnotes'
     within it.  Each footnote begins with an `(N)' reference mark.

     Here is an example of a single footnote in the end of node style:

          --------- Footnotes ---------

          (1)  Here is a sample footnote.

   * In the `Separate' node style, all the footnotes for a single node
     are placed in an automatically constructed node of their own.  In
     this style, a "footnote reference" follows each `(N)' reference
     mark in the body of the node.  The footnote reference is actually
     a cross reference which you use to reach the footnote node.

     The name of the node with the footnotes is constructed by
     appending `-Footnotes' to the name of the node that contains the
     footnotes. (Consequently, the footnotes' node for the `Footnotes'
     node is `Footnotes-Footnotes'!)  The footnotes' node has an `Up'
     node pointer that leads back to its parent node.

     Here is how the first footnote in this manual looks after being
     formatted for Info in the separate node style:

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview

          (1) The first syllable of "Texinfo" is pronounced like "speck", not
          "hex". ...

  Unless your document has long and important footnotes (as in, say,
Gibbon's `Decline and Fall ...'), we recommend the `end' style, as it
is simpler for readers to follow.

  Use the `@footnotestyle' command to specify an Info file's footnote
style.  Write this command at the beginning of a line followed by an
argument, either `end' for the end node style or `separate' for the
separate node style.

  For example,

     @footnotestyle end
  or
     @footnotestyle separate

  Write an `@footnotestyle' command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  (If you include
the `@footnotestyle' command between the start-of-header and
end-of-header lines, the region formatting commands will format
footnotes as specified.)

  If you do not specify a footnote style, the formatting commands use
their default style.  Currently, `texinfo-format-buffer' and
`texinfo-format-region' use the `separate' style and `makeinfo' uses
the `end' style.


File: texinfo,  Node: Indices,  Next: Insertions,  Prev: Special Displays,  Up: Top

13 Indices
**********

Using Texinfo, you can generate indices without having to sort and
collate entries manually.  In an index, the entries are listed in
alphabetical order, together with information on how to find the
discussion of each entry.  In a printed manual, this information
consists of page numbers.  In an Info file, this information is a menu
entry leading to the first node referenced.

  Texinfo provides several predefined kinds of index: an index for
functions, an index for variables, an index for concepts, and so on.
You can combine indices or use them for other than their canonical
purpose.  Lastly, you can define your own new indices.

  *Note Printing Indices & Menus::, for information on how to print
indices.

* Menu:

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entries.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.


File: texinfo,  Node: Index Entries,  Next: Predefined Indices,  Up: Indices

13.1 Making Index Entries
=========================

When you are making index entries, it is good practice to think of the
different ways people may look for something.  Different people _do
not_ think of the same words when they look something up.  A helpful
index will have items indexed under all the different words that people
may use.  For example, one reader may think it obvious that the
two-letter names for indices should be listed under "Indices,
two-letter names", since the word "Index" is the general concept.  But
another reader may remember the specific concept of two-letter names
and search for the entry listed as "Two letter names for indices".  A
good index will have both entries and will help both readers.

  Like typesetting, the construction of an index is a highly skilled,
professional art, the subtleties of which are not appreciated until you
need to do it yourself.

  *Note Printing Indices & Menus::, for information about printing an
index at the end of a book or creating an index menu in an Info file.


File: texinfo,  Node: Predefined Indices,  Next: Indexing Commands,  Prev: Index Entries,  Up: Indices

13.2 Predefined Indices
=======================

Texinfo provides six predefined indices.  Here are their nominal
meanings, abbreviations, and the corresponding index entry commands:

`cp'
     (`@cindex') concept index, for general concepts.

`fn'
     (`@findex') function index, for function and function-like names
     (such as entry points of libraries).

`ky'
     (`@kindex') keystroke index, for keyboard commands.

`pg'
     (`@pindex') program index, for names of programs.

`tp'
     (`@tindex') data type index, for type names (such as structures
     defined in header files).

`vr'
     (`@vindex') variable index, for variable names (such as global
     variables of libraries).

Not every manual needs all of these, and most manuals use only two or
three at most.  The present manual, for example, has two indices: a
concept index and an @-command index (that is actually the function
index but is called a command index in the chapter heading).

  You are not required to use the predefined indices strictly for their
canonical purposes.  For example, suppose you wish to index some C
preprocessor macros.  You could put them in the function index along
with actual functions, just by writing `@findex' commands for them;
then, when you print the "Function Index" as an unnumbered chapter, you
could give it the title `Function and Macro Index' and all will be
consistent for the reader.

  On the other hand, it is best not to stray too far from the meaning of
the predefined indices.  Otherwise, in the event that your text is
combined with other text from other manuals, the index entries will not
match up.  Instead, define your own new index (*note New Indices::).

  We recommend having a single index in the final document whenever
possible, however many source indices you use, since then readers have
only one place to look.  Two or more source indices can be combined
into one output index using the `@synindex' or `@syncodeindex' commands
(*note Combining Indices::).


File: texinfo,  Node: Indexing Commands,  Next: Combining Indices,  Prev: Predefined Indices,  Up: Indices

13.3 Defining the Entries of an Index
=====================================

The data to make an index come from many individual indexing commands
scattered throughout the Texinfo source file.  Each command says to add
one entry to a particular index; after formatting, the index will give
the current page number or node name as the reference.

  An index entry consists of an indexing command at the beginning of a
line followed, on the rest of the line, by the entry.

  For example, this section begins with the following five entries for
the concept index:

     @cindex Defining indexing entries
     @cindex Index entries, defining
     @cindex Entries for an index
     @cindex Specifying index entries
     @cindex Creating index entries

  Each predefined index has its own indexing command--`@cindex' for the
concept index, `@findex' for the function index, and so on, as listed
in the previous section.

  Concept index entries consist of text.  The best way to write an index
is to choose entries that are terse yet clear.  If you can do this, the
index often looks better if the entries are not capitalized, but
written just as they would appear in the middle of a sentence.
(Capitalize proper names and acronyms that always call for upper case
letters.)  This is the case convention we use in most GNU manuals'
indices.

  If you don't see how to make an entry terse yet clear, make it longer
and clear--not terse and confusing.  If many of the entries are several
words long, the index may look better if you use a different convention:
to capitalize the first word of each entry.  But do not capitalize a
case-sensitive name such as a C or Lisp function name or a shell
command; that would be a spelling error.

  Whichever case convention you use, please use it consistently!

  Entries in indices other than the concept index are symbol names in
programming languages, or program names; these names are usually
case-sensitive, so use upper and lower case as required for them.

  By default, entries for a concept index are printed in a small roman
font and entries for the other indices are printed in a small `@code'
font.  You may change the way part of an entry is printed with the
usual Texinfo commands, such as `@file' for file names (*note Marking
Text::), and `@r' for the normal roman font (*note Fonts::).

     Caution: Do not use a colon in an index entry.  In Info, a colon
     separates the menu entry name from the node name, so a colon in
     the entry itself confuses Info.  *Note Menu Parts::, for more
     information about the structure of a menu entry.


File: texinfo,  Node: Combining Indices,  Next: New Indices,  Prev: Indexing Commands,  Up: Indices

13.4 Combining Indices
======================

Sometimes you will want to combine two disparate indices such as
functions and concepts, perhaps because you have few enough entries
that a separate index would look silly.

  You could put functions into the concept index by writing `@cindex'
commands for them instead of `@findex' commands, and produce a
consistent manual by printing the concept index with the title
`Function and Concept Index' and not printing the `Function Index' at
all; but this is not a robust procedure.  It works only if your
document is never included as part of another document that is designed
to have a separate function index; if your document were to be included
with such a document, the functions from your document and those from
the other would not end up together.  Also, to make your function names
appear in the right font in the concept index, you would need to
enclose every one of them between the braces of `@code'.

* Menu:

* syncodeindex::                How to merge two indices, using `@code'
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.


File: texinfo,  Node: syncodeindex,  Next: synindex,  Up: Combining Indices

13.4.1 `@syncodeindex'
----------------------

When you want to combine functions and concepts into one index, you
should index the functions with `@findex' and index the concepts with
`@cindex', and use the `@syncodeindex' command to redirect the function
index entries into the concept index.

  The `@syncodeindex' command takes two arguments; they are the name of
the index to redirect, and the name of the index to redirect it to.
The template looks like this:

     @syncodeindex FROM TO

  For this purpose, the indices are given two-letter names:

`cp'
     concept index

`fn'
     function index

`vr'
     variable index

`ky'
     key index

`pg'
     program index

`tp'
     data type index

  Write an `@syncodeindex' command before or shortly after the
end-of-header line at the beginning of a Texinfo file.  For example, to
merge a function index with a concept index, write the following:

     @syncodeindex fn cp

This will cause all entries designated for the function index to merge
in with the concept index instead.

  To merge both a variables index and a function index into a concept
index, write the following:

     @syncodeindex vr cp
     @syncodeindex fn cp

  The `@syncodeindex' command puts all the entries from the `from'
index (the redirected index) into the `@code' font, overriding whatever
default font is used by the index to which the entries are now
directed.  This way, if you direct function names from a function index
into a concept index, all the function names are printed in the `@code'
font as you would expect.


File: texinfo,  Node: synindex,  Prev: syncodeindex,  Up: Combining Indices

13.4.2 `@synindex'
------------------

The `@synindex' command is nearly the same as the `@syncodeindex'
command, except that it does not put the `from' index  entries into the
`@code' font; rather it puts them in the roman font.  Thus, you use
`@synindex' when you merge a concept index into a function index.

  *Note Printing Indices & Menus::, for information about printing an
index at the end of a book or creating an index menu in an Info file.


File: texinfo,  Node: New Indices,  Prev: Combining Indices,  Up: Indices

13.5 Defining New Indices
=========================

In addition to the predefined indices, you may use the `@defindex' and
`@defcodeindex' commands to define new indices.  These commands create
new indexing @-commands with which you mark index entries.  The
`@defindex' command is used like this:

     @defindex NAME

  The name of an index should be a two letter word, such as `au'.  For
example:

     @defindex au

  This defines a new index, called the `au' index.  At the same time,
it creates a new indexing command, `@auindex', that you can use to make
index entries.  Use this new indexing command just as you would use a
predefined indexing command.

  For example, here is a section heading followed by a concept index
entry and two `au' index entries.

     @section Cognitive Semantics
     @cindex kinesthetic image schemas
     @auindex Johnson, Mark
     @auindex Lakoff, George

(Evidently, `au' serves here as an abbreviation for "author".)

  In general, Texinfo constructs the new indexing command by
concatenating the name of the index with `index'; thus, defining an
`xy' index leads to the automatic creation of an `@xyindex' command.

  Use the `@printindex' command to print the index, as you do with the
predefined indices.  For example:

     @node Author Index
     @unnumbered Author Index

     @printindex au

  The `@defcodeindex' is like the `@defindex' command, except that, in
the printed output, it prints entries in an `@code' font by default
instead of a roman font.

  You should define new indices before the end-of-header line of a
Texinfo file, and (of course) before any `@synindex' or `@syncodeindex'
commands (*note Texinfo File Header::).


File: texinfo,  Node: Insertions,  Next: Breaks,  Prev: Indices,  Up: Top

14 Special Insertions
*********************

Texinfo provides several commands for inserting characters that have
special meaning in Texinfo, such as braces, and for other graphic
elements that do not correspond to simple characters you can type.

* Menu:

* Atsign Braces Comma::         Inserting @ and {} and ,.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                 and the copyright symbol.
* euro::                        How to insert the Euro currency symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.


File: texinfo,  Node: Atsign Braces Comma,  Next: Inserting Space,  Up: Insertions

14.1 Inserting @ and {} and ,
=============================

`@' and curly braces are special characters in Texinfo.  To insert
these characters so they appear in text, you must put an `@' in front
of these characters to prevent Texinfo from misinterpreting them.

  The comma `,' is a special character only in one uncommon context: it
separates arguments to commands that take multiple arguments.

* Menu:

* Inserting an Atsign::
* Inserting Braces::
* Inserting a Comma::


File: texinfo,  Node: Inserting an Atsign,  Next: Inserting Braces,  Up: Atsign Braces Comma

14.1.1 Inserting `@' with `@@'
------------------------------

`@@' stands for a single `@' in either printed or Info output.

  Do not put braces after an `@@' command.


File: texinfo,  Node: Inserting Braces,  Next: Inserting a Comma,  Prev: Inserting an Atsign,  Up: Atsign Braces Comma

14.1.2 Inserting `{' and `}' with `@{' and `@}'
-----------------------------------------------

`@{' stands for a single `{' in either printed or Info output.

  `@}' stands for a single `}' in either printed or Info output.

  Do not put braces after either an `@{' or an `@}' command.ppp


File: texinfo,  Node: Inserting a Comma,  Prev: Inserting Braces,  Up: Atsign Braces Comma

14.1.3 Inserting `,' with `@comma{}'
------------------------------------

Ordinarily, a comma `,' is a normal character that can be simply typed
in your input where you need it.

  However, Texinfo uses the comma as a special character in one uncommon
context: some commands, such as `@acronym' (*note acronym::) and
`@xref' (*note Cross References::), as well as user-defined macros
(*note Defining Macros::), can take more than one argument.  In these
cases, the comma character is used to separate arguments.

  Since a comma chacter would confuse Texinfo's parsing for these
commands, you must use the command `,' instead if you want to have an
actual comma in the output.  Here are some examples:

     @acronym{ABC, A Bizarre @comma{}}
     @xref{Comma,, The @comma{} symbol}
     @mymac{One argument@comma{} containing a comma}

  Although , can be used anywhere, there is no need for it anywhere
except in this unusual case.


File: texinfo,  Node: Inserting Space,  Next: Inserting Accents,  Prev: Atsign Braces Comma,  Up: Insertions

14.2 Inserting Space
====================

The following sections describe commands that control spacing of various
kinds within and after sentences.

* Menu:

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.


File: texinfo,  Node: Not Ending a Sentence,  Next: Ending a Sentence,  Up: Inserting Space

14.2.1 Not Ending a Sentence
----------------------------

Depending on whether a period or exclamation point or question mark is
inside or at the end of a sentence, less or more space is inserted after
a period in a typeset manual.  Since it is not always possible to
determine when a period ends a sentence and when it is used in an
abbreviation, special commands are needed in some circumstances.
Usually, Texinfo can guess how to handle periods, so you do not need to
use the special commands; you just enter a period as you would if you
were using a typewriter, which means you put two spaces after the
period, question mark, or exclamation mark that ends a sentence.

  Use the `@:' command after a period, question mark, exclamation mark,
or colon that should not be followed by extra space.  For example, use
`@:' after periods that end abbreviations which are not at the ends of
sentences.

  For example,

     The s.o.p.@: has three parts ...
     The s.o.p. has three parts ...

produces

     The s.o.p. has three parts ...
     The s.o.p. has three parts ...

(Incidentally, `s.o.p.' is an abbreviation for "Standard Operating
Procedure".)

  `@:' has no effect on the Info and HTML output.  In Docbook and XML,
the previous punctuation character (.?!:) is output as an entity
instead of as the normal character: `&period; &quest; &excl; &colon;'.
This gives further processors a chance to notice and not add the usual
extra space.

  Do not put braces after `@:' (or any non-alphabetic command).


File: texinfo,  Node: Ending a Sentence,  Next: Multiple Spaces,  Prev: Not Ending a Sentence,  Up: Inserting Space

14.2.2 Ending a Sentence
------------------------

Use `@.' instead of a period, `@!' instead of an exclamation point, and
`@?' instead of a question mark at the end of a sentence that ends with
a capital letter.  Otherwise, TeX will think the letter is an
abbreviation and will not insert the correct end-of-sentence spacing.
Here is an example:

     Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

produces

     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

  In the Info file output, `@.' is equivalent to a simple `.'; likewise
for `@!' and `@?'.

  The meanings of `@:' and `@.' in Texinfo are designed to work well
with the Emacs sentence motion commands (*note Sentences:
(emacs)Sentences.).

  Do not put braces after any of these commands.


File: texinfo,  Node: Multiple Spaces,  Next: dmn,  Prev: Ending a Sentence,  Up: Inserting Space

14.2.3 Multiple Spaces
----------------------

Ordinarily, TeX collapses multiple whitespace characters (space, tab,
and newline) into a single space.  Info output, on the other hand,
preserves whitespace as you type it, except for changing a newline into
a space; this is why it is important to put two spaces at the end of
sentences in Texinfo documents.

  Occasionally, you may want to actually insert several consecutive
spaces, either for purposes of example (what your program does with
multiple spaces as input), or merely for purposes of appearance in
headings or lists.  Texinfo supports three commands: `@SPACE', `@TAB',
and `@NL', all of which insert a single space into the output.  (Here,
`@SPACE' represents an `@' character followed by a space, i.e., `@ ',
and `TAB' and `NL' represent the tab character and end-of-line, i.e.,
when `@' is the last character on a line.)

  For example,
     Spacey@ @ @ @
     example.

produces

     Spacey    example.

  Other possible uses of `@SPACE' have been subsumed by `@multitable'
(*note Multi-column Tables::).

  Do not follow any of these commands with braces.

  To produce a non-breakable space, see *Note `@tie': tie.


File: texinfo,  Node: dmn,  Prev: Multiple Spaces,  Up: Inserting Space

14.2.4 `@dmn'{DIMENSION}: Format a Dimension
--------------------------------------------

At times, you may want to write `12pt' or `8.5in' with little or no
space between the number and the abbreviation for the dimension.  You
can use the `@dmn' command to do this.  On seeing the command, TeX
inserts just enough space for proper typesetting; the Info formatting
commands insert no space at all, since the Info file does not require
it.

  To use the `@dmn' command, write the number and then follow it
immediately, with no intervening space, by `@dmn', and then by the
dimension within braces.  For example,

     A4 paper is 8.27@dmn{in} wide.

produces

     A4 paper is 8.27in wide.

  Not everyone uses this style.  Some people prefer `8.27 in.@:' or
`8.27 inches' to `8.27@dmn{in}' in the Texinfo file.  In these cases,
however, the formatters may insert a line break between the number and
the dimension, so use `@w' (*note w::).  Also, if you write a period
after an abbreviation within a sentence, you should write `@:' after
the period to prevent TeX from inserting extra whitespace, as shown
here.  *Note Not Ending a Sentence::.


File: texinfo,  Node: Inserting Accents,  Next: Dots Bullets,  Prev: Inserting Space,  Up: Insertions

14.3 Inserting Accents
======================

Here is a table with the commands Texinfo provides for inserting
floating accents.  The commands with non-alphabetic names do not take
braces around their argument (which is taken to be the next character).
(Exception: `@,' _does_ take braces around its argument.)  This is so
as to make the source as convenient to type and read as possible, since
accented characters are very common in some languages.

  To get the true accented characters output in Info, and not just the
ASCII transliterations, you can use the `--enable-encoding' option to
`makeinfo' (*note makeinfo options::).

Command           Output   What
@"o               o"       umlaut accent
@'o               o'       acute accent
@,{c}             c,       cedilla accent
@=o               o=       macron/overbar accent
@^o               o^       circumflex accent
@`o               o`       grave accent
@~o               o~       tilde accent
@dotaccent{o}     o.       overdot accent
@H{o}             o''      long Hungarian umlaut
@ringaccent{o}    o*       ring accent
@tieaccent{oo}    oo[      tie-after accent
@u{o}             o(       breve accent
@ubaraccent{o}    o_       underbar accent
@udotaccent{o}    .o       underdot accent
@v{o}             o<       hacek/check/caron accent

  This table lists the Texinfo commands for inserting other characters
commonly used in languages other than English.

@exclamdown{}      !       upside-down !
@questiondown{}    ?       upside-down ?
@aa{} @AA{}        aa AA   a,A with circle
@ae{} @AE{}        ae AE   ae,AE ligatures
@dotless{i}        i       dotless i
@dotless{j}        j       dotless j
@l{} @L{}          /l /L   suppressed-L,l
@o{} @O{}          /o /O   O,o with slash
@oe{} @OE{}        oe OE   oe,OE ligatures
@ordf{} @ordm{}    a o     Spanish ordinals
@ss{}              ss      es-zet or sharp S


File: texinfo,  Node: Dots Bullets,  Next: TeX and copyright,  Prev: Inserting Accents,  Up: Insertions

14.4 Inserting Ellipsis and Bullets
===================================

An "ellipsis" (a line of dots) is not typeset as a string of periods,
so a special command is used for ellipsis in Texinfo.  The `@bullet'
command is special, too.  Each of these commands is followed by a pair
of braces, `{}', without any whitespace between the name of the command
and the braces.  (You need to use braces with these commands because
you can use them next to other text; without the braces, the formatters
would be confused.  *Note @-Command Syntax: Command Syntax, for further
information.)

* Menu:

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.


File: texinfo,  Node: dots,  Next: bullet,  Up: Dots Bullets

14.4.1 `@dots'{} (...) and `@enddots'{} (....)
----------------------------------------------

Use the `@dots{}' command to generate an ellipsis, which is three dots
in a row, appropriately spaced ... like so.  Do not simply write three
periods in the input file; that would work for the Info file output,
but would produce the wrong amount of space between the periods in the
printed manual.

  Similarly, the `@enddots{}' command generates an end-of-sentence
ellipsis, which has different spacing afterwards, ....  Look closely to
see the difference.


File: texinfo,  Node: bullet,  Prev: dots,  Up: Dots Bullets

14.4.2 `@bullet'{} (*)
----------------------

Use the `@bullet{}' command to generate a large round dot, or the
closest possible thing to one.  In Info, an asterisk is used.

  Here is a bullet: *

  When you use `@bullet' in `@itemize', you do not need to type the
braces, because `@itemize' supplies them.  (*Note `@itemize': itemize.)


File: texinfo,  Node: TeX and copyright,  Next: euro,  Prev: Dots Bullets,  Up: Insertions

14.5 Inserting TeX and Legal Symbols: (C), (R)
==============================================

The logo `TeX' is typeset in a special fashion and it needs an
@-command.  The copyright and registered symbols, `(C)' and `(R)', is
also special.  Each of these commands is followed by a pair of braces,
`{}', without any whitespace between the name of the command and the
braces.

* Menu:

* tex::                         The TeX logos.
* copyright symbol::            The copyright symbol (c in a circle).
* registered symbol::           The registered symbol (R in a circle).


File: texinfo,  Node: tex,  Next: copyright symbol,  Up: TeX and copyright

14.5.1 `@TeX'{} (TeX) and `@LaTeX'{} (LaTeX)
--------------------------------------------

Use the `@TeX{}' command to generate `TeX'.  In a printed manual, this
is a special logo that is different from three ordinary letters.  In
Info, it just looks like `TeX'.

  Similarly, use the `@LaTeX{}' command to generate `LaTeX', which is
even more special in printed manuals (and different from the incorrect
`La@TeX{}'.  In Info, the result is just `LaTeX'.  (LaTeX is another
macro package built on top of TeX, very loosely analogous to Texinfo in
that it emphasizes logical structure, but much (much) larger.)

  The spelling of these commands are unusual among Texinfo commands in
that they use both uppercase and lowercase letters.


File: texinfo,  Node: copyright symbol,  Next: registered symbol,  Prev: tex,  Up: TeX and copyright

14.5.2 `@copyright{}' ((C))
---------------------------

Use the `@copyright{}' command to generate the copyright symbol, `(C)'.
Where possible, this is a `c' inside a circle; in Info, this is `(C)'.


File: texinfo,  Node: registered symbol,  Prev: copyright symbol,  Up: TeX and copyright

14.5.3 `@registeredsymbol{}' ((R))
----------------------------------

Use the `@registeredsymbol{}' command to generate the registered
symbol, `(R)'.  Where possible, this is an `R' inside a circle; in
Info, this is `(R)'.


File: texinfo,  Node: euro,  Next: pounds,  Prev: TeX and copyright,  Up: Insertions

14.6 `@euro'{} (Euro ): Euro currency symbol
============================================

Use the `@euro{}' command to generate `Euro '.  Where possible, this is
the symbol for the Euro currency, invented as part of the European
economic unification relatively recently.  In plain Info, it is the
word `Euro '.  (The space is included in the text transliteration since
typically there would be no space after the symbol, so it would be
inappropriate to have a space in the source document.)

  Texinfo cannot magically synthesize support for the Euro symbol where
the underlying system (fonts, software, whatever) does not support it.
Therefore, in many cases it is preferable to use the word "Euro".  (In
banking circles, the abbreviation for the Euro is EUR.)

  In order to get the Euro symbol in encoded Info output, for example,
it is necessary to specify `@documentencoding ISO-8859-15'.  (*Note
`@documentencoding': documentencoding.)  The Euro symbol is in ISO
8859-15 (aka Latin 9), and is _not_ in the more widely-used and
supported ISO 8859-1 (Latin 1).


File: texinfo,  Node: pounds,  Next: minus,  Prev: euro,  Up: Insertions

14.7 `@pounds'{} (#): Pounds Sterling
=====================================

Use the `@pounds{}' command to generate `#'.  Where possible, this is
the symbol for the currency pounds sterling.  In Info, it is a `#'.


File: texinfo,  Node: minus,  Next: math,  Prev: pounds,  Up: Insertions

14.8 `@minus'{} (-): Inserting a Minus Sign
===========================================

Use the `@minus{}' command to generate a minus sign.  In a fixed-width
font, this is a single hyphen, but in a proportional font, the symbol
is the customary length for a minus sign--a little longer than a
hyphen, shorter than an em-dash:

     `-' is a minus sign generated with `@minus{}',

     `-' is a hyphen generated with the character `-',

     `--' is an em-dash for text.

In the fixed-width font used by Info, `@minus{}' is the same as a
hyphen.

  You should not use `@minus{}' inside `@code' or `@example' because
the width distinction is not made in the fixed-width font they use.

  When you use `@minus' to specify the mark beginning each entry in an
itemized list, you do not need to type the braces (*note `@itemize':
itemize.).


File: texinfo,  Node: math,  Next: Glyphs,  Prev: minus,  Up: Insertions

14.9 `@math': Inserting Mathematical Expressions
================================================

You can write a short mathematical expression with the `@math' command.
Write the mathematical expression between braces, like this:

     @math{(a + b)(a + b) = a^2 + 2ab + b^2}

This produces the following in Info and HTML:

     (a + b)(a + b) = a^2 + 2ab + b^2

  Thus, the `@math' command has no effect on the Info and HTML output;
`makeinfo' just reproduces the input, it does not try to interpret the
mathematics in any way.

  `@math' implies `@tex'.  This not only makes it possible to write
superscripts and subscripts (as in the above example), but also allows
you to use any of the plain TeX math control sequences.  It's
conventional to use `\' instead of `@' for these commands.  As in:
     @math{\sin 2\pi \equiv \cos 3\pi}

which looks like the input in Info and HTML:
     \sin 2\pi \equiv \cos 3\pi

  Since `\' is an escape character inside `@math', you can use `@\' to
get a literal backslash (`\\' will work in TeX, but you'll get the
literal `\\' in Info).  `@\' is not defined outside of `@math', since a
`\' ordinarily produces a literal `\'.

  For displayed equations, you must at present use TeX directly (*note
Raw Formatter Commands::).


File: texinfo,  Node: Glyphs,  Prev: math,  Up: Insertions

14.10 Glyphs for Examples
=========================

In Texinfo, code is often illustrated in examples that are delimited by
`@example' and `@end example', or by `@lisp' and `@end lisp'.  In such
examples, you can indicate the results of evaluation or an expansion
using `=>' or `==>'.  Likewise, there are commands to insert glyphs to
indicate printed output, error messages, equivalence of expressions,
and the location of point.

  The glyph-insertion commands do not need to be used within an
example, but most often they are.  Every  glyph-insertion command is
followed by a pair of left- and right-hand braces.

* Menu:

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.


File: texinfo,  Node: Glyphs Summary,  Next: result,  Up: Glyphs

14.10.1 Glyphs Summary
----------------------

Here are the different glyph commands:

=>
     `@result{}' points to the result of an expression.

==>
     `@expansion{}' shows the results of a macro expansion.

-|
     `@print{}' indicates printed output.

error-->
     `@error{}' indicates that the following text is an error message.

==
     `@equiv{}' indicates the exact equivalence of two forms.

-!-
     `@point{}' shows the location of point.

* Menu:

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::


File: texinfo,  Node: result,  Next: expansion,  Prev: Glyphs Summary,  Up: Glyphs

14.10.2 `@result{}' (=>): Indicating Evaluation
-----------------------------------------------

Use the `@result{}' command to indicate the result of evaluating an
expression.

  The `@result{}' command is displayed as `=>' in Info and HTML and as
a true double stemmed arrow in the printed output.

  Thus, the following,

     (cdr '(1 2 3))
         => (2 3)

may be read as "`(cdr '(1 2 3))' evaluates to `(2 3)'".


File: texinfo,  Node: expansion,  Next: Print Glyph,  Prev: result,  Up: Glyphs

14.10.3 `@expansion{}' (==>): Indicating an Expansion
-----------------------------------------------------

When an expression is a macro call, it expands into a new expression.
You can indicate the result of the expansion with the `@expansion{}'
command.

  The `@expansion{}' command is displayed as `==>' in Info and HTML,
and as a long arrow with a flat base in the printed output.

  For example, the following

     @lisp
     (third '(a b c))
         @expansion{} (car (cdr (cdr '(a b c))))
         @result{} c
     @end lisp

produces

     (third '(a b c))
         ==> (car (cdr (cdr '(a b c))))
         => c

which may be read as:

     `(third '(a b c))' expands to `(car (cdr (cdr '(a b c))))'; the
     result of evaluating the expression is `c'.

Often, as in this case, an example looks better if the `@expansion{}'
and `@result{}' commands are indented.


File: texinfo,  Node: Print Glyph,  Next: Error Glyph,  Prev: expansion,  Up: Glyphs

14.10.4 `@print{}' (-|): Indicating Printed Output
--------------------------------------------------

Sometimes an expression will print output during its execution.  You
can indicate the printed output with the `@print{}' command.

  The `@print{}' command is displayed as `-|' in Info and HTML and
(similarly) as a horizontal dash butting against a vertical bar in the
printed output.

  In the following example, the printed text is indicated with `-|',
and the value of the expression follows on the last line.

     (progn (print 'foo) (print 'bar))
         -| foo
         -| bar
         => bar

In a Texinfo source file, this example is written as follows:

     @lisp
     (progn (print 'foo) (print 'bar))
         @print{} foo
         @print{} bar
         @result{} bar
     @end lisp


File: texinfo,  Node: Error Glyph,  Next: Equivalence,  Prev: Print Glyph,  Up: Glyphs

14.10.5 `@error{}' (error-->): Indicating an Error Message
----------------------------------------------------------

A piece of code may cause an error when you evaluate it.  You can
designate the error message with the `@error{}' command.

  The `@error{}' command is displayed as `error-->' in Info and HTML
and as the word `error' in a box in the printed output.

  Thus,

     @lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end lisp

produces

     (+ 23 'x)
     error--> Wrong type argument: integer-or-marker-p, x

This indicates that the following error message is printed when you
evaluate the expression:

     Wrong type argument: integer-or-marker-p, x

  `error-->' itself is not part of the error message.


File: texinfo,  Node: Equivalence,  Next: Point Glyph,  Prev: Error Glyph,  Up: Glyphs

14.10.6 `@equiv{}' (==): Indicating Equivalence
-----------------------------------------------

Sometimes two expressions produce identical results.  You can indicate
the exact equivalence of two forms with the `@equiv{}' command.

  The `@equiv{}' command is displayed as `==' in Info and HTML and as a
standard mathematical equivalence sign (three parallel horizontal
lines) in the printed output.

  Thus,

     @lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end lisp

produces

     (make-sparse-keymap) == (list 'keymap)

This indicates that evaluating `(make-sparse-keymap)' produces
identical results to evaluating `(list 'keymap)'.


File: texinfo,  Node: Point Glyph,  Prev: Equivalence,  Up: Glyphs

14.10.7 `@point{}' (-!-): Indicating Point in a Buffer
------------------------------------------------------

Sometimes you need to show an example of text in an Emacs buffer.  In
such examples, the convention is to include the entire contents of the
buffer in question between two lines of dashes containing the buffer
name.

  You can use the `@point{}' command to show the location of point in
the text in the buffer.  (The symbol for point, of course, is not part
of the text in the buffer; it indicates the place _between_ two
characters where point is located.)

  The `@point{}' command is displayed as `-!-' in Info and HTML and as
a small five pointed star in the printed output.

  The following example shows the contents of buffer `foo' before and
after evaluating a Lisp command to insert the word `changed'.

     ---------- Buffer: foo ----------
     This is the -!-contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
         => nil
     ---------- Buffer: foo ----------
     This is the changed -!-contents of foo.
     ---------- Buffer: foo ----------

  In a Texinfo source file, the example is written like this:

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
         @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo,  Node: Breaks,  Next: Definition Commands,  Prev: Insertions,  Up: Top

15 Forcing and Preventing Breaks
********************************

Usually, a Texinfo file is processed both by TeX and by one of the Info
formatting commands.  Line, paragraph, or page breaks sometimes occur
in the `wrong' place in one or other form of output.  You must ensure
that text looks right both in the printed manual and in the Info file.

  For example, in a printed manual, page breaks may occur awkwardly in
the middle of an example; to prevent this, you can hold text together
using a grouping command that keeps the text from being split across
two pages.  Conversely, you may want to force a page break where none
would occur normally.  Fortunately, problems like these do not often
arise.  When they do, use the break, break prevention, or pagination
commands.

* Menu:

* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping TeX with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.


File: texinfo,  Node: Break Commands,  Next: Line Breaks,  Up: Breaks

15.1 Break Commands
===================

The break commands create or allow line and paragraph breaks:

`@*'
     Force a line break.

`@sp N'
     Skip N blank lines.

`@-'
     Insert a discretionary hyphen.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Define hyphen points in HY-PHEN-A-TED WORDS.

  These commands hold text together on a single line:

`@w{TEXT}'
     Prevent TEXT from being split and hyphenated across two lines.

`@tie{}'
     Insert a normal interword space at which a line break may not
     occur.

  The pagination commands apply only to printed output, since Info
files do not have pages.

`@page'
     Start a new page in the printed manual.

`@group'
     Hold text together that must appear on one printed page.

`@need MILS'
     Start a new printed page if not enough space on this one.


File: texinfo,  Node: Line Breaks,  Next: - and hyphenation,  Prev: Break Commands,  Up: Breaks

15.2 `@*' and `@/': Generate and Allow Line Breaks
==================================================

The `@*' command forces a line break in both the printed manual and in
Info.  The `@/' command allows a line break (printed manual only).

  Here is an example with `@*':

     This line @* is broken @*in two places.

produces

     This line
     is broken
     in two places.

  The `@/' command can be useful within a url (*note `@uref': uref.),
which tend to be long and are otherwise unbreakable.  For example:

     The official Texinfo home page is on the GNU web site:
     @uref{http://www.gnu.org/@/software/@/gnu/@/texinfo}.

produces

     The official Texinfo home page is on the GNU web site:
     `http://www.gnu.org/software/gnu/texinfo'.

Without the `@/' commands, TeX would have nowhere to break the line.
`@/' has no effect in the online output.


File: texinfo,  Node: - and hyphenation,  Next: w,  Prev: Line Breaks,  Up: Breaks

15.3 `@-' and `@hyphenation': Helping TeX Hyphenate
===================================================

Although TeX's hyphenation algorithm is generally pretty good, it does
miss useful hyphenation points from time to time.  (Or, far more
rarely, insert an incorrect hyphenation.)  So, for documents with an
unusual vocabulary or when fine-tuning for a printed edition, you may
wish to help TeX out.  Texinfo supports two commands for this:

`@-'
     Insert a discretionary hyphen, i.e., a place where TeX can (but
     does not have to) hyphenate.  This is especially useful when you
     notice an overfull hbox is due to TeX missing a hyphenation (*note
     Overfull hboxes::).  TeX will not insert any hyphenation points
     itself into a word containing `@-'.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Tell TeX how to hyphenate HY-PHEN-A-TED WORDS.  As shown, you put
     a `-' at each hyphenation point.  For example:
          @hyphenation{man-u-script man-u-scripts}
     TeX only uses the specified hyphenation points when the words
     match exactly, so give all necessary variants.

  Info output is not hyphenated, so these commands have no effect there.


File: texinfo,  Node: w,  Next: tie,  Prev: - and hyphenation,  Up: Breaks

15.4 `@w'{TEXT}: Prevent Line Breaks
====================================

`@w{TEXT}' outputs TEXT and prohibits line breaks within TEXT, for both
TeX and `makeinfo'.

  Thus, you can use `@w' to produce a non-breakable space, fixed at the
width of a normal interword space:

     @w{ } @w{ } @w{ } indentation.

produces:

           indentation.

  The space from `@w{ }', as well as being non-breakable, also will not
stretch or shrink.  Sometimes that is what you want, for instance if
you're doing indenting manual.  However, usually you want a normal
interword space that does stretch and shrink (in the printed output);
see the `@tie' command in the next section.

  You can also use the `@w' command to prevent TeX from automatically
hyphenating a long name or phrase that happens to fall near the end of
a line.  `makeinfo' does not ever hyphenate words.

  You can also use `@w' to avoid unwanted keyword expansion in source
control systems.  For example, to literally write $Id$ in your
document, use `@w{$}Id$'.


File: texinfo,  Node: tie,  Next: sp,  Prev: w,  Up: Breaks

15.5 `@tie{}': Inserting an Unbreakable Space
=============================================

The `@tie{}' command produces a normal interword space at which a line
break may not occur.  Always write it with following (empty) braces, as
usual for commands used within a paragraph.  Here's an example:

     @TeX{} was written by Donald E.@tie{}Knuth.

produces:

     TeX was written by Donald E. Knuth.

  There are two important differences between `@tie{}' and `@w{ }':

   * The space produced by `@tie{}' will stretch and shrink slightly
     along with the normal interword spaces in the paragraph; the space
     produced by `@w{ }' will not vary.

   * `@tie{}' allows hyphenation of the surrounding words, while
     `@w{ }' inhibits hyphenation of those words (for TeXnical reasons,
     namely that it produces an `\hbox').



File: texinfo,  Node: sp,  Next: page,  Prev: tie,  Up: Breaks

15.6 `@sp' N: Insert Blank Lines
================================

A line beginning with and containing only `@sp N' generates N blank
lines of space in both the printed manual and the Info file.  `@sp'
also forces a paragraph break.  For example,

     @sp 2

generates two blank lines.

  The `@sp' command is most often used in the title page.


File: texinfo,  Node: page,  Next: group,  Prev: sp,  Up: Breaks

15.7 `@page': Start a New Page
==============================

A line containing only `@page' starts a new page in a printed manual.
The command has no effect on Info files since they are not paginated.
An `@page' command is often used in the `@titlepage' section of a
Texinfo file to start the copyright page.


File: texinfo,  Node: group,  Next: need,  Prev: page,  Up: Breaks

15.8 `@group': Prevent Page Breaks
==================================

The `@group' command (on a line by itself) is used inside an `@example'
or similar construct to begin an unsplittable vertical group, which
will appear entirely on one page in the printed output.  The group is
terminated by a line containing only `@end group'.  These two lines
produce no output of their own, and in the Info file output they have
no effect at all.

  Although `@group' would make sense conceptually in a wide variety of
contexts, its current implementation works reliably only within
`@example' and variants, and within `@display', `@format', `@flushleft'
and `@flushright'.  *Note Quotations and Examples::.  (What all these
commands have in common is that each line of input produces a line of
output.)  In other contexts, `@group' can cause anomalous vertical
spacing.

  This formatting requirement means that you should write:

     @example
     @group
     ...
     @end group
     @end example

with the `@group' and `@end group' commands inside the `@example' and
`@end example' commands.

  The `@group' command is most often used to hold an example together
on one page.  In this Texinfo manual, more than 100 examples contain
text that is enclosed between `@group' and `@end group'.

  If you forget to end a group, you may get strange and unfathomable
error messages when you run TeX.  This is because TeX keeps trying to
put the rest of the Texinfo file onto the one page and does not start
to generate error messages until it has processed considerable text.
It is a good rule of thumb to look for a missing `@end group' if you
get incomprehensible error messages in TeX.


File: texinfo,  Node: need,  Prev: group,  Up: Breaks

15.9 `@need MILS': Prevent Page Breaks
======================================

A line containing only `@need N' starts a new page in a printed manual
if fewer than N mils (thousandths of an inch) remain on the current
page.  Do not use braces around the argument N.  The `@need' command
has no effect on Info files since they are not paginated.

  This paragraph is preceded by an `@need' command that tells TeX to
start a new page if fewer than 800 mils (eight-tenths inch) remain on
the page.  It looks like this:

     @need 800
     This paragraph is preceded by ...

  The `@need' command is useful for preventing orphans (single lines at
the bottoms of printed pages).


File: texinfo,  Node: Definition Commands,  Next: Conditionals,  Prev: Breaks,  Up: Top

16 Definition Commands
**********************

The `@deffn' command and the other "definition commands" enable you to
describe functions, variables, macros, commands, user options, special
forms and other such artifacts in a uniform format.

  In the Info file, a definition causes the entity
category--`Function', `Variable', or whatever--to appear at the
beginning of the first line of the definition, followed by the entity's
name and arguments.  In the printed manual, the command causes TeX to
print the entity's name and its arguments on the left margin and print
the category next to the right margin.  In both output formats, the
body of the definition is indented.  Also, the name of the entity is
entered into the appropriate index: `@deffn' enters the name into the
index of functions, `@defvr' enters it into the index of variables, and
so on (*note Predefined Indices::).

  A manual need not and should not contain more than one definition for
a given name.  An appendix containing a summary should use `@table'
rather than the definition commands.

* Menu:

* Def Cmd Template::            Writing descriptions using definition commands.
* Def Cmd Continuation Lines::  Continuing the heading over source lines.
* Optional Arguments::          Handling optional and repeated arguments.
* deffnx::                      Group two or more `first' lines.
* Def Cmds in Detail::          Reference for all the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::  An example.


File: texinfo,  Node: Def Cmd Template,  Next: Def Cmd Continuation Lines,  Up: Definition Commands

16.1 The Template for a Definition
==================================

The `@deffn' command is used for definitions of entities that resemble
functions.  To write a definition using the `@deffn' command, write the
`@deffn' command at the beginning of a line and follow it on the same
line by the category of the entity, the name of the entity itself, and
its arguments (if any).  Then write the body of the definition on
succeeding lines.  (You may embed examples in the body.)  Finally, end
the definition with an `@end deffn' command written on a line of its
own.

  The other definition commands follow the same format: a line with the
`@def...' command and whatever arguments are appropriate for that
command; the body of the definition; and a corresponding `@end' line.

  The template for a definition looks like this:

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

For example,

     @deffn Command forward-word count
     This command moves point forward @var{count} words
     (or backward if @var{count} is negative). ...
     @end deffn

produces

      -- Command: forward-word count
          This function moves point forward COUNT words (or backward if
          COUNT is negative). ...

  Capitalize the category name like a title.  If the name of the
category contains spaces, as in the phrase `Interactive Command',
enclose it in braces.  For example:

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

Otherwise, the second word will be mistaken for the name of the entity.
As a general rule, when any of the arguments in the heading line
_except_ the last one are more than one word, you need to enclose them
in braces.

  Some of the definition commands are more general than others.  The
`@deffn' command, for example, is the general definition command for
functions and the like--for entities that may take arguments.  When you
use this command, you specify the category to which the entity belongs.
Three predefined, specialized variations (`@defun', `@defmac', and
`@defspec') specify the category for you: "Function", "Macro", and
"Special Form" respectively.  (In Lisp, a special form is an entity
much like a function.)  Similarly, the general `@defvr' command is
accompanied by several specialized variations for describing particular
kinds of variables.

  *Note Sample Function Definition::, for a detailed example of a
function definition, including the use of `@example' inside the
definition.

  Unfortunately, due to implementation difficulties, macros are not
expanded in `@deffn' and all the other definition commands.


File: texinfo,  Node: Def Cmd Continuation Lines,  Next: Optional Arguments,  Prev: Def Cmd Template,  Up: Definition Commands

16.2 Definition Command Continuation Lines
==========================================

The heading line of a definition command can get very long.  Therefore,
Texinfo has a special syntax allowing them to be continued over
multiple lines of the source file: a lone `@' at the end of each line
to be continued.  Here's an example:

     @defun fn-name @
       arg1 arg2 arg3
     This is the basic continued defun.
     @end defun

produces:

 -- Function: fn-name arg1 arg2 arg3
     This is the basic continued defun.

As you can see, the continued lines are combined, as if they had been
typed on one source line.

  Although this example only shows a one-line continuation,
continuations may extend over any number of lines; simply put an `@' at
the end of each line to be continued.

  The `@' character does not have to be the last character on the
physical line: whitespace is allowed (and ignored) afterwards.

  In general, any number of spaces or tabs around the `@' continuation
character, both on the line with the `@' and on the continued line, are
collapsed into a single space.  There is one exception: the Texinfo
processors will not fully collapse whitespace around a continuation
inside braces.  For example:

     @deffn {Category @
       Name} ...

The output (not shown) has excess space between `Category' and `Name'.
In this case, simply elide any unwanted whitespace in your input, or
put the continuation `@' outside braces.

  `@' does not (currently) function as a continuation character in
_any_ other context.  Ordinarily, `@' followed by a whitespace
character (space, tab, newline) produces a normal interword space
(*note Multiple Spaces::).


File: texinfo,  Node: Optional Arguments,  Next: deffnx,  Prev: Def Cmd Continuation Lines,  Up: Definition Commands

16.3 Optional and Repeated Arguments
====================================

Some entities take optional or repeated arguments, which may be
specified by a distinctive glyph that uses square brackets and
ellipses.  For example, a special form often breaks its argument list
into separate arguments in more complicated ways than a straightforward
function.

  An argument enclosed within square brackets is optional.  Thus,
[OPTIONAL-ARG] means that OPTIONAL-ARG is optional.  An argument
followed by an ellipsis is optional and may be repeated more than once.
Thus, REPEATED-ARGS`...' stands for zero or more arguments.
Parentheses are used when several arguments are grouped into additional
levels of list structure in Lisp.

  Here is the `@defspec' line of an example of an imaginary special
form:

      -- Special Form: foobar (VAR [FROM TO [INC]]) BODY...

In this example, the arguments FROM and TO are optional, but must both
be present or both absent.  If they are present, INC may optionally be
specified as well.  These arguments are grouped with the argument VAR
into a list, to distinguish them from BODY, which includes all
remaining elements of the form.

  In a Texinfo source file, this `@defspec' line is written like this
(except it would not be split over two lines, as it is in this example).

     @defspec foobar (@var{var} [@var{from} @var{to}
         [@var{inc}]]) @var{body}@dots{}

The function is listed in the Command and Variable Index under `foobar'.


File: texinfo,  Node: deffnx,  Next: Def Cmds in Detail,  Prev: Optional Arguments,  Up: Definition Commands

16.4 Two or More `First' Lines
==============================

To create two or more `first' or header lines for a definition, follow
the first `@deffn' line by a line beginning with `@deffnx'.  The
`@deffnx' command works exactly like `@deffn' except that it does not
generate extra vertical white space between it and the preceding line.

  For example,

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     These two search commands are similar except ...
     @end deffn

produces

 -- Interactive Command: isearch-forward
 -- Interactive Command: isearch-backward
     These two search commands are similar except ...

  Each definition command has an `x' form: `@defunx', `@defvrx',
`@deftypefunx', etc.

  The `x' forms work similarly to `@itemx' (*note itemx::).


File: texinfo,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: deffnx,  Up: Definition Commands

16.5 The Definition Commands
============================

Texinfo provides more than a dozen definition commands, all of which
are described in this section.

  The definition commands automatically enter the name of the entity in
the appropriate index: for example, `@deffn', `@defun', and `@defmac'
enter function names in the index of functions; `@defvr' and `@defvar'
enter variable names in the index of variables.

  Although the examples that follow mostly illustrate Lisp, the commands
can be used for other programming languages.

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Data Types::                  The definition command for data types.
* Abstract Objects::            Commands for object-oriented programming.


File: texinfo,  Node: Functions Commands,  Next: Variables Commands,  Up: Def Cmds in Detail

16.5.1 Functions and Similar Entities
-------------------------------------

This section describes the commands for describing functions and similar
entities:

`@deffn CATEGORY NAME ARGUMENTS...'
     The `@deffn' command is the general definition command for
     functions, interactive commands, and similar entities that may take
     arguments.  You must choose a term to describe the category of
     entity being defined; for example, "Function" could be used if the
     entity is a function.  The `@deffn' command is written at the
     beginning of a line and is followed on the same line by the
     category of entity being described, the name of this particular
     entity, and its arguments, if any.  Terminate the definition with
     `@end deffn' on a line of its own.

     For example, here is a definition:

          @deffn Command forward-char nchars
          Move point forward @var{nchars} characters.
          @end deffn

     This shows a rather terse definition for a "command" named
     `forward-char' with one argument, NCHARS.

     `@deffn' and prints argument names such as NCHARS in slanted type
     in the printed output, because we think of these names as
     metasyntactic variables--they stand for the actual argument values.
     Within the text of the description, however, write an argument name
     explicitly with `@var' to refer to the value of the argument.  In
     the example above, we used `@var{nchars}' in this way.

     In the unusual case when an argument name contains `--', or
     another character sequence which is treated specially (*note
     Conventions::), use `@var' around the argument.  This causes the
     name to be printed in slanted typewriter, instead of the regular
     slanted font, exactly as input.

     The template for `@deffn' is:

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     The `@defun' command is the definition command for functions.
     `@defun' is equivalent to `@deffn Function ...'.  Terminate the
     definition with `@end defun' on a line of its own.  Thus, the
     template is:

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

`@defmac NAME ARGUMENTS...'
     The `@defmac' command is the definition command for macros.
     `@defmac' is equivalent to `@deffn Macro ...' and works like
     `@defun'.

`@defspec NAME ARGUMENTS...'
     The `@defspec' command is the definition command for special
     forms.  (In Lisp, a special form is an entity much like a function,
     *note Special Forms: (elisp)Special Forms.)  `@defspec' is
     equivalent to `@deffn {Special Form} ...' and works like `@defun'.

  All these commands create entries in the index of functions.


File: texinfo,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

16.5.2 Variables and Similar Entities
-------------------------------------

Here are the commands for defining variables and similar entities:

`@defvr CATEGORY NAME'
     The `@defvr' command is a general definition command for something
     like a variable--an entity that records a value.  You must choose
     a term to describe the category of entity being defined; for
     example, "Variable" could be used if the entity is a variable.
     Write the `@defvr' command at the beginning of a line and follow
     it on the same line by the category of the entity and the name of
     the entity.

     Capitalize the category name like a title.  If the name of the
     category contains spaces, as in the name "User Option", enclose it
     in braces.  Otherwise, the second word will be mistaken for the
     name of the entity.  For example,

          @defvr {User Option} fill-column
          This buffer-local variable specifies
          the maximum width of filled lines.
          ...
          @end defvr

     Terminate the definition with `@end defvr' on a line of its own.

     The template is:

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr' creates an entry in the index of variables for NAME.

`@defvar NAME'
     The `@defvar' command is the definition command for variables.
     `@defvar' is equivalent to `@defvr Variable ...'.

     For example:

          @defvar kill-ring
          ...
          @end defvar

     The template is:

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar' creates an entry in the index of variables for NAME.

`@defopt NAME'
     The `@defopt' command is the definition command for "user
     options", i.e., variables intended for users to change according to
     taste; Emacs has many such (*note Variables: (emacs)Variables.).
     `@defopt' is equivalent to `@defvr {User Option} ...' and works
     like `@defvar'.  It creates an entry in the index of variables.


File: texinfo,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

16.5.3 Functions in Typed Languages
-----------------------------------

The `@deftypefn' command and its variations are for describing
functions in languages in which you must declare types of variables and
functions, such as C and C++.

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefn' command is the general definition command for
     functions and similar entities that may take arguments and that are
     typed.  The `@deftypefn' command is written at the beginning of a
     line and is followed on the same line by the category of entity
     being described, the type of the returned value, the name of this
     particular entity, and its arguments, if any.

     For example,

          @deftypefn {Library Function} int foobar
            (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     (where the text before the "...", shown above as two lines, would
     actually be a single line in a real Texinfo file) produces the
     following in Info:

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     This means that `foobar' is a "library function" that returns an
     `int', and its arguments are FOO (an `int') and BAR (a `float').

     Since in typed languages, the actual names of the arguments are
     typically scattered among data type names and keywords, Texinfo
     cannot find them without help.  You can either (a) write everything
     as straight text, and it will be printed in slanted type; (b) use
     `@var' for the variable names, which will uppercase the variable
     names in Info and use the slanted typewriter font in printed
     output; (c) use `@var' for the variable names and `@code' for the
     type names and keywords, which will be dutifully obeyed.

     The template for `@deftypefn' is:

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     Note that if the CATEGORY or DATA TYPE is more than one word then
     it must be enclosed in braces to make it a single argument.

     If you are describing a procedure in a language that has packages,
     such as Ada, you might consider using `@deftypefn' in a manner
     somewhat contrary to the convention described in the preceding
     paragraphs.  For example:

          @deftypefn stacks private push @
                 (@var{s}:in out stack; @
                 @var{n}:in integer)
          ...
          @end deftypefn

     (The `@deftypefn' arguments are shown using continuations (*note
     Def Cmd Continuation Lines::), but could be on a single line in a
     real Texinfo file.)

     In this instance, the procedure is classified as belonging to the
     package `stacks' rather than classified as a `procedure' and its
     data type is described as `private'.  (The name of the procedure
     is `push', and its arguments are S and N.)

     `@deftypefn' creates an entry in the index of functions for NAME.

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     The `@deftypefun' command is the specialized definition command
     for functions in typed languages.  The command is equivalent to
     `@deftypefn Function ...'.  The template is:

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun' creates an entry in the index of functions for NAME.



File: texinfo,  Node: Typed Variables,  Next: Data Types,  Prev: Typed Functions,  Up: Def Cmds in Detail

16.5.4 Variables in Typed Languages
-----------------------------------

Variables in typed languages are handled in a manner similar to
functions in typed languages.  *Note Typed Functions::.  The general
definition command `@deftypevr' corresponds to `@deftypefn' and the
specialized definition command `@deftypevar' corresponds to
`@deftypefun'.

`@deftypevr CATEGORY DATA-TYPE NAME'
     The `@deftypevr' command is the general definition command for
     something like a variable in a typed language--an entity that
     records a value.  You must choose a term to describe the category
     of the entity being defined; for example, "Variable" could be used
     if the entity is a variable.

     The `@deftypevr' command is written at the beginning of a line and
     is followed on the same line by the category of the entity being
     described, the data type, and the name of this particular entity.

     For example:

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     produces the following in Info:

          -- Global Flag: int enable
          ...

     The template is:

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

`@deftypevar DATA-TYPE NAME'
     The `@deftypevar' command is the specialized definition command
     for variables in typed languages.  `@deftypevar' is equivalent to
     `@deftypevr Variable ...'.  The template is:

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

  These commands create entries in the index of variables.


File: texinfo,  Node: Data Types,  Next: Abstract Objects,  Prev: Typed Variables,  Up: Def Cmds in Detail

16.5.5 Data Types
-----------------

Here is the command for data types:

`@deftp CATEGORY NAME ATTRIBUTES...'
     The `@deftp' command is the generic definition command for data
     types.  The command is written at the beginning of a line and is
     followed on the same line by the category, by the name of the type
     (which is a word like `int' or `float'), and then by names of
     attributes of objects of that type.  Thus, you could use this
     command for describing `int' or `float', in which case you could
     use `data type' as the category.  (A data type is a category of
     certain objects for purposes of deciding which operations can be
     performed on them.)

     In Lisp, for example,  "pair" names a particular data type, and an
     object of that type has two slots called the CAR and the CDR.
     Here is how you would write the first line of a definition of
     `pair'.

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     The template is:

          @deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...
          BODY-OF-DEFINITION
          @end deftp

     `@deftp' creates an entry in the index of data types.


File: texinfo,  Node: Abstract Objects,  Prev: Data Types,  Up: Def Cmds in Detail

16.5.6 Object-Oriented Programming
----------------------------------

Here are the commands for formatting descriptions about abstract
objects, such as are used in object-oriented programming.  A class is a
defined type of abstract object.  An instance of a class is a
particular object that has the type of the class.  An instance variable
is a variable that belongs to the class but for which each instance has
its own value.

* Menu:

* Variables: Object-Oriented Variables.
* Methods: Object-Oriented Methods.


File: texinfo,  Node: Object-Oriented Variables,  Next: Object-Oriented Methods,  Up: Abstract Objects

16.5.6.1 Object-Oriented Variables
..................................

These commands allow you to define different sorts of variables in
object-oriented programming languages.

`@defcv CATEGORY CLASS NAME'
     The `@defcv' command is the general definition command for
     variables associated with classes in object-oriented programming.
     The `@defcv' command is followed by three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  For instance:

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     produces:

      -- Class Option of Window: border-pattern
          ...

     `@defcv' creates an entry in the index of variables.

`@deftypecv CATEGORY CLASS DATA-TYPE NAME'
     The `@deftypecv' command is the definition command for typed class
     variables in object-oriented programming.  It is analogous to
     `@defcv' with the addition of the DATA-TYPE parameter to specify
     the type of the instance variable.  Ordinarily, the data type is a
     programming language construct that should be marked with `@code'.
     For instance:

          @deftypecv {Class Option} Window @code{int} border-pattern
          ...
          @end deftypecv

     produces:

      -- Class Option of Window: `int' border-pattern
          ...

     `@deftypecv' creates an entry in the index of variables.

`@defivar CLASS NAME'
     The `@defivar' command is the definition command for instance
     variables in object-oriented programming.  `@defivar' is
     equivalent to `@defcv {Instance Variable} ...'.  For instance:

          @defivar Window border-pattern
          ...
          @end defivar

     produces:

      -- Instance Variable of Window: border-pattern
          ...

     `@defivar' creates an entry in the index of variables.

`@deftypeivar CLASS DATA-TYPE NAME'
     The `@deftypeivar' command is the definition command for typed
     instance variables in object-oriented programming.  It is
     analogous to `@defivar' with the addition of the DATA-TYPE
     parameter to specify the type of the instance variable.
     Ordinarily, the data type is a programming language construct that
     should be marked with `@code'. For instance:

          @deftypeivar Window @code{int} border-pattern
          ...
          @end deftypeivar

     produces:

      -- Instance Variable of Window: `int' border-pattern
          ...

     `@deftypeivar' creates an entry in the index of variables.



File: texinfo,  Node: Object-Oriented Methods,  Prev: Object-Oriented Variables,  Up: Abstract Objects

16.5.6.2 Object-Oriented Methods
................................

These commands allow you to define different sorts of function-like
entities resembling methods in object-oriented programming languages.
These entities take arguments, as functions do, but are associated with
particular classes of objects.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     The `@defop' command is the general definition command for these
     method-like entities.

     For example, some systems have constructs called "wrappers" that
     are associated with classes as methods are, but that act more like
     macros than like functions.  You could use `@defop Wrapper' to
     describe one of these.

     Sometimes it is useful to distinguish methods and "operations".
     You can think of an operation as the specification for a method.
     Thus, a window system might specify that all window classes have a
     method named `expose'; we would say that this window system
     defines an `expose' operation on windows in general.  Typically,
     the operation has a name and also specifies the pattern of
     arguments; all methods that implement the operation must accept
     the same arguments, since applications that use the operation do
     so without knowing which method will implement it.

     Often it makes more sense to document operations than methods.  For
     example, window application developers need to know about the
     `expose' operation, but need not be concerned with whether a given
     class of windows has its own method to implement this operation.
     To describe this operation, you would write:

          @defop Operation windows expose

     The `@defop' command is written at the beginning of a line and is
     followed on the same line by the overall name of the category of
     operation, the name of the class of the operation, the name of the
     operation, and its arguments, if any.

     The template is:
          @defop CATEGORY CLASS NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defop

     `@defop' creates an entry, such as ``expose' on `windows'', in the
     index of functions.

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     The `@deftypeop' command is the definition command for typed
     operations in object-oriented programming.  It is similar to
     `@defop' with the addition of the DATA-TYPE parameter to specify
     the return type of the method.  `@deftypeop' creates an entry in
     the index of functions.

`@defmethod CLASS NAME ARGUMENTS...'
     The `@defmethod' command is the definition command for methods in
     object-oriented programming.  A method is a kind of function that
     implements an operation for a particular class of objects and its
     subclasses.

     `@defmethod' is equivalent to `@defop Method ...'.  The command is
     written at the beginning of a line and is followed by the name of
     the class of the method, the name of the method, and its
     arguments, if any.

     For example:
          @defmethod `bar-class' bar-method argument
          ...
          @end defmethod

     illustrates the definition for a method called `bar-method' of the
     class `bar-class'.  The method takes an argument.

     `@defmethod' creates an entry in the index of functions.

`@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...'
     The `@deftypemethod' command is the definition command for methods
     in object-oriented typed languages, such as C++ and Java.  It is
     similar to the `@defmethod' command with the addition of the
     DATA-TYPE parameter to specify the return type of the method.
     `@deftypemethod' creates an entry in the index of functions.



File: texinfo,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Def Cmds in Detail,  Up: Definition Commands

16.6 Conventions for Writing Definitions
========================================

When you write a definition using `@deffn', `@defun', or one of the
other definition commands, please take care to use arguments that
indicate the meaning, as with the COUNT argument to the `forward-word'
function.  Also, if the name of an argument contains the name of a
type, such as INTEGER, take care that the argument actually is of that
type.


File: texinfo,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

16.7 A Sample Function Definition
=================================

A function definition uses the `@defun' and `@end defun' commands.  The
name of the function follows immediately after the `@defun' command and
it is followed, on the same line, by the parameter list.

  Here is a definition from *Note Calling Functions: (elisp)Calling
Functions.

      -- Function: apply function &rest arguments
          `apply' calls FUNCTION with ARGUMENTS, just like `funcall'
          but with one difference: the last of ARGUMENTS is a list of
          arguments to give to FUNCTION, rather than a single argument.
          We also say that this list is "appended" to the other
          arguments.

          `apply' returns the result of calling FUNCTION.  As with
          `funcall', FUNCTION must either be a Lisp function or a
          primitive function; special forms and macros do not make
          sense in `apply'.

               (setq f 'list)
                   => list
               (apply f 'x 'y 'z)
               error--> Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                   => 10
               (apply '+ '(1 2 3 4))
                   => 10

               (apply 'append '((a b c) nil (x y z) nil))
                   => (a b c x y z)

          An interesting example of using `apply' is found in the
          description of `mapcar'.

  In the Texinfo source file, this example looks like this:

     @defun apply function &rest arguments
     @code{apply} calls @var{function} with
     @var{arguments}, just like @code{funcall} but with one
     difference: the last of @var{arguments} is a list of
     arguments to give to @var{function}, rather than a single
     argument.  We also say that this list is @dfn{appended}
     to the other arguments.

     @code{apply} returns the result of calling
     @var{function}.  As with @code{funcall},
     @var{function} must either be a Lisp function or a
     primitive function; special forms and macros do not make
     sense in @code{apply}.

     @example
     (setq f 'list)
         @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
         @result{} 10
     (apply '+ '(1 2 3 4))
         @result{} 10

     (apply 'append '((a b c) nil (x y z) nil))
         @result{} (a b c x y z)
     @end example

     An interesting example of using @code{apply} is found
     in the description of @code{mapcar}.
     @end defun

In this manual, this function is listed in the Command and Variable
Index under `apply'.

  Ordinary variables and user options are described using a format like
that for functions except that variables do not take arguments.


File: texinfo,  Node: Conditionals,  Next: Internationalization,  Prev: Definition Commands,  Up: Top

17 Conditionally Visible Text
*****************************

The "conditional commands" allow you to use different text for
different output formats, or for general conditions that you define.
For example, you can use them to specify different text for the printed
manual and the Info output.

  The conditional commands comprise the following categories.

   * Commands specific to an output format (Info, TeX, HTML, ...).

   * Commands specific to any output format _other_ than a given one
     (not Info, not TeX, ...).

   * `Raw' formatter text for any output format, passed straight
     through with no interpretation of @-commands.

   * Format-independent variable substitutions, and testing if a
     variable is set or clear.


* Menu:

* Conditional Commands::        Text for a given format.
* Conditional Not Commands::    Text for any format other than a given one.
* Raw Formatter Commands::      Using raw formatter commands.
* set clear value::             Variable tests and substitutions.
* Conditional Nesting::         Using conditionals inside conditionals.


File: texinfo,  Node: Conditional Commands,  Next: Conditional Not Commands,  Up: Conditionals

17.1 Conditional Commands
=========================

Texinfo has an `@ifFORMAT' environment for each output format, to allow
conditional inclusion of text for a particular output format.

  `@ifinfo' begins segments of text that should be ignored by TeX when
it typesets the printed manual, and by `makeinfo' when not producing
Info output.  The segment of text appears only in the Info file and,
for historical compatibility, the plain text output.

  The environments for the other formats are analogous:

`@ifdocbook ... @end ifdocbook'
     Text to appear only in the Docbook output.

`@ifhtml ... @end ifhtml'
     Text to appear only in the HTML output.

`@ifplaintext ... @end ifplaintext'
     Text to appear only in the plain text output.

`@iftex ... @end iftex'
     Text to appear only in the printed manual.

`@ifxml ... @end ifxml'
     Text to appear only in the XML output.

  The `@if...' and `@end if...' commands must appear on lines by
themselves in your source file.

  Here is an example showing all these conditionals:

     @iftex
     This text will appear only in the printed manual.
     @end iftex
     @ifinfo
     However, this text will appear only in Info and plain text.
     @end ifinfo
     @ifhtml
     And this text will only appear in HTML.
     @end ifhtml
     @ifplaintext
     Whereas this text will only appear in plain text.
     @end ifplaintext
     @ifxml
     Notwithstanding that this will only appear in XML.
     @end ifxml
     @ifdocbook
     Nevertheless, this will only appear in Docbook.
     @end ifdocbook

The preceding example produces the following line:

  However, this text will appear only in Info and plain text.

Notice that you only see one of the input lines, depending on which
version of the manual you are reading.


File: texinfo,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

17.2 Conditional Not Commands
=============================

You can specify text to be included in any output format _other_ than a
given one with the `@ifnot...' environments:

     @ifnotdocbook ... @end ifnotdocbook
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnotplaintext ... @end ifnotplaintext
     @ifnottex ... @end ifnottex
     @ifnotxml ... @end ifnotxml

The `@ifnot...' command and the `@end' command must appear on lines by
themselves in your actual source file.

  If the output file is being made in the given format, the region is
_ignored_.  Otherwise, it is included.

  There is one exception (for historical compatibility): `@ifnotinfo'
text is omitted for both Info and plain text output, not just Info.  To
specify text which appears only in Info and not in plain text, use
`@ifnotplaintext', like this:

     @ifinfo
     @ifnotplaintext
     This will be in Info, but not plain text.
     @end ifnotplaintext
     @end ifinfo

  The regions delimited by these commands are ordinary Texinfo source as
with `@iftex', not raw formatter source as with `@tex' (*note Raw
Formatter Commands::).


File: texinfo,  Node: Raw Formatter Commands,  Next: set clear value,  Prev: Conditional Not Commands,  Up: Conditionals

17.3 Raw Formatter Commands
===========================

Inside a region delineated by `@iftex' and `@end iftex', you can embed
some raw TeX commands.  The Texinfo processors will ignore such a
region unless TeX output is being produced.  You can write the TeX
commands as you would write them in a normal TeX file, except that you
must replace the `\' used by TeX with an `@'.  For example, in the
`@titlepage' section of a Texinfo file, you can use the TeX command
`@vskip' to format the copyright page.  (The `@titlepage' command
causes Info to ignore the region automatically, as it does with the
`@iftex' command.)

  However, most features of plain TeX will not work within `@iftex', as
they are overridden by Texinfo features.  The purpose of `@iftex' is to
provide conditional processing for the Texinfo source, not provide
access to underlying formatting features.

  You can enter plain TeX completely, and use `\' in the TeX commands,
by delineating a region with the `@tex' and `@end tex' commands.  All
plain TeX commands and category codes are restored within an `@tex'
region.  The sole exception is that the `@' character still introduces
a command, so that `@end tex' can be recognized properly.  As with
`@iftex', Texinfo processors will ignore such a region unless TeX
output is being produced.

  In complex cases, you may wish to define new TeX macros within
`@tex'.  You must use `\gdef' to do this, not `\def', because `@tex'
regions are processed in a TeX group.

  As an example, here is a mathematical expression written in plain TeX:

     @tex
     $$ \chi^2 = \sum_{i=1}^N
              \left (y_i - (a + b x_i)
              \over \sigma_i\right)^2 $$
     @end tex

The output of this example will appear only in a printed manual.  If
you are reading this in Info, you will not see the equation that appears
in the printed manual.

  Analogously, you can use `@ifhtml ... @end ifhtml' to delimit a
region to be included in HTML output only, and `@html ...  @end html'
for a region of raw HTML.

  Likewise, you can use `@ifxml ... @end ifxml' to delimit a region to
be included in XML output only, and `@xml ...  @end xml' for a region
of raw XML.

  Again likewise, you can use `@ifdocbook ... @end ifdocbook' to
delimit a region to be included in Docbook output only, and `@docbook
... @end docbook' for a region of raw Docbook.

  In all cases, the exception to the raw processing is that `@' is
still an escape character, so the `@end' command can be recognized.


File: texinfo,  Node: set clear value,  Next: Conditional Nesting,  Prev: Raw Formatter Commands,  Up: Conditionals

17.4 `@set', `@clear', and `@value'
===================================

You can direct the Texinfo formatting commands to format or ignore parts
of a Texinfo file with the `@set', `@clear', `@ifset', and `@ifclear'
commands.

  Here are brief descriptions of these commands, see the following
sections for more details:

`@set FLAG [VALUE]'
     Set the variable FLAG, to the optional VALUE if specified.

`@clear FLAG'
     Undefine the variable FLAG, whether or not it was previously
     defined.

`@ifset FLAG'
     If FLAG is set, text through the next `@end ifset' command is
     formatted.  If FLAG is clear, text through the following `@end
     ifset' command is ignored.

`@ifclear FLAG'
     If FLAG is set, text through the next `@end ifclear' command is
     ignored.  If FLAG is clear, text through the following `@end
     ifclear' command is formatted.

* Menu:

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.


File: texinfo,  Node: set value,  Next: ifset ifclear,  Up: set clear value

17.4.1 `@set' and `@value'
--------------------------

You use the `@set' command to specify a value for a flag, which is
later expanded by the `@value' command.

  A "flag" (aka "variable") is an identifier.  It is best to use only
letters and numerals in a flag name, not `-' or `_'--they will work in
some contexts, but not all, due to limitations in TeX.

  The value is the remainder of the input line, and can contain
anything.

  Write the `@set' command like this:

     @set foo This is a string.

This sets the value of the flag `foo' to "This is a string.".

  The Texinfo formatters then replace an `@value{FLAG}' command with
the string to which FLAG is set.  Thus, when `foo' is set as shown
above, the Texinfo formatters convert this:

     @value{foo}
to this:
     This is a string.

  You can write an `@value' command within a paragraph; but you must
write an `@set' command on a line of its own.

  If you write the `@set' command like this:

     @set foo

without specifying a string, the value of `foo' is the empty string.

  If you clear a previously set flag with `@clear FLAG', a subsequent
`@value{flag}' command will report an error.

  For example, if you set `foo' as follows:

     @set howmuch very, very, very

then the formatters transform

     It is a @value{howmuch} wet day.
into
     It is a very, very, very wet day.

  If you write

     @clear howmuch

then the formatters transform

     It is a @value{howmuch} wet day.
into
     It is a {No value for "howmuch"} wet day.


File: texinfo,  Node: ifset ifclear,  Next: value Example,  Prev: set value,  Up: set clear value

17.4.2 `@ifset' and `@ifclear'
------------------------------

When a FLAG is set, the Texinfo formatting commands format text between
subsequent pairs of `@ifset FLAG' and `@end ifset' commands.  When the
FLAG is cleared, the Texinfo formatting commands do _not_ format the
text.  `@ifclear' operates analogously.

  Write the conditionally formatted text between `@ifset FLAG' and
`@end ifset' commands, like this:

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

  For example, you can create one document that has two variants, such
as a manual for a `large' and `small' model:

     You can use this machine to dig up shrubs
     without hurting them.

     @set large

     @ifset large
     It can also dig up fully grown trees.
     @end ifset

     Remember to replant promptly ...

In the example, the formatting commands will format the text between
`@ifset large' and `@end ifset' because the `large' flag is set.

  When FLAG is cleared, the Texinfo formatting commands do _not_ format
the text between `@ifset FLAG' and `@end ifset'; that text is ignored
and does not appear in either printed or Info output.

  For example, if you clear the flag of the preceding example by writing
an `@clear large' command after the `@set large' command (but before
the conditional text), then the Texinfo formatting commands ignore the
text between the `@ifset large' and `@end ifset' commands.  In the
formatted output, that text does not appear; in both printed and Info
output, you see only the lines that say, "You can use this machine to
dig up shrubs without hurting them.  Remember to replant promptly ...".

  If a flag is cleared with an `@clear FLAG' command, then the
formatting commands format text between subsequent pairs of `@ifclear'
and `@end ifclear' commands.  But if the flag is set with `@set FLAG',
then the formatting commands do _not_ format text between an `@ifclear'
and an `@end ifclear' command; rather, they ignore that text.  An
`@ifclear' command looks like this:

     @ifclear FLAG


File: texinfo,  Node: value Example,  Prev: ifset ifclear,  Up: set clear value

17.4.3 `@value' Example
-----------------------

You can use the `@value' command to minimize the number of places you
need to change when you record an update to a manual.  *Note GNU Sample
Texts::, for the full text of an example of using this to work with
Automake distributions.

  This example is adapted from *Note Overview: (make)Top.

  1. Set the flags:

          @set EDITION 0.35 Beta
          @set VERSION 3.63 Beta
          @set UPDATED 14 August 1992
          @set UPDATE-MONTH August 1992

  2. Write text for the `@copying' section (*note copying::):

          @copying
          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.

          Copyright ...

          Permission is granted ...
          @end copying

  3. Write text for the title page, for people reading the printed
     manual:

          @titlepage
          @title GNU Make
          @subtitle A Program for Directing Recompilation
          @subtitle Edition @value{EDITION}, ...
          @subtitle @value{UPDATE-MONTH}
          @page
          @insertcopying
          ...
          @end titlepage

     (On a printed cover, a date listing the month and the year looks
     less fussy than a date listing the day as well as the month and
     year.)

  4. Write text for the Top node, for people reading the Info file:

          @ifnottex
          @node Top
          @top Make

          @insertcopying
          ...
          @end ifnottex

     After you format the manual, the `@value' constructs have been
     expanded, so the output contains text like this:

          This is Edition 0.35 Beta, last updated 14 August 1992,
          of `The GNU Make Manual', for `make', Version 3.63 Beta.

  When you update the manual, you change only the values of the flags;
you do not need to edit the three sections.


File: texinfo,  Node: Conditional Nesting,  Prev: set clear value,  Up: Conditionals

17.5 Conditional Nesting
========================

Conditionals can be nested; however, the details are a little tricky.
The difficulty comes with failing conditionals, such as `@ifhtml' when
HTML is not being produced, where the included text is to be ignored.
However, it is not to be _completely_ ignored, since it is useful to
have one `@ifset' inside another, for example--that is a way to include
text only if two conditions are met.  Here's an example:

     @ifset somevar
     @ifset anothervar
     Both somevar and anothervar are set.
     @end ifset
     @ifclear anothervar
     Somevar is set, anothervar is not.
     @end ifclear
     @end ifset

  Technically, Texinfo requires that for a failing conditional, the
ignored text must be properly nested with respect to that failing
conditional.  Unfortunately, it's not always feasible to check that
_all_ conditionals are properly nested, because then the processors
could have to fully interpret the ignored text, which defeats the
purpose of the command.  Here's an example illustrating these rules:

     @ifset a
     @ifset b
     @ifclear ok  - ok, ignored
     @end junky   - ok, ignored
     @end ifset
     @c WRONG - missing @end ifset.

  Finally, as mentioned above, all conditional commands must be on lines
by themselves, with no text (even spaces) before or after.  Otherwise,
the processors cannot reliably determine which commands to consider for
nesting purposes.


File: texinfo,  Node: Internationalization,  Next: Defining New Texinfo Commands,  Prev: Conditionals,  Up: Top

18 Internationalization
***********************

Texinfo has some support for writing in languages other than English,
although this area still needs considerable work.

  For a list of the various accented and special characters Texinfo
supports, see *Note Inserting Accents::.

* Menu:

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.


File: texinfo,  Node: documentlanguage,  Next: documentencoding,  Up: Internationalization

18.1 `@documentlanguage CC': Set the Document Language
======================================================

The `@documentlanguage' command declares the current document language.
Write it on a line by itself, with a two-letter ISO-639 language code
following (list is included below).  If you have a multilingual
document, the intent is to be able to use this command multiple times,
to declare each language change.  If the command is not used at all,
the default is `en' for English.

  At present, this command is ignored in Info and HTML output.  For
TeX, it causes the file `txi-CC.tex' to be read (if it exists).  Such a
file appropriately redefines the various English words used in TeX
output, such as `Chapter', `See', and so on.

  It would be good if this command also changed TeX's ideas of the
current hyphenation patterns (via the TeX primitive `\language'), but
this is unfortunately not currently implemented.

  Hereare the valid language codes, from ISO-639.

`aa'  Afar                 `ab' Abkhazian            `af' Afrikaans
`am'  Amharic              `ar' Arabic               `as' Assamese
`ay'  Aymara               `az' Azerbaijani          `ba' Bashkir
`be'  Byelorussian         `bg' Bulgarian            `bh' Bihari
`bi'  Bislama              `bn' Bengali; Bangla      `bo' Tibetan
`br'  Breton               `ca' Catalan              `co' Corsican
`cs'  Czech                `cy' Welsh                `da' Danish
`de'  German               `dz' Bhutani              `el' Greek
`en'  English              `eo' Esperanto            `es' Spanish
`et'  Estonian             `eu' Basque               `fa' Persian
`fi'  Finnish              `fj' Fiji                 `fo' Faroese
`fr'  French               `fy' Frisian              `ga' Irish
`gd'  Scots Gaelic         `gl' Galician             `gn' Guarani
`gu'  Gujarati             `ha' Hausa                `he' Hebrew
`hi'  Hindi                `hr' Croatian             `hu' Hungarian
`hy'  Armenian             `ia' Interlingua          `id' Indonesian
`ie'  Interlingue          `ik' Inupiak              `is' Icelandic
`it'  Italian              `iu' Inuktitut            `ja' Japanese
`jw'  Javanese             `ka' Georgian             `kk' Kazakh
`kl'  Greenlandic          `km' Cambodian            `kn' Kannada
`ks'  Kashmiri             `ko' Korean               `ku' Kurdish
`ky'  Kirghiz              `la' Latin                `ln' Lingala
`lt'  Lithuanian           `lo' Laothian             `lv' Latvian, Lettish
`mg'  Malagasy             `mi' Maori                `mk' Macedonian
`ml'  Malayalam            `mn' Mongolian            `mo' Moldavian
`mr'  Marathi              `ms' Malay                `mt' Maltese
`my'  Burmese              `na' Nauru                `ne' Nepali
`nl'  Dutch                `no' Norwegian            `oc' Occitan
`om'  (Afan) Oromo         `or' Oriya                `pa' Punjabi
`pl'  Polish               `ps' Pashto, Pushto       `pt' Portuguese
`qu'  Quechua              `rm' Rhaeto-Romance       `rn' Kirundi
`ro'  Romanian             `ru' Russian              `rw' Kinyarwanda
`sa'  Sanskrit             `sd' Sindhi               `sg' Sangro
`sh'  Serbo-Croatian       `si' Sinhalese            `sk' Slovak
`sl'  Slovenian            `sm' Samoan               `sn' Shona
`so'  Somali               `sq' Albanian             `sr' Serbian
`ss'  Siswati              `st' Sesotho              `su' Sundanese
`sv'  Swedish              `sw' Swahili              `ta' Tamil
`te'  Telugu               `tg' Tajik                `th' Thai
`ti'  Tigrinya             `tk' Turkmen              `tl' Tagalog
`tn'  Setswana             `to' Tonga                `tr' Turkish
`ts'  Tsonga               `tt' Tatar                `tw' Twi
`ug'  Uighur               `uk' Ukrainian            `ur' Urdu
`uz'  Uzbek                `vi' Vietnamese           `vo' Volapuk
`wo'  Wolof                `xh' Xhosa                `yi' Yiddish
`yo'  Yoruba               `za' Zhuang               `zh' Chinese
`zu'  Zulu                                                


File: texinfo,  Node: documentencoding,  Prev: documentlanguage,  Up: Internationalization

18.2 `@documentencoding ENC': Set Input Encoding
================================================

The `@documentencoding' command declares the input document encoding.
Write it on a line by itself, with a valid encoding specification
following.

  At present, Texinfo supports only these encodings:

`US-ASCII'
     This has no particular effect, but it's included for completeness.

`ISO-8859-1'
`ISO-8859-15'

`ISO-8859-2'
     These specify the standard encodings for Western European (the
     first two) and Eastern European languages (the third),
     respectively.  ISO 8859-15 replaces some little-used characters
     from 8859-1 (e.g., precomposed fractions) with more commonly
     needed ones, such as the Euro symbol.

     A full description of the encodings is beyond our scope here; one
     useful reference is `http://czyborra.com/charsets/iso8859.html'.

  Specifying an encoding ENC has the following effects:

  In Info output, if the option `--enable-encoding' is given to
`makeinfo', a so-called `Local Variables' section (*note File
Variables: (emacs)File Variables.) is output including ENC.  This
allows Info readers to set the encoding appropriately.

     Local Variables:
     coding: ENC
     End:

  In HTML output, a `<meta>' tag is output, in the `<head>' section of
the HTML, that specifies ENC.  Web servers and browsers cooperate to
use this information so the correct encoding is used to display the
page, if supported by the system.

     <meta http-equiv="Content-Type" content="text/html;
          charset=ENC">

  In all other cases, it is recognized but ignored.


File: texinfo,  Node: Defining New Texinfo Commands,  Next: Hardcopy,  Prev: Internationalization,  Up: Top

19 Defining New Texinfo Commands
********************************

Texinfo provides several ways to define new commands:

   * A Texinfo "macro" allows you to define a new Texinfo command as any
     sequence of text and/or existing commands (including other
     macros).  The macro can have any number of "parameters"--text you
     supply each time you use the macro.

     Incidentally, these macros have nothing to do with the `@defmac'
     command, which is for documenting macros in the subject of the
     manual (*note Def Cmd Template::).

   * `@alias' is a convenient way to define a new name for an existing
     command.

   * `@definfoenclose' allows you to define new commands with
     customized output in the Info file.


* Menu:

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Limitations of Texinfo macros.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.


File: texinfo,  Node: Defining Macros,  Next: Invoking Macros,  Up: Defining New Texinfo Commands

19.1 Defining Macros
====================

You use the Texinfo `@macro' command to define a macro, like this:

     @macro MACRONAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

  The "parameters" PARAM1, PARAM2, ... correspond to arguments supplied
when the macro is subsequently used in the document (described in the
next section).

  For a macro to work consistently with TeX, MACRONAME must consist
entirely of letters: no digits, hyphens, underscores, or other special
characters.  So, we recommend using only letters.  However, `makeinfo'
will accept anything except `{}_^='; `_' and `^' are excluded so that
macros can be called in `@math' mode without a following space (*note
`@math': math.).

  If a macro needs no parameters, you can define it either with an empty
list (`@macro foo {}') or with no braces at all (`@macro foo').

  The definition or "body" of the macro can contain most Texinfo
commands, including previously-defined macros.  Not-yet-defined macro
invocations are not allowed; thus, it is not possible to have mutually
recursive Texinfo macros.  Also, a macro definition that defines another
macro does not work in TeX due to limitations in the design of `@macro'.

  In the macro body, instances of a parameter name surrounded by
backslashes, as in `\PARAM1\' in the example above, are replaced by the
corresponding argument from the macro invocation.  You can use
parameter names any number of times in the body, including zero.

  To get a single `\' in the macro expansion, use `\\'.  Any other use
of `\' in the body yields a warning.

  The newlines after the `@macro' line and before the `@end macro' line
are ignored, that is, not included in the macro body.  All other
whitespace is treated according to the usual Texinfo rules.

  To allow a macro to be used recursively, that is, in an argument to a
call to itself, you must define it with `@rmacro', like this:

     @rmacro rmac {arg}
     a\arg\b
     @end rmacro
     ...
     @rmac{1@rmac{text}2}

  This produces the output `a1atextb2b'.  With `@macro' instead of
`@rmacro', an error message is given.

  You can undefine a macro FOO with `@unmacro FOO'.  It is not an error
to undefine a macro that is already undefined.  For example:

     @unmacro foo


File: texinfo,  Node: Invoking Macros,  Next: Macro Details,  Prev: Defining Macros,  Up: Defining New Texinfo Commands

19.2 Invoking Macros
====================

After a macro is defined (see the previous section), you can use
("invoke") it in your document like this:

     @MACRONAME {ARG1, ARG2, ...}

and the result will be just as if you typed the body of MACRONAME at
that spot.  For example:

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

produces:

     Together: a & b.

  Thus, the arguments and parameters are separated by commas and
delimited by braces; any whitespace after (but not before) a comma is
ignored.  The braces are required in the invocation (but not the
definition), even when the macro takes no arguments, consistent with
all other Texinfo commands.  For example:

     @macro argless {}
     No arguments here.
     @end macro
     @argless{}

produces:

     No arguments here.

  To insert a comma, brace, or backslash in an argument, prepend a
backslash, as in

     @MACNAME {\\\{\}\,}

which will pass the (almost certainly error-producing) argument `\{},'
to MACNAME.  However, commas in parameters, even if escaped by a
backslash, might cause trouble in TeX.

  If the macro is defined to take a single argument, and is invoked
without any braces, the entire rest of the line after the macro name is
supplied as the argument.  For example:

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar aah

produces:

     Twice: aah & aah.

  If the macro is defined to take a single argument, and is invoked with
braces, the braced text is passed as the argument, regardless of
commas.  For example:

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar{a,b}

produces:

     Twice: a,b & a,b.


File: texinfo,  Node: Macro Details,  Next: alias,  Prev: Invoking Macros,  Up: Defining New Texinfo Commands

19.3 Macro Details and Caveats
==============================

Due to unavoidable limitations, certain macro-related constructs cause
problems with TeX.  If you get macro-related errors when producing the
printed version of a manual, try expanding the macros with `makeinfo'
by invoking `texi2dvi' with the `-E' option (*note Format with
texi2dvi::).

   * As mentioned earlier, macro names must consist entirely of letters.

   * It is not advisable to redefine any TeX primitive, plain, or
     Texinfo command name as a macro. Unfortunately this is a very large
     set of names, and the possible resulting errors are unpredictable.

   * All macros are expanded inside at least one TeX group.  This means
     that `@set' and other such commands have no effect inside a macro.

   * Commas in macro arguments, even if escaped by a backslash, don't
     always work.

   * Macro arguments cannot cross lines.

   * It is (usually) best to avoid comments inside macro definitions,
     but see the next item.

   * Macros containing a command which must be on a line by itself,
     such as a conditional, cannot be invoked in the middle of a line.
     In general, the interaction of newlines in the macro definitions
     and invocations depends on the precise commands and context.  You
     may be able to work around some problems with judicious use of
     `@c'.  Suppose you define a macro that is always intended to be
     used on a line by itself:

          @macro linemac
          @cindex whatever
          @c
          @end macro
          ...
          foo
          @linemac
          bar

     Without the `@c', there will be an unwanted blank line between the
     `@cindex whatever' and the `bar' (one newline comes from the macro
     definition, one from after the invocation), causing a paragraph
     break.

     On the other hand, you wouldn't want the `@c' if the macro was
     sometimes invoked in the middle of a line (the text after the
     invocation would be treated as a comment).

   * In general, you can't arbitrarily substitute a macro call for
     Texinfo command arguments, even when the text is the same.  It
     might work with some commands, it fails with others.  Best not to
     do it at all.  For instance, this fails:

          @macro offmacro
          off
          @end macro
          @headings @offmacro

     You would expect this to be equivalent to `@headings off', but for
     TeXnical reasons, it fails with a mysterious error message
     (`Paragraph ended before @headings was complete').

   * Macros cannot define macros in the natural way.  To do this, you
     must use conditionals and raw TeX.  For example:

          @ifnottex
          @macro ctor {name, arg}
          @macro \name\
          something involving \arg\ somehow
          @end macro
          @end macro
          @end ifnottex
          @tex
          \gdef\ctor#1{\ctorx#1,}
          \gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
          @end tex


  The `makeinfo' implementation also has limitations:

   * `@verbatim' and macros do not mix; for instance, you can't start a
     verbatim block inside a macro and end it outside.  (*Note
     verbatim::.)  Starting any environment inside a macro and ending
     it outside may or may not work, for that matter.

   * Macros that completely define macros are ok, but it's not possible
     to have incorrectly nested macro definitions.  That is, `@macro'
     and `@end macro' (likewise for `@rmacro') must be correctly
     paired.  For example, you cannot start a macro definition within a
     macro, and then end the nested definition outside the macro.

   * `@rmacro' is a kludge.


  One more limitation is common to both implementations: white space is
ignored at the beginnings of lines.

  Future major revisions of Texinfo may ease some of these limitations
(by introducing a new macro syntax).


File: texinfo,  Node: alias,  Next: definfoenclose,  Prev: Macro Details,  Up: Defining New Texinfo Commands

19.4 `@alias NEW=EXISTING'
==========================

The `@alias' command defines a new command to be just like an existing
one.  This is useful for defining additional markup names, thus
preserving semantic information in the input even though the output
result may be the same.

  Write the `@alias' command on a line by itself, followed by the new
command name, an equals sign, and the existing command name.
Whitespace around the equals sign is ignored.  Thus:
     @alias NEW = EXISTING

  For example, if your document contains citations for both books and
some other media (movies, for example), you might like to define a
macro `@moviecite{}' that does the same thing as an ordinary `@cite{}'
but conveys the extra semantic information as well.  You'd do this as
follows:

     @alias moviecite = cite

  Macros do not always have the same effect as aliases, due to vagaries
of argument parsing.  Also, aliases are much simpler to define than
macros.  So the command is not redundant.  (It was also heavily used in
the Jargon File!)

  Aliases must not be recursive, directly or indirectly.

  It is not advisable to redefine any TeX primitive, plain, or Texinfo
command name as an alias.  Unfortunately this is a very large set of
names, and the possible resulting errors are completely random.


File: texinfo,  Node: definfoenclose,  Prev: alias,  Up: Defining New Texinfo Commands

19.5 `definfoenclose': Customized Highlighting
==============================================

A `@definfoenclose' command may be used to define a highlighting
command for Info, but not for TeX.  A command defined using
`@definfoenclose' marks text by enclosing it in strings that precede
and follow the text.  You can use this to get closer control of your
Info output.

  Presumably, if you define a command with `@definfoenclose' for Info,
you will create a corresponding command for TeX, either in
`texinfo.tex', `texinfo.cnf', or within an `@iftex' in your document.

  Write a `@definfoenclose' command on a line and follow it with three
arguments separated by commas.  The first argument to `@definfoenclose'
is the @-command name (without the `@'); the second argument is the
Info start delimiter string; and the third argument is the Info end
delimiter string.  The latter two arguments enclose the highlighted
text in the Info file.  A delimiter string may contain spaces.  Neither
the start nor end delimiter is required.  If you do not want a start
delimiter but do want an end delimiter, you must follow the command
name with two commas in a row; otherwise, the Info formatting commands
will naturally misinterpret the end delimiter string you intended as
the start delimiter string.

  If you do a `@definfoenclose' on the name of a pre-defined macro
(such as `@emph', `@strong', `@t', or `@i'), the enclosure definition
will override the built-in definition.

  An enclosure command defined this way takes one argument in braces;
this is intended for new markup commands (*note Marking Text::).

  For example, you can write:

     @definfoenclose phoo,//,\\

near the beginning of a Texinfo file to define `@phoo' as an Info
formatting command that inserts `//' before and `\\' after the argument
to `@phoo'.  You can then write `@phoo{bar}' wherever you want
`//bar\\' highlighted in Info.

  Also, for TeX formatting, you could write

     @iftex
     @global@let@phoo=@i
     @end iftex

to define `@phoo' as a command that causes TeX to typeset the argument
to `@phoo' in italics.

  Each definition applies to its own formatter: one for TeX, the other
for `texinfo-format-buffer' or `texinfo-format-region'.  The
`@definfoenclose' command need not be within `@ifinfo', but the raw TeX
commands do need to be in `@iftex'.

  Here is another example: write

     @definfoenclose headword, , :

near the beginning of the file, to define `@headword' as an Info
formatting command that inserts nothing before and a colon after the
argument to `@headword'.

  `@definfoenclose' definitions must not be recursive, directly or
indirectly.


File: texinfo,  Node: Hardcopy,  Next: Creating and Installing Info Files,  Prev: Defining New Texinfo Commands,  Up: Top

20 Formatting and Printing Hardcopy
***********************************

There are three major shell commands for making a printed manual from a
Texinfo file: one for converting the Texinfo file into a file that will
be printed, a second for sorting indices, and a third for printing the
formatted document.  When you use the shell commands, you can either
work directly in the operating system shell or work within a shell
inside GNU Emacs.

  If you are using GNU Emacs, you can use commands provided by Texinfo
mode instead of shell commands.  In addition to the three commands to
format a file, sort the indices, and print the result, Texinfo mode
offers key bindings for commands to recenter the output buffer, show the
print queue, and delete a job from the print queue.

* Menu:

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification:: How to print marks to indicate the size
                                 of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.
* Obtaining TeX::               How to Obtain TeX.


File: texinfo,  Node: Use TeX,  Next: Format with tex/texindex,  Up: Hardcopy

20.1 Use TeX
============

The typesetting program called TeX is used for formatting a Texinfo
file.  TeX is a very powerful typesetting program and, if used
correctly, does an exceptionally good job.  (*Note How to Obtain TeX:
Obtaining TeX, for information on how to obtain TeX.)

  The standalone `makeinfo' program and Emacs functions
`texinfo-format-region' and `texinfo-format-buffer' commands read the
very same @-commands in the Texinfo file as does TeX, but process them
differently to make an Info file (*note Creating an Info File::).


File: texinfo,  Node: Format with tex/texindex,  Next: Format with texi2dvi,  Prev: Use TeX,  Up: Hardcopy

20.2 Format with `tex' and `texindex'
=====================================

You can format the Texinfo file with the shell command `tex' followed
by the name of the Texinfo file.  For example:

     tex foo.texi

TeX will produce a "DVI file" as well as several auxiliary files
containing information for indices, cross references, etc.  The DVI
file (for "DeVice Independent" file) can be printed on virtually any
device (see the following sections).

  The `tex' formatting command itself does not sort the indices; it
writes an output file of unsorted index data.  To generate a printed
index after running the `tex' command, you first need a sorted index to
work from.  The `texindex' command sorts indices.  (The source file
`texindex.c' comes as part of the standard Texinfo distribution, among
other places.)  (`texi2dvi' runs `tex' and `texindex' as necessary.)

  The `tex' formatting command outputs unsorted index files under names
that obey a standard convention: the name of your main input file with
any `.tex' (or similar, *note tex invocation: (web2c)tex invocation.)
extension removed, followed by the two letter names of indices.  For
example, the raw index output files for the input file `foo.texinfo'
would be `foo.cp', `foo.vr', `foo.fn', `foo.tp', `foo.pg' and `foo.ky'.
Those are exactly the arguments to give to `texindex'.

  Instead of specifying all the unsorted index file names explicitly,
you can use `??' as shell wildcards and give the command in this form:

     texindex foo.??

This command will run `texindex' on all the unsorted index files,
including any that you have defined yourself using `@defindex' or
`@defcodeindex'.  (You may execute `texindex foo.??' even if there are
similarly named files with two letter extensions that are not index
files, such as `foo.el'.  The `texindex' command reports but otherwise
ignores such files.)

  For each file specified, `texindex' generates a sorted index file
whose name is made by appending `s' to the input file name.  The
`@printindex' command looks for a file with that name (*note Printing
Indices & Menus::).  `texindex' does not alter the raw index output
file.

  After you have sorted the indices, you need to rerun `tex' on the
Texinfo file.  This regenerates the DVI file, this time with up-to-date
index entries.

  Finally, you may need to run `tex' one more time, to get the page
numbers in the cross-references correct.

  To summarize, this is a five step process:

  1. Run `tex' on your Texinfo file.  This generates a DVI file (with
     undefined cross-references and no indices), and the raw index files
     (with two letter extensions).

  2. Run `texindex' on the raw index files.  This creates the
     corresponding sorted index files (with three letter extensions).

  3. Run `tex' again on your Texinfo file.  This regenerates the DVI
     file, this time with indices and defined cross-references, but
     with page numbers for the cross-references from last time,
     generally incorrect.

  4. Sort the indices again, with `texindex'.

  5. Run `tex' one last time.  This time the correct page numbers are
     written for the cross-references.

  Alternatively, it's a one-step process: run `texi2dvi' (*note Format
with texi2dvi::).

  You need not run `texindex' each time after you run `tex'.  If you do
not, on the next run, the `tex' formatting command will use whatever
sorted index files happen to exist from the previous use of `texindex'.
This is usually ok while you are debugging.

  Sometimes you may wish to print a document while you know it is
incomplete, or to print just one chapter of a document.  In that case,
the usual auxiliary files that TeX creates and warnings TeX gives when
cross-references are not satisfied are just nuisances.  You can avoid
them with the `@novalidate' command, which you must give _before_ the
`@setfilename' command (*note `@setfilename': setfilename.).  Thus, the
beginning of your file would look approximately like this:

     \input texinfo
     @novalidate
     @setfilename myfile.info
     ...

`@novalidate' also turns off validation in `makeinfo', just like its
`--no-validate' option (*note Pointer Validation::).


File: texinfo,  Node: Format with texi2dvi,  Next: Print with lpr,  Prev: Format with tex/texindex,  Up: Hardcopy

20.3 Format with `texi2dvi'
===========================

The `texi2dvi' command automatically runs both TeX and `texindex' as
many times as necessary to produce a DVI file with sorted indices and
all cross-references resolved.  It is therefore simpler than manually
executing the `tex'--`texindex'--`tex'--`tex' sequence described in the
previous section.

  To run `texi2dvi' on an input file `foo.texi', do this (where
`prompt$ ' is your shell prompt):

     prompt$ texi2dvi foo.texi

  As shown in this example, the input filenames to `texi2dvi' must
include any extension (`.texi', `.texinfo', etc.).  Under MS-DOS and
perhaps in other circumstances, you may need to run `sh texi2dvi
foo.texi' instead of relying on the operating system to invoke the
shell on the `texi2dvi' script.

  Perhaps the most useful option to `texi2dvi' is `--command=CMD'.
This inserts CMD on a line by itself after the `@setfilename' in a
temporary copy of the input file before running TeX.  With this, you
can specify different printing formats, such as `@smallbook' (*note
smallbook::), `@afourpaper' (*note A4 Paper::), or `@pagesizes' (*note
pagesizes::), without actually changing the document source.  (You can
also do this on a site-wide basis with `texinfo.cnf'; *note Preparing
for TeX: Preparing for TeX.).

  With the `--pdf' option, `texi2dvi' produces PDF output instead of
DVI (*note PDF Output::), by running `pdftex' instead of `tex'.
Alternatively, the command `texi2pdf' is an abbreviation for running
`texi2dvi --pdf'.

  `texi2dvi' can also be used to process LaTeX files; simply run
`texi2dvi filename.ext'.

  `texi2dvi' will use `etex' (or `pdfetex') if they are available;
these extended versions of TeX are not required, and the DVI (or PDF)
output is identical, but they simplify the TeX programming in some
cases, and provide additional tracing information when debugging
`texinfo.tex'.

  For a list of other options, run `texi2dvi --help'.


File: texinfo,  Node: Print with lpr,  Next: Within Emacs,  Prev: Format with texi2dvi,  Up: Hardcopy

20.4 Shell Print Using `lpr -d'
===============================

The precise command to print a DVI file depends on your system
installation.  Two common ones are `dvips foo.dvi -o' and `lpr -d
foo.dvi'.

  For example, the following commands will (perhaps) suffice to sort the
indices, format, and print the `Bison Manual':

     tex bison.texinfo
     texindex bison.??
     tex bison.texinfo
     lpr -d bison.dvi

(Remember that the shell commands may be different at your site; but
these are commonly used versions.)

  Using the `texi2dvi' shell script (see the previous section):

     texi2dvi bison.texinfo
     lpr -d bison.dvi
     # or perhaps dvips bison.dvi -o

  `lpr' is a standard program on Unix systems, but it is usually absent
on MS-DOS/MS-Windows.  Some network packages come with a program named
`lpr', but these are usually limited to sending files to a print server
over the network, and generally don't support the `-d' option.  If you
are unfortunate enough to work on one of these systems, you have
several alternative ways of printing DVI files:

   * Find and install a Unix-like `lpr' program, or its clone.  If you
     can do that, you will be able to print DVI files just like
     described above.

   * Send the DVI files to a network printer queue for DVI files.  Some
     network printers have special queues for printing DVI files.  You
     should be able to set up your network software to send files to
     that queue.  In some cases, the version of `lpr' which comes with
     your network software will have a special option to send a file to
     specific queues, like this:

          lpr -Qdvi -hprint.server.domain bison.dvi

   * Convert the DVI file to a Postscript or PCL file and send it to
     your local printer.  *Note Invoking Dvips: (dvips)Invoking Dvips,
     and the man pages for `dvilj', for detailed description of these
     tools.  Once the DVI file is converted to the format your local
     printer understands directly, just send it to the appropriate
     port, usually `PRN'.


File: texinfo,  Node: Within Emacs,  Next: Texinfo Mode Printing,  Prev: Print with lpr,  Up: Hardcopy

20.5 From an Emacs Shell
========================

You can give formatting and printing commands from a shell within GNU
Emacs.  To create a shell within Emacs, type `M-x shell'.  In this
shell, you can format and print the document.  *Note Format and Print
Hardcopy: Hardcopy, for details.

  You can switch to and from the shell buffer while `tex' is running
and do other editing.  If you are formatting a long document on a slow
machine, this can be very convenient.

  You can also use `texi2dvi' from an Emacs shell.  For example, here
is how to use `texi2dvi' to format and print `Using and Porting GNU CC'
from a shell within Emacs:

     texi2dvi gcc.texinfo
     lpr -d gcc.dvi

  See the next section for more information about formatting and
printing in Texinfo mode.


File: texinfo,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Prev: Within Emacs,  Up: Hardcopy

20.6 Formatting and Printing in Texinfo Mode
============================================

Texinfo mode provides several predefined key commands for TeX
formatting and printing.  These include commands for sorting indices,
looking at the printer queue, killing the formatting job, and
recentering the display of the buffer in which the operations occur.

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     Run `texi2dvi' on the current buffer.

`C-c C-t C-r'
`M-x texinfo-tex-region'
     Run TeX on the current region.

`C-c C-t C-i'
`M-x texinfo-texindex'
     Sort the indices of a Texinfo file formatted with
     `texinfo-tex-region'.

`C-c C-t C-p'
`M-x texinfo-tex-print'
     Print a DVI file that was made with `texinfo-tex-region' or
     `texinfo-tex-buffer'.

`C-c C-t C-q'
`M-x tex-show-print-queue'
     Show the print queue.

`C-c C-t C-d'
`M-x texinfo-delete-from-print-queue'
     Delete a job from the print queue; you will be prompted for the job
     number shown by a preceding `C-c C-t C-q' command
     (`texinfo-show-tex-print-queue').

`C-c C-t C-k'
`M-x tex-kill-job'
     Kill the currently running TeX job started by either
     `texinfo-tex-region' or `texinfo-tex-buffer', or any other process
     running in the Texinfo shell buffer.

`C-c C-t C-x'
`M-x texinfo-quit-job'
     Quit a TeX formatting job that has stopped because of an error by
     sending an <x> to it.  When you do this, TeX preserves a record of
     what it did in a `.log' file.

`C-c C-t C-l'
`M-x tex-recenter-output-buffer'
     Redisplay the shell buffer in which the TeX printing and formatting
     commands are run to show its most recent output.

  Thus, the usual sequence of commands for formatting a buffer is as
follows (with comments to the right):

     C-c C-t C-b             Run `texi2dvi' on the buffer.
     C-c C-t C-p             Print the DVI file.
     C-c C-t C-q             Display the printer queue.

  The Texinfo mode TeX formatting commands start a subshell in Emacs
called the `*tex-shell*'.  The `texinfo-tex-command',
`texinfo-texindex-command', and `tex-dvi-print-command' commands are
all run in this shell.

  You can watch the commands operate in the `*tex-shell*' buffer, and
you can switch to and from and use the `*tex-shell*' buffer as you
would any other shell buffer.

  The formatting and print commands depend on the values of several
variables.  The default values are:

         Variable                              Default value

     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

  You can change the values of these variables with the `M-x
set-variable' command (*note Examining and Setting Variables:
(emacs)Examining.), or with your `.emacs' initialization file (*note
Init File: (emacs)Init File.).

  Beginning with version 20, GNU Emacs offers a user-friendly interface,
called "Customize", for changing values of user-definable variables.
*Note Easy Customization Interface: (emacs)Easy Customization, for more
details about this.  The Texinfo variables can be found in the
`Development/Docs/Texinfo' group, once you invoke the `M-x customize'
command.


File: texinfo,  Node: Compile-Command,  Next: Requirements Summary,  Prev: Texinfo Mode Printing,  Up: Hardcopy

20.7 Using the Local Variables List
===================================

Yet another way to apply the TeX formatting command to a Texinfo file
is to put that command in a "local variables list" at the end of the
Texinfo file.  You can then specify the `tex' or `texi2dvi' commands as
a `compile-command' and have Emacs run it by typing `M-x compile'.
This creates a special shell called the `*compilation*' buffer in which
Emacs runs the compile command.  For example, at the end of the
`gdb.texinfo' file, after the `@bye', you could put the following:

     Local Variables:
     compile-command: "texi2dvi gdb.texinfo"
     End:

This technique is most often used by programmers who also compile
programs this way; see *Note Compilation: (emacs)Compilation.


File: texinfo,  Node: Requirements Summary,  Next: Preparing for TeX,  Prev: Compile-Command,  Up: Hardcopy

20.8 TeX Formatting Requirements Summary
========================================

Every Texinfo file that is to be input to TeX must begin with a
`\input' command and must contain an `@setfilename' command:

     \input texinfo
     @setfilename ARG-NOT-USED-BY-TEX

The first command instructs TeX to load the macros it needs to process
a Texinfo file and the second command opens auxiliary files.

  Every Texinfo file must end with a line that terminates TeX's
processing and forces out unfinished pages:

     @bye

  Strictly speaking, these lines are all a Texinfo file needs to be
processed successfully by TeX.

  Usually, however, the beginning includes an `@settitle' command to
define the title of the printed manual, an `@setchapternewpage'
command, a title page, a copyright page, and permissions.  Besides an
`@bye', the end of a file usually includes indices and a table of
contents.  (And of course most manuals contain a body of text as well.)

  For more information, see:

   * *Note `@settitle': settitle.

   * *Note `@setchapternewpage': setchapternewpage.

   * *Note Page Headings: Headings.

   * *Note Titlepage & Copyright Page::.

   * *Note Printing Indices & Menus::.

   * *Note Contents::.


File: texinfo,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Requirements Summary,  Up: Hardcopy

20.9 Preparing for TeX
======================

TeX needs to know where to find the `texinfo.tex' file that the `\input
texinfo' command on the first line reads.  The `texinfo.tex' file tells
TeX how to handle @-commands; it is included in all standard GNU
distributions.  The latest version is always available from the Texinfo
source repository:
     `http://savannah.gnu.org/cgi-bin/viewcvs/texinfo/texinfo/doc/texinfo.tex?rev=HEAD'

  Usually, the installer has put the `texinfo.tex' file in the default
directory that contains TeX macros when GNU Texinfo, Emacs or other GNU
software is installed.  In this case, TeX will find the file and you do
not need to do anything special.  If this has not been done, you can
put `texinfo.tex' in the current directory when you run TeX, and TeX
will find it there.

  Also, you should install `epsf.tex', if it is not already installed
from another distribution.  More details are at the end of the
description of the `@image' command (*note Images::).

  Likewise for `pdfcolor.tex', if it is not already installed and you
use pdftex.

  Optionally, you may create an additional `texinfo.cnf', and install
it as well.  This file is read by TeX when the `@setfilename' command
is executed (*note `@setfilename': setfilename.).  You can put any
commands you like there, according to local site-wide conventions.  They
will be read by TeX when processing any Texinfo document.  For example,
if `texinfo.cnf' contains the line `@afourpaper' (*note A4 Paper::),
then all Texinfo documents will be processed with that page size in
effect.  If you have nothing to put in `texinfo.cnf', you do not need
to create it.

  If neither of the above locations for these system files suffice for
you, you can specify the directories explicitly.  For `texinfo.tex',
you can do this by writing the complete path for the file after the
`\input' command.  Another way, that works for both `texinfo.tex' and
`texinfo.cnf' (and any other file TeX might read), is to set the
`TEXINPUTS' environment variable in your `.cshrc' or `.profile' file.

  Which you use of `.cshrc' or `.profile' depends on whether you use a
Bourne shell-compatible (`sh', `bash', `ksh', ...) or C
shell-compatible (`csh', `tcsh') command interpreter.  The latter read
the `.cshrc' file for initialization information, and the former read
`.profile'.

  In a `.cshrc' file, you could use the following `csh' command
sequence:

     setenv TEXINPUTS .:/home/me/mylib:

  In a `.profile' file, you could use the following `sh' command
sequence:

     TEXINPUTS=.:/home/me/mylib:
     export TEXINPUTS

  On MS-DOS/MS-Windows, you would say it like this(1):

     set TEXINPUTS=.;d:/home/me/mylib;c:

It is customary for DOS/Windows users to put such commands in the
`autoexec.bat' file, or in the Windows Registry.

These settings would cause TeX to look for `\input' file first in the
current directory, indicated by the `.', then in a hypothetical user
`me''s `mylib' directory, and finally in the system directories.  (A
leading, trailing, or doubled `:' indicates searching the system
directories at that point.)

  Finally, you may wish to dump a `.fmt' file (*note Memory dumps:
(web2c)Memory dumps.) so that TeX can load Texinfo faster.  (The
disadvantage is that then updating `texinfo.tex' requires redumping.)
You can do this by running this command, assuming `epsf.tex' is
findable by TeX:

     initex texinfo @dump

  (`dump' is a TeX primitive.)  Then, move `texinfo.fmt' to wherever
your `.fmt' files are found; typically, this will be in the
subdirectory `web2c' of your TeX installation.

  ---------- Footnotes ----------

  (1) Note the use of the `;' character, instead of `:', as directory
separator on these systems.


File: texinfo,  Node: Overfull hboxes,  Next: smallbook,  Prev: Preparing for TeX,  Up: Hardcopy

20.10 Overfull "hboxes"
=======================

TeX is sometimes unable to typeset a line without extending it into the
right margin.  This can occur when TeX comes upon what it interprets as
a long word that it cannot hyphenate, such as an electronic mail
network address or a very long title.  When this happens, TeX prints an
error message like this:

     Overfull @hbox (20.76302pt too wide)

(In TeX, lines are in "horizontal boxes", hence the term, "hbox".
`@hbox' is a TeX primitive not needed in the Texinfo language.)

  TeX also provides the line number in the Texinfo source file and the
text of the offending line, which is marked at all the places that TeX
considered hyphenation.  *Note Catching Errors with TeX Formatting:
Debugging with TeX, for more information about typesetting errors.

  If the Texinfo file has an overfull hbox, you can rewrite the sentence
so the overfull hbox does not occur, or you can decide to leave it.  A
small excursion into the right margin often does not matter and may not
even be noticeable.

  If you have many overfull boxes and/or an antipathy to rewriting, you
can coerce TeX into greatly increasing the allowable interword spacing,
thus (if you're lucky) avoiding many of the bad line breaks, like this:

     @tex
     \global\emergencystretch = .9\hsize
     @end tex

(You should adjust the fraction as needed.)  This huge value for
`\emergencystretch' cannot be the default, since then the typeset
output would generally be of noticeably lower quality; the default is
`.15\hsize'.  `\hsize' is the TeX dimension containing the current line
width.

  For what overfull boxes you have, however, TeX will print a large,
ugly, black rectangle beside the line that contains the overfull hbox
unless told otherwise.  This is so you will notice the location of the
problem if you are correcting a draft.

  To prevent such a monstrosity from marring your final printout, write
the following in the beginning of the Texinfo file on a line of its own,
before the `@titlepage' command:

     @finalout


File: texinfo,  Node: smallbook,  Next: A4 Paper,  Prev: Overfull hboxes,  Up: Hardcopy

20.11 Printing "Small" Books
============================

By default, TeX typesets pages for printing in an 8.5 by 11 inch
format.  However, you can direct TeX to typeset a document in a 7 by
9.25 inch format that is suitable for bound books by inserting the
following command on a line by itself at the beginning of the Texinfo
file, before the title page:

     @smallbook

(Since many books are about 7 by 9.25 inches, this command might better
have been called the `@regularbooksize' command, but it came to be
called the `@smallbook' command by comparison to the 8.5 by 11 inch
format.)

  If you write the `@smallbook' command between the start-of-header and
end-of-header lines, the Texinfo mode TeX region formatting command,
`texinfo-tex-region', will format the region in "small" book size
(*note Start of Header::).

  *Note small::, for information about commands that make it easier to
produce examples for a smaller manual.

  *Note Format with texi2dvi::, and *Note Preparing for TeX: Preparing
for TeX, for other ways to format with `@smallbook' that do not require
changing the source file.


File: texinfo,  Node: A4 Paper,  Next: pagesizes,  Prev: smallbook,  Up: Hardcopy

20.12 Printing on A4 Paper
==========================

You can tell TeX to format a document for printing on European size A4
paper (or A5) with the `@afourpaper' (or `@afivepaper') command.  Write
the command on a line by itself near the beginning of the Texinfo file,
before the title page.  For example, this is how you would write the
header for this manual:

     \input texinfo    @c -*-texinfo-*-
     @c %**start of header
     @setfilename texinfo
     @settitle Texinfo
     @afourpaper
     @c %**end of header

  *Note Format with texi2dvi::, and *Note Preparing for TeX: Preparing
for TeX, for other ways to format for different paper sizes that do not
require changing the source file.

  You may or may not prefer the formatting that results from the command
`@afourlatex'.  There's also `@afourwide' for A4 paper in wide format.


File: texinfo,  Node: pagesizes,  Next: Cropmarks and Magnification,  Prev: A4 Paper,  Up: Hardcopy

20.13 `@pagesizes' [WIDTH][, HEIGHT]: Custom Page Sizes
=======================================================

You can explicitly specify the height and (optionally) width of the main
text area on the page with the `@pagesizes' command.  Write this on a
line by itself near the beginning of the Texinfo file, before the title
page.  The height comes first, then the width if desired, separated by
a comma.  Examples:

     @pagesizes 200mm,150mm
  and
     @pagesizes 11.5in

  This would be reasonable for printing on B5-size paper.  To emphasize,
this command specifies the size of the _text area_, not the size of the
paper (which is 250mm by 177mm for B5, 14in by 8.5in for legal).

  To make more elaborate changes, such as changing any of the page
margins, you must define a new command in `texinfo.tex' (or
`texinfo.cnf', *note Preparing for TeX: Preparing for TeX.).

  *Note Format with texi2dvi::, and *Note Preparing for TeX: Preparing
for TeX, for other ways to specify `@pagesizes' that do not require
changing the source file.

  `@pagesizes' is ignored by `makeinfo'.


File: texinfo,  Node: Cropmarks and Magnification,  Next: PDF Output,  Prev: pagesizes,  Up: Hardcopy

20.14 Cropmarks and Magnification
=================================

You can (attempt to) direct TeX to print cropmarks at the corners of
pages with the `@cropmarks' command.  Write the `@cropmarks' command on
a line by itself between `@iftex' and `@end iftex' lines near the
beginning of the Texinfo file, before the title page, like this:

     @iftex
     @cropmarks
     @end iftex

  This command is mainly for printers that typeset several pages on one
sheet of film; but you can attempt to use it to mark the corners of a
book set to 7 by 9.25 inches with the `@smallbook' command.  (Printers
will not produce cropmarks for regular sized output that is printed on
regular sized paper.)  Since different printing machines work in
different ways, you should explore the use of this command with a
spirit of adventure.  You may have to redefine the command in
`texinfo.tex'.

  You can attempt to direct TeX to typeset pages larger or smaller than
usual with the `\mag' TeX command.  Everything that is typeset is
scaled proportionally larger or smaller.  (`\mag' stands for
"magnification".)  This is _not_ a Texinfo @-command, but is a plain
TeX command that is prefixed with a backslash.  You have to write this
command between `@tex' and `@end tex' (*note Raw Formatter Commands::).

  Follow the `\mag' command with an `=' and then a number that is 1000
times the magnification you desire.  For example, to print pages at 1.2
normal size, write the following near the beginning of the Texinfo
file, before the title page:

     @tex
     \mag=1200
     @end tex

  With some printing technologies, you can print normal-sized copies
that look better than usual by giving a larger-than-normal master to
your print shop.  They do the reduction, thus effectively increasing the
resolution.

  Depending on your system, DVI files prepared with a
nonstandard-`\mag' may not print or may print only with certain
magnifications.  Be prepared to experiment.


File: texinfo,  Node: PDF Output,  Next: Obtaining TeX,  Prev: Cropmarks and Magnification,  Up: Hardcopy

20.15 PDF Output
================

The simplest way to generate PDF output from Texinfo source is to run
the convenience script `texi2pdf'; this simply executes the `texi2dvi'
script with the `--pdf' option (*note Format with texi2dvi::).  If for
some reason you want to process by hand, simply run the `pdftex'
program instead of plain `tex'.  That is, run `pdftex foo.texi' instead
of `tex foo.texi'.

  "PDF" stands for `Portable Document Format'. It was invented by Adobe
Systems some years ago for document interchange, based on their
PostScript language.  Related links:

   * GNU GV, a Ghostscript-based PDF reader
     (http://www.foolabs.com/xpdf/).  (It can also preview PostScript
     documents.)

   * A freely available standalone PDF reader
     (http://www.foolabs.com/xpdf/) for the X window system.

   * PDF definition
     (http://partners.adobe.com/asn/acrobat/sdk/public/docs/).


  At present, Texinfo does not provide `@ifpdf' or `@pdf' commands as
for the other output formats, since PDF documents contain many internal
links that would be hard or impossible to get right at the Texinfo
source level.

  PDF files require special software to be displayed, unlike the plain
ASCII formats (Info, HTML) that Texinfo supports.  They also tend to be
much larger than the DVI files output by TeX by default.  Nevertheless,
a PDF file does define an actual typeset document in a self-contained
file, so it has its place.


File: texinfo,  Node: Obtaining TeX,  Prev: PDF Output,  Up: Hardcopy

20.16 How to Obtain TeX
=======================

TeX is freely redistributable.  You can obtain TeX for Unix systems via
anonymous ftp or on physical media.  The core material consists of the
Web2c TeX distribution (`http://tug.org/web2c').

  Instructions for retrieval by anonymous ftp and information on other
available distributions: `http://tug.org/unixtex.ftp'.

  The Free Software Foundation provides a core distribution on its
Source Code CD-ROM suitable for printing Texinfo manuals.  To order it,
contact:

     Free Software Foundation, Inc.
     59 Temple Place Suite 330
     Boston, MA   02111-1307
     USA
     Telephone: +1-617-542-5942
     Fax: (including Japan) +1-617-542-2652
     Free Dial Fax (in Japan):
           0031-13-2473 (KDD)
           0066-3382-0158 (IDC)
     Electronic mail: `gnu@gnu.org'

  Many other TeX distributions are available; see `http://tug.org/'.


File: texinfo,  Node: Creating and Installing Info Files,  Next: Generating HTML,  Prev: Hardcopy,  Up: Top

21 Creating and Installing Info Files
*************************************

This chapter describes how to create and install Info files.  *Note
Info Files::, for general information about the file format itself.

* Menu:

* Creating an Info File::
* Installing an Info File::


File: texinfo,  Node: Creating an Info File,  Next: Installing an Info File,  Up: Creating and Installing Info Files

21.1 Creating an Info File
==========================

`makeinfo' is a program that converts a Texinfo file into an Info file,
HTML file, or plain text.  `texinfo-format-region' and
`texinfo-format-buffer' are GNU Emacs functions that convert Texinfo to
Info.

  For information on installing the Info file in the Info system, *note
Installing an Info File::.

* Menu:

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.


File: texinfo,  Node: makeinfo advantages,  Next: Invoking makeinfo,  Up: Creating an Info File

21.1.1 `makeinfo' Preferred
---------------------------

The `makeinfo' utility creates an Info file from a Texinfo source file
more quickly than either of the Emacs formatting commands and provides
better error messages.  We recommend it.  `makeinfo' is a C program
that is independent of Emacs.  You do not need to run Emacs to use
`makeinfo', which means you can use `makeinfo' on machines that are too
small to run Emacs.  You can run `makeinfo' in any one of three ways:
from an operating system shell, from a shell inside Emacs, or by typing
the `C-c C-m C-r' or the `C-c C-m C-b' command in Texinfo mode in Emacs.

  The `texinfo-format-region' and the `texinfo-format-buffer' commands
are useful if you cannot run `makeinfo'.  Also, in some circumstances,
they format short regions or buffers more quickly than `makeinfo'.


File: texinfo,  Node: Invoking makeinfo,  Next: makeinfo options,  Prev: makeinfo advantages,  Up: Creating an Info File

21.1.2 Running `makeinfo' from a Shell
--------------------------------------

To create an Info file from a Texinfo file, invoke `makeinfo' followed
by the name of the Texinfo file.  Thus, to create the Info file for
Bison, type the following to the shell:

     makeinfo bison.texinfo

  (You can run a shell inside Emacs by typing `M-x shell'.)

  `makeinfo' has many options to control its actions and output; see
the next section.


File: texinfo,  Node: makeinfo options,  Next: Pointer Validation,  Prev: Invoking makeinfo,  Up: Creating an Info File

21.1.3 Options for `makeinfo'
-----------------------------

The `makeinfo' program accepts many options.  Perhaps the most commonly
needed are those that change the output format.  By default, `makeinfo'
outputs Info files.

  Each command line option is a word preceded by `--' or a letter
preceded by `-'.  You can use abbreviations for the long option names
as long as they are unique.

  For example, you could use the following shell command to create an
Info file for `bison.texinfo' in which each line is filled to only 68
columns:

     makeinfo --fill-column=68 bison.texinfo

  You can write two or more options in sequence, like this:

     makeinfo --no-split --fill-column=70 ...

This would keep the Info file together as one possibly very long file
and would also set the fill column to 70.

  The options are:

`-D VAR'
     Cause the variable VAR to be defined.  This is equivalent to `@set
     VAR' in the Texinfo file (*note set clear value::).

`--commands-in-node-names'
     Allow `@'-commands in node names.  This is not recommended, as it
     can probably never be implemented in TeX.  It also makes
     `makeinfo' much slower.  Also, this option is ignored when
     `--no-validate' is used.  *Note Pointer Validation::, for more
     details.

`--css-include=FILE'
     Include the contents of FILE, which should contain cascading style
     sheets specifications, in the `<style>' block of the HTML output.
     *Note HTML CSS::.  If FILE is `-', read standard input.

`--docbook'
     Generate Docbook output rather than Info.

`--enable-encoding'
     Output accented and special characters in Info or plain text output
     based on `@documentencoding'.  *Note `documentencoding':
     documentencoding, and *Note Inserting Accents::.

`--error-limit=LIMIT'
`-e LIMIT'
     Set the maximum number of errors that `makeinfo' will report
     before exiting (on the assumption that continuing would be
     useless); default 100.

`--fill-column=WIDTH'
`-f WIDTH'
     Specify the maximum number of columns in a line; this is the
     right-hand edge of a line.  Paragraphs that are filled will be
     filled to this width.  (Filling is the process of breaking up and
     connecting lines so that lines are the same length as or shorter
     than the number specified as the fill column.  Lines are broken
     between words.) The default value is 72.  Ignored with `--html'.

`--footnote-style=STYLE'
`-s STYLE'
     Set the footnote style to STYLE, either `end' for the end node
     style (the default) or `separate' for the separate node style.
     The value set by this option overrides the value set in a Texinfo
     file by an `@footnotestyle' command (*note Footnotes::).  When the
     footnote style is `separate', `makeinfo' makes a new node
     containing the footnotes found in the current node.  When the
     footnote style is `end', `makeinfo' places the footnote references
     at the end of the current node.  Ignored with `--html'.

`--force'
`-F'
     Ordinarily, if the input file has errors, the output files are not
     created.  With this option, they are preserved.

`--help'
`-h'
     Print a usage message listing all available options, then exit
     successfully.

`--html'
     Generate HTML output rather than Info.  *Note Generating HTML::.
     By default, the HTML output is split into one output file per
     Texinfo source node, and the split output is written into a
     subdirectory with the name of the top-level info file.

`-I DIR'
     Append DIR to the directory search list for finding files that are
     included using the `@include' command.  By default, `makeinfo'
     searches only the current directory.  If DIR is not given, the
     current directory `.' is appended.  Note that DIR can actually be
     a list of several directories separated by the usual path
     separator character (`:' on Unix, `;' on MS-DOS/MS-Windows).

`--ifdocbook'
`--ifhtml'
`--ifinfo'
`--ifplaintext'
`--iftex'
`--ifxml'
     For the specified format, process `@ifFORMAT' and `@FORMAT'
     commands even if not generating the given output format.  For
     instance, if `--iftex' is specified, then `@iftex' and `@tex'
     blocks will be read.

`--macro-expand=FILE'
`-E FILE'
     Output the Texinfo source with all the macros expanded to the named
     file.  Normally, the results of macro expansion are used
     internally by `makeinfo' and then discarded.  This option is used
     by `texi2dvi'.

`--no-headers'

`--plaintext'
     Do not include menus or node separator lines in the output, and
     implicitly `--enable-encoding' (see above).  This results in a
     simple plain text file that you can (for example) send in email
     without complications, or include in a distribution (as in an
     `INSTALL' file).

     For HTML output, likewise omit menus.  And if `--no-split' is also
     specified, do not include a navigation links at the top of each
     node (these are never included in the default case of split
     output).  *Note Generating HTML::.

     In both cases, ignore `@setfilename' and write to standard output
     by default--can be overridden with `-o'.

`--no-ifdocbook'
`--no-ifhtml'
`--no-ifinfo'
`--no-ifplaintext'
`--no-iftex'
`--no-ifxml'
     Do not process `@ifFORMAT' and `@FORMAT' commands, and do process
     `@ifnotFORMAT', even if generating the given format.  For
     instance, if `--no-ifhtml' is specified, then `@ifhtml' and
     `@html' blocks will not be read, and `@ifnothtml' blocks will be.

`--no-number-footnotes'
     Suppress automatic footnote numbering.  By default, `makeinfo'
     numbers each footnote sequentially in a single node, resetting the
     current footnote number to 1 at the start of each node.

`--no-number-sections'
     Do not output chapter, section, and appendix numbers.  You need to
     specify this if your manual is not hierarchically-structured.

`--no-split'
     Suppress the splitting stage of `makeinfo'.  By default, large
     output files (where the size is greater than 70k bytes) are split
     into smaller subfiles.  For Info output, each one is approximately
     50k bytes.  For HTML output, each file contains one node (*note
     Generating HTML::).

`--no-pointer-validate'
`--no-validate'
     Suppress the pointer-validation phase of `makeinfo'--a dangerous
     thing to do.  This can also be done with the `@novalidate' command
     (*note Use TeX: Use TeX.).  Normally, after a Texinfo file is
     processed, some consistency checks are made to ensure that cross
     references can be resolved, etc.  *Note Pointer Validation::.

`--no-warn'
     Suppress warning messages (but _not_ error messages).

`--number-sections'
     Output chapter, section, and appendix numbers as in printed
     manuals.  This is the default.  It works only with
     hierarchically-structured manuals.

`--output=FILE'
`-o FILE'
     Specify that the output should be directed to FILE and not to the
     file name specified in the `@setfilename' command found in the
     Texinfo source (*note setfilename::).  If FILE is `-', output goes
     to standard output and `--no-split' is implied.  For split HTML
     output, FILE is the name for the directory into which all HTML
     nodes are written (*note Generating HTML::).

`-P DIR'
     Prepend DIR to the directory search list for `@include'.  If DIR
     is not given, the current directory `.' is prepended.  See `-I'
     for more details.

`--paragraph-indent=INDENT'
`-p INDENT'
     Set the paragraph indentation style to INDENT.  The value set by
     this option overrides the value set in a Texinfo file by an
     `@paragraphindent' command (*note paragraphindent::).  The value
     of INDENT is interpreted as follows:

    `asis'
          Preserve any existing indentation at the starts of paragraphs.

    `0' or `none'
          Delete any existing indentation.

    NUM
          Indent each paragraph by NUM spaces.

`--reference-limit=LIMIT'
`-r LIMIT'
     Set the value of the number of references to a node that
     `makeinfo' will make without reporting a warning.  If a node has
     more than this number of references in it, `makeinfo' will make the
     references but also report a warning.  The default is 1000.

`--split-size=NUM'
     Keep Info files to at most NUM characters; default is 300,000.

`-U VAR'
     Cause VAR to be undefined.  This is equivalent to `@clear VAR' in
     the Texinfo file (*note set clear value::).

`--verbose'
     Cause `makeinfo' to display messages saying what it is doing.
     Normally, `makeinfo' only outputs messages if there are errors or
     warnings.

`--version'
`-V'
     Print the version number, then exit successfully.

`--xml'
     Generate XML output rather than Info.


  `makeinfo' also reads the environment variable
`TEXINFO_OUTPUT_FORMAT' to determine the output format, if not
overridden by a command line option.  The possible values are:

     docbook  html  info  plaintext  xml

  If not set, Info output is the default.


File: texinfo,  Node: Pointer Validation,  Next: makeinfo in Emacs,  Prev: makeinfo options,  Up: Creating an Info File

21.1.4 Pointer Validation
-------------------------

If you do not suppress pointer validation with the `--no-validate'
option or the `@novalidate' command in the source file (*note Use TeX:
Use TeX.), `makeinfo' will check the validity of the final Info file.
Mostly, this means ensuring that nodes you have referenced really
exist.  Here is a complete list of what is checked:

  1. If a `Next', `Previous', or `Up' node reference is a reference to a
     node in the current file and is not an external reference such as
     to `(dir)', then the referenced node must exist.

  2. In every node, if the `Previous' node is different from the `Up'
     node, then the node pointed to by the `Previous' field must have a
     `Next' field which points back to this node.

  3. Every node except the `Top' node must have an `Up' pointer.

  4. The node referenced by an `Up' pointer must itself reference the
     current node through a menu item, unless the node referenced by
     `Up' has the form `(FILE)'.

  5. If the `Next' reference of a node is not the same as the `Next'
     reference of the `Up' reference, then the node referenced by the
     `Next' pointer must have a `Previous' pointer that points back to
     the current node.  This rule allows the last node in a section to
     point to the first node of the next chapter.

  6. Every node except `Top' should be referenced by at least one other
     node, either via the `Previous' or `Next' links, or via a menu or a
     cross-reference.

  Some Texinfo documents might fail during the validation phase because
they use commands like `@value' and `@definfoenclose' in node
definitions and cross-references inconsistently.  (Your best bet is to
avoid using @-commands in node names.)  Consider the following example:

     @set nodename Node 1

     @node @value{nodename}, Node 2, Top, Top

     This is node 1.

     @node Node 2, , Node 1, Top

     This is node 2.

Here, the node "Node 1" was referenced both verbatim and through
`@value'.

  By default, `makeinfo' fails such cases, because node names are not
fully expanded until they are written to the output file.  You should
always try to reference nodes consistently; e.g., in the above example,
the second `@node' line should have also used `@value'.  However, if,
for some reason, you _must_ reference node names inconsistently, and
`makeinfo' fails to validate the file, you can use the
`--commands-in-node-names' option to force `makeinfo' to perform the
expensive expansion of all node names it finds in the document.  This
might considerably slow down the program, though; twofold increase in
conversion time was measured for large documents such as the Jargon
file.

  The support for `@'-commands in `@node' directives is not general
enough to be freely used.  For example, if the example above redefined
`nodename' somewhere in the document, `makeinfo' will fail to convert
it, even if invoked with the `--commands-in-node-names' option.

  `--commands-in-node-names' has no effect if the `--no-validate'
option is given.


File: texinfo,  Node: makeinfo in Emacs,  Next: texinfo-format commands,  Prev: Pointer Validation,  Up: Creating an Info File

21.1.5 Running `makeinfo' Within Emacs
--------------------------------------

You can run `makeinfo' in GNU Emacs Texinfo mode by using either the
`makeinfo-region' or the `makeinfo-buffer' commands.  In Texinfo mode,
the commands are bound to `C-c C-m C-r' and `C-c C-m C-b' by default.

`C-c C-m C-r'
`M-x makeinfo-region'
     Format the current region for Info.  

`C-c C-m C-b'
`M-x makeinfo-buffer'
     Format the current buffer for Info.  

  When you invoke `makeinfo-region' the output goes to a temporary
buffer.  When you invoke `makeinfo-buffer' output goes to the file set
with `@setfilename' (*note setfilename::).

  The Emacs `makeinfo-region' and `makeinfo-buffer' commands run the
`makeinfo' program in a temporary shell buffer.  If `makeinfo' finds
any errors, Emacs displays the error messages in the temporary buffer.

  You can parse the error messages by typing `C-x `' (`next-error').
This causes Emacs to go to and position the cursor on the line in the
Texinfo source that `makeinfo' thinks caused the error.  *Note Running
`make' or Compilers Generally: (emacs)Compilation, for more information
about using the `next-error' command.

  In addition, you can kill the shell in which the `makeinfo' command
is running or make the shell buffer display its most recent output.

`C-c C-m C-k'
`M-x makeinfo-kill-job'
     Kill the current running `makeinfo' job (from `makeinfo-region' or
     `makeinfo-buffer').

`C-c C-m C-l'
`M-x makeinfo-recenter-output-buffer'
     Redisplay the `makeinfo' shell buffer to display its most recent
     output.

(Note that the parallel commands for killing and recentering a TeX job
are `C-c C-t C-k' and `C-c C-t C-l'.  *Note Texinfo Mode Printing::.)

  You can specify options for `makeinfo' by setting the
`makeinfo-options' variable with either the `M-x customize' or the `M-x
set-variable' command, or by setting the variable in your `.emacs'
initialization file.

  For example, you could write the following in your `.emacs' file:

     (setq makeinfo-options
          "--paragraph-indent=0 --no-split
           --fill-column=70 --verbose")

For more information, see
*Note Easy Customization Interface: (emacs)Easy Customization,
*Note Examining and Setting Variables: (emacs)Examining,
*Note Init File: (emacs)Init File, and
*Note Options for `makeinfo': makeinfo options.


File: texinfo,  Node: texinfo-format commands,  Next: Batch Formatting,  Prev: makeinfo in Emacs,  Up: Creating an Info File

21.1.6 The `texinfo-format...' Commands
---------------------------------------

In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
file with the `texinfo-format-region' command.  This formats the
current region and displays the formatted text in a temporary buffer
called `*Info Region*'.

  Similarly, you can format a buffer with the `texinfo-format-buffer'
command.  This command creates a new buffer and generates the Info file
in it.  Typing `C-x C-s' will save the Info file under the name
specified by the `@setfilename' line which must be near the beginning
of the Texinfo file.

`C-c C-e C-r'
``texinfo-format-region''
     Format the current region for Info.

`C-c C-e C-b'
``texinfo-format-buffer''
     Format the current buffer for Info.

  The `texinfo-format-region' and `texinfo-format-buffer' commands
provide you with some error checking, and other functions can provide
you with further help in finding formatting errors.  These procedures
are described in an appendix; see *Note Catching Mistakes::.  However,
the `makeinfo' program is often faster and provides better error
checking (*note makeinfo in Emacs::).


File: texinfo,  Node: Batch Formatting,  Next: Tag and Split Files,  Prev: texinfo-format commands,  Up: Creating an Info File

21.1.7 Batch Formatting
-----------------------

You can format Texinfo files for Info using `batch-texinfo-format' and
Emacs Batch mode.  You can run Emacs in Batch mode from any shell,
including a shell inside of Emacs.  (*Note Command Arguments:
(emacs)Command Arguments.)

  Here is a shell command to format all the files that end in
`.texinfo' in the current directory:

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacs processes all the files listed on the command line, even if an
error occurs while attempting to format some of them.

  Run `batch-texinfo-format' only with Emacs in Batch mode as shown; it
is not interactive.  It kills the Batch mode Emacs on completion.

  `batch-texinfo-format' is convenient if you lack `makeinfo' and want
to format several Texinfo files at once.  When you use Batch mode, you
create a new Emacs process.  This frees your current Emacs, so you can
continue working in it.  (When you run `texinfo-format-region' or
`texinfo-format-buffer', you cannot use that Emacs for anything else
until the command finishes.)


File: texinfo,  Node: Tag and Split Files,  Prev: Batch Formatting,  Up: Creating an Info File

21.1.8 Tag Files and Split Files
--------------------------------

If a Texinfo file has more than 30,000 bytes, `texinfo-format-buffer'
automatically creates a tag table for its Info file;  `makeinfo' always
creates a tag table.  With a "tag table", Info can jump to new nodes
more quickly than it can otherwise.

  In addition, if the Texinfo file contains more than about 300,000
bytes, `texinfo-format-buffer' and `makeinfo' split the large Info file
into shorter "indirect" subfiles of about 300,000 bytes each.  Big
files are split into smaller files so that Emacs does not need to make
a large buffer to hold the whole of a large Info file; instead, Emacs
allocates just enough memory for the small, split-off file that is
needed at the time.  This way, Emacs avoids wasting memory when you run
Info.  (Before splitting was implemented, Info files were always kept
short and "include files" were designed as a way to create a single,
large printed manual out of the smaller Info files.  *Note Include
Files::, for more information.  Include files are still used for very
large documents, such as `The Emacs Lisp Reference Manual', in which
each chapter is a separate file.)

  When a file is split, Info itself makes use of a shortened version of
the original file that contains just the tag table and references to
the files that were split off.  The split-off files are called
"indirect" files.

  The split-off files have names that are created by appending `-1',
`-2', `-3' and so on to the file name specified by the `@setfilename'
command.  The shortened version of the original file continues to have
the name specified by `@setfilename'.

  At one stage in writing this document, for example, the Info file was
saved as the file `test-texinfo' and that file looked like this:

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo

     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(But `test-texinfo' had far more nodes than are shown here.)  Each of
the split-off, indirect files, `test-texinfo-1', `test-texinfo-2', and
`test-texinfo-3', is listed in this file after the line that says
`Indirect:'.  The tag table is listed after the line that says `Tag
table:'.

  In the list of indirect files, the number following the file name
records the cumulative number of bytes in the preceding indirect files,
not counting the file list itself, the tag table, or the permissions
text in each file.  In the tag table, the number following the node name
records the location of the beginning of the node, in bytes from the
beginning of the (unsplit) output.

  If you are using `texinfo-format-buffer' to create Info files, you
may want to run the `Info-validate' command.  (The `makeinfo' command
does such a good job on its own, you do not need `Info-validate'.)
However, you cannot run the `M-x Info-validate' node-checking command
on indirect files.  For information on how to prevent files from being
split and how to validate the structure of the nodes, see *Note Using
Info-validate::.


File: texinfo,  Node: Installing an Info File,  Prev: Creating an Info File,  Up: Creating and Installing Info Files

21.2 Installing an Info File
============================

Info files are usually kept in the `info' directory.  You can read Info
files using the standalone Info program or the Info reader built into
Emacs.  (*note info: (info)Top, for an introduction to Info.)

* Menu:

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       `install-info' options.


File: texinfo,  Node: Directory File,  Next: New Info File,  Up: Installing an Info File

21.2.1 The Directory File `dir'
-------------------------------

For Info to work, the `info' directory must contain a file that serves
as a top level directory for the Info system.  By convention, this file
is called `dir'.  (You can find the location of this file within Emacs
by typing `C-h i' to enter Info and then typing `C-x C-f' to see the
pathname to the `info' directory.)

  The `dir' file is itself an Info file.  It contains the top level
menu for all the Info files in the system.  The menu looks like this:

     * Menu:
     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                           text editor.
     * Texinfo: (texinfo).  With one source file, make
                           either a printed manual using
                           @TeX{} or an Info file.
     ...

  Each of these menu entries points to the `Top' node of the Info file
that is named in parentheses.  (The menu entry does not need to specify
the `Top' node, since Info goes to the `Top' node if no node name is
mentioned.  *Note Nodes in Other Info Files: Other Info Files.)

  Thus, the `Info' entry points to the `Top' node of the `info' file
and the `Emacs' entry points to the `Top' node of the `emacs' file.

  In each of the Info files, the `Up' pointer of the `Top' node refers
back to the `dir' file.  For example, the line for the `Top' node of
the Emacs manual looks like this in Info:

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

In this case, the `dir' file name is written in upper case letters--it
can be written in either upper or lower case.  This is not true in
general, it is a special case for `dir'.


File: texinfo,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory File,  Up: Installing an Info File

21.2.2 Listing a New Info File
------------------------------

To add a new Info file to your system, you must write a menu entry to
add to the menu in the `dir' file in the `info' directory.  For
example, if you were adding documentation for GDB, you would write the
following new entry:

     * GDB: (gdb).           The source-level C debugger.

The first part of the menu entry is the menu entry name, followed by a
colon.  The second part is the name of the Info file, in parentheses,
followed by a period.  The third part is the description.

  The name of an Info file often has a `.info' extension.  Thus, the
Info file for GDB might be called either `gdb' or `gdb.info'.  The Info
reader programs automatically try the file name both with and without
`.info'(1); so it is better to avoid clutter and not to write `.info'
explicitly in the menu entry.  For example, the GDB menu entry should
use just `gdb' for the file name, not `gdb.info'.

  ---------- Footnotes ----------

  (1) On MS-DOS/MS-Windows systems, Info will try the `.inf' extension
as well.


File: texinfo,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Installing an Info File

21.2.3 Info Files in Other Directories
--------------------------------------

If an Info file is not in the `info' directory, there are three ways to
specify its location:

  1. Write the pathname in the `dir' file as the second part of the
     menu.

  2. If you are using Emacs, list the name of the file in a second `dir'
     file, in its directory; and then add the name of that directory to
     the `Info-directory-list' variable in your personal or site
     initialization file.

     This variable tells Emacs where to look for `dir' files (the files
     must be named `dir').  Emacs merges the files named `dir' from
     each of the listed directories.  (In Emacs version 18, you can set
     the `Info-directory' variable to the name of only one directory.)

  3. Specify the Info directory name in the `INFOPATH' environment
     variable in your `.profile' or `.cshrc' initialization file.
     (Only you and others who set this environment variable will be
     able to find Info files whose location is specified this way.)

  For example, to reach a test file in the `/home/bob/info' directory,
you could add an entry like this to the menu in the standard `dir' file:

     * Test: (/home/bob/info/info-test).  Bob's own test file.

In this case, the absolute file name of the `info-test' file is written
as the second part of the menu entry.

  Alternatively, you could write the following in your `.emacs' file:

     (require 'info)
     (setq Info-directory-list
      (cons (expand-file-name "/home/bob/info")
            Info-directory-list))

  This tells Emacs to merge the system `dir' file with the `dir' file
in `/home/bob/info'.  Thus, Info will list the
`/home/bob/info/info-test' file as a menu entry in the
`/home/bob/info/dir' file.  Emacs does the merging only when `M-x info'
is first run, so if you want to set `Info-directory-list' in an Emacs
session where you've already run `info', you must `(setq
Info-dir-contents nil)' to force Emacs to recompose the `dir' file.

  Finally, you can tell Info where to look by setting the `INFOPATH'
environment variable in your shell startup file, such as `.cshrc',
`.profile' or `autoexec.bat'.  If you use a Bourne-compatible shell
such as `sh' or `bash' for your shell command interpreter, you set the
`INFOPATH' environment variable in the `.profile' initialization file;
but if you use `csh' or `tcsh', you set the variable in the `.cshrc'
initialization file.  On MS-DOS/MS-Windows systems, you must set
`INFOPATH' in your `autoexec.bat' file or in the Registry.  Each type
of shell uses a different syntax.

   * In a `.cshrc' file, you could set the `INFOPATH' variable as
     follows:

          setenv INFOPATH .:~/info:/usr/local/emacs/info

   * In a `.profile' file, you would achieve the same effect by writing:

          INFOPATH=.:$HOME/info:/usr/local/emacs/info
          export INFOPATH

   * In a `autoexec.bat' file, you write this command(1):

          set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info

The `.' indicates the current directory as usual.  Emacs uses the
`INFOPATH' environment variable to initialize the value of Emacs's own
`Info-directory-list' variable.  The stand-alone Info reader merges any
files named `dir' in any directory listed in the `INFOPATH' variable
into a single menu presented to you in the node called `(dir)Top'.

  However you set `INFOPATH', if its last character is a colon(2), this
is replaced by the default (compiled-in) path.  This gives you a way to
augment the default path with new directories without having to list all
the standard places.  For example (using `sh' syntax):

     INFOPATH=/local/info:
     export INFOPATH

will search `/local/info' first, then the standard directories.
Leading or doubled colons are not treated specially.

  When you create your own `dir' file for use with
`Info-directory-list' or `INFOPATH', it's easiest to start by copying
an existing `dir' file and replace all the text after the `* Menu:'
with your desired entries.  That way, the punctuation and special
CTRL-_ characters that Info needs will be present.

  ---------- Footnotes ----------

  (1) Note the use of `;' as the directory separator, and a different
syntax for using values of other environment variables.

  (2) On MS-DOS/MS-Windows systems, use semi-colon instead.


File: texinfo,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Installing an Info File

21.2.4 Installing Info Directory Files
--------------------------------------

When you install an Info file onto your system, you can use the program
`install-info' to update the Info directory file `dir'.  Normally the
makefile for the package runs `install-info', just after copying the
Info file into its proper installed location.

  In order for the Info file to work with `install-info', you include
the commands `@dircategory' and `@direntry'...`@end direntry' in the
Texinfo source file.  Use `@direntry' to specify the menu entries to
add to the Info directory file, and use `@dircategory' to specify which
part of the Info directory to put it in.  Here is how these commands
are used in this manual:

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

  Here's what this produces in the Info file:

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

The `install-info' program sees these lines in the Info file, and that
is how it knows what to do.

  Always use the `@direntry' and `@dircategory' commands near the
beginning of the Texinfo input, before the first `@node' command.  If
you use them later on in the input, `install-info' will not notice them.

  If you use `@dircategory' more than once in the Texinfo source, each
usage specifies the `current' category; any subsequent `@direntry'
commands will add to that category.

  When choosing a category name for the `@dircategory' command, we
recommend consulting the Free Software Directory
(http://www.gnu.org/directory).  If your program is not listed there,
or listed incorrectly or incompletely, please report the situation to
the directory maintainers (<bug-directory@gnu.org>) so that the
category names can be kept in sync.

  Here are a few examples (see the `util/dir-example' file in the
Texinfo distribution for large sample `dir' file):

     Emacs
     Localization
     Printing
     Software development
     Software libraries
     Text creation and manipulation

  Each `Invoking' node for every program installed should have a
corresponding `@direntry'.  This lets users easily find the
documentation for the different programs they can run, as with the
traditional `man' system.


File: texinfo,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Installing an Info File

21.2.5 Invoking `install-info'
------------------------------

`install-info' inserts menu entries from an Info file into the
top-level `dir' file in the Info system (see the previous sections for
an explanation of how the `dir' file works).  It's most often run as
part of software installation, or when constructing a `dir' file for
all manuals on a system.  Synopsis:

     install-info [OPTION]... [INFO-FILE [DIR-FILE]]

  If INFO-FILE or DIR-FILE are not specified, the options (described
below) that define them must be.  There are no compile-time defaults,
and standard input is never used.  `install-info' can read only one
Info file and write only one `dir' file per invocation.

  If DIR-FILE (however specified) does not exist, `install-info'
creates it if possible (with no entries).

  If any input file is compressed with `gzip' (*note Invoking gzip:
(gzip)Invoking gzip.), `install-info' automatically uncompresses it for
reading.  And if DIR-FILE is compressed, `install-info' also
automatically leaves it compressed after writing any changes.  If
DIR-FILE itself does not exist, `install-info' tries to open
`DIR-FILE.gz'.

  Options:

`--delete'
     Delete the entries in INFO-FILE from DIR-FILE.  The file name in
     the entry in DIR-FILE must be INFO-FILE (except for an optional
     `.info' in either one).  Don't insert any new entries.

`--dir-file=NAME'
`-d NAME'
     Specify file name of the Info directory file.  This is equivalent
     to using the DIR-FILE argument.

`--entry=TEXT'
`-e TEXT'
     Insert TEXT as an Info directory entry; TEXT should have the form
     of an Info menu item line plus zero or more extra lines starting
     with whitespace.  If you specify more than one entry, they are all
     added.  If you don't specify any entries, they are determined from
     information in the Info file itself.

`--help'
`-h'
     Display a usage message listing basic usage and all available
     options, then exit successfully.

`--info-file=FILE'
`-i FILE'
     Specify Info file to install in the directory.  Equivalent to
     using the INFO-FILE argument.

`--info-dir=DIR'
`-D DIR'
     Specify the directory where the directory file `dir' resides.
     Equivalent to `--dir-file=DIR/dir'.

`--item=TEXT'
     Same as `--entry=TEXT'.  An Info directory entry is actually a
     menu item.

`--quiet'
     Suppress warnings.

`--remove'
`-r'
     Same as `--delete'.

`--section=SEC'
`-s SEC'
     Put this file's entries in section SEC of the directory.  If you
     specify more than one section, all the entries are added in each
     of the sections.  If you don't specify any sections, they are
     determined from information in the Info file itself.

`--version'
`-V'
     Display version information and exit successfully.



File: texinfo,  Node: Generating HTML,  Next: Command List,  Prev: Creating and Installing Info Files,  Up: Top

22 Generating HTML
******************

`makeinfo' generates Info output by default, but given the `--html'
option, it will generate HTML, for web browsers and other programs.
This chapter gives some details on such HTML output.

  `makeinfo' can also write in XML and Docbook format, but we do not as
yet describe these further.  *Note Output Formats::, for a brief
overview of all the output formats.

* Menu:

* HTML Translation::       Details of the HTML output.
* HTML Splitting::         How HTML output is split.
* HTML CSS::               Influencing HTML output with Cascading Style Sheets.
* HTML Xref::              Cross-references in HTML output.


File: texinfo,  Node: HTML Translation,  Next: HTML Splitting,  Up: Generating HTML

22.1 HTML Translation
=====================

`makeinfo' will include segments of Texinfo source between `@ifhtml'
and `@end ifhtml' in the HTML output (but not any of the other
conditionals, by default).  Source between `@html' and `@end html' is
passed without change to the output (i.e., suppressing the normal
escaping of input `<', `>' and `&' characters which have special
significance in HTML).  *Note Conditional Commands::.

  The `--footnote-style' option is currently ignored for HTML output;
footnotes are always linked to the end of the output file.

  By default, a navigation bar is inserted at the start of each node,
analogous to Info output.  The `--no-headers' option suppresses this if
used with `--no-split'.  Header `<link>' elements in split output can
support info-like navigation with browsers like Lynx and Emacs W3 which
implement this HTML 1.0 feature.

  The HTML generated is mostly standard (i.e., HTML 2.0, RFC-1866).
One exception is that HTML 3.2 tables are generated from the
`@multitable' command, but tagged to degrade as well as possible in
browsers without table support.  The HTML 4 `lang' attribute on the
`<html>' attribute is also used.  (Please report output from an
error-free run of `makeinfo' which has browser portability problems as
a bug.)


File: texinfo,  Node: HTML Splitting,  Next: HTML CSS,  Prev: HTML Translation,  Up: Generating HTML

22.2 HTML Splitting
===================

When splitting output (which is the default), `makeinfo' writes HTML
output into (generally) one output file per Texinfo source `@node'.

  The output file name is the node name with special characters replaced
by `-''s, so it can work as a filename.  In the unusual case of two
different nodes having the same name after this treatment, they are
written consecutively to the same file, with HTML anchors so each can
be referred to separately.  If `makeinfo' is run on a system which does
not distinguish case in filenames, nodes which are the same except for
case will also be folded into the same output file.

  When splitting, the HTML output files are written into a subdirectory,
with the name chosen as follows:
  1. `makeinfo' first tries the subdirectory with the base name from
     `@setfilename' (that is, any extension is removed).  For example,
     HTML output for `@setfilename gcc.info' would be written into a
     subdirectory named `gcc'.

  2. If that directory cannot be created for any reason, then
     `makeinfo' tries appending `.html' to the directory name.  For
     example, output for `@setfilename texinfo' would be written to
     `texinfo.html'.

  3. If the `NAME.html' directory can't be created either, `makeinfo'
     gives up.


In any case, the top-level output file within the directory is always
named `index.html'.

  Monolithic output (`--no-split') is named according to `@setfilename'
(with any `.info' extension is replaced with `.html') or `--output'
(the argument is used literally).


File: texinfo,  Node: HTML CSS,  Next: HTML Xref,  Prev: HTML Splitting,  Up: Generating HTML

22.3 HTML CSS
=============

Cascading Style Sheets (CSS for short) is an Internet standard for
influencing the display of HTML documents: see
`http://www.w3.org/Style/CSS/'.

  By default, `makeinfo' includes a few simple CSS commands to better
implement the appearance of some of the environments.  Here are two of
them, as an example:

     pre.display { font-family:inherit }
     pre.smalldisplay { font-family:inherit; font-size:smaller }

  A full explanation of CSS is (far) beyond this manual; please see the
reference above.  In brief, however, this specification tells the web
browser to use a `smaller' font size for `@smalldisplay' text, and to
use the `inherited' font (generally a regular roman typeface) for both
`@smalldisplay' and `@display'.  By default, the HTML `<pre>' command
uses a monospaced font.

  You can influence the CSS in the HTML output with the
`--css-include=FILE' option to `makeinfo'.  This includes the contents
FILE in the HTML output, as you might expect.  However, the details are
somewhat tricky, as described in the following, to provide maximum
flexibility.

  The CSS file may begin with so-called `@import' directives, which
link to external CSS specifications for browsers to use when
interpreting the document.  Again, a full description is beyond our
scope here, but we'll describe how they work syntactically, so we can
explain how `makeinfo' handles them.

  There can be more than one `@import', but they have to come first in
the file, with only whitespace and comments interspersed, no normal
definitions.  (Technical exception: an `@charset' directive may precede
the `@import''s.  This does not alter `makeinfo''s behavior, it just
copies the `@charset' if present.)  Comments in CSS files are delimited
by `/* ... */', as in C.  An `@import' directive must be in one of
these two forms:

     @import url(http://example.org/foo.css);
     @import "http://example.net/bar.css";

  As far as `makeinfo' is concerned, the crucial characters are the `@'
at the beginning and the semicolon terminating the directive.  When
reading the CSS file, it simply copies any such `@'-directive into the
output, as follows:

   * If FILE contains only normal CSS declarations, it is included
     after `makeinfo''s default CSS, thus overriding it.

   * If FILE begins with `@import' specifications (see below), then the
     `import''s are included first (they have to come first, according
     to the standard), and then `makeinfo''s default CSS is included.
     If you need to override `makeinfo''s defaults from an `@import',
     you can do so with the `!  important' CSS construct, as in:
          pre.smallexample { font-size: inherit ! important }

   * If FILE contains both `@import' and inline CSS specifications, the
     `@import''s are included first, then `makeinfo''s defaults, and
     lastly the inline CSS from FILE.

   * Any @-directive other than `@import' and `@charset' is treated as
     a CSS declaration, meaning `makeinfo' includes its default CSS and
     then the rest of the file.


  If the CSS file is malformed or erroneous, `makeinfo''s output is
unspecified.  `makeinfo' does not try to interpret the meaning of the
CSS file in any way; it just looks for the special `@' and `;'
characters and blindly copies the text into the output.  Comments in
the CSS file may or may not be included in the output.


File: texinfo,  Node: HTML Xref,  Prev: HTML CSS,  Up: Generating HTML

22.4 HTML Cross-references
==========================

Cross-references between Texinfo manuals in HTML format amount, in the
end, to a standard HTML `<a>' link, but the details are unfortunately
complex.  This section describes the algorithm used in detail, so that
Texinfo can cooperate with other programs, such as `texi2html', by
writing mutually compatible HTML files.

  This algorithm may or may not be used for links _within_ HTML output
for a Texinfo file.  Since no issues of compatibility arise in such
cases, we do not need to specify this.

  We try to support references to such "external" manuals in both
monolithic and split forms.  A "monolithic" (mono) manual is entirely
contained in one file, and a "split" manual has a file for each node.
(*Note HTML Splitting::.)

  Acknowledgement: this algorithm was primarily devised by Patrice Dumas
in 2003-04.

* Menu:

* Link Basics:       HTML Xref Link Basics.
* Node Expansion:    HTML Xref Node Name Expansion.
* Command Expansion: HTML Xref Command Expansion.
* 8-bit Expansion:   HTML Xref 8-bit Character Expansion.
* Mismatch:          HTML Xref Mismatch.


File: texinfo,  Node: HTML Xref Link Basics,  Next: HTML Xref Node Name Expansion,  Up: HTML Xref

22.4.1 HTML Cross-reference Link Basics
---------------------------------------

For our purposes, an HTML link consists of four components: a host
name, a directory part, a file part, and a target part.  We always
assume the `http' protocol.  For example:

     http://HOST/DIR/FILE.html#TARGET

  The information to construct a link comes from the node name and
manual name in the cross-reference command in the Texinfo source (*note
Cross References::), and from "external information", which is
currently simply hardwired.  In the future, it may come from an
external data file.

  We now consider each part in turn.

  The HOST is hardwired to be the local host.  This could either be the
literal string `localhost', or, according to the rules for HTML links,
the `http://localhost/' could be omitted entirely.

  The DIR and FILE parts are more complicated, and depend on the
relative split/mono nature of both the manual being processed and the
manual that the cross-reference refers to.  The underlying idea is that
there is one directory for Texinfo manuals in HTML, and each manual is
either available as a monolithic file `manual.html', or a split
subdirectory `manual/*.html'.  Here are the cases:

   * If the present manual is split, and the referent manual is also
     split, the directory is `../REFERENT/' and the file is the
     expanded node name (described later).

   * If the present manual is split, and the referent manual is mono,
     the directory is `../' and the file is `REFERENT.html'.

   * If the present manual is mono, and the referent manual is split,
     the directory is `REFERENT/' and the file is the expanded node
     name.

   * If the present manual is mono, and the referent manual is also
     mono, the directory is `./' (or just the empty string), and the
     file is `REFERENT.html'.


  One exception: the algorithm for node name expansion prefixes the
string `g_t' when the node name begins with a non-letter.  This kludge
(due to XHTML rules) is not necessary for filenames, and is therefore
omitted.

  Any directory part in the filename argument of the source
cross-reference command is ignored.  Thus, `@xref{,,,../foo}' and
`@xref{,,,foo}' both use `foo' as the manual name.  This is because any
such attempted hardwiring of the directory is very unlikely to be
useful for both Info and HTML output.

  Finally, the TARGET part is always the expanded node name.

  Whether the present manual is split or mono is determined by user
option; `makeinfo' defaults to split, with the `--no-split' option
overriding this.

  Whether the referent manual is split or mono is another bit of the
external information.  For now, `makeinfo' simply assumes the referent
manual is the same as the present manual.

  There can be a mismatch between the format of the referent manual that
the generating software assumes, and the format it's actually present
in.  *Note HTML Xref Mismatch::.


File: texinfo,  Node: HTML Xref Node Name Expansion,  Next: HTML Xref Command Expansion,  Prev: HTML Xref Link Basics,  Up: HTML Xref

22.4.2 HTML Cross-reference Node Name Expansion
-----------------------------------------------

As mentioned in the previous section, the key part of the HTML
cross-reference algorithm is the conversion of node names in the
Texinfo source into strings suitable for XHTML identifiers and
filenames.  The restrictions are similar for each: plain ASCII letters,
numbers, and the `-' and `_' characters are all that can be used.
(Although HTML anchors can contain most characters, XHTML is more
restrictive.)

  Cross-references in Texinfo can actually refer either to nodes or
anchors (*note anchor::), but anchors are treated identically to nodes
in this context, so we'll continue to say "node" names for simplicity.

  (@-commands and 8-bit characters are not presently handled by
`makeinfo' for HTML cross-references.  See the next section.)

  A special exception: the Top node (*note The Top Node::) is always
mapped to the file `index.html', to match web server software.
However, the HTML _target_ is `Top'.  Thus (in the split case):

     @xref{Top, Introduction,, emacs, The GNU Emacs Manual}.
     => <a href="emacs/index.html#Top">

  1. The standard ASCII letters (a-z and A-Z) are not modified.  All
     other characters are changed as specified below.

  2. The standard ASCII numbers (0-9) are not modified except when a
     number is the first character of the node name.  In that case, see
     below.

  3. Multiple consecutive space, tab and newline characters are
     transformed into just one space.  (It's not possible to have
     newlines in node names with the current implementation, but we
     specify it anyway, just in case.)

  4. Leading and trailing spaces are removed.

  5. After the above has been applied, each remaining space character is
     converted into a `-' character.

  6. Other ASCII 7-bit characters are transformed into `_00XX', where
     XX is the ASCII character code in (lowercase) hexadecimal.  This
     includes `_', which is mapped to `_005f'.

  7. If the node name does not begin with a letter, the literal string
     `g_t' is prefixed to the result.  (Due to the rules above, that
     string can never occur otherwise; it is an arbitrary choice,
     standing for "GNU Texinfo".)  This is necessary because XHTML
     requires that identifiers begin with a letter.


  For example:

     @node A  node --- with _'%
     => A-node-_002d_002d_002d-with-_005f_0027_0025

  Notice in particular:

   * `_' => `_005f'

   * `-' => `_002d'

   * `A  node' => `A-node'

  On case-folding computer systems, nodes differing only by case will be
mapped to the same file.

  In particular, as mentioned above, Top always maps to the file
`index.html'.  Thus, on a case-folding system, Top and a node named
`Index' will both be written to `index.html'.

  Fortunately, the targets serve to distinguish these cases, since HTML
target names are always case-sensitive, independent of operating system.


File: texinfo,  Node: HTML Xref Command Expansion,  Next: HTML Xref 8-bit Character Expansion,  Prev: HTML Xref Node Name Expansion,  Up: HTML Xref

22.4.3 HTML Cross-reference Command Expansion
---------------------------------------------

In standard Texinfo, node names may not contain @-commands.  `makeinfo'
has an option `--commands-in-node-names' which partially supports it
(*note Invoking makeinfo::), but it is not robust and not recommended.

  Thus, `makeinfo' also does not fully implement this part of the HTML
cross-reference algorithm, but it is documented here for the sake of
completeness.

  First, comments are removed.

  Next, any `@value' commands (*note set value::) and macro invocations
(*note Invoking Macros::) are fully expanded.

  Then, for the following commands, the command name and braces are
removed, the text of the argument is recursively transformed:
     @asis @b @cite @code @command @dfn @dmn @dotless
     @emph @env @file @indicateurl @kbd @key
     @samp @sc @slanted @strong @t @var @w

For `@sc', any letters are capitalized.

  The following commands are replaced by constant text, as shown.  If
any of these commands have non-empty arguments, as in `@TeX{bad}', it
is an error, and the result is unspecified.  `(space)' means a space
character, `(nothing)' means the empty string, etc.  The notation
`U+XXXX' means Unicode code point XXXX.  There are further
transformations of many of these expansions for the final file or
target name, such as space characters to `-', etc., according to the
other rules.

`@(newline)'           (space)
`@(space)'             (space)
`@(tab)'               (space)
`@!'                   `!'
`@*'                   (space)
`@-'                   (nothing)
`@.'                   `.'
`@:'                   (nothing)
`@?'                   `?'
`@@'                   `@'
`@{'                   `{'
`@}'                   `}'
`@LaTeX'               `LaTeX'
`@TeX'                 `TeX'
`@bullet'              U+2022
`@comma'               `,'
`@copyright'           U+00A9
`@dots'                U+2026
`@enddots'             `...'
`@equiv'               U+2261
`@error'               `error-->'
`@euro'                U+20AC
`@exclamdown'          U+00A1
`@expansion'           U+2192
`@minus'               U+2212
`@ordf'                U+00AA
`@ordm'                U+00BA
`@point'               U+2217
`@pounds'              U+00A3
`@print'               `-|'
`@questiondown'        U+00BF
`@registeredsymbol'    U+00AE
`@result'              U+21D2
`@tie'                 (space)

  An `@acronym' or `@abbr' command is replaced by the first argument,
followed by the second argument in parentheses, if present.  *Note
acronym::.

  An `@email' command is replaced by the TEXT argument if present, else
the address.  *Note email::.

  An `@image' command is replaced by the filename (first) argument.
*Note Images::.

  A `@verb' command is replaced by its transformed argument.  *Note
verb::.

  Any other command is an error, and the result is unspecified.


File: texinfo,  Node: HTML Xref 8-bit Character Expansion,  Next: HTML Xref Mismatch,  Prev: HTML Xref Command Expansion,  Up: HTML Xref

22.4.4 HTML Cross-reference 8-bit Character Expansion
-----------------------------------------------------

Usually, characters other than plain 7-bit ASCII are transformed into
the corresponding Unicode code point(s) in Normalization Form C, which
uses precomposed characters where available.  (This is the
normalization form recommended by the W3C and other bodies.)  This
holds when that code point is 0xffff or less, as it almost always is.

  These will then be further transformed by the rules above into the
string `_XXXX', where XXXX is the code point in hex.

  For example, combining this rule and the previous section:

     @node @b{A} @TeX{} @u{B} @point{}@enddots{}
     => A-TeX-B_0306-_2605_002e_002e_002e

  Notice: 1) `@enddots' expands to three periods which in turn expands
to three `_002e''s; 2) `@u{B}' is a `B' with a breve accent, which does
not exist as a pre-accented Unicode character, therefore expands to
`B_0306' (B with combining breve).

  When the Unicode code point is above 0xffff, the transformation is
`__XXXXXX', that is, two leading underscores followed by six hex
digits.  Since Unicode has declared that their highest code point is
0x10ffff, this is sufficient.  (We felt it was better to define this
extra escape than to always use six hex digits, since the first two
would nearly always be zeros.)

  For the definition of Unicode Normalization Form C, see Unicode report
UAX#15, `http://www.unicode.org/reports/tr15/'.  Many related documents
and implementations are available elsewhere on the web.


File: texinfo,  Node: HTML Xref Mismatch,  Prev: HTML Xref 8-bit Character Expansion,  Up: HTML Xref

22.4.5 HTML Cross-reference Mismatch
------------------------------------

As mentioned earlier (*note HTML Xref Link Basics::), the generating
software has to guess whether a given manual being cross-referenced is
available in split or monolithic form--and, inevitably, it might guess
wrong.  However, it is possible when the referent manual itself is
generated, it is possible to handle at least some mismatches.

  In the case where we assume the referent is split, but it is actually
available in mono, the only recourse would be to generate a `manual/'
subdirectory full of HTML files which redirect back to the monolithic
`manual.html'.  Since this is essentially the same as a split manual in
the first place, it's not very appealing.

  On the other hand, in the case where we assume the referent is mono,
but it is actually available in split, it is possible to use JavaScript
to redirect from the putatively monolithic `manual.html' to the
different `manual/node.html' files.  Here's an example:

     function redirect() {
       switch (location.hash) {
         case "#Node1":
           location.replace("manual/Node1.html#Node1"); break;
         case "#Node2" :
           location.replace("manual/Node2.html#Node2"); break;
         ...
         default:;
       }
     }

  Then, in the `<body>' tag of `manual.html':

     <body onLoad="redirect();">

  Once again, this is something the software which generated the
_referent_ manual has to do in advance, it's not something the software
generating the actual cross-reference in the present manual can control.

  Ultimately, we hope to allow for an external configuration file to
control which manuals are available from where, and how.


File: texinfo,  Node: Command List,  Next: Tips,  Prev: Generating HTML,  Up: Top

Appendix A @-Command List
*************************

Here is an alphabetical list of the @-commands in Texinfo.  Square
brackets, [ ], indicate optional arguments; an ellipsis, `...',
indicates repeated text.

  More specifics on the general syntax of different @-commands are
given in the section below.

* Menu:

* Command Syntax::    General syntax for varieties of @-commands.


`@WHITESPACE'
     An `@' followed by a space, tab, or newline produces a normal,
     stretchable, interword space.  *Note Multiple Spaces::.

`@!'
     Generate an exclamation point that really does end a sentence
     (usually after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@"'
`@''
     Generate an umlaut or acute accent, respectively, over the next
     character, as in o" and o'.  *Note Inserting Accents::.

`@*'
     Force a line break.  *Note Line Breaks::.

`@,{C}'
     Generate a cedilla accent under C, as in c,.  *Note Inserting
     Accents::.

`@-'
     Insert a discretionary hyphenation point.  *Note - and
     hyphenation::.

`@.'
     Produce a period that really does end a sentence (usually after an
     end-of-sentence capital letter).  *Note Ending a Sentence::.

`@/'
     Produces no output, but allows a line break.  *Note Line Breaks::.

`@:'
     Indicate to TeX that an immediately preceding period, question
     mark, exclamation mark, or colon does not end a sentence.  Prevent
     TeX from inserting extra whitespace as it does at the end of a
     sentence.  The command has no effect on the Info file output.
     *Note Not Ending a Sentence::.

`@='
     Generate a macron (bar) accent over the next character, as in o=.
     *Note Inserting Accents::.

`@?'
     Generate a question mark that really does end a sentence (usually
     after an end-of-sentence capital letter).  *Note Ending a
     Sentence::.

`@@'
     Stands for an at sign, `@'.  *Note Inserting @ and {} and ,:
     Atsign Braces Comma.

`@\'
     Stands for a backslash (`\') inside `@math'.  *Note `math': math.

`@^'
`@`'
     Generate a circumflex (hat) or grave accent, respectively, over
     the next character, as in o^ and e`.  *Note Inserting Accents::.

`@{'
     Stands for a left brace, `{'.  *Note Inserting @ and {} and ,:
     Atsign Braces Comma.

`@}'
     Stands for a right-hand brace, `}'.
     *Note Inserting @ and {} and ,: Atsign Braces Comma.

`@~'
     Generate a tilde accent over the next character, as in N~.  *Note
     Inserting Accents::.

`@AA{}'
`@aa{}'
     Generate the uppercase and lowercase Scandinavian A-ring letters,
     respectively: AA, aa.  *Note Inserting Accents::.

`@abbr{ABBREVIATION}'
     Tag ABBREVIATION as an abbreviation, such as `Comput.'.  *Note
     `abbr': abbr.

`@acronym{ACRONYM}'
     Tag ACRONYM as an acronym, such as `NASA'.  *Note `acronym':
     acronym.

`@AE{}'
`@ae{}'
     Generate the uppercase and lowercase AE ligatures, respectively:
     AE, ae.  *Note Inserting Accents::.

`@afivepaper'
     Change page dimensions for the A5 paper size.  *Note A4 Paper::.

`@afourlatex'
`@afourpaper'
`@afourwide'
     Change page dimensions for the A4 paper size.  *Note A4 Paper::.

`@alias NEW=EXISTING'
     Make the command `@NEW' an alias for the existing command
     `@EXISTING'.  *Note alias::.

`@anchor{NAME}'
     Define NAME as the current location for use as a cross-reference
     target.  *Note `@anchor': anchor.

`@appendix TITLE'
     Begin an appendix.  The title appears in the table of contents of
     a printed manual.  In Info, the title is underlined with
     asterisks.  *Note The `@unnumbered' and `@appendix' Commands:
     unnumbered & appendix.

`@appendixsec TITLE'
`@appendixsection TITLE'
     Begin an appendix section within an appendix.  The section title
     appears in the table of contents of a printed manual.  In Info,
     the title is underlined with equal signs.  `@appendixsection' is a
     longer spelling of the `@appendixsec' command.  *Note Section
     Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     Begin an appendix subsection within an appendix.  The title appears
     in the table of contents of a printed manual.  In Info, the title
     is underlined with hyphens.  *Note Subsection Commands:
     unnumberedsubsec appendixsubsec subheading.

`@appendixsubsubsec TITLE'
     Begin an appendix subsubsection within an appendix subsection.  The
     title appears in the table of contents of a printed manual.  In
     Info, the title is underlined with periods.  *Note The `subsub'
     Commands: subsubsection.

`@asis'
     Used following `@table', `@ftable', and `@vtable' to print the
     table's first column without highlighting ("as is").  *Note Making
     a Two-column Table: Two-column Tables.

`@author AUTHOR'
     Typeset AUTHOR flushleft and underline it.  *Note The `@title' and
     `@author' Commands: title subtitle author.

`@b{TEXT}'
     Print TEXT in bold font.  No effect in Info.  *Note Fonts::.

`@bullet{}'
     Generate a large round dot, or the closest possible thing to one.
     *Note `@bullet': bullet.

`@bye'
     Stop formatting a file.  The formatters do not see the contents of
     a file following an `@bye' command.  *Note Ending a File::.

`@c COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for
     `@comment'.  *Note Comments::.

`@caption'
     Define the full caption for a `@float'.  *Note caption
     shortcaption::.

`@cartouche'
     Highlight an example or quotation by drawing a box with rounded
     corners around it.  Pair with `@end cartouche'.  No effect in
     Info.  *Note Drawing Cartouches Around Examples: cartouche.)

`@center LINE-OF-TEXT'
     Center the line of text following the command.  *Note `@center':
     titlefont center sp.

`@centerchap LINE-OF-TEXT'
     Like `@chapter', but centers the chapter title.  *Note `@chapter':
     chapter.

`@chapheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@majorheading' and `@chapheading':
     majorheading & chapheading.

`@chapter TITLE'
     Begin a chapter.  The chapter title appears in the table of
     contents of a printed manual.  In Info, the title is underlined
     with asterisks.  *Note `@chapter': chapter.

`@cindex ENTRY'
     Add ENTRY to the index of concepts.  *Note Defining the Entries of
     an Index: Index Entries.

`@cite{REFERENCE}'
     Highlight the name of a book or other reference that lacks a
     companion Info file.  *Note `@cite': cite.

`@clear FLAG'
     Unset FLAG, preventing the Texinfo formatting commands from
     formatting text between subsequent pairs of `@ifset FLAG' and
     `@end ifset' commands, and preventing `@value{FLAG}' from
     expanding to the value to which FLAG is set.  *Note `@set'
     `@clear' `@value': set clear value.

`@code{SAMPLE-CODE}'
     Highlight text that is an expression, a syntactically complete
     token of a program, or a program name.  *Note `@code': code.

`@comma{}'
     Insert a comma `,' character; only needed when a literal comma
     would be taken as an argument separator.  *Note Inserting a
     Comma::.

`@command{COMMAND-NAME}'
     Indicate a command name, such as `ls'.  *Note `@command': command.

`@comment COMMENT'
     Begin a comment in Texinfo.  The rest of the line does not appear
     in either the Info file or the printed manual.  A synonym for `@c'.
     *Note Comments::.

`@contents'
     Print a complete table of contents.  Has no effect in Info, which
     uses menus instead.  *Note Generating a Table of Contents:
     Contents.

`@copyright{}'
     Generate the copyright symbol (C).  *Note `@copyright{}':
     copyright symbol.

`@defcodeindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in an
     `@code' font.  *Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
`@defcvx CATEGORY CLASS NAME'
     Format a description for a variable associated with a class in
     object-oriented programming.  Takes three arguments: the category
     of thing being defined, the class to which it belongs, and its
     name.  *Note Definition Commands::, and *Note Def Cmds in Detail:
     deffnx.

`@deffn CATEGORY NAME ARGUMENTS...'
`@deffnx CATEGORY NAME ARGUMENTS...'
     Format a description for a function, interactive command, or
     similar entity that may take arguments.  `@deffn' takes as
     arguments the category of entity being described, the name of this
     particular entity, and its arguments, if any.  *Note Definition
     Commands::.

`@defindex INDEX-NAME'
     Define a new index and its indexing command.  Print entries in a
     roman font.  *Note Defining New Indices: New Indices.

`@definfoenclose NEWCMD, BEFORE, AFTER,'
     Create new @-command NEWCMD for Info that marks text by enclosing
     it in strings that precede and follow the text.  *Note
     definfoenclose::.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
`@defivarx CLASS INSTANCE-VARIABLE-NAME'
     This command formats a description for an instance variable in
     object-oriented programming.  The command is equivalent to `@defcv
     {Instance Variable} ...'.  *Note Definition Commands::, and *Note
     Def Cmds in Detail: deffnx.

`@defmac MACRONAME ARGUMENTS...'
`@defmacx MACRONAME ARGUMENTS...'
     Format a description for a macro.  The command is equivalent to
     `@deffn Macro ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
`@defmethodx CLASS METHOD-NAME ARGUMENTS...'
     Format a description for a method in object-oriented programming.
     The command is equivalent to `@defop Method ...'.  Takes as
     arguments the name of the class of the method, the name of the
     method, and its arguments, if any.  *Note Definition Commands::,
     and *Note Def Cmds in Detail: deffnx.

`@defop CATEGORY CLASS NAME ARGUMENTS...'
`@defopx CATEGORY CLASS NAME ARGUMENTS...'
     Format a description for an operation in object-oriented
     programming.  `@defop' takes as arguments the overall name of the
     category of operation, the name of the class of the operation, the
     name of the operation, and its arguments, if any.  *Note
     Definition Commands::, and *Note Abstract Objects::.

`@defopt OPTION-NAME'
`@defoptx OPTION-NAME'
     Format a description for a user option.  The command is equivalent
     to `@defvr {User Option} ...'.  *Note Definition Commands::, and
     *Note Def Cmds in Detail: deffnx.

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
`@defspecx SPECIAL-FORM-NAME ARGUMENTS...'
     Format a description for a special form.  The command is
     equivalent to `@deffn {Special Form} ...'.  *Note Definition
     Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
`@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     Format a description for a data type.  `@deftp' takes as arguments
     the category, the name of the type (which is a word like `int' or
     `float'), and then the names of attributes of objects of that type.
     *Note Definition Commands::, and *Note Data Types::.

`@deftypecv CATEGORY CLASS DATA-TYPE NAME'
`@deftypecvx CATEGORY CLASS DATA-TYPE NAME'
     Format a description for a typed class variable in object-oriented
     programming.  *Note Definition Commands::, and *Note Abstract
     Objects::.

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
`@deftypefnx CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     Format a description for a function or similar entity that may take
     arguments and that is typed.  `@deftypefn' takes as arguments the
     classification of entity being described, the type, the name of the
     entity, and its arguments, if any.  *Note Definition Commands::,
     and *Note Def Cmds in Detail: deffnx.

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
`@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     Format a description for a function in a typed language.  The
     command is equivalent to `@deftypefn Function ...'.  *Note
     Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftypeivar CLASS DATA-TYPE VARIABLE-NAME'
`@deftypeivarx CLASS DATA-TYPE VARIABLE-NAME'
     Format a description for a typed instance variable in
     object-oriented programming. *Note Definition Commands::, and
     *Note Abstract Objects::.

`@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
`@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
     Format a description for a typed method in object-oriented
     programming.  *Note Definition Commands::, and *Note Def Cmds in
     Detail: deffnx.

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
`@deftypeopx CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     Format a description for a typed operation in object-oriented
     programming.  *Note Definition Commands::, and *Note Abstract
     Objects::.

`@deftypevar DATA-TYPE VARIABLE-NAME'
`@deftypevarx DATA-TYPE VARIABLE-NAME'
     Format a description for a variable in a typed language.  The
     command is equivalent to `@deftypevr Variable ...'.  *Note
     Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
`@deftypevrx CLASSIFICATION DATA-TYPE NAME'
     Format a description for something like a variable in a typed
     language--an entity that records a value.  Takes as arguments the
     classification of entity being described, the type, and the name
     of the entity.  *Note Definition Commands::, and *Note Def Cmds in
     Detail: deffnx.

`@defun FUNCTION-NAME ARGUMENTS...'
`@defunx FUNCTION-NAME ARGUMENTS...'
     Format a description for functions.  The command is equivalent to
     `@deffn Function ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defvar VARIABLE-NAME'
`@defvarx VARIABLE-NAME'
     Format a description for variables.  The command is equivalent to
     `@defvr Variable ...'.  *Note Definition Commands::, and *Note Def
     Cmds in Detail: deffnx.

`@defvr CATEGORY NAME'
`@defvrx CATEGORY NAME'
     Format a description for any kind of variable.  `@defvr' takes as
     arguments the category of the entity and the name of the entity.
     *Note Definition Commands::, and *Note Def Cmds in Detail: deffnx.

`@detailmenu'
     Avoid `makeinfo' confusion stemming from the detailed node listing
     in a master menu.  *Note Master Menu Parts::.

`@dfn{TERM}'
     Highlight the introductory or defining use of a term.  *Note
     `@dfn': dfn.

`@dircategory DIRPART'
     Specify a part of the Info directory menu where this file's entry
     should go.  *Note Installing Dir Entries::.

`@direntry'
     Begin the Info directory menu entry for this file.  Pair with
     `@end direntry'.  *Note Installing Dir Entries::.

`@display'
     Begin a kind of example.  Like `@example' (indent text, do not
     fill), but do not select a new font.  Pair with `@end display'.
     *Note `@display': display.

`@dmn{DIMENSION}'
     Format a unit of measure, as in 12pt.  Causes TeX to insert a thin
     space before DIMENSION.  No effect in Info.  *Note `@dmn': dmn.

`@docbook'
     Enter Docbook completely.  Pair with `@end docbook'.  *Note Raw
     Formatter Commands::.

`@documentdescription'
     Set the document description text, included in the HTML output.
     Pair with `@end documentdescription'.  *Note
     `@documentdescription': documentdescription.

`@documentencoding ENC'
     Declare the input encoding to be ENC.  *Note `@documentencoding':
     documentencoding.

`@documentlanguage CC'
     Declare the document language as the two-character ISO-639
     abbreviation CC.  *Note `@documentlanguage': documentlanguage.

`@dotaccent{C}'
     Generate a dot accent over the character C, as in o..  *Note
     Inserting Accents::.

`@dots{}'
     Insert an ellipsis: `...'.  *Note `@dots': dots.

`@email{ADDRESS[, DISPLAYED-TEXT]}'
     Indicate an electronic mail address.  *Note `@email': email.

`@emph{TEXT}'
     Highlight TEXT; text is displayed in _italics_ in printed output,
     and surrounded by asterisks in Info.  *Note Emphasizing Text:
     Emphasis.

`@end ENVIRONMENT'
     Ends ENVIRONMENT, as in `@end example'.  *Note @-commands:
     Formatting Commands.

`@env{ENVIRONMENT-VARIABLE}'
     Indicate an environment variable name, such as `PATH'.  *Note
     `@env': env.

`@enddots{}'
     Generate an end-of-sentence of ellipsis, like this ....  *Note
     `@dots{}': dots.

`@enumerate [NUMBER-OR-LETTER]'
     Begin a numbered list, using `@item' for each entry.  Optionally,
     start list with NUMBER-OR-LETTER.  Pair with `@end enumerate'.
     *Note `@enumerate': enumerate.

`@equiv{}'
     Indicate to the reader the exact equivalence of two forms with a
     glyph: `=='.  *Note Equivalence::.

`@euro{}'
     Generate the Euro currency sign.  *Note `@euro{}': euro.

`@error{}'
     Indicate to the reader with a glyph that the following text is an
     error message: `error-->'.  *Note Error Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for even-numbered (left-hand)
     pages.  *Note How to Make Your Own Headings: Custom Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for every page.  Not relevant
     to Info.  *Note How to Make Your Own Headings: Custom Headings.

`@example'
     Begin an example.  Indent text, do not fill, and select
     fixed-width font.  Pair with `@end example'.  *Note `@example':
     example.

`@exampleindent INDENT'
     Indent example-like environments by INDENT number of spaces
     (perhaps 0).  *Note Paragraph Indenting: exampleindent.

`@exclamdown{}'
     Produce an upside-down exclamation point.  *Note Inserting
     Accents::.

`@exdent LINE-OF-TEXT'
     Remove any indentation a line might have.  *Note Undoing the
     Indentation of a Line: exdent.

`@expansion{}'
     Indicate the result of a macro expansion to the reader with a
     special glyph: `==>'.  *Note ==> Indicating an Expansion:
     expansion.

`@file{FILENAME}'
     Highlight the name of a file, buffer, node, or directory.  *Note
     `@file': file.

`@finalout'
     Prevent TeX from printing large black warning rectangles beside
     over-wide lines.  *Note Overfull hboxes::.

`@findex ENTRY'
     Add ENTRY to the index of functions.  *Note Defining the Entries
     of an Index: Index Entries.

`@float'
     Environment to define floating material.  Pair with `@end float'.
     *Note Floats::.

`@flushleft'
`@flushright'
     Left justify every line but leave the right end ragged.  Leave
     font as is.  Pair with `@end flushleft'.  `@flushright' analogous.
     *Note `@flushleft' and `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     Enter a footnote.  Footnote text is printed at the bottom of the
     page by TeX; Info may format in either `End' node or `Separate'
     node style.  *Note Footnotes::.

`@footnotestyle STYLE'
     Specify an Info file's footnote style, either `end' for the end
     node style or `separate' for the separate node style.  *Note
     Footnotes::.

`@format'
     Begin a kind of example.  Like `@display', but do not narrow the
     margins.  Pair with `@end format'.  *Note `@example': example.

`@ftable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of functions.  Pair with `@end ftable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@group'
     Hold text together that must appear on one printed page.  Pair with
     `@end group'.  Not relevant to Info.  *Note `@group': group.

`@H{C}'
     Generate the long Hungarian umlaut accent over C, as in o''.

`@heading TITLE'
     Print an unnumbered section-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with equal signs.  *Note Section Commands:
     unnumberedsec appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     Turn page headings on or off, and/or specify single-sided or
     double-sided page headings for printing.  *Note The `@headings'
     Command: headings on off.

`@html'
     Enter HTML completely.  Pair with `@end html'.  *Note Raw
     Formatter Commands::.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     Explicitly define hyphenation points.  *Note `@-' and
     `@hyphenation': - and hyphenation.

`@i{TEXT}'
     Print TEXT in italic font.  No effect in Info.  *Note Fonts::.

`@ifclear FLAG'
     If FLAG is cleared, the Texinfo formatting commands format text
     between `@ifclear FLAG' and the following `@end ifclear' command.
     *Note `@set' `@clear' `@value': set clear value.

`@ifdocbook'
`@ifhtml'
`@ifinfo'
     Begin text that will appear only in the given output format.
     `@ifinfo' output appears in both Info and (for historical
     compatibility) plain text output.  Pair with `@end ifdocbook'
     resp. `@end ifhtml' resp. `@end ifinfo'.  *Note Conditionals::.

`@ifnotdocbook'
`@ifnothtml'
`@ifnotinfo'
`@ifnotplaintext'
`@ifnottex'
`@ifnotxml'
     Begin a stretch of text that will be ignored in one output format
     but not the others.  The text appears in the formats not specified:
     `@ifnothtml' text is omitted from html output, etc.  The exception
     is `@ifnotinfo' text, which is omitted from plain text output as
     well as Info output.  Pair with the corresponding `@end
     ifnotFORMAT'.  *Note Conditionals::.

`@ifplaintext'
     Begin text that will appear only in the plain text output.  Pair
     with `@end ifplaintext'.  *Note Conditionals::.

`@ifset FLAG'
     If FLAG is set, the Texinfo formatting commands format text
     between `@ifset FLAG' and the following `@end ifset' command.
     *Note `@set' `@clear' `@value': set clear value.

`@iftex'
     Begin text that will not appear in the Info file or other output,
     but will be processed only by TeX.  Pair with `@end iftex'.  *Note
     Conditionally Visible Text: Conditionals.

`@ifxml'
     Begin text that will appear only in the XML output.  Pair with
     `@end ifxml'.  *Note Conditionals::.

`@ignore'
     Begin text that will not appear in any output.  Pair with `@end
     ignore'.  *Note Comments and Ignored Text: Comments.

`@image{FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]}'
     Include graphics image in external FILENAME scaled to the given
     WIDTH and/or HEIGHT, using ALT text and looking for `FILENAME.EXT'
     in HTML.  *Note Images::.

`@include FILENAME'
     Incorporate the contents of the file FILENAME into the Info file
     or printed document.  *Note Include Files::.

`@indicateurl{INDICATEURL}'
     Indicate text that is a uniform resource locator for the World Wide
     Web.  *Note `@indicateurl': indicateurl.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     Make a cross reference to an Info file for which there is no
     printed manual.  *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     Use the specified macro definitions file.  This command is used
     only in the first line of a Texinfo file to cause TeX to make use
     of the `texinfo' macro definitions file.  The backslash in `\input'
     is used instead of an `@' because TeX does not recognize `@' until
     after it has read the definitions file.  *Note Texinfo File
     Header::.

`@item'
     Indicate the beginning of a marked paragraph for `@itemize' and
     `@enumerate'; indicate the beginning of the text of a first column
     entry for `@table', `@ftable', and `@vtable'.  *Note Lists and
     Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     Produce a sequence of indented paragraphs, with a mark inside the
     left margin at the beginning of each paragraph.  Pair with `@end
     itemize'.  *Note `@itemize': itemize.

`@itemx'
     Like `@item' but do not generate extra vertical space above the
     item text.  *Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     Indicate text that is characters of input to be typed by users.
     *Note `@kbd': kbd.

`@kbdinputstyle STYLE'
     Specify when `@kbd' should use a font distinct from `@code'.
     *Note `@kbd': kbd.

`@key{KEY-NAME}'
     Indicate a name for a key on a keyboard.  *Note `@key': key.

`@kindex ENTRY'
     Add ENTRY to the index of keys.  *Note Defining the Entries of an
     Index: Index Entries.

`@L{}'
`@l{}'
     Generate the uppercase and lowercase Polish suppressed-L letters,
     respectively: /L, /l.

`@LaTeX{}'
     Insert the logo LaTeX.  *Note TeX and LaTeX: tex.

`@lisp'
     Begin an example of Lisp code.  Indent text, do not fill, and
     select fixed-width font.  Pair with `@end lisp'.  *Note `@lisp':
     lisp.

`@listoffloats'
     Produce a table-of-contents-like listing of `@float's.  *Note
     listoffloats::.

`@lowersections'
     Change subsequent chapters to sections, sections to subsections,
     and so on. *Note `@raisesections' and `@lowersections':
     Raise/lower sections.

`@macro MACRONAME {PARAMS}'
     Define a new Texinfo command `@MACRONAME{PARAMS}'.  Only supported
     by `makeinfo' and `texi2dvi'.  *Note Defining Macros::.

`@majorheading TITLE'
     Print a chapter-like heading in the text, but not in the table of
     contents of a printed manual.  Generate more vertical whitespace
     before the heading than the `@chapheading' command.  *Note
     `@majorheading' and `@chapheading': majorheading & chapheading.

`@math{MATHEMATICAL-EXPRESSION}'
     Format a mathematical expression.  *Note `@math': Inserting
     Mathematical Expressions: math.

`@menu'
     Mark the beginning of a menu of nodes in Info.  No effect in a
     printed manual.  Pair with `@end menu'.  *Note Menus::.

`@minus{}'
     Generate a minus sign, `-'.  *Note `@minus': minus.

`@multitable COLUMN-WIDTH-SPEC'
     Begin a multi-column table.  Pair with `@end multitable'.  *Note
     Multitable Column Widths::.

`@need N'
     Start a new page in a printed manual if fewer than N mils
     (thousandths of an inch) remain on the current page.  *Note
     `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Define the beginning of a new node in Info, and serve as a locator
     for references for TeX.  *Note `@node': node.

`@noindent'
     Prevent text from being indented as if it were a new paragraph.
     *Note `@noindent': noindent.

`@novalidate'
     Suppress validation of node references, omit creation of auxiliary
     files with TeX.  Use before `@setfilename'.  *Note Pointer
     Validation::.

`@O{}'
`@o{}'
     Generate the uppercase and lowercase O-with-slash letters,
     respectively: /O, /o.

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     Specify page footings resp. headings for odd-numbered (right-hand)
     pages.  *Note How to Make Your Own Headings: Custom Headings.

`@OE{}'
`@oe{}'
     Generate the uppercase and lowercase OE ligatures, respectively:
     OE, oe.  *Note Inserting Accents::.

`@option{OPTION-NAME}'
     Indicate a command-line option, such as `-l' or `--help'.  *Note
     `@option': option.

`@page'
     Start a new page in a printed manual.  No effect in Info.  *Note
     `@page': page.

`@pagesizes [WIDTH][, HEIGHT]'
     Change page dimensions.  *Note pagesizes::.

`@paragraphindent INDENT'
     Indent paragraphs by INDENT number of spaces (perhaps 0); preserve
     source file indentation if INDENT is `asis'.  *Note Paragraph
     Indenting: paragraphindent.

`@pindex ENTRY'
     Add ENTRY to the index of programs.  *Note Defining the Entries of
     an Index: Index Entries.

`@point{}'
     Indicate the position of point in a buffer to the reader with a
     glyph: `-!-'.  *Note Indicating Point in a Buffer: Point Glyph.

`@pounds{}'
     Generate the pounds sterling currency sign.  *Note `@pounds{}':
     pounds.

`@print{}'
     Indicate printed output to the reader with a glyph: `-|'.  *Note
     Print Glyph::.

`@printindex INDEX-NAME'
     Print an alphabetized two-column index in a printed manual or
     generate an alphabetized menu of index entries for Info.  *Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with a lower case `see' in a printed
     manual.  Use within parentheses only.  Do not follow command with a
     punctuation mark--the Info formatting commands automatically insert
     terminating punctuation as needed.  Only the first argument is
     mandatory.  *Note `@pxref': pxref.

`@questiondown{}'
     Generate an upside-down question mark.  *Note Inserting Accents::.

`@quotation'
     Narrow the margins to indicate text that is quoted from another
     real or imaginary work.  Takes optional argument of prefix text.
     Pair with `@end quotation'.  *Note `@quotation': quotation.

`@r{TEXT}'
     Print TEXT in roman font.  No effect in Info.  *Note Fonts::.

`@raisesections'
     Change subsequent sections to chapters, subsections to sections,
     and so on.  *Note `@raisesections' and `@lowersections':
     Raise/lower sections.

`@ref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference.  In a printed manual, the reference does not
     start with a `See'.  Follow command with a punctuation mark.  Only
     the first argument is mandatory.  *Note `@ref': ref.

`@refill'
     This command used to refill and indent the paragraph after all the
     other processing has been done.  It is no longer needed, since all
     formatters now automatically refill as needed, but you may still
     see it in the source to some manuals, as it does no harm.

`@registeredsymbol{}'
     Generate the legal symbol (R).  *Note `@registeredsymbol{}':
     registered symbol.

`@result{}'
     Indicate the result of an expression to the reader with a special
     glyph: `=>'.  *Note `@result': result.

`@ringaccent{C}'
     Generate a ring accent over the next character, as in o*.  *Note
     Inserting Accents::.

`@samp{TEXT}'
     Highlight TEXT that is a literal example of a sequence of
     characters.  Used for single characters, for statements, and often
     for entire shell commands.  *Note `@samp': samp.

`@sansserif{TEXT}'
     Print TEXT in a sans serif font if possible.  No effect in Info.
     *Note Fonts::.

`@sc{TEXT}'
     Set TEXT in a printed output in THE SMALL CAPS FONT and set text
     in the Info file in uppercase letters.  *Note Smallcaps::.

`@section TITLE'
     Begin a section within a chapter.  In a printed manual, the section
     title is numbered and appears in the table of contents.  In Info,
     the title is underlined with equal signs.  *Note `@section':
     section.

`@set FLAG [STRING]'
     Make FLAG active, causing the Texinfo formatting commands to
     format text between subsequent pairs of `@ifset FLAG' and `@end
     ifset' commands.  Optionally, set value of FLAG to STRING.  *Note
     `@set' `@clear' `@value': set clear value.

`@setchapternewpage ON-OFF-ODD'
     Specify whether chapters start on new pages, and if so, whether on
     odd-numbered (right-hand) new pages.  *Note `@setchapternewpage':
     setchapternewpage.

`@setcontentsaftertitlepage'
     Put the table of contents after the `@end titlepage' even if the
     `@contents' command is not there.  *Note Contents::.

`@setfilename INFO-FILE-NAME'
     Provide a name to be used by the Info file.  This command is
     essential for TeX formatting as well, even though it produces no
     output.  *Note `@setfilename': setfilename.

`@setshortcontentsaftertitlepage'
     Place the short table of contents after the `@end titlepage'
     command even if the `@shortcontents' command is not there.  *Note
     Contents::.

`@settitle TITLE'
     Provide a title for page headers in a printed manual, and the
     default document description for HTML `<head>'.  *Note
     `@settitle': settitle.

`@shortcaption'
     Define the short caption for a `@float'.  *Note caption
     shortcaption::.

`@shortcontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@summarycontents'.  *Note Generating a Table of Contents:
     Contents.

`@shorttitlepage TITLE'
     Generate a minimal title page.  *Note `@titlepage': titlepage.

`@slanted{TEXT}'
     Print TEXT in a slanted font if possible.  No effect in Info.
     *Note Fonts::.

`@smallbook'
     Cause TeX to produce a printed manual in a 7 by 9.25 inch format
     rather than the regular 8.5 by 11 inch format.  *Note Printing
     Small Books: smallbook.  Also, see *Note small::.

`@smalldisplay'
     Begin a kind of example.  Like `@smallexample' (narrow margins, no
     filling), but do not select the fixed-width font.  Pair with `@end
     smalldisplay'.  *Note small::.

`@smallexample'
     Indent text to indicate an example.  Do not fill, select
     fixed-width font, narrow the margins.  In printed manuals, print
     text in a smaller font than with `@example'.  Pair with `@end
     smallexample'.  *Note small::.

`@smallformat'
     Begin a kind of example.  Like `@smalldisplay', but do not narrow
     the margins.  Pair with `@end smallformat'.  *Note small::.

`@smalllisp'
     Begin an example of Lisp code.  Same as `@smallexample'.  Pair
     with `@end smalllisp'.  *Note small::.

`@sp N'
     Skip N blank lines.  *Note `@sp': sp.

`@ss{}'
     Generate the German sharp-S es-zet letter, ss.  *Note Inserting
     Accents::.

`@strong {TEXT}'
     Emphasize TEXT by typesetting it in a *bold* font for the printed
     manual and by surrounding it with asterisks for Info.  *Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     Print an unnumbered subsection-like heading in the text, but not in
     the table of contents of a printed manual.  In Info, the title is
     underlined with hyphens.  *Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@subsection TITLE'
     Begin a subsection within a section.  In a printed manual, the
     subsection title is numbered and appears in the table of contents.
     In Info, the title is underlined with hyphens.  *Note
     `@subsection': subsection.

`@subsubheading TITLE'
     Print an unnumbered subsubsection-like heading in the text, but
     not in the table of contents of a printed manual.  In Info, the
     title is underlined with periods.  *Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     Begin a subsubsection within a subsection.  In a printed manual,
     the subsubsection title is numbered and appears in the table of
     contents.  In Info, the title is underlined with periods.  *Note
     The `subsub' Commands: subsubsection.

`@subtitle TITLE'
     In a printed manual, set a subtitle in a normal sized font flush to
     the right-hand side of the page.  Not relevant to Info, which does
     not have title pages.  *Note `@title' `@subtitle' and `@author'
     Commands: title subtitle author.

`@summarycontents'
     Print a short table of contents.  Not relevant to Info, which uses
     menus rather than tables of contents.  A synonym for
     `@shortcontents'.  *Note Generating a Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument, printing the entries from the first index in
     `@code' font.  *Note Combining Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     Merge the index named in the first argument into the index named in
     the second argument.  Do not change the font of FROM-INDEX
     entries.  *Note Combining Indices::.

`@t{TEXT}'
     Print TEXT in a fixed-width, typewriter-like font.  No effect in
     Info.  *Note Fonts::.

`@tab'
     Separate columns in a multitable.  *Note Multitable Rows::.

`@table FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.  Write
     each first column entry on the same line as `@item'.  First column
     entries are printed in the font resulting from FORMATTING-COMMAND.
     Pair with `@end table'.  *Note Making a Two-column Table:
     Two-column Tables.  Also see *Note `@ftable' and `@vtable': ftable
     vtable, and *Note `@itemx': itemx.

`@TeX{}'
     Insert the logo TeX.  *Note TeX and LaTeX: tex.

`@tex'
     Enter TeX completely.  Pair with `@end tex'.  *Note Raw Formatter
     Commands::.

`@thischapter'
`@thischaptername'
`@thisfile'
`@thispage'
`@thistitle'
     Only allowed in a heading or footing.  Stands for the number and
     name of the current chapter (in the format `Chapter 1: Title'),
     the chapter name only, the filename, the current page number, and
     the title of the document, respectively.  *Note How to Make Your
     Own Headings: Custom Headings.

`@tie{}'
     Generate a normal interword space at which a line break is not
     allowed.  *Note `@tie{}': tie.

`@tieaccent{CC}'
     Generate a tie-after accent over the next two characters CC, as in
     `oo['.  *Note Inserting Accents::.

`@tindex ENTRY'
     Add ENTRY to the index of data types.  *Note Defining the Entries
     of an Index: Index Entries.

`@title TITLE'
     In a printed manual, set a title flush to the left-hand side of the
     page in a larger than normal font and underline it with a black
     rule.  Not relevant to Info, which does not have title pages.
     *Note The `@title' `@subtitle' and `@author' Commands: title
     subtitle author.

`@titlefont{TEXT}'
     In a printed manual, print TEXT in a larger than normal font.  Not
     relevant to Info, which does not have title pages.  *Note The
     `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Indicate to Texinfo the beginning of the title page.  Write
     command on a line of its own.  Pair with `@end titlepage'.
     Nothing between `@titlepage' and `@end titlepage' appears in Info.
     *Note `@titlepage': titlepage.

`@today{}'
     Insert the current date, in `1 Jan 1900' style.  *Note How to Make
     Your Own Headings: Custom Headings.

`@top TITLE'
     In a Texinfo file to be formatted with `makeinfo', identify the
     topmost `@node' in the file, which must be written on the line
     immediately preceding the `@top' command.  Used for `makeinfo''s
     node pointer insertion feature.  The title is underlined with
     asterisks.  Both the `@node' line and the `@top' line normally
     should be enclosed by `@ifnottex' and `@end ifnottex'.  In TeX and
     `texinfo-format-buffer', the `@top' command is merely a synonym
     for `@unnumbered'.  *Note Creating Pointers with `makeinfo':
     makeinfo Pointer Creation.

`@u{C}'
`@ubaraccent{C}'
`@udotaccent{C}'
     Generate a breve, underbar, or underdot accent, respectively, over
     or under the character C, as in o(, o_, .o.  *Note Inserting
     Accents::.

`@unnumbered TITLE'
     In a printed manual, begin a chapter that appears without chapter
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with
     asterisks.  *Note `@unnumbered' and `@appendix': unnumbered &
     appendix.

`@unnumberedsec TITLE'
     In a printed manual, begin a section that appears without section
     numbers of any kind.  The title appears in the table of contents
     of a printed manual.  In Info, the title is underlined with equal
     signs.  *Note Section Commands: unnumberedsec appendixsec heading.

`@unnumberedsubsec TITLE'
     In a printed manual, begin an unnumbered subsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with hyphens.  *Note
     `@unnumberedsubsec' `@appendixsubsec' `@subheading':
     unnumberedsubsec appendixsubsec subheading.

`@unnumberedsubsubsec TITLE'
     In a printed manual, begin an unnumbered subsubsection within a
     chapter.  The title appears in the table of contents of a printed
     manual.  In Info, the title is underlined with periods.  *Note The
     `subsub' Commands: subsubsection.

`@uref{URL[, DISPLAYED-TEXT][, REPLACEMENT}'
`@url{URL[, DISPLAYED-TEXT][, REPLACEMENT}'
     Define a cross reference to an external uniform resource locator
     for the World Wide Web.  *Note `@uref': uref.

`@v{C}'
     Generate check accent over the character C, as in o<.  *Note
     Inserting Accents::.

`@value{FLAG}'
     Replace FLAG with the value to which it is set by `@set FLAG'.
     *Note `@set' `@clear' `@value': set clear value.

`@var{METASYNTACTIC-VARIABLE}'
     Highlight a metasyntactic variable, which is something that stands
     for another piece of text.  *Note Indicating Metasyntactic
     Variables: var.

`@verb{DELIM LITERAL DELIM}'
     Output LITERAL, delimited by the single character DELIM, exactly
     as is (in the fixed-width font), including any whitespace or
     Texinfo special characters.  *Note `verb': verb.

`@verbatim'
     Output the text of the environment exactly as is (in the
     fixed-width font).  Pair with `@end verbatim'.  *Note `verbatim':
     verbatim.

`@verbatiminclude FILENAME'
     Output the contents of FILENAME exactly as is (in the fixed-width
     font).  *Note `verbatiminclude': verbatiminclude.

`@vindex ENTRY'
     Add ENTRY to the index of variables.  *Note Defining the Entries
     of an Index: Index Entries.

`@vskip AMOUNT'
     In a printed manual, insert whitespace so as to push text on the
     remainder of the page towards the bottom of the page.  Used in
     formatting the copyright page with the argument `0pt plus 1filll'.
     (Note spelling of `filll'.)  `@vskip' may be used only in
     contexts ignored for Info.  *Note Copyright::.

`@vtable FORMATTING-COMMAND'
     Begin a two-column table, using `@item' for each entry.
     Automatically enter each of the items in the first column into the
     index of variables.  Pair with `@end vtable'.  The same as
     `@table', except for indexing.  *Note `@ftable' and `@vtable':
     ftable vtable.

`@w{TEXT}'
     Prevent TEXT from being split across two lines.  *Note `@w': w.

`@xml'
     Enter XML completely.  Pair with `@end xml'.  *Note Raw Formatter
     Commands::.

`@xref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     Make a reference that starts with `See' in a printed manual.
     Follow command with a punctuation mark.  Only the first argument is
     mandatory.  *Note `@xref': xref.


File: texinfo,  Node: Command Syntax,  Up: Command List

A.1 @-Command Syntax
====================

The character `@' is used to start special Texinfo commands.  (It has
the same meaning that `\' has in plain TeX.)  Texinfo has four types of
@-command:

1. Non-alphabetic commands.
     These commands consist of an @ followed by a punctuation mark or
     other character that is not part of the alphabet.  Non-alphabetic
     commands are almost always part of the text within a paragraph,
     and never take any argument.  The two characters (@ and the other
     one) are complete in themselves; none is followed by braces.  The
     non-alphabetic commands are: `@.', `@:', `@*', `@SPACE', `@TAB',
     `@NL', `@@', `@{', and `@}'.

2. Alphabetic commands that do not require arguments.
     These commands start with @ followed by a word followed by left-
     and right-hand braces.  These commands insert special symbols in
     the document; they do not require arguments.  For example,
     `@dots{}' => `...', `@equiv{}' => `==', `@TeX{}' => `TeX', and
     `@bullet{}' => `*'.

3. Alphabetic commands that require arguments within braces.
     These commands start with @ followed by a letter or a word,
     followed by an argument within braces.  For example, the command
     `@dfn' indicates the introductory or defining use of a term; it is
     used as follows: `In Texinfo, @@-commands are @dfn{mark-up}
     commands.'

4. Alphabetic commands that occupy an entire line.
     These commands occupy an entire line.  The line starts with @,
     followed by the name of the command (a word); for example,
     `@center' or `@cindex'.  If no argument is needed, the word is
     followed by the end of the line.  If there is an argument, it is
     separated from the command name by a space.  Braces are not used.

  Thus, the alphabetic commands fall into classes that have different
argument syntaxes.  You cannot tell to which class a command belongs by
the appearance of its name, but you can tell by the command's meaning:
if the command stands for a glyph, it is in class 2 and does not
require an argument; if it makes sense to use the command together with
other text as part of a paragraph, the command is in class 3 and must
be followed by an argument in braces; otherwise, it is in class 4 and
uses the rest of the line as its argument.

  The purpose of having a different syntax for commands of classes 3 and
4 is to make Texinfo files easier to read, and also to help the GNU
Emacs paragraph and filling commands work properly.  There is only one
exception to this rule: the command `@refill', which is always used at
the end of a paragraph immediately following the final period or other
punctuation character.  `@refill' takes no argument and does _not_
require braces.  `@refill' never confuses the Emacs paragraph commands
because it cannot appear at the beginning of a line.  It is also no
longer needed, since all formatters now refill paragraphs automatically.


File: texinfo,  Node: Tips,  Next: Sample Texinfo Files,  Prev: Command List,  Up: Top

Appendix B Tips and Hints
*************************

Here are some tips for writing Texinfo documentation:

   * Write in the present tense, not in the past or the future.

   * Write actively!  For example, write "We recommend that ..." rather
     than "It is recommended that ...".

   * Use 70 or 72 as your fill column.  Longer lines are hard to read.

   * Include a copyright notice and copying permissions.

Index, Index, Index!
....................

Write many index entries, in different ways.  Readers like indices;
they are helpful and convenient.

  Although it is easiest to write index entries as you write the body of
the text, some people prefer to write entries afterwards.  In either
case, write an entry before the paragraph to which it applies.  This
way, an index entry points to the first page of a paragraph that is
split across pages.

  Here are more hints we have found valuable:

   * Write each index entry differently, so each entry refers to a
     different place in the document.

   * Write index entries only where a topic is discussed significantly.
     For example, it is not useful to index "debugging information" in
     a chapter on reporting bugs.  Someone who wants to know about
     debugging information will certainly not find it in that chapter.

   * Consistently capitalize the first word of every concept index
     entry, or else consistently use lower case.  Terse entries often
     call for lower case; longer entries for capitalization.  Whichever
     case convention you use, please use one or the other consistently!
     Mixing the two styles looks bad.

   * Always capitalize or use upper case for those words in an index for
     which this is proper, such as names of countries or acronyms.
     Always use the appropriate case for case-sensitive names, such as
     those in C or Lisp.

   * Write the indexing commands that refer to a whole section
     immediately after the section command, and write the indexing
     commands that refer to a paragraph before that paragraph.

     In the example that follows, a blank line comes after the index
     entry for "Leaping":

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping

          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (Note that the example shows entries for the same concept that are
     written in different ways--`Lazy dog', and `Dog, lazy'--so readers
     can look up the concept in different ways.)

Blank Lines
...........

   * Insert a blank line between a sectioning command and the first
     following sentence or paragraph, or between the indexing commands
     associated with the sectioning command and the first following
     sentence or paragraph, as shown in the tip on indexing.
     Otherwise, a formatter may fold title and paragraph together.

   * Always insert a blank line before an `@table' command and after an
     `@end table' command; but never insert a blank line after an
     `@table' command or before an `@end table' command.

     For example,

          Types of fox:

          @table @samp
          @item Quick
          Jump over lazy dogs.

          @item Brown
          Also jump over lazy dogs.
          @end table
          @noindent
          On the other hand, ...

     Insert blank lines before and after `@itemize' ... `@end itemize'
     and `@enumerate' ... `@end enumerate' in the same way.

Complete Phrases
................

Complete phrases are easier to read than ...

   * Write entries in an itemized list as complete sentences; or at
     least, as complete phrases.  Incomplete expressions ... awkward
     ... like this.

   * Write the prefatory sentence or phrase for a multi-item list or
     table as a complete expression.  Do not write "You can set:";
     instead, write "You can set these variables:".  The former
     expression sounds cut off.

Editions, Dates and Versions
............................

Include edition numbers, version numbers, and dates in the `@copying'
text (for people reading the Texinfo file, and for the legal copyright
in the output files).  Then use `@insertcopying' in the `@titlepage'
section (for people reading the printed output) and the Top node (for
people reading the online output).

  It is easiest to do this using `@set' and `@value'.  *Note `@value'
Example: value Example, and *Note GNU Sample Texts::.

Definition Commands
...................

Definition commands are `@deffn', `@defun', `@defmac', and the like,
and enable you to write descriptions in a uniform format.

   * Write just one definition command for each entity you define with a
     definition command.  The automatic indexing feature creates an
     index entry that leads the reader to the definition.

   * Use `@table' ... `@end table' in an appendix that contains a
     summary of functions, not `@deffn' or other definition commands.

Capitalization
..............

   * Capitalize "Texinfo"; it is a name.  Do not write the `x' or `i'
     in upper case.

   * Capitalize "Info"; it is a name.

   * Write TeX using the `@TeX{}' command.  Note the uppercase `T' and
     `X'.  This command causes the formatters to typeset the name
     according to the wishes of Donald Knuth, who wrote TeX.

Spaces
......

Do not use spaces to format a Texinfo file, except inside of `@example'
... `@end example' and other literal environments and commands.

  For example, TeX fills the following:

        @kbd{C-x v}
        @kbd{M-x vc-next-action}
           Perform the next logical operation
           on the version-controlled file
           corresponding to the current buffer.

so it looks like this:

     `C-x v' `M-x vc-next-action' Perform the next logical operation on
     the version-controlled file corresponding to the current buffer.

In this case, the text should be formatted with `@table', `@item', and
`@itemx', to create a table.

@code, @samp, @var, and `---'
.............................

   * Use `@code' around Lisp symbols, including command names.  For
     example,

          The main function is @code{vc-next-action}, ...

   * Avoid putting letters such as `s' immediately after an `@code'.
     Such letters look bad.

   * Use `@var' around meta-variables.  Do not write angle brackets
     around them.

   * Use three hyphens in a row, `---', to indicate a long dash.  TeX
     typesets these as a long dash and the Info formatters reduce three
     hyphens to two.

Periods Outside of Quotes
.........................

Place periods and other punctuation marks _outside_ of quotations,
unless the punctuation is part of the quotation.  This practice goes
against publishing conventions in the United States, but enables the
reader to distinguish between the contents of the quotation and the
whole passage.

  For example, you should write the following sentence with the period
outside the end quotation marks:

     Evidently, `au' is an abbreviation for ``author''.

since `au' does _not_ serve as an  abbreviation for `author.' (with a
period following the word).

Introducing New Terms
.....................

   * Introduce new terms so that a reader who does not know them can
     understand them from context; or write a definition for the term.

     For example, in the following, the terms "check in", "register" and
     "delta" are all appearing for the first time; the example sentence
     should be rewritten so they are understandable.

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   * Use the `@dfn' command around a word being introduced, to indicate
     that the reader should not expect to know the meaning already, and
     should expect to learn the meaning from this passage.

@pxref
......

Absolutely never use `@pxref' except in the special context for which
it is designed: inside parentheses, with the closing parenthesis
following immediately after the closing brace.  One formatter
automatically inserts closing punctuation and the other does not.  This
means that the output looks right both in printed output and in an Info
file, but only when the command is used inside parentheses.

Invoking from a Shell
.....................

You can invoke programs such as Emacs, GCC, and `gawk' from a shell.
The documentation for each program should contain a section that
describes this.  Unfortunately, if the node names and titles for these
sections are all different, they are difficult for users to find.

  So, there is a convention to name such sections with a phrase
beginning with the word `Invoking', as in `Invoking Emacs'; this way,
users can find the section easily.

ANSI C Syntax
.............

When you use `@example' to describe a C function's calling conventions,
use the ANSI C syntax, like this:

     void dld_init (char *@var{path});

And in the subsequent discussion, refer to the argument values by
writing the same argument names, again highlighted with `@var'.

  Avoid the obsolete style that looks like this:

     #include <dld.h>

     dld_init (path)
     char *path;

  Also, it is best to avoid writing `#include' above the declaration
just to indicate that the function is declared in a header file.  The
practice may give the misimpression that the `#include' belongs near
the declaration of the function.  Either state explicitly which header
file holds the declaration or, better yet, name the header file used
for a group of functions at the beginning of the section that describes
the functions.

Bad Examples
............

Here are several examples of bad writing to avoid:

  In this example, say, " ... you must `@dfn'{check in} the new
version."  That flows better.

     When you are done editing the file, you must perform a
     `@dfn'{check in}.

  In the following example, say, "... makes a unified interface such as
VC mode possible."

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

  And in this example, you should specify what `it' refers to:

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

And Finally ...
...............

   * Pronounce TeX as if the `X' were a Greek `chi', as the last sound
     in the name `Bach'.  But pronounce Texinfo as in `speck':
     "teckinfo".

   * Write notes for yourself at the very end of a Texinfo file after
     the `@bye'.  None of the formatters process text after the `@bye';
     it is as if the text were within `@ignore' ...  `@end ignore'.


File: texinfo,  Node: Sample Texinfo Files,  Next: Include Files,  Prev: Tips,  Up: Top

Appendix C Sample Texinfo Files
*******************************

The first example is from the first chapter (*note Short Sample::),
given here in its entirety, without commentary.  The second includes
the full texts to be used in GNU manuals.

* Menu:

* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::


File: texinfo,  Node: Short Sample Texinfo File,  Next: GNU Sample Texts,  Up: Sample Texinfo Files

C.1 Short Sample
================

Here is a complete, short sample Texinfo file, without any commentary.
You can see this file, with comments, in the first chapter.  *Note
Short Sample::.

  In a nutshell: The `makeinfo' program transforms a Texinfo source
file such as this into an Info file or HTML; and TeX typesets it for a
printed manual.


     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

     @copying
     This is a short example of a complete Texinfo file.

     Copyright (C) 2004 Free Software Foundation, Inc.
     @end copying

     @titlepage
     @title Sample Title
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @c Output the table of the contents at the beginning.
     @contents

     @ifnottex
     @node Top
     @top GNU Sample

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    The first chapter is the
                           only chapter in this sample.
     * Index::            Complete index.
     @end menu


     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first

     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo,  Node: GNU Sample Texts,  Next: Verbatim Copying License,  Prev: Short Sample Texinfo File,  Up: Sample Texinfo Files

C.2 GNU Sample Texts
====================

Following is a sample Texinfo document with the full texts that should
be used in GNU manuals.

  As well as the legal texts, it also serves as a practical example of
how many elements in a GNU system can affect the manual.  If you're not
familiar with all these different elements, don't worry.  They're not
required and a perfectly good manual can be written without them.
They're included here nonetheless because many manuals do (or could)
benefit from them.

  *Note Short Sample::, for a minimal example of a Texinfo file.  *Note
Beginning a File::, for a full explanation of that minimal example.

  Here are some notes on the example:

   * The `$Id:' comment is for the CVS (*note Overview: (cvs)Top.) or
     RCS (see rcsintro(1)) version control systems, which expand it
     into a string such as:
          Id: texinfo.txi,v 1.128 2004/12/29 15:06:41 karl Exp
     (This is useful in all sources that use version control, not just
     manuals.)  You may wish to include the `$Id:' comment in the
     `@copying' text, if you want a completely unambiguous reference to
     the documentation version.

     If you want to literally write $Id$, use `@w': `@w{$}Id$'.

   * The `version.texi' in the `@include' command is maintained
     automatically by Automake (*note Introduction: (automake)Top.).
     It sets the `VERSION' and `UPDATED' values used elsewhere.  If
     your distribution doesn't use Automake, but you do use Emacs, you
     may find the time-stamp.el package helpful (*note Time Stamps:
     (emacs)Time Stamps.).

   * The `@syncodeindex' command reflects the recommendation to use
     only one index where possible, to make it easier for readers to
     look up index entries.

   * The `@dircategory' is for constructing the Info directory.  *Note
     Installing Dir Entries::, which includes a variety of recommended
     category names.

   * The `Invoking' node is a GNU standard to help users find the basic
     information about command-line usage of a given program.  *Note
     Manual Structure Details: (standards)Manual Structure Details.

   * It is best to include the entire GNU Free Documentation License in
     a GNU manual, unless the manual is only a few pages long.  Of
     course this sample is even shorter than that, but it includes the
     FDL anyway in order to show one conventional way to do so.  The
     `fdl.texi' file is available on the GNU machines and in the
     Texinfo and other GNU source distributions.

     The FDL provides for omitting itself under certain conditions, but
     in that case the sample texts given here have to be modified.
     *Note GNU Free Documentation License::.

   * If your manual has invariant sections (again, see the license
     itself for details), then don't forget to change the text here
     accordingly.

   * For documents that express your personal views, feelings or
     experiences, it is more appropriate to use a license permitting
     only verbatim copying, rather than the FDL.  *Note Verbatim
     Copying License::.


  Here is the sample document:


\input texinfo   @c -*-texinfo-*-
@comment Id: texinfo.txi,v 1.128 2004/12/29 15:06:41 karl Exp
@comment %**start of header
@setfilename sample.info
@include version.texi
@settitle GNU Sample @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for GNU Sample
(version @value{VERSION}, @value{UPDATED}),
which is an example in the Texinfo documentation.

Copyright @copyright{} 2004 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* sample: (sample)Invoking sample.
@end direntry

@titlepage
@title GNU Sample
@subtitle for version @value{VERSION}, @value{UPDATED}
@author A.U. Thor (@email{bug-texinfo@@gnu.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Sample

@insertcopying
@end ifnottex

@menu
* Invoking sample::
* Copying This Manual::
* Index::
@end menu


@node Invoking sample
@chapter Invoking sample

@pindex sample
@cindex invoking @command{sample}

This is a sample manual.  There is no sample program to
invoke, but if there was, you could see its basic usage
and command line options here.


@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye


File: texinfo,  Node: Verbatim Copying License,  Next: All-permissive Copying License,  Prev: GNU Sample Texts,  Up: Sample Texinfo Files

C.3 Verbatim Copying License
============================

For software manuals and other documentation, it is important to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

  On the other hand, for documents that express your personal views,
feelings or experiences, it is more appropriate to use a license
permitting only verbatim copying.

  Here is sample text for such a license permitting verbatim copying
only.  This is just the license text itself.  For a complete sample
document, see the previous sections.


@copying
This document is a sample for allowing verbatim copying only.

Copyright @copyright{} 2004 Free Software Foundation, Inc.

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation
@end copying


File: texinfo,  Node: All-permissive Copying License,  Prev: Verbatim Copying License,  Up: Sample Texinfo Files

C.4 All-permissive Copying License
==================================

For software manuals and other documentation, it is important to use a
license permitting free redistribution and updating, so that when a free
program is changed, the documentation can be updated as well.

  On the other hand, for small supporting files, short manuals (under
300 lines long) and rough documentation (README files, INSTALL files,
etc.), the full FDL would be overkill.  They can use a simple
all-permissive license.

  Here is sample text for such an all-permissive license.  This is just
the license text itself.  For a complete sample document, see the
previous sections.

     Copyright (C) 2004 Free Software Foundation, Inc.

     Copying and distribution of this file, with or without modification,
     are permitted in any medium without royalty provided the copyright
     notice and this notice are preserved.


File: texinfo,  Node: Include Files,  Next: Headings,  Prev: Sample Texinfo Files,  Up: Top

Appendix D Include Files
************************

When TeX or an Info formatting command sees an `@include' command in a
Texinfo file, it processes the contents of the file named by the
command and incorporates them into the DVI or Info file being created.
Index entries from the included file are incorporated into the indices
of the output file.

  Include files let you keep a single large document as a collection of
conveniently small parts.

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                     menus when using included files.
* Include Files Requirements::  `texinfo-multiple-files-update' needs.
* Sample Include File::         A sample outer file with included files
                                     within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                     has changed over time.


File: texinfo,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Up: Include Files

D.1 How to Use Include Files
============================

To include another file within a Texinfo file, write the `@include'
command at the beginning of a line and follow it on the same line by
the name of a file to be included.  For example:

     @include buffers.texi

  The name of the file is taken literally, with a single exception:
`@value{VAR}' references are expanded.  This makes it possible to
reliably include files in other directories in a distribution.  *Note
`@verbatiminclude': verbatiminclude, for an example.

  An included file should simply be a segment of text that you expect to
be included as is into the overall or "outer" Texinfo file; it should
not contain the standard beginning and end parts of a Texinfo file.  In
particular, you should not start an included file with a line saying
`\input texinfo'; if you do, that phrase is inserted into the output
file as is.  Likewise, you should not end an included file with an
`@bye' command; nothing after `@bye' is formatted.

  In the past, you were required to write an `@setfilename' line at the
beginning of an included file, but no longer.  Now, it does not matter
whether you write such a line.  If an `@setfilename' line exists in an
included file, it is ignored.

  Conventionally, an included file begins with an `@node' line that is
followed by an `@chapter' line.  Each included file is one chapter.
This makes it easy to use the regular node and menu creating and
updating commands to create the node pointers and menus within the
included file.  However, the simple Emacs node and menu creating and
updating commands do not work with multiple Texinfo files.  Thus you
cannot use these commands to fill in the `Next', `Previous', and `Up'
pointers of the `@node' line that begins the included file.  Also, you
cannot use the regular commands to create a master menu for the whole
file.  Either you must insert the menus and the `Next', `Previous', and
`Up' pointers by hand, or you must use the GNU Emacs Texinfo mode
command, `texinfo-multiple-files-update', that is designed for
`@include' files.

  When an included file does not have any node lines in it, the
multiple files update command does not try to create a menu entry for
it.  Consequently, you can include any file, such as a version or an
update file without node lines, not just files that are chapters.
Small includable files like this are created by Automake (*note GNU
Sample Texts::).


File: texinfo,  Node: texinfo-multiple-files-update,  Next: Include Files Requirements,  Prev: Using Include Files,  Up: Include Files

D.2 `texinfo-multiple-files-update'
===================================

GNU Emacs Texinfo mode provides the `texinfo-multiple-files-update'
command.  This command creates or updates `Next', `Previous', and `Up'
pointers of included files as well as those in the outer or overall
Texinfo file, and it creates or updates a main menu in the outer file.
Depending whether you call it with optional arguments, the command
updates only the pointers in the first `@node' line of the included
files or all of them:

`M-x texinfo-multiple-files-update'
     Called without any arguments:

        - Create or update the `Next', `Previous', and `Up' pointers of
          the first `@node' line in each file included in an outer or
          overall Texinfo file.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - Create or update a main menu in the outer file.

`C-u M-x texinfo-multiple-files-update'
     Called with `C-u' as a prefix argument:

        - Create or update pointers in the first `@node' line in each
          included file.

        - Create or update the `Top' level node pointers of the outer
          file.

        - Create and insert a master menu in the outer file.  The
          master menu is made from all the menus in all the included
          files.

`C-u 8 M-x texinfo-multiple-files-update'
     Called with a numeric prefix argument, such as `C-u 8':

        - Create or update *all* the `Next', `Previous', and `Up'
          pointers of all the included files.

        - Create or update *all* the menus of all the included files.

        - Create or update the `Top' level node pointers of the outer or
          overall file.

        - And then create a master menu in the outer file.  This is
          similar to invoking `texinfo-master-menu' with an argument
          when you are working with just one file.

  Note the use of the prefix argument in interactive use: with a regular
prefix argument, just `C-u', the `texinfo-multiple-files-update'
command inserts a master menu; with a numeric prefix argument, such as
`C-u 8', the command updates *every* pointer and menu in *all* the
files and then inserts a master menu.


File: texinfo,  Node: Include Files Requirements,  Next: Sample Include File,  Prev: texinfo-multiple-files-update,  Up: Include Files

D.3 Include Files Requirements
==============================

If you plan to use the `texinfo-multiple-files-update' command, the
outer Texinfo file that lists included files within it should contain
nothing but the beginning and end parts of a Texinfo file, and a number
of `@include' commands listing the included files.  It should not even
include indices, which should be listed in an included file of their
own.

  Moreover, each of the included files must contain exactly one highest
level node (conventionally, `@chapter' or equivalent), and this node
must be the first node in the included file.  Furthermore, each of
these highest level nodes in each included file must be at the same
hierarchical level in the file structure.  Usually, each is an
`@chapter', an `@appendix', or an `@unnumbered' node.  Thus, normally,
each included file contains one, and only one, chapter or
equivalent-level node.

  The outer file should contain only _one_ node, the `Top' node.  It
should _not_ contain any nodes besides the single `Top' node.  The
`texinfo-multiple-files-update' command will not process them.


File: texinfo,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: Include Files Requirements,  Up: Include Files

D.4 Sample File with `@include'
===============================

Here is an example of an outer Texinfo file with `@include' files
within it before running `texinfo-multiple-files-update', which would
insert a main or master menu:

     \input texinfo @c -*-texinfo-*-
     @setfilename include-example.info
     @settitle Include Example

     ... *Note Sample Texinfo Files::, for
     examples of the rest of the frontmatter ...

     @ifnottex
     @node Top
     @top Include Example
     @end ifnottex

     @include foo.texinfo
     @include bar.texinfo
     @include concept-index.texinfo
     @bye

  An included file, such as `foo.texinfo', might look like this:

     @node First
     @chapter First Chapter

     Contents of first chapter ...

  The full contents of `concept-index.texinfo' might be as simple as
this:

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

  The outer Texinfo source file for `The GNU Emacs Lisp Reference
Manual' is named `elisp.texi'.  This outer file contains a master menu
with 417 entries and a list of 41 `@include' files.


File: texinfo,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

D.5 Evolution of Include Files
==============================

When Info was first created, it was customary to create many small Info
files on one subject.  Each Info file was formatted from its own
Texinfo source file.  This custom meant that Emacs did not need to make
a large buffer to hold the whole of a large Info file when someone
wanted information; instead, Emacs allocated just enough memory for the
small Info file that contained the particular information sought.  This
way, Emacs could avoid wasting memory.

  References from one file to another were made by referring to the file
name as well as the node name. (*Note Referring to Other Info Files:
Other Info Files.  Also, see *Note `@xref' with Four and Five
Arguments: Four and Five Arguments.)

  Include files were designed primarily as a way to create a single,
large printed manual out of several smaller Info files.  In a printed
manual, all the references were within the same document, so TeX could
automatically determine the references' page numbers.  The Info
formatting commands used include files only for creating joint indices;
each of the individual Texinfo files had to be formatted for Info
individually.  (Each, therefore, required its own `@setfilename' line.)

  However, because large Info files are now split automatically, it is
no longer necessary to keep them small.

  Nowadays, multiple Texinfo files are used mostly for large documents,
such as `The GNU Emacs Lisp Reference Manual', and for projects in
which several different people write different sections of a document
simultaneously.

  In addition, the Info formatting commands have been extended to work
with the `@include' command so as to create a single large Info file
that is split into smaller files if necessary.  This means that you can
write menus and cross references without naming the different Texinfo
files.


File: texinfo,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

Appendix E Page Headings
************************

Most printed manuals contain headings along the top of every page
except the title and copyright pages.  Some manuals also contain
footings.  (Headings and footings have no meaning to Info, which is not
paginated.)

* Menu:

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo,  Node: Headings Introduced,  Next: Heading Format,  Up: Headings

E.1 Headings Introduced
=======================

Texinfo provides standard page heading formats for manuals that are
printed on one side of each sheet of paper and for manuals that are
printed on both sides of the paper.  Typically, you will use these
formats, but you can specify your own format if you wish.

  In addition, you can specify whether chapters should begin on a new
page, or merely continue the same page as the previous chapter; and if
chapters begin on new pages, you can specify whether they must be
odd-numbered pages.

  By convention, a book is printed on both sides of each sheet of paper.
When you open a book, the right-hand page is odd-numbered, and chapters
begin on right-hand pages--a preceding left-hand page is left blank if
necessary.  Reports, however, are often printed on just one side of
paper, and chapters begin on a fresh page immediately following the end
of the preceding chapter.  In short or informal reports, chapters often
do not begin on a new page at all, but are separated from the preceding
text by a small amount of whitespace.

  The `@setchapternewpage' command controls whether chapters begin on
new pages, and whether one of the standard heading formats is used.  In
addition, Texinfo has several heading and footing commands that you can
use to generate your own heading and footing formats.

  In Texinfo, headings and footings are single lines at the tops and
bottoms of pages; you cannot create multiline headings or footings.
Each header or footer line is divided into three parts: a left part, a
middle part, and a right part.  Any part, or a whole line, may be left
blank.  Text for the left part of a header or footer line is set
flushleft; text for the middle part is centered; and, text for the
right part is set flushright.


File: texinfo,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

E.2 Standard Heading Formats
============================

Texinfo provides two standard heading formats, one for manuals printed
on one side of each sheet of paper, and the other for manuals printed
on both sides of the paper.

  By default, nothing is specified for the footing of a Texinfo file,
so the footing remains blank.

  The standard format for single-sided printing consists of a header
line in which the left-hand part contains the name of the chapter, the
central part is blank, and the right-hand part contains the page number.

  A single-sided page looks like this:

       _______________________
      |                       |
      | chapter   page number |
      |                       |
      | Start of text ...     |
      | ...                   |
      |                       |

  The standard format for two-sided printing depends on whether the page
number is even or odd.  By convention, even-numbered pages are on the
left- and odd-numbered pages are on the right.  (TeX will adjust the
widths of the left- and right-hand margins.  Usually, widths are
correct, but during double-sided printing, it is wise to check that
pages will bind properly--sometimes a printer will produce output in
which the even-numbered pages have a larger right-hand margin than the
odd-numbered pages.)

  In the standard double-sided format, the left part of the left-hand
(even-numbered) page contains the page number, the central part is
blank, and the right part contains the title (specified by the
`@settitle' command).  The left part of the right-hand (odd-numbered)
page contains the name of the chapter, the central part is blank, and
the right part contains the page number.

  Two pages, side by side as in an open book, look like this:

       _______________________     _______________________
      |                       |   |                       |
      | page number     title |   | chapter   page number |
      |                       |   |                       |
      | Start of text ...     |   | More  text ...        |
      | ...                   |   | ...                   |
      |                       |   |                       |

The chapter name is preceded by the word "Chapter", the chapter number
and a colon.  This makes it easier to keep track of where you are in the
manual.


File: texinfo,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

E.3 Specifying the Type of Heading
==================================

TeX does not begin to generate page headings for a standard Texinfo
file until it reaches the `@end titlepage' command.  Thus, the title
and copyright pages are not numbered.  The `@end titlepage' command
causes TeX to begin to generate page headings according to a standard
format specified by the `@setchapternewpage' command that precedes the
`@titlepage' section.

  There are four possibilities:

No `@setchapternewpage' command
     Cause TeX to specify the single-sided heading format, with chapters
     on new pages. This is the same as `@setchapternewpage on'.

`@setchapternewpage on'
     Specify the single-sided heading format, with chapters on new
     pages.

`@setchapternewpage off'
     Cause TeX to start a new chapter on the same page as the last page
     of the preceding chapter, after skipping some vertical whitespace.
     Also cause TeX to typeset for single-sided printing.  (You can
     override the headers format with the `@headings double' command;
     see *Note The `@headings' Command: headings on off.)

`@setchapternewpage odd'
     Specify the double-sided heading format, with chapters on new
     pages.

Texinfo lacks an `@setchapternewpage even' command.


File: texinfo,  Node: Custom Headings,  Prev: Heading Choice,  Up: Headings

E.4 How to Make Your Own Headings
=================================

You can use the standard headings provided with Texinfo or specify your
own.  By default, Texinfo has no footers, so if you specify them, the
available page size for the main text will be slightly reduced.

  Texinfo provides six commands for specifying headings and footings:
   * `@everyheading' `@everyfooting' generate page headers and footers
     that are the same for both even- and odd-numbered pages.

   * `@evenheading' and `@evenfooting' command generate headers and
     footers for even-numbered (left-hand) pages.

   * `@oddheading' and `@oddfooting' generate headers and footers for
     odd-numbered (right-hand) pages.

  Write custom heading specifications in the Texinfo file immediately
after the `@end titlepage' command.  You must cancel the predefined
heading commands with the `@headings off' command before defining your
own specifications.

  Here is how to tell TeX to place the chapter name at the left, the
page number in the center, and the date at the right of every header
for both even- and odd-numbered pages:

     @headings off
     @everyheading @thischapter @| @thispage @| @today{}

You need to divide the left part from the central part and the central
part from the right part by inserting `@|' between parts.  Otherwise,
the specification command will not be able to tell where the text for
one part ends and the next part begins.

  Each part can contain text or @-commands.  The text is printed as if
the part were within an ordinary paragraph in the body of the page.
The @-commands replace themselves with the page number, date, chapter
name, or whatever.

  Here are the six heading and footing commands:

`@everyheading LEFT @| CENTER @| RIGHT'
`@everyfooting LEFT @| CENTER @| RIGHT'
     The `every' commands specify the format for both even- and
     odd-numbered pages.  These commands are for documents that are
     printed on one side of each sheet of paper, or for documents in
     which you want symmetrical headers or footers.

`@evenheading LEFT @| CENTER @| RIGHT'
`@oddheading  LEFT @| CENTER @| RIGHT'
`@evenfooting LEFT @| CENTER @| RIGHT'
`@oddfooting  LEFT @| CENTER @| RIGHT'
     The `even' and `odd' commands specify the format for even-numbered
     pages and odd-numbered pages.  These commands are for books and
     manuals that are printed on both sides of each sheet of paper.

  Use the `@this...' series of @-commands to provide the names of
chapters and sections and the page number.  You can use the `@this...'
commands in the left, center, or right portions of headers and footers,
or anywhere else in a Texinfo file so long as they are between `@iftex'
and `@end iftex' commands.

  Here are the `@this...' commands:

`@thispage'
     Expands to the current page number.

`@thischaptername'
     Expands to the name of the current chapter.

`@thischapter'
     Expands to the number and name of the current chapter, in the
     format `Chapter 1: Title'.

`@thistitle'
     Expands to the name of the document, as specified by the
     `@settitle' command.

`@thisfile'
     For `@include' files only: expands to the name of the current
     `@include' file.  If the current Texinfo source file is not an
     `@include' file, this command has no effect.  This command does
     _not_ provide the name of the current Texinfo source file unless
     it is an `@include' file.  (*Note Include Files::, for more
     information about `@include' files.)

You can also use the `@today{}' command, which expands to the current
date, in `1 Jan 1900' format.  

  Other @-commands and text are printed in a header or footer just as
if they were in the body of a page.  It is useful to incorporate text,
particularly when you are writing drafts:

     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}

  Beware of overlong titles: they may overlap another part of the
header or footer and blot it out.


File: texinfo,  Node: Catching Mistakes,  Next: Copying This Manual,  Prev: Headings,  Up: Top

Appendix F Formatting Mistakes
******************************

Besides mistakes in the content of your documentation, there are two
kinds of mistake you can make with Texinfo: you can make mistakes with
@-commands, and you can make mistakes with the structure of the nodes
and chapters.

  Emacs has two tools for catching the @-command mistakes and two for
catching structuring mistakes.

  For finding problems with @-commands, you can run TeX or a region
formatting command on the region that has a problem; indeed, you can
run these commands on each region as you write it.

  For finding problems with the structure of nodes and chapters, you
can use `C-c C-s' (`texinfo-show-structure') and the related `occur'
command and you can use the `M-x Info-validate' command.

* Menu:

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

