###Driver
-all-warningsC ObjC C++ ObjC++ Warning Alias(Wall)
-all-warningsFortran Alias(Wall)
-ansiC ObjC C++ ObjC++ Alias(ansi)
-assembleDriver Alias(S)
-assertC ObjC C++ ObjC++ Separate Alias(A) MissingArgError(assertion missing after %qs)
-assertFortran Separate Alias(A)
-assert=C ObjC C++ ObjC++ Joined Alias(A) MissingArgError(assertion missing after %qs)
-assert=Fortran Joined Alias(A)
-commentsC ObjC C++ ObjC++ Alias(C)
-commentsFortran Alias(C)
-comments-in-macrosC ObjC C++ ObjC++ Alias(CC)
-comments-in-macrosFortran Alias(CC)
-compileDriver Alias(c)
-completion=Common Driver Joined UndocumentedProvide bash completion for options starting with provided string.
-coverageDriver Alias(coverage)
-debugCommon Alias(g)
-define-macroC ObjC C++ ObjC++ Separate Alias(D) MissingArgError(macro name missing after %qs)
-define-macroFortran Separate Alias(D)
-define-macro=C ObjC C++ ObjC++ Joined Alias(D) MissingArgError(macro name missing after %qs)
-define-macro=Fortran Joined Alias(D)
-dependenciesC ObjC C++ ObjC++ Alias(M)
-dependenciesD Alias(M)
-dependenciesFortran Alias(M)
-dumpBRIG Separate Alias(d)
-dumpC ObjC C++ ObjC++ Separate Alias(d)
-dumpCommon Separate Alias(d)
-dumpFortran Separate Alias(d)
-dump=BRIG Joined Alias(d)
-dump=C ObjC C++ ObjC++ Joined Alias(d)
-dump=Common Joined Alias(d)
-dump=Fortran Joined Alias(d)
-dumpbaseCommon Separate Alias(dumpbase)
-dumpdirCommon Separate Alias(dumpdir)
-entryDriver Separate Alias(e)
-entry=Driver Joined Alias(e)
-extra-warningsCommon Warning Alias(Wextra)
-for-assemblerDriver Separate Alias(Xassembler)
-for-assembler=Driver JoinedOrMissing Alias(Xassembler)
-for-linkerDriver Separate Alias(Xlinker)
-for-linker=Driver JoinedOrMissing Alias(Xlinker)
-force-linkDriver Separate Alias(u)
-force-link=Driver Joined Alias(u)
-helpCommon Driver Var(help_flag)Display this information.
-help=Common Driver Report Joined--help=<class>	Display descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params.
-imacrosC ObjC C++ ObjC++ Separate Alias(imacros) MissingArgError(missing filename after %qs)
-imacros=C ObjC C++ ObjC++ Joined Alias(imacros) MissingArgError(missing filename after %qs)
-includeC ObjC C++ ObjC++ Separate Alias(include) MissingArgError(missing filename after %qs)
-include-barrierC ObjC C++ ObjC++ Alias(I, -)
-include-barrierFortran Alias(I, -)
-include-directoryC ObjC C++ ObjC++ Separate Alias(I) MissingArgError(missing path after %qs)
-include-directoryFortran Separate Alias(I)
-include-directory-afterC ObjC C++ ObjC++ Separate Alias(idirafter) MissingArgError(missing path after %qs)
-include-directory-afterFortran Separate Alias(idirafter)
-include-directory-after=C ObjC C++ ObjC++ Joined Alias(idirafter) MissingArgError(missing path after %qs)
-include-directory-after=Fortran Joined Alias(idirafter)
-include-directory=C ObjC C++ ObjC++ Joined Alias(I) MissingArgError(missing path after %qs)
-include-directory=Fortran Joined Alias(I)
-include-prefixC ObjC C++ ObjC++ Separate Alias(iprefix)
-include-prefixFortran Separate Alias(iprefix)
-include-prefix=C ObjC C++ ObjC++ JoinedOrMissing Alias(iprefix)
-include-prefix=Fortran JoinedOrMissing Alias(iprefix)
-include-with-prefixC ObjC C++ ObjC++ Separate Alias(iwithprefix)
-include-with-prefix-afterC ObjC C++ ObjC++ Separate Alias(iwithprefix)
-include-with-prefix-after=C ObjC C++ ObjC++ JoinedOrMissing Alias(iwithprefix)
-include-with-prefix-beforeC ObjC C++ ObjC++ Separate Alias(iwithprefixbefore)
-include-with-prefix-before=C ObjC C++ ObjC++ JoinedOrMissing Alias(iwithprefixbefore)
-include-with-prefix=C ObjC C++ ObjC++ JoinedOrMissing Alias(iwithprefix)
-include=C ObjC C++ ObjC++ Joined Alias(include) MissingArgError(missing filename after %qs)
-languageDriver Separate Alias(x)
-language=Driver Joined Alias(x)
-library-directoryDriver Separate Alias(L)
-library-directory=Driver Joined Alias(L)
-no-canonical-prefixesDriver Alias(no-canonical-prefixes)
-no-integrated-cppDriver Alias(no-integrated-cpp)
-no-line-commandsC ObjC C++ ObjC++ Alias(P)
-no-line-commandsFortran Alias(P)
-no-standard-includesC ObjC C++ ObjC++ Alias(nostdinc)
-no-standard-includesFortran Alias(nostdinc)
-no-standard-librariesDriver Alias(nostdlib)
-no-sysroot-suffixDriver Var(no_sysroot_suffix)
-no-warningsC ObjC C++ ObjC++ Alias(w)
-no-warningsCommon Alias(w)
-optimizeCommon Alias(O)
-outputC ObjC C++ ObjC++ Separate Alias(o)
-outputCommon Driver Separate Alias(o) MissingArgError(missing filename after %qs)
-outputFortran Separate Alias(o)
-output-pch=C ObjC C++ ObjC++ Joined Separate
-output=BRIG Driver Joined Alias(o) MissingArgError(missing filename after %qs)
-output=C ObjC C++ ObjC++ Joined Alias(o)
-output=Common Driver Joined Alias(o) MissingArgError(missing filename after %qs)
-output=Fortran Joined Alias(o)
-param=align-loop-iterations=Common Joined UInteger Var(param_align_loop_iterations) Init(4) Param OptimizationLoops iterating at least selected number of iterations will get loop alignment.
-param=align-threshold=Common Joined UInteger Var(param_align_threshold) Init(100) IntegerRange(1, 65536) Param OptimizationSelect fraction of the maximal frequency of executions of basic block in function given basic block get alignment.
-param=analyzer-bb-explosion-factor=Common Joined UInteger Var(param_analyzer_bb_explosion_factor) Init(5) ParamThe maximum number of 'after supernode' exploded nodes within the analyzer per supernode, before terminating analysis.
-param=analyzer-max-enodes-per-program-point=Common Joined UInteger Var(param_analyzer_max_enodes_per_program_point) Init(8) ParamThe maximum number of exploded nodes per program point within the analyzer, before terminating analysis of that point.
-param=analyzer-max-recursion-depth=Common Joined UInteger Var(param_analyzer_max_recursion_depth) Init(2) ParamThe maximum number of times a callsite can appear in a call stack within the analyzer, before terminating analysis of a call that would recurse deeper.
-param=analyzer-min-snodes-for-call-summary=Common Joined UInteger Var(param_analyzer_min_snodes_for_call_summary) Init(10) ParamThe minimum number of supernodes within a function for the analyzer to consider summarizing its effects at call sites.
-param=asan-globals=Common Joined UInteger Var(param_asan_globals) Init(1) IntegerRange(0, 1) ParamEnable asan globals protection.
-param=asan-instrument-allocas=Common Joined UInteger Var(param_asan_protect_allocas) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan allocas/VLAs protection.
-param=asan-instrument-reads=Common Joined UInteger Var(param_asan_instrument_reads) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan load operations protection.
-param=asan-instrument-writes=Common Joined UInteger Var(param_asan_instrument_writes) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan store operations protection.
-param=asan-instrumentation-with-call-threshold=Common Joined UInteger Var(param_asan_instrumentation_with_call_threshold) Init(7000) Param OptimizationUse callbacks instead of inline code if number of accesses in function becomes greater or equal to this number.
-param=asan-memintrin=Common Joined UInteger Var(param_asan_memintrin) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan builtin functions protection.
-param=asan-stack=Common Joined UInteger Var(param_asan_stack) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan stack protection.
-param=asan-use-after-return=Common Joined UInteger Var(param_asan_use_after_return) Init(1) IntegerRange(0, 1) Param OptimizationEnable asan detection of use-after-return bugs.
-param=avg-loop-niter=Common Joined UInteger Var(param_avg_loop_niter) Init(10) IntegerRange(1, 65536) Param OptimizationAverage number of iterations of a loop.
-param=avoid-fma-max-bits=Common Joined UInteger Var(param_avoid_fma_max_bits) IntegerRange(0, 512) Param OptimizationMaximum number of bits for which we avoid creating FMAs.
-param=builtin-expect-probability=Common Joined UInteger Var(param_builtin_expect_probability) Init(90) IntegerRange(0, 100) Param OptimizationSet the estimated probability in percentage for builtin expect. The default value is 90% probability.
-param=builtin-string-cmp-inline-length=Common Joined UInteger Var(param_builtin_string_cmp_inline_length) Init(3) IntegerRange(0, 100) Param OptimizationThe maximum length of a constant string for a builtin string cmp call eligible for inlining. The default value is 3.
-param=case-values-threshold=Common Joined UInteger Var(param_case_values_threshold) Param OptimizationThe smallest number of different values for which it is best to use a jump-table instead of a tree of conditional branches, if 0, use the default for the machine.
-param=comdat-sharing-probability=Common Joined UInteger Var(param_comdat_sharing_probability) Init(20) Param OptimizationProbability that COMDAT function will be shared with different compilation unit.
-param=cxx-max-namespaces-for-diagnostic-help=Common Joined UInteger Var(param_cxx_max_namespaces_for_diagnostic_help) Init(1000) ParamMaximum number of namespaces to search for alternatives when name lookup fails.
-param=dse-max-alias-queries-per-store=Common Joined UInteger Var(param_dse_max_alias_queries_per_store) Init(256) Param OptimizationMaximum number of queries into the alias oracle per store.
-param=dse-max-object-size=Common Joined UInteger Var(param_dse_max_object_size) Init(256) Param OptimizationMaximum size (in bytes) of objects tracked bytewise by dead store elimination.
-param=early-inlining-insns=Common Joined UInteger Var(param_early_inlining_insns) Init(6) Optimization ParamMaximal estimated growth of function body caused by early inlining of single call.
-param=fsm-maximum-phi-arguments=Common Joined UInteger Var(param_fsm_maximum_phi_arguments) Init(100) IntegerRange(1, 999999) Param OptimizationMaximum number of arguments a PHI may have before the FSM threader will not try to thread through its block.
-param=fsm-scale-path-blocks=Common Joined UInteger Var(param_fsm_scale_path_blocks) Init(3) IntegerRange(1, 10) Param OptimizationScale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.
-param=fsm-scale-path-stmts=Common Joined UInteger Var(param_fsm_scale_path_stmts) Init(2) IntegerRange(1, 10) Param OptimizationScale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.
-param=gcse-after-reload-critical-fraction=Common Joined UInteger Var(param_gcse_after_reload_critical_fraction) Init(10) Param OptimizationThe threshold ratio of critical edges execution count that permit performing redundancy elimination after reload.
-param=gcse-after-reload-partial-fraction=Common Joined UInteger Var(param_gcse_after_reload_partial_fraction) Init(3) Param OptimizationThe threshold ratio for performing partial redundancy elimination after reload.
-param=gcse-cost-distance-ratio=Common Joined UInteger Var(param_gcse_cost_distance_ratio) Init(10) Param OptimizationScaling factor in calculation of maximum distance an expression can be moved by GCSE optimizations.
-param=gcse-unrestricted-cost=Common Joined UInteger Var(param_gcse_unrestricted_cost) Init(3) Param OptimizationCost at which GCSE optimizations will not constraint the distance an expression can travel.
-param=ggc-min-expand=Common Joined UInteger Var(param_ggc_min_expand) Init(30) ParamMinimum heap expansion to trigger garbage collection, as a percentage of the total size of the heap.
-param=ggc-min-heapsize=Common Joined UInteger Var(param_ggc_min_heapsize) Init(4096) ParamMinimum heap size before we start collecting garbage, in kilobytes.
-param=gimple-fe-computed-hot-bb-threshold=Common Joined UInteger Var(param_gimple_fe_computed_hot_bb_threshold) ParamThe number of executions of a basic block which is considered hot. The parameter is used only in GIMPLE FE.
-param=graphite-allow-codegen-errors=Common Joined UInteger Var(param_graphite_allow_codegen_errors) IntegerRange(0, 1) ParamWhether codegen errors should be ICEs when -fchecking.
-param=graphite-max-arrays-per-scop=Common Joined UInteger Var(param_graphite_max_arrays_per_scop) Init(100) Param OptimizationMaximum number of arrays per SCoP.
-param=graphite-max-nb-scop-params=Common Joined UInteger Var(param_graphite_max_nb_scop_params) Init(10) Param OptimizationMaximum number of parameters in a SCoP.
-param=hash-table-verification-limit=Common Joined UInteger Var(param_hash_table_verification_limit) Init(10) ParamThe number of elements for which hash table verification is done for each searched element.
-param=hot-bb-count-fraction=Common Joined UInteger Var(param_hot_bb_count_fraction) Init(10000) ParamThe denominator n of fraction 1/n of the maximal execution count of a basic block in the entire program that a basic block needs to at least have in order to be considered hot (used in non-LTO mode).
-param=hot-bb-count-ws-permille=Common Joined UInteger Var(param_hot_bb_count_ws_permille) Init(990) IntegerRange(0, 1000) ParamThe number of most executed permilles of the profiled execution of the entire program to which the execution count of a basic block must be part of in order to be considered hot (used in LTO mode).
-param=hot-bb-frequency-fraction=Common Joined UInteger Var(param_hot_bb_frequency_fraction) Init(1000) ParamThe denominator n of fraction 1/n of the execution frequency of the entry block of a function that a basic block of this function needs to at least have in order to be considered hot.
-param=hsa-gen-debug-stores=Common Joined UInteger Var(param_hsa_gen_debug_stores) IntegerRange(0, 1) ParamLevel of hsa debug stores verbosity.
-param=inline-heuristics-hint-percent=Common Joined UInteger Var(param_inline_heuristics_hint_percent) Init(200) Optimization IntegerRange(100, 1000000) ParamThe scale (in percents) applied to inline-insns-single and auto limits when heuristics hints that inlining is very profitable.
-param=inline-min-speedup=Common Joined UInteger Var(param_inline_min_speedup) Init(30) Optimization IntegerRange(0, 100) ParamThe minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.
-param=inline-unit-growth=Common Joined UInteger Var(param_inline_unit_growth) Init(40) Optimization ParamHow much can given compilation unit grow because of the inlining (in percent).
-param=integer-share-limit=Common Joined UInteger Var(param_integer_share_limit) Init(251) IntegerRange(2, 65536) ParamThe upper bound for sharing integer constants.
-param=ipa-cp-eval-threshold=Common Joined UInteger Var(param_ipa_cp_eval_threshold) Init(500) Param OptimizationThreshold ipa-cp opportunity evaluation that is still considered beneficial to clone.
-param=ipa-cp-loop-hint-bonus=Common Joined UInteger Var(param_ipa_cp_loop_hint_bonus) Init(64) Param OptimizationCompile-time bonus IPA-CP assigns to candidates which make loop bounds or strides known.
-param=ipa-cp-max-recursive-depth=Common Joined UInteger Var(param_ipa_cp_max_recursive_depth) Init(8) Param OptimizationMaximum depth of recursive cloning for self-recursive function.
-param=ipa-cp-min-recursive-probability=Common Joined UInteger Var(param_ipa_cp_min_recursive_probability) Init(2) Param OptimizationRecursive cloning only when the probability of call being executed exceeds the parameter.
-param=ipa-cp-recursion-penalty=Common Joined UInteger Var(param_ipa_cp_recursion_penalty) Init(40) IntegerRange(0, 100) Param OptimizationPercentage penalty the recursive functions will receive when they are evaluated for cloning.
-param=ipa-cp-single-call-penalty=Common Joined UInteger Var(param_ipa_cp_single_call_penalty) Init(15) IntegerRange(0, 100) Param OptimizationPercentage penalty functions containing a single call to another function will receive when they are evaluated for cloning.
-param=ipa-cp-unit-growth=Common Joined UInteger Var(param_ipa_cp_unit_growth) Init(10) Param OptimizationHow much can given compilation unit grow because of the interprocedural constant propagation (in percent).
-param=ipa-cp-value-list-size=Common Joined UInteger Var(param_ipa_cp_value_list_size) Init(8) Param OptimizationMaximum size of a list of values associated with each parameter for interprocedural constant propagation.
-param=ipa-max-aa-steps=Common Joined UInteger Var(param_ipa_max_aa_steps) Init(25000) Param OptimizationMaximum number of statements that will be visited by IPA formal parameter analysis based on alias analysis in any given function.
-param=ipa-max-agg-items=Common Joined UInteger Var(param_ipa_max_agg_items) Init(16) Param OptimizationMaximum number of aggregate content items for a parameter in jump functions and lattices.
-param=ipa-max-param-expr-ops=Common Joined UInteger Var(param_ipa_max_param_expr_ops) Init(10) Param OptimizationMaximum number of operations in a parameter expression that can be handled by IPA analysis.
-param=ipa-max-switch-predicate-bounds=Common Joined UInteger Var(param_ipa_max_switch_predicate_bounds) Init(5) Param OptimizationMaximal number of boundary endpoints of case ranges of switch statement used during IPA function summary generation.
-param=ipa-sra-max-replacements=Common Joined UInteger Var(param_ipa_sra_max_replacements) Optimization Init(8) IntegerRange(0, 16) ParamMaximum pieces that IPA-SRA tracks per formal parameter, as a consequence, also the maximum number of replacements of a formal parameter.
-param=ipa-sra-ptr-growth-factor=Common Joined UInteger Var(param_ipa_sra_ptr_growth_factor) Init(2) Param OptimizationMaximum allowed growth of number and total size of new parameters that ipa-sra replaces a pointer to an aggregate with.
-param=ira-loop-reserved-regs=Common Joined UInteger Var(param_ira_loop_reserved_regs) Init(2) Param OptimizationThe number of registers in each class kept unused by loop invariant motion.
-param=ira-max-conflict-table-size=Common Joined UInteger Var(param_ira_max_conflict_table_size) Init(1000) Param OptimizationMax size of conflict table in MB.
-param=ira-max-loops-num=Common Joined UInteger Var(param_ira_max_loops_num) Init(100) Param OptimizationMax loops number for regional RA.
-param=iv-always-prune-cand-set-bound=Common Joined UInteger Var(param_iv_always_prune_cand_set_bound) Init(10) Param OptimizationIf number of candidates in the set is smaller, we always try to remove unused ivs during its optimization.
-param=iv-consider-all-candidates-bound=Common Joined UInteger Var(param_iv_consider_all_candidates_bound) Init(40) Param OptimizationBound on number of candidates below that all candidates are considered in iv optimizations.
-param=iv-max-considered-uses=Common Joined UInteger Var(param_iv_max_considered_uses) Init(250) Param OptimizationBound on number of iv uses in loop optimized in iv optimizations.
-param=jump-table-max-growth-ratio-for-size=Common Joined UInteger Var(param_jump_table_max_growth_ratio_for_size) Init(300) Param OptimizationThe maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for size.
-param=jump-table-max-growth-ratio-for-speed=Common Joined UInteger Var(param_jump_table_max_growth_ratio_for_speed) Init(800) Param OptimizationThe maximum code size growth ratio when expanding into a jump table (in percent).  The parameter is used when optimizing for speed.
-param=l1-cache-line-size=Common Joined UInteger Var(param_l1_cache_line_size) Init(32) Param OptimizationThe size of L1 cache line.
-param=l1-cache-size=Common Joined UInteger Var(param_l1_cache_size) Init(64) Param OptimizationThe size of L1 cache.
-param=l2-cache-size=Common Joined UInteger Var(param_l2_cache_size) Init(512) Param OptimizationThe size of L2 cache.
-param=large-function-growth=Common Joined UInteger Var(param_large_function_growth) Optimization Init(100) ParamMaximal growth due to inlining of large function (in percent).
-param=large-function-insns=Common Joined UInteger Var(param_large_function_insns) Optimization Init(2700) ParamThe size of function body to be considered large.
-param=large-stack-frame-growth=Common Joined UInteger Var(param_stack_frame_growth) Optimization Init(1000) ParamMaximal stack frame growth due to inlining (in percent).
-param=large-stack-frame=Common Joined UInteger Var(param_large_stack_frame) Init(256) Optimization ParamThe size of stack frame to be considered large.
-param=large-unit-insns=Common Joined UInteger Var(param_large_unit_insns) Optimization Init(10000) ParamThe size of translation unit to be considered large.
-param=lim-expensive=Common Joined UInteger Var(param_lim_expensive) Init(20) Param OptimizationThe minimum cost of an expensive expression in the loop invariant motion.
-param=logical-op-non-short-circuit=Common Joined UInteger Var(param_logical_op_non_short_circuit) Init(-1) IntegerRange(-1, 1) ParamTrue if a non-short-circuit operation is optimal.
-param=loop-block-tile-size=Common Joined UInteger Var(param_loop_block_tile_size) Init(51) Param OptimizationSize of tiles for loop blocking.
-param=loop-interchange-max-num-stmts=Common Joined UInteger Var(param_loop_interchange_max_num_stmts) Init(64) Param OptimizationThe maximum number of stmts in loop nest for loop interchange.
-param=loop-interchange-stride-ratio=Common Joined UInteger Var(param_loop_interchange_stride_ratio) Init(2) Param OptimizationThe minimum stride ratio for loop interchange to be profitable.
-param=loop-invariant-max-bbs-in-loop=Common Joined UInteger Var(param_loop_invariant_max_bbs_in_loop) Init(10000) Param OptimizationMax basic blocks number in loop for loop invariant motion.
-param=loop-max-datarefs-for-datadeps=Common Joined UInteger Var(param_loop_max_datarefs_for_datadeps) Init(1000) Param OptimizationMaximum number of datarefs in loop for building loop data dependencies.
-param=loop-versioning-max-inner-insns=Common Joined UInteger Var(param_loop_versioning_max_inner_insns) Init(200) Param OptimizationThe maximum number of instructions in an inner loop that is being considered for versioning.
-param=loop-versioning-max-outer-insns=Common Joined UInteger Var(param_loop_versioning_max_outer_insns) Init(100) Param OptimizationThe maximum number of instructions in an outer loop that is being considered for versioning, on top of the instructions in inner loops.
-param=lra-inheritance-ebb-probability-cutoff=Common Joined UInteger Var(param_lra_inheritance_ebb_probability_cutoff) Init(40) IntegerRange(0, 100) Param OptimizationMinimal fall-through edge probability in percentage used to add BB to inheritance EBB in LRA.
-param=lra-max-considered-reload-pseudos=Common Joined UInteger Var(param_lra_max_considered_reload_pseudos) Init(500) Param OptimizationThe max number of reload pseudos which are considered during spilling a non-reload pseudo.
-param=lto-max-partition=Common Joined UInteger Var(param_max_partition_size) Init(1000000) ParamMaximal size of a partition for LTO (in estimated instructions).
-param=lto-max-streaming-parallelism=Common Joined UInteger Var(param_max_lto_streaming_parallelism) Init(32) IntegerRange(1, 65536) Parammaximal number of LTO partitions streamed in parallel.
-param=lto-min-partition=Common Joined UInteger Var(param_min_partition_size) Init(10000) ParamMinimal size of a partition for LTO (in estimated instructions).
-param=lto-partitions=Common Joined UInteger Var(param_lto_partitions) Init(128) IntegerRange(1, 65536) ParamNumber of partitions the program should be split to.
-param=max-average-unrolled-insns=Common Joined UInteger Var(param_max_average_unrolled_insns) Init(80) Param OptimizationThe maximum number of instructions to consider to unroll in a loop on average.
-param=max-combine-insns=Common Joined UInteger Var(param_max_combine_insns) Init(4) IntegerRange(2, 4) Param OptimizationThe maximum number of insns combine tries to combine.
-param=max-completely-peel-loop-nest-depth=Common Joined UInteger Var(param_max_unroll_iterations) Init(8) Param OptimizationThe maximum depth of a loop nest we completely peel.
-param=max-completely-peel-times=Common Joined UInteger Var(param_max_completely_peel_times) Init(16) Param OptimizationThe maximum number of peelings of a single loop that is peeled completely.
-param=max-completely-peeled-insns=Common Joined UInteger Var(param_max_completely_peeled_insns) Init(200) Param OptimizationThe maximum number of insns of a completely peeled loop.
-param=max-crossjump-edges=Common Joined UInteger Var(param_max_crossjump_edges) Init(100) Param OptimizationThe maximum number of incoming edges to consider for crossjumping.
-param=max-cse-insns=Common Joined UInteger Var(param_max_cse_insns) Init(1000) Param OptimizationThe maximum instructions CSE process before flushing.
-param=max-cse-path-length=Common Joined UInteger Var(param_max_cse_path_length) Init(10) IntegerRange(1, 65536) Param OptimizationThe maximum length of path considered in cse.
-param=max-cselib-memory-locations=Common Joined UInteger Var(param_max_cselib_memory_locations) Init(500) Param OptimizationThe maximum memory locations recorded by cselib.
-param=max-debug-marker-count=Common Joined UInteger Var(param_max_debug_marker_count) Init(100000) Param OptimizationMax. count of debug markers to expand or inline.
-param=max-delay-slot-insn-search=Common Joined UInteger Var(param_max_delay_slot_insn_search) Init(100) Param OptimizationThe maximum number of instructions to consider to fill a delay slot.
-param=max-delay-slot-live-search=Common Joined UInteger Var(param_max_delay_slot_live_search) Init(333) Param OptimizationThe maximum number of instructions to consider to find accurate live register information.
-param=max-dse-active-local-stores=Common Joined UInteger Var(param_max_dse_active_local_stores) Init(5000) Param OptimizationMaximum number of active local stores in RTL dead store elimination.
-param=max-early-inliner-iterations=Common Joined UInteger Var(param_early_inliner_max_iterations) Init(1) Param OptimizationThe maximum number of nested indirect inlining performed by early inliner.
-param=max-fields-for-field-sensitive=Common Joined UInteger Var(param_max_fields_for_field_sensitive) ParamMaximum number of fields in a structure before pointer analysis treats the structure as a single variable.
-param=max-find-base-term-values=Common Joined UInteger Var(param_max_find_base_term_values) Init(200) Param OptimizationMaximum number of VALUEs handled during a single find_base_term call.
-param=max-fsm-thread-length=Common Joined UInteger Var(param_max_fsm_thread_length) Init(10) IntegerRange(1, 999999) Param OptimizationMaximum number of basic blocks on a finite state automaton jump thread path.
-param=max-fsm-thread-path-insns=Common Joined UInteger Var(param_max_fsm_thread_path_insns) Init(100) IntegerRange(1, 999999) Param OptimizationMaximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.
-param=max-fsm-thread-paths=Common Joined UInteger Var(param_max_fsm_thread_paths) Init(50) IntegerRange(1, 999999) Param OptimizationMaximum number of new jump thread paths to create for a finite state automaton.
-param=max-gcse-insertion-ratio=Common Joined UInteger Var(param_max_gcse_insertion_ratio) Init(20) Param OptimizationThe maximum ratio of insertions to deletions of expressions in GCSE.
-param=max-gcse-memory=Common Joined UInteger Var(param_max_gcse_memory) Init(134217728) Param OptimizationThe maximum amount of memory to be allocated by GCSE.
-param=max-goto-duplication-insns=Common Joined UInteger Var(param_max_goto_duplication_insns) Init(8) Param OptimizationThe maximum number of insns to duplicate when unfactoring computed gotos.
-param=max-grow-copy-bb-insns=Common Joined UInteger Var(param_max_grow_copy_bb_insns) Init(8) Param OptimizationThe maximum expansion factor when copying basic blocks.
-param=max-hoist-depth=Common Joined UInteger Var(param_max_hoist_depth) Init(30) Param OptimizationMaximum depth of search in the dominator tree for expressions to hoist.
-param=max-inline-insns-auto=Common Joined UInteger Var(param_max_inline_insns_auto) Init(15) Optimization ParamThe maximum number of instructions when automatically inlining.
-param=max-inline-insns-recursive-auto=Common Joined UInteger Var(param_max_inline_insns_recursive_auto) Optimization Init(450) ParamThe maximum number of instructions non-inline function can grow to via recursive inlining.
-param=max-inline-insns-recursive=Common Joined UInteger Var(param_max_inline_insns_recursive) Optimization Init(450) ParamThe maximum number of instructions inline function can grow to via recursive inlining.
-param=max-inline-insns-single=Common Joined UInteger Var(param_max_inline_insns_single) Optimization Init(70) ParamThe maximum number of instructions in a single function eligible for inlining.
-param=max-inline-insns-size=Common Joined UInteger Var(param_max_inline_insns_size) Optimization ParamThe maximum number of instructions when inlining for size.
-param=max-inline-insns-small=Common Joined UInteger Var(param_max_inline_insns_small) Optimization ParamThe maximum number of instructions when automatically inlining small functions.
-param=max-inline-recursive-depth-auto=Common Joined UInteger Var(param_max_inline_recursive_depth_auto) Optimization Init(8) ParamThe maximum depth of recursive inlining for non-inline functions.
-param=max-inline-recursive-depth=Common Joined UInteger Var(param_max_inline_recursive_depth) Optimization Init(8) ParamThe maximum depth of recursive inlining for inline functions.
-param=max-isl-operations=Common Joined UInteger Var(param_max_isl_operations) Init(350000) Param OptimizationMaximum number of isl operations, 0 means unlimited.
-param=max-iterations-computation-cost=Common Joined UInteger Var(param_max_iterations_computation_cost) Init(10) Param OptimizationBound on the cost of an expression to compute the number of iterations.
-param=max-iterations-to-track=Common Joined UInteger Var(param_max_iterations_to_track) Init(1000) Param OptimizationBound on the number of iterations the brute force # of iterations analysis algorithm evaluates.
-param=max-jump-thread-duplication-stmts=Common Joined UInteger Var(param_max_jump_thread_duplication_stmts) Init(15) Param OptimizationMaximum number of statements allowed in a block that needs to be duplicated when threading jumps.
-param=max-last-value-rtl=Common Joined UInteger Var(param_max_last_value_rtl) Init(10000) Param OptimizationThe maximum number of RTL nodes that can be recorded as combiner's last value.
-param=max-loop-header-insns=Common Joined UInteger Var(param_max_loop_header_insns) Init(20) Param OptimizationThe maximum number of insns in loop header duplicated by the copy loop headers pass.
-param=max-modulo-backtrack-attempts=Common Joined UInteger Var(param_max_modulo_backtrack_attempts) Init(40) Param OptimizationThe maximum number of backtrack attempts the scheduler should make when modulo scheduling a loop.
-param=max-partial-antic-length=Common Joined UInteger Var(param_max_partial_antic_length) Init(100) Param OptimizationMaximum length of partial antic set when performing tree pre optimization.
-param=max-peel-branches=Common Joined UInteger Var(param_max_peel_branches) Init(32) Param OptimizationThe maximum number of branches on the path through the peeled sequence.
-param=max-peel-times=Common Joined UInteger Var(param_max_peel_times) Init(16) Param OptimizationThe maximum number of peelings of a single loop.
-param=max-peeled-insns=Common Joined UInteger Var(param_max_peeled_insns) Init(100) Param OptimizationThe maximum number of insns of a peeled loop.
-param=max-pending-list-length=Common Joined UInteger Var(param_max_pending_list_length) Init(32) Param OptimizationThe maximum length of scheduling's pending operations list.
-param=max-pipeline-region-blocks=Common Joined UInteger Var(param_max_pipeline_region_blocks) Init(15) Param OptimizationThe maximum number of blocks in a region to be considered for interblock scheduling.
-param=max-pipeline-region-insns=Common Joined UInteger Var(param_max_pipeline_region_insns) Init(200) Param OptimizationThe maximum number of insns in a region to be considered for interblock scheduling.
-param=max-pow-sqrt-depth=Common Joined UInteger Var(param_max_pow_sqrt_depth) Init(5) IntegerRange(1, 32) Param OptimizationMaximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.
-param=max-predicted-iterations=Common Joined UInteger Var(param_max_predicted_iterations) Init(100) IntegerRange(0, 65536) Param OptimizationThe maximum number of loop iterations we predict statically.
-param=max-reload-search-insns=Common Joined UInteger Var(param_max_reload_search_insns) Init(100) Param OptimizationThe maximum number of instructions to search backward when looking for equivalent reload.
-param=max-rtl-if-conversion-insns=Common Joined UInteger Var(param_max_rtl_if_conversion_insns) Init(10) IntegerRange(0, 99) Param OptimizationMaximum number of insns in a basic block to consider for RTL if-conversion.
-param=max-rtl-if-conversion-predictable-cost=Common Joined UInteger Var(param_max_rtl_if_conversion_predictable_cost) Init(20) IntegerRange(0, 200) Param OptimizationMaximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered predictable.
-param=max-rtl-if-conversion-unpredictable-cost=Common Joined UInteger Var(param_max_rtl_if_conversion_unpredictable_cost) Init(40) IntegerRange(0, 200) Param OptimizationMaximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered unpredictable.
-param=max-sched-extend-regions-iters=Common Joined UInteger Var(param_max_sched_extend_regions_iters) Param OptimizationThe maximum number of iterations through CFG to extend regions.
-param=max-sched-insn-conflict-delay=Common Joined UInteger Var(param_max_sched_insn_conflict_delay) Init(3) IntegerRange(1, 10) Param OptimizationThe maximum conflict delay for an insn to be considered for speculative motion.
-param=max-sched-ready-insns=Common Joined UInteger Var(param_max_sched_ready_insns) Init(100) IntegerRange(1, 65536) Param OptimizationThe maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass.
-param=max-sched-region-blocks=Common Joined UInteger Var(param_max_sched_region_blocks) Init(10) Param OptimizationThe maximum number of blocks in a region to be considered for interblock scheduling.
-param=max-sched-region-insns=Common Joined UInteger Var(param_max_sched_region_insns) Init(100) Param OptimizationThe maximum number of insns in a region to be considered for interblock scheduling.
-param=max-slsr-cand-scan=Common Joined UInteger Var(param_max_slsr_candidate_scan) Init(50) IntegerRange(1, 999999) Param OptimizationMaximum length of candidate scans for straight-line strength reduction.
-param=max-speculative-devirt-maydefs=Common Joined UInteger Var(param_max_speculative_devirt_maydefs) Init(50) Param OptimizationMaximum number of may-defs visited when devirtualizing speculatively.
-param=max-ssa-name-query-depth=Common Joined UInteger Var(param_max_ssa_name_query_depth) Init(3) IntegerRange(1, 10) ParamMaximum recursion depth allowed when querying a property of an SSA name.
-param=max-stores-to-merge=Common Joined UInteger Var(param_max_stores_to_merge) Init(64) IntegerRange(2, 65536) Param OptimizationMaximum number of constant stores to merge in the store merging pass.
-param=max-stores-to-sink=Common Joined UInteger Var(param_max_stores_to_sink) Init(2) Param OptimizationMaximum number of conditional store pairs that can be sunk.
-param=max-tail-merge-comparisons=Common Joined UInteger Var(param_max_tail_merge_comparisons) Init(10) Param OptimizationMaximum amount of similar bbs to compare a bb with.
-param=max-tail-merge-iterations=Common Joined UInteger Var(param_max_tail_merge_iterations) Init(2) Param OptimizationMaximum amount of iterations of the pass over a function.
-param=max-tracked-strlens=Common Joined UInteger Var(param_max_tracked_strlens) Init(10000) Param OptimizationMaximum number of strings for which strlen optimization pass will track string lengths.
-param=max-tree-if-conversion-phi-args=Common Joined UInteger Var(param_max_tree_if_conversion_phi_args) Init(4) IntegerRange(2, 65536) Param OptimizationMaximum number of arguments in a PHI supported by TREE if-conversion unless the loop is marked with simd pragma.
-param=max-unroll-times=Common Joined UInteger Var(param_max_unroll_times) Init(8) Param OptimizationThe maximum number of unrollings of a single loop.
-param=max-unrolled-insns=Common Joined UInteger Var(param_max_unrolled_insns) Init(200) Param OptimizationThe maximum number of instructions to consider to unroll in a loop.
-param=max-unswitch-insns=Common Joined UInteger Var(param_max_unswitch_insns) Init(50) Param OptimizationThe maximum number of insns of an unswitched loop.
-param=max-unswitch-level=Common Joined UInteger Var(param_max_unswitch_level) Init(3) Param OptimizationThe maximum number of unswitchings in a single loop.
-param=max-variable-expansions-in-unroller=Common Joined UInteger Var(param_max_variable_expansions) Init(1) Param OptimizationIf -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling.
-param=max-vartrack-expr-depth=Common Joined UInteger Var(param_max_vartrack_expr_depth) Init(12) Param OptimizationMax. recursion depth for expanding var tracking expressions.
-param=max-vartrack-reverse-op-size=Common Joined UInteger Var(param_max_vartrack_reverse_op_size) Init(50) Param OptimizationMax. size of loc list for which reverse ops should be added.
-param=max-vartrack-size=Common Joined UInteger Var(param_max_vartrack_size) Init(50000000) Param OptimizationMax. size of var tracking hash tables.
-param=max-vrp-switch-assertions=Common Joined UInteger Var(param_max_vrp_switch_assertions) Init(10) Param OptimizationMaximum number of assertions to add along the default edge of a switch statement during VRP.
-param=min-crossjump-insns=Common Joined UInteger Var(param_min_crossjump_insns) Init(5) IntegerRange(1, 65536) Param OptimizationThe minimum number of matching instructions to consider for crossjumping.
-param=min-inline-recursive-probability=Common Joined UInteger Var(param_min_inline_recursive_probability) Init(10) Optimization ParamInline recursively only when the probability of call being executed exceeds the parameter.
-param=min-insn-to-prefetch-ratio=Common Joined UInteger Var(param_min_insn_to_prefetch_ratio) Init(9) Param OptimizationMin. ratio of insns to prefetches to enable prefetching for a loop with an unknown trip count.
-param=min-loop-cond-split-prob=Common Joined UInteger Var(param_min_loop_cond_split_prob) Init(30) IntegerRange(0, 100) Param OptimizationThe minimum threshold for probability of semi-invariant condition statement to trigger loop split.
-param=min-nondebug-insn-uid=Common Joined UInteger Var(param_min_nondebug_insn_uid) ParamThe minimum UID to be used for a nondebug insn.
-param=min-size-for-stack-sharing=Common Joined UInteger Var(param_min_size_for_stack_sharing) Init(32) Param OptimizationThe minimum size of variables taking part in stack slot sharing when not optimizing.
-param=min-spec-prob=Common Joined UInteger Var(param_min_spec_prob) Init(40) Param OptimizationThe minimum probability of reaching a source block for interblock speculative scheduling.
-param=min-vect-loop-bound=Common Joined UInteger Var(param_min_vect_loop_bound) Param OptimizationIf -ftree-vectorize is used, the minimal loop bound of a loop to be considered for vectorization.
-param=parloops-chunk-size=Common Joined UInteger Var(param_parloops_chunk_size) Param OptimizationChunk size of omp schedule for loops parallelized by parloops.
-param=parloops-min-per-thread=Common Joined UInteger Var(param_parloops_min_per_thread) Init(100) IntegerRange(2, 65536) Param OptimizationMinimum number of iterations per thread of an innermost parallelized loop.
-param=parloops-schedule=Common Joined Var(param_parloops_schedule) Enum(parloops_schedule_type) Param Optimization--param=parloops-schedule=[static|dynamic|guided|auto|runtime]	Schedule type of omp schedule for loops parallelized by parloops.
-param=partial-inlining-entry-probability=Common Joined UInteger Var(param_partial_inlining_entry_probability) Init(70) Optimization IntegerRange(0, 100) ParamMaximum probability of the entry BB of split region (in percent relative to entry BB of the function) to make partial inlining happen.
-param=predictable-branch-outcome=Common Joined UInteger Var(param_predictable_branch_outcome) Init(2) IntegerRange(0, 50) Param OptimizationMaximal estimated outcome of branch considered predictable.
-param=prefetch-dynamic-strides=Common Joined UInteger Var(param_prefetch_dynamic_strides) Init(1) IntegerRange(0, 1) Param OptimizationWhether software prefetch hints should be issued for non-constant strides.
-param=prefetch-latency=Common Joined UInteger Var(param_prefetch_latency) Init(200) Param OptimizationThe number of insns executed before prefetch is completed.
-param=prefetch-min-insn-to-mem-ratio=Common Joined UInteger Var(param_prefetch_min_insn_to_mem_ratio) Init(3) Param OptimizationMin. ratio of insns to mem ops to enable prefetching in a loop.
-param=prefetch-minimum-stride=Common Joined UInteger Var(param_prefetch_minimum_stride) Init(-1) Param OptimizationThe minimum constant stride beyond which we should use prefetch hints for.
-param=profile-func-internal-id=Common Joined UInteger Var(param_profile_func_internal_id) IntegerRange(0, 1) ParamUse internal function id in profile lookup.
-param=rpo-vn-max-loop-depth=Common Joined UInteger Var(param_rpo_vn_max_loop_depth) Init(7) IntegerRange(2, 65536) Param OptimizationMaximum depth of a loop nest to fully value-number optimistically.
-param=sccvn-max-alias-queries-per-access=Common Joined UInteger Var(param_sccvn_max_alias_queries_per_access) Init(1000) Param OptimizationMaximum number of disambiguations to perform per memory access.
-param=scev-max-expr-complexity=Common Joined UInteger Var(param_scev_max_expr_complexity) Init(10) Param OptimizationBound on the complexity of the expressions in the scalar evolutions analyzer.
-param=scev-max-expr-size=Common Joined UInteger Var(param_scev_max_expr_size) Init(100) Param OptimizationBound on size of expressions used in the scalar evolutions analyzer.
-param=sched-autopref-queue-depth=Common Joined UInteger Var(param_sched_autopref_queue_depth) Init(-1) Param OptimizationHardware autoprefetcher scheduler model control flag.  Number of lookahead cycles the model looks into, at '0' only enable instruction sorting heuristic.  Disabled by default.
-param=sched-mem-true-dep-cost=Common Joined UInteger Var(param_sched_mem_true_dep_cost) Init(1) Param OptimizationMinimal distance between possibly conflicting store and load.
-param=sched-pressure-algorithm=Common Joined UInteger Var(param_sched_pressure_algorithm) Init(1) IntegerRange(1, 2) Param OptimizationWhich -fsched-pressure algorithm to apply.
-param=sched-spec-prob-cutoff=Common Joined UInteger Var(param_sched_spec_prob_cutoff) Init(40) IntegerRange(0, 100) Param OptimizationThe minimal probability of speculation success (in percents), so that speculative insn will be scheduled.
-param=sched-state-edge-prob-cutoff=Common Joined UInteger Var(param_sched_state_edge_prob_cutoff) Init(10) IntegerRange(0, 100) Param OptimizationThe minimum probability an edge must have for the scheduler to save its state across it.
-param=selsched-insns-to-rename=Common Joined UInteger Var(param_selsched_insns_to_rename) Init(2) Param OptimizationMaximum number of instructions in the ready list that are considered eligible for renaming.
-param=selsched-max-lookahead=Common Joined UInteger Var(param_selsched_max_lookahead) Init(50) Param OptimizationThe maximum size of the lookahead window of selective scheduling.
-param=selsched-max-sched-times=Common Joined UInteger Var(param_selsched_max_sched_times) Init(2) IntegerRange(1, 65536) Param OptimizationMaximum number of times that an insn could be scheduled.
-param=simultaneous-prefetches=Common Joined UInteger Var(param_simultaneous_prefetches) Init(3) Param OptimizationThe number of prefetches that can run at the same time.
-param=sink-frequency-threshold=Common Joined UInteger Var(param_sink_frequency_threshold) Init(75) IntegerRange(0, 100) Param OptimizationTarget block's relative execution frequency (as a percentage) required to sink a statement.
-param=slp-max-insns-in-bb=Common Joined UInteger Var(param_slp_max_insns_in_bb) Init(1000) Param OptimizationMaximum number of instructions in basic block to be considered for SLP vectorization.
-param=sms-dfa-history=Common Joined UInteger Var(param_sms_dfa_history) IntegerRange(0, 16) Param OptimizationThe number of cycles the swing modulo scheduler considers when checking conflicts using DFA.
-param=sms-loop-average-count-threshold=Common Joined UInteger Var(param_sms_loop_average_count_threshold) Param OptimizationA threshold on the average loop count considered by the swing modulo scheduler.
-param=sms-max-ii-factor=Common Joined UInteger Var(param_sms_max_ii_factor) Init(2) IntegerRange(1, 16) Param OptimizationA factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop.
-param=sms-min-sc=Common Joined UInteger Var(param_sms_min_sc) Init(2) IntegerRange(1, 2) Param OptimizationThe minimum value of stage count that swing modulo scheduler will generate.
-param=sra-max-propagations=Common Joined UInteger Var(param_sra_max_propagations) Param Optimization Init(32)Maximum number of artificial accesses to enable forward propagation that Scalar Replacement of Aggregates will keep for one local variable.
-param=sra-max-scalarization-size-Osize=Common Joined UInteger Var(param_sra_max_scalarization_size_size) Param OptimizationMaximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for size.
-param=sra-max-scalarization-size-Ospeed=Common Joined UInteger Var(param_sra_max_scalarization_size_speed) Param OptimizationMaximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for speed.
-param=ssa-name-def-chain-limit=Common Joined UInteger Var(param_ssa_name_def_chain_limit) Init(512) Param OptimizationThe maximum number of SSA_NAME assignments to follow in determining a value.
-param=ssp-buffer-size=Common Joined UInteger Var(param_ssp_buffer_size) Init(8) IntegerRange(1, 65536) Param OptimizationThe lower bound for a buffer to be considered for stack smashing protection.
-param=stack-clash-protection-guard-size=Common Joined UInteger Var(param_stack_clash_protection_guard_size) Init(12) IntegerRange(12, 30) Param OptimizationSize of the stack guard expressed as a power of two in bytes.
-param=stack-clash-protection-probe-interval=Common Joined UInteger Var(param_stack_clash_protection_probe_interval) Init(12) IntegerRange(10, 16) Param OptimizationInterval in which to probe the stack expressed as a power of two in bytes.
-param=store-merging-allow-unaligned=Common Joined UInteger Var(param_store_merging_allow_unaligned) Init(1) IntegerRange(0, 1) Param OptimizationAllow the store merging pass to introduce unaligned stores if it is legal to do so.
-param=store-merging-max-size=Common Joined UInteger Var(param_store_merging_max_size) Init(65536) IntegerRange(1, 65536) Param OptimizationMaximum size of a single store merging region in bytes.
-param=switch-conversion-max-branch-ratio=Common Joined UInteger Var(param_switch_conversion_branch_ratio) Init(8) IntegerRange(1, 65536) Param OptimizationThe maximum ratio between array size and switch branches for a switch conversion to take place.
-param=tm-max-aggregate-size=Common Joined UInteger Var(param_tm_max_aggregate_size) Init(9) Param OptimizationSize in bytes after which thread-local aggregates should be instrumented with the logging functions instead of save/restore pairs.
-param=tracer-dynamic-coverage-feedback=Common Joined UInteger Var(param_tracer_dynamic_coverage_feedback) Init(95) IntegerRange(0, 100) Param OptimizationThe percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is available.
-param=tracer-dynamic-coverage=Common Joined UInteger Var(param_tracer_dynamic_coverage) Init(75) IntegerRange(0, 100) Param OptimizationThe percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is not available.
-param=tracer-max-code-growth=Common Joined UInteger Var(param_tracer_max_code_growth) Init(100) Param OptimizationMaximal code growth caused by tail duplication (in percent).
-param=tracer-min-branch-probability-feedback=Common Joined UInteger Var(param_tracer_min_branch_probability_feedback) Init(80) IntegerRange(0, 100) Param OptimizationStop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is available.
-param=tracer-min-branch-probability=Common Joined UInteger Var(param_tracer_min_branch_probability) Init(50) IntegerRange(0, 100) Param OptimizationStop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is not available.
-param=tracer-min-branch-ratio=Common Joined UInteger Var(param_tracer_min_branch_ratio) Init(10) IntegerRange(0, 100) Param OptimizationStop reverse growth if the reverse probability of best edge is less than this threshold (in percent).
-param=tree-reassoc-width=Common Joined UInteger Var(param_tree_reassoc_width) Param OptimizationSet the maximum number of instructions executed in parallel in reassociated tree.  If 0, use the target dependent heuristic.
-param=uninit-control-dep-attempts=Common Joined UInteger Var(param_uninit_control_dep_attempts) Init(1000) IntegerRange(1, 65536) Param OptimizationMaximum number of nested calls to search for control dependencies during uninitialized variable analysis.
-param=uninlined-function-insns=Common Joined UInteger Var(param_uninlined_function_insns) Init(2) Optimization IntegerRange(0, 1000000) ParamInstruction accounted for function prologue, epilogue and other overhead.
-param=uninlined-function-time=Common Joined UInteger Var(param_uninlined_function_time) Optimization IntegerRange(0, 1000000) ParamTime accounted for function prologue, epilogue and other overhead.
-param=uninlined-thunk-insns=Common Joined UInteger Var(param_uninlined_function_thunk_insns) Optimization Init(2) IntegerRange(0, 1000000) ParamInstruction accounted for function thunk overhead.
-param=uninlined-thunk-time=Common Joined UInteger Var(param_uninlined_function_thunk_time) Optimization Init(2) IntegerRange(0, 1000000) ParamTime accounted for function thunk overhead.
-param=unlikely-bb-count-fraction=Common Joined UInteger Var(param_unlikely_bb_count_fraction) Init(20) Param OptimizationThe denominator n of fraction 1/n of the number of profiled runs of the entire program below which the execution count of a basic block must be in order for the basic block to be considered unlikely.
-param=unroll-jam-max-unroll=Common Joined UInteger Var(param_unroll_jam_max_unroll) Init(4) Param OptimizationMaximum unroll factor for the unroll-and-jam transformation.
-param=unroll-jam-min-percent=Common Joined UInteger Var(param_unroll_jam_min_percent) Init(1) IntegerRange(0, 100) Param OptimizationMinimum percentage of memrefs that must go away for unroll-and-jam to be considered profitable.
-param=use-after-scope-direct-emission-threshold=Common Joined UInteger Var(param_use_after_scope_direct_emission_threshold) Init(256) Param OptimizationUse direct poisoning/unpoisoning instructions for variables smaller or equal to this number.
-param=use-canonical-types=Common Joined UInteger Var(param_use_canonical_types) Init(1) IntegerRange(0, 1) ParamWhether to use canonical types.
-param=vect-epilogues-nomask=Common Joined UInteger Var(param_vect_epilogues_nomask) Init(1) IntegerRange(0, 1) Param OptimizationEnable loop epilogue vectorization using smaller vector size.
-param=vect-max-peeling-for-alignment=Common Joined UInteger Var(param_vect_max_peeling_for_alignment) Init(-1) IntegerRange(-1, 64) Param OptimizationMaximum number of loop peels to enhance alignment of data references in a loop.
-param=vect-max-version-for-alias-checks=Common Joined UInteger Var(param_vect_max_version_for_alias_checks) Init(10) Param OptimizationBound on number of runtime checks inserted by the vectorizer's loop versioning for alias check.
-param=vect-max-version-for-alignment-checks=Common Joined UInteger Var(param_vect_max_version_for_alignment_checks) Init(6) Param OptimizationBound on number of runtime checks inserted by the vectorizer's loop versioning for alignment check.
-pass-exit-codesDriver Alias(pass-exit-codes)
-pedanticC ObjC C++ ObjC++ Alias(pedantic)
-pedanticCommon Alias(Wpedantic)
-pedantic-errorsCommon Alias(pedantic-errors)
-pieDriver Alias(pie)
-pipeDriver Alias(pipe)
-prefixDriver Separate Alias(B)
-prefix=Driver JoinedOrMissing Alias(B)
-preprocessC ObjC C++ ObjC++ Undocumented Alias(E)
-preprocessDriver Alias(E)
-preprocessFortran Undocumented Alias(E)
-print-file-nameDriver Separate Alias(print-file-name=)
-print-file-name=Driver JoinedOrMissing Alias(print-file-name=)
-print-libgcc-file-nameDriver Alias(print-libgcc-file-name)
-print-missing-file-dependenciesC ObjC C++ ObjC++ Alias(MG)
-print-missing-file-dependenciesD Alias(MG)
-print-missing-file-dependenciesFortran Alias(MG)
-print-multi-directoryDriver Alias(print-multi-directory)
-print-multi-libDriver Alias(print-multi-lib)
-print-multi-os-directoryDriver Alias(print-multi-os-directory)
-print-multiarchDriver Alias(print-multiarch)
-print-prog-nameDriver Separate Alias(print-prog-name=)
-print-prog-name=Driver JoinedOrMissing Alias(print-prog-name=)
-print-search-dirsDriver Alias(print-search-dirs)
-print-sysrootDriver Alias(print-sysroot)
-print-sysroot-headers-suffixDriver Alias(print-sysroot-headers-suffix)
-profileCommon Alias(p)
-save-tempsDriver Alias(save-temps)
-sharedDriver Alias(shared)
-specsDriver Separate Alias(specs=)
-specs=Driver Joined Alias(specs=)
-staticDriver Alias(static)
-static-pieDriver Alias(static-pie)
-symbolicDriver Alias(symbolic)
-sysrootDriver Separate Alias(-sysroot=)
-sysroot=Driver JoinedOrMissing
-target-helpCommon DriverAlias for --help=target.
-timeDriver Alias(time)
-trace-includesC ObjC C++ ObjC++ Alias(H)
-trace-includesFortran Alias(H)
-traditionalDriver Alias(traditional)
-traditional-cppC ObjC C++ ObjC++ Alias(traditional-cpp)
-trigraphsC ObjC C++ ObjC++ Alias(trigraphs)
-undefine-macroC ObjC C++ ObjC++ Separate Alias(U) MissingArgError(macro name missing after %qs)
-undefine-macroFortran Separate Alias(U)
-undefine-macro=C ObjC C++ ObjC++ Joined Alias(U) MissingArgError(macro name missing after %qs)
-undefine-macro=Fortran Joined Alias(U)
-user-dependenciesC ObjC C++ ObjC++ Alias(MM)
-user-dependenciesD Alias(MM)
-user-dependenciesFortran Alias(MM)
-verboseCommon C ObjC C++ ObjC++ Alias(v)
-verboseD Alias(v)
-verboseDriver Alias(v)
-verboseFortran Alias(v)
-versionCommon Driver
-write-dependenciesC ObjC C++ ObjC++ NoDriverArg Separate Alias(MD) MissingArgError(missing filename after %qs)
-write-dependenciesD NoDriverArg Separate Alias(MD)
-write-dependenciesFortran NoDriverArg Separate Alias(MD)
-write-user-dependenciesC ObjC C++ ObjC++ NoDriverArg Separate Alias(MMD) MissingArgError(missing filename after %qs)
-write-user-dependenciesD NoDriverArg Separate Alias(MMD)
-write-user-dependenciesFortran NoDriverArg Separate Alias(MMD)
AC ObjC C++ ObjC++ Joined Separate MissingArgError(assertion missing after %qs)-A<question>=<answer>	Assert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>.
AFortran Joined Separate
BDriver Joined Separate
CC ObjC C++ ObjC++Do not discard comments.
CFortran
CCC ObjC C++ ObjC++Do not discard comments in macro expansions.
CCFortran
DC ObjC C++ ObjC++ Joined Separate MissingArgError(macro name missing after %qs)-D<macro>[=<val>]	Define a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1.
DFortran Joined Separate
EC ObjC C++ ObjC++ Undocumented Var(flag_preprocess_only)
EDriver
EFortran Undocumented
EnumName(bounds_check) Type(int) UnknownError(unknown array bounds setting %qs)
EnumName(cf_protection_level) Type(enum cf_protection_level) UnknownError(unknown Control-Flow Protection Level %qs)
EnumName(compressed_debug_sections) Type(int)
EnumName(cpp_normalize_level) Type(int) UnknownError(argument %qs to %<-Wnormalized%> not recognized)
EnumName(diagnostic_color_rule) Type(int)
EnumName(diagnostic_path_format) Type(int)
EnumName(diagnostic_prefixing_rule) Type(int)
EnumName(diagnostic_url_rule) Type(int)
EnumName(diagnostics_output_format) Type(int)
EnumName(dwarf_gnat_encodings) Type(int)
EnumName(excess_precision) Type(enum excess_precision) UnknownError(unknown excess precision style %qs)
EnumName(fp_contract_mode) Type(enum fp_contract_mode) UnknownError(unknown floating point contraction style %qs)
EnumName(gfc_convert) Type(enum gfc_convert) UnknownError(Unrecognized option to endianness value: %qs)
EnumName(gfc_fcoarray) Type(enum gfc_fcoarray) UnknownError(Unrecognized option: %qs)
EnumName(gfc_init_local_real) Type(enum gfc_init_local_real) UnknownError(Unrecognized option to floating-point init value: %qs)
EnumName(ira_algorithm) Type(enum ira_algorithm) UnknownError(unknown IRA algorithm %qs)
EnumName(ira_region) Type(enum ira_region) UnknownError(unknown IRA region %qs)
EnumName(ivar_visibility) Type(enum ivar_visibility) UnknownError(unrecognized ivar visibility value %qs)
EnumName(live_patching_level) Type(enum live_patching_level) UnknownError(unknown Live-Patching Level %qs)
EnumName(lto_linker_output) Type(enum lto_linker_output) UnknownError(unknown linker output %qs)
EnumName(lto_partition_model) Type(enum lto_partition_model) UnknownError(unknown LTO partitioning model %qs)
EnumName(m68k_isa) Type(int)Known M68K ISAs (for use with the -march= option):
EnumName(offload_abi) Type(enum offload_abi) UnknownError(unknown offload ABI %qs)
EnumName(parloops_schedule_type) Type(int)
EnumName(permitted_flt_eval_methods) Type(enum permitted_flt_eval_methods) UnknownError(unknown specification for the set of FLT_EVAL_METHOD values to permit %qs)
EnumName(profile_reproducibility) Type(enum profile_reproducibility) UnknownError(unknown profile reproducibility method %qs)
EnumName(profile_update) Type(enum profile_update) UnknownError(unknown profile update method %qs)
EnumName(reorder_blocks_algorithm) Type(enum reorder_blocks_algorithm) UnknownError(unknown basic block reordering algorithm %qs)
EnumName(sso_struct) Type(enum scalar_storage_order_kind) UnknownError(unrecognized scalar storage order value %qs)
EnumName(stack_reuse_level) Type(enum stack_reuse_level) UnknownError(unknown Stack Reuse Level %qs)
EnumName(strong_eval_order) Type(int)
EnumName(symbol_visibility) Type(enum symbol_visibility) UnknownError(unrecognized visibility value %qs)
EnumName(target_device) Type(enum target_device)Known M68K CPUs (for use with the -mcpu= option):
EnumName(tls_model) Type(enum tls_model) UnknownError(unknown TLS model %qs)
EnumName(uarch_type) Type(enum uarch_type)Known M68K microarchitectures (for use with the -mtune= option):
EnumName(vect_cost_model) Type(enum vect_cost_model) UnknownError(unknown vectorizer cost model %qs)
EnumName(vtv_priority) Type(enum vtv_priority) UnknownError(unknown vtable verify initialization priority %qs)
EnumName(warn_aligned_new_level) Type(int) UnknownError(argument %qs to %<-Waligned-new%> not recognized)
EnumValueEnum(bounds_check) String(off) Value(0)
EnumValueEnum(bounds_check) String(on) Value(2)
EnumValueEnum(bounds_check) String(safeonly) Value(1)
EnumValueEnum(cf_protection_level) String(branch) Value(CF_BRANCH)
EnumValueEnum(cf_protection_level) String(check) Value(CF_CHECK)
EnumValueEnum(cf_protection_level) String(full) Value(CF_FULL)
EnumValueEnum(cf_protection_level) String(none) Value(CF_NONE)
EnumValueEnum(cf_protection_level) String(return) Value(CF_RETURN)
EnumValueEnum(compressed_debug_sections) String(none) Value(0)
EnumValueEnum(compressed_debug_sections) String(zlib) Value(1)
EnumValueEnum(compressed_debug_sections) String(zlib-gnu) Value(2)
EnumValueEnum(cpp_normalize_level) String(id) Value(normalized_identifier_C)
EnumValueEnum(cpp_normalize_level) String(nfc) Value(normalized_C)
EnumValueEnum(cpp_normalize_level) String(nfkc) Value(normalized_KC)
EnumValueEnum(cpp_normalize_level) String(none) Value(normalized_none)
EnumValueEnum(diagnostic_color_rule) String(always) Value(DIAGNOSTICS_COLOR_YES)
EnumValueEnum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)
EnumValueEnum(diagnostic_color_rule) String(never) Value(DIAGNOSTICS_COLOR_NO)
EnumValueEnum(diagnostic_path_format) String(inline-events) Value(DPF_INLINE_EVENTS)
EnumValueEnum(diagnostic_path_format) String(none) Value(DPF_NONE)
EnumValueEnum(diagnostic_path_format) String(separate-events) Value(DPF_SEPARATE_EVENTS)
EnumValueEnum(diagnostic_prefixing_rule) String(every-line) Value(DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE)
EnumValueEnum(diagnostic_prefixing_rule) String(once) Value(DIAGNOSTICS_SHOW_PREFIX_ONCE)
EnumValueEnum(diagnostic_url_rule) String(always) Value(DIAGNOSTICS_URL_YES)
EnumValueEnum(diagnostic_url_rule) String(auto) Value(DIAGNOSTICS_URL_AUTO)
EnumValueEnum(diagnostic_url_rule) String(never) Value(DIAGNOSTICS_URL_NO)
EnumValueEnum(diagnostics_output_format) String(json) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON)
EnumValueEnum(diagnostics_output_format) String(text) Value(DIAGNOSTICS_OUTPUT_FORMAT_TEXT)
EnumValueEnum(dwarf_gnat_encodings) String(all) Value(DWARF_GNAT_ENCODINGS_ALL)
EnumValueEnum(dwarf_gnat_encodings) String(gdb) Value(DWARF_GNAT_ENCODINGS_GDB)
EnumValueEnum(dwarf_gnat_encodings) String(minimal) Value(DWARF_GNAT_ENCODINGS_MINIMAL)
EnumValueEnum(excess_precision) String(fast) Value(EXCESS_PRECISION_FAST)
EnumValueEnum(excess_precision) String(standard) Value(EXCESS_PRECISION_STANDARD)
EnumValueEnum(fp_contract_mode) String(fast) Value(FP_CONTRACT_FAST)
EnumValueEnum(fp_contract_mode) String(off) Value(FP_CONTRACT_OFF)
EnumValueEnum(fp_contract_mode) String(on) Value(FP_CONTRACT_OFF)
EnumValueEnum(gfc_convert) String(big-endian) Value(GFC_FLAG_CONVERT_BIG)
EnumValueEnum(gfc_convert) String(little-endian) Value(GFC_FLAG_CONVERT_LITTLE)
EnumValueEnum(gfc_convert) String(native) Value(GFC_FLAG_CONVERT_NATIVE)
EnumValueEnum(gfc_convert) String(swap) Value(GFC_FLAG_CONVERT_SWAP)
EnumValueEnum(gfc_fcoarray) String(lib) Value(GFC_FCOARRAY_LIB)
EnumValueEnum(gfc_fcoarray) String(none) Value(GFC_FCOARRAY_NONE)
EnumValueEnum(gfc_fcoarray) String(single) Value(GFC_FCOARRAY_SINGLE)
EnumValueEnum(gfc_init_local_real) String(-inf) Value(GFC_INIT_REAL_NEG_INF)
EnumValueEnum(gfc_init_local_real) String(inf) Value(GFC_INIT_REAL_INF)
EnumValueEnum(gfc_init_local_real) String(nan) Value(GFC_INIT_REAL_NAN)
EnumValueEnum(gfc_init_local_real) String(snan) Value(GFC_INIT_REAL_SNAN)
EnumValueEnum(gfc_init_local_real) String(zero) Value(GFC_INIT_REAL_ZERO)
EnumValueEnum(ira_algorithm) String(CB) Value(IRA_ALGORITHM_CB)
EnumValueEnum(ira_algorithm) String(priority) Value(IRA_ALGORITHM_PRIORITY)
EnumValueEnum(ira_region) String(all) Value(IRA_REGION_ALL)
EnumValueEnum(ira_region) String(mixed) Value(IRA_REGION_MIXED)
EnumValueEnum(ira_region) String(one) Value(IRA_REGION_ONE)
EnumValueEnum(ivar_visibility) String(package) Value(IVAR_VISIBILITY_PACKAGE)
EnumValueEnum(ivar_visibility) String(private) Value(IVAR_VISIBILITY_PRIVATE)
EnumValueEnum(ivar_visibility) String(protected) Value(IVAR_VISIBILITY_PROTECTED)
EnumValueEnum(ivar_visibility) String(public) Value(IVAR_VISIBILITY_PUBLIC)
EnumValueEnum(live_patching_level) String(inline-clone) Value(LIVE_PATCHING_INLINE_CLONE)
EnumValueEnum(live_patching_level) String(inline-only-static) Value(LIVE_PATCHING_INLINE_ONLY_STATIC)
EnumValueEnum(lto_linker_output) String(dyn) Value(LTO_LINKER_OUTPUT_DYN)
EnumValueEnum(lto_linker_output) String(exec) Value(LTO_LINKER_OUTPUT_EXEC)
EnumValueEnum(lto_linker_output) String(nolto-rel) Value(LTO_LINKER_OUTPUT_NOLTOREL)
EnumValueEnum(lto_linker_output) String(pie) Value(LTO_LINKER_OUTPUT_PIE)
EnumValueEnum(lto_linker_output) String(rel) Value(LTO_LINKER_OUTPUT_REL)
EnumValueEnum(lto_linker_output) String(unknown) Value(LTO_LINKER_OUTPUT_UNKNOWN)
EnumValueEnum(lto_partition_model) String(1to1) Value(LTO_PARTITION_1TO1)
EnumValueEnum(lto_partition_model) String(balanced) Value(LTO_PARTITION_BALANCED)
EnumValueEnum(lto_partition_model) String(max) Value(LTO_PARTITION_MAX)
EnumValueEnum(lto_partition_model) String(none) Value(LTO_PARTITION_NONE)
EnumValueEnum(lto_partition_model) String(one) Value(LTO_PARTITION_ONE)
EnumValueEnum(m68k_isa) String(68000) Value(0)
EnumValueEnum(m68k_isa) String(68010) Value(1)
EnumValueEnum(m68k_isa) String(68020) Value(2)
EnumValueEnum(m68k_isa) String(68030) Value(3)
EnumValueEnum(m68k_isa) String(68040) Value(4)
EnumValueEnum(m68k_isa) String(68060) Value(5)
EnumValueEnum(m68k_isa) String(cpu32) Value(6)
EnumValueEnum(m68k_isa) String(isaa) Value(7)
EnumValueEnum(m68k_isa) String(isaaplus) Value(8)
EnumValueEnum(m68k_isa) String(isab) Value(9)
EnumValueEnum(m68k_isa) String(isac) Value(10)
EnumValueEnum(offload_abi) String(ilp32) Value(OFFLOAD_ABI_ILP32)
EnumValueEnum(offload_abi) String(lp64) Value(OFFLOAD_ABI_LP64)
EnumValueEnum(parloops_schedule_type) String(auto) Value(PARLOOPS_SCHEDULE_AUTO)
EnumValueEnum(parloops_schedule_type) String(dynamic) Value(PARLOOPS_SCHEDULE_DYNAMIC)
EnumValueEnum(parloops_schedule_type) String(guided) Value(PARLOOPS_SCHEDULE_GUIDED)
EnumValueEnum(parloops_schedule_type) String(runtime) Value(PARLOOPS_SCHEDULE_RUNTIME)
EnumValueEnum(parloops_schedule_type) String(static) Value(PARLOOPS_SCHEDULE_STATIC)
EnumValueEnum(permitted_flt_eval_methods) String(c11) Value(PERMITTED_FLT_EVAL_METHODS_C11)
EnumValueEnum(permitted_flt_eval_methods) String(ts-18661-3) Value(PERMITTED_FLT_EVAL_METHODS_TS_18661)
EnumValueEnum(profile_reproducibility) String(multithreaded) Value(PROFILE_REPRODUCIBILITY_MULTITHREADED)
EnumValueEnum(profile_reproducibility) String(parallel-runs) Value(PROFILE_REPRODUCIBILITY_PARALLEL_RUNS)
EnumValueEnum(profile_reproducibility) String(serial) Value(PROFILE_REPRODUCIBILITY_SERIAL)
EnumValueEnum(profile_update) String(atomic) Value(PROFILE_UPDATE_ATOMIC)
EnumValueEnum(profile_update) String(prefer-atomic) Value(PROFILE_UPDATE_PREFER_ATOMIC)
EnumValueEnum(profile_update) String(single) Value(PROFILE_UPDATE_SINGLE)
EnumValueEnum(reorder_blocks_algorithm) String(simple) Value(REORDER_BLOCKS_ALGORITHM_SIMPLE)
EnumValueEnum(reorder_blocks_algorithm) String(stc) Value(REORDER_BLOCKS_ALGORITHM_STC)
EnumValueEnum(sso_struct) String(big-endian) Value(SSO_BIG_ENDIAN)
EnumValueEnum(sso_struct) String(little-endian) Value(SSO_LITTLE_ENDIAN)
EnumValueEnum(sso_struct) String(native) Value(SSO_NATIVE)
EnumValueEnum(stack_reuse_level) String(all) Value(SR_ALL)
EnumValueEnum(stack_reuse_level) String(named_vars) Value(SR_NAMED_VARS)
EnumValueEnum(stack_reuse_level) String(none) Value(SR_NONE)
EnumValueEnum(strong_eval_order) String(all) Value(2)
EnumValueEnum(strong_eval_order) String(none) Value(0)
EnumValueEnum(strong_eval_order) String(some) Value(1)
EnumValueEnum(symbol_visibility) String(default) Value(VISIBILITY_DEFAULT)
EnumValueEnum(symbol_visibility) String(hidden) Value(VISIBILITY_HIDDEN)
EnumValueEnum(symbol_visibility) String(internal) Value(VISIBILITY_INTERNAL)
EnumValueEnum(symbol_visibility) String(protected) Value(VISIBILITY_PROTECTED)
EnumValueEnum(target_device) String(51) Value(mcf51)
EnumValueEnum(target_device) String(51ac) Value(mcf51ac)
EnumValueEnum(target_device) String(51ag) Value(mcf51ag)
EnumValueEnum(target_device) String(51cn) Value(mcf51cn)
EnumValueEnum(target_device) String(51em) Value(mcf51em)
EnumValueEnum(target_device) String(51je) Value(mcf51je)
EnumValueEnum(target_device) String(51jf) Value(mcf51jf)
EnumValueEnum(target_device) String(51jg) Value(mcf51jg)
EnumValueEnum(target_device) String(51jm) Value(mcf51jm)
EnumValueEnum(target_device) String(51mm) Value(mcf51mm)
EnumValueEnum(target_device) String(51qe) Value(mcf51qe)
EnumValueEnum(target_device) String(51qm) Value(mcf51qm)
EnumValueEnum(target_device) String(5202) Value(mcf5202)
EnumValueEnum(target_device) String(5204) Value(mcf5204)
EnumValueEnum(target_device) String(5206) Value(mcf5206)
EnumValueEnum(target_device) String(5206e) Value(mcf5206e)
EnumValueEnum(target_device) String(5207) Value(mcf5207)
EnumValueEnum(target_device) String(5208) Value(mcf5208)
EnumValueEnum(target_device) String(5210a) Value(mcf5210a)
EnumValueEnum(target_device) String(5211) Value(mcf5211)
EnumValueEnum(target_device) String(5211a) Value(mcf5211a)
EnumValueEnum(target_device) String(5212) Value(mcf5212)
EnumValueEnum(target_device) String(5213) Value(mcf5213)
EnumValueEnum(target_device) String(5214) Value(mcf5214)
EnumValueEnum(target_device) String(5216) Value(mcf5216)
EnumValueEnum(target_device) String(5221x) Value(mcf5221x)
EnumValueEnum(target_device) String(52221) Value(mcf52221)
EnumValueEnum(target_device) String(52223) Value(mcf52223)
EnumValueEnum(target_device) String(52230) Value(mcf52230)
EnumValueEnum(target_device) String(52231) Value(mcf52231)
EnumValueEnum(target_device) String(52232) Value(mcf52232)
EnumValueEnum(target_device) String(52233) Value(mcf52233)
EnumValueEnum(target_device) String(52234) Value(mcf52234)
EnumValueEnum(target_device) String(52235) Value(mcf52235)
EnumValueEnum(target_device) String(5224) Value(mcf5224)
EnumValueEnum(target_device) String(5225) Value(mcf5225)
EnumValueEnum(target_device) String(52252) Value(mcf52252)
EnumValueEnum(target_device) String(52254) Value(mcf52254)
EnumValueEnum(target_device) String(52255) Value(mcf52255)
EnumValueEnum(target_device) String(52256) Value(mcf52256)
EnumValueEnum(target_device) String(52258) Value(mcf52258)
EnumValueEnum(target_device) String(52259) Value(mcf52259)
EnumValueEnum(target_device) String(52274) Value(mcf52274)
EnumValueEnum(target_device) String(52277) Value(mcf52277)
EnumValueEnum(target_device) String(5232) Value(mcf5232)
EnumValueEnum(target_device) String(5233) Value(mcf5233)
EnumValueEnum(target_device) String(5234) Value(mcf5234)
EnumValueEnum(target_device) String(5235) Value(mcf5235)
EnumValueEnum(target_device) String(523x) Value(mcf523x)
EnumValueEnum(target_device) String(5249) Value(mcf5249)
EnumValueEnum(target_device) String(5250) Value(mcf5250)
EnumValueEnum(target_device) String(5253) Value(mcf5253)
EnumValueEnum(target_device) String(5270) Value(mcf5270)
EnumValueEnum(target_device) String(5271) Value(mcf5271)
EnumValueEnum(target_device) String(5272) Value(mcf5272)
EnumValueEnum(target_device) String(5274) Value(mcf5274)
EnumValueEnum(target_device) String(5275) Value(mcf5275)
EnumValueEnum(target_device) String(5280) Value(mcf5280)
EnumValueEnum(target_device) String(5281) Value(mcf5281)
EnumValueEnum(target_device) String(5282) Value(mcf5282)
EnumValueEnum(target_device) String(528x) Value(mcf528x)
EnumValueEnum(target_device) String(53011) Value(mcf53011)
EnumValueEnum(target_device) String(53012) Value(mcf53012)
EnumValueEnum(target_device) String(53013) Value(mcf53013)
EnumValueEnum(target_device) String(53014) Value(mcf53014)
EnumValueEnum(target_device) String(53015) Value(mcf53015)
EnumValueEnum(target_device) String(53016) Value(mcf53016)
EnumValueEnum(target_device) String(53017) Value(mcf53017)
EnumValueEnum(target_device) String(5307) Value(mcf5307)
EnumValueEnum(target_device) String(5327) Value(mcf5327)
EnumValueEnum(target_device) String(5328) Value(mcf5328)
EnumValueEnum(target_device) String(5329) Value(mcf5329)
EnumValueEnum(target_device) String(532x) Value(mcf532x)
EnumValueEnum(target_device) String(5372) Value(mcf5372)
EnumValueEnum(target_device) String(5373) Value(mcf5373)
EnumValueEnum(target_device) String(537x) Value(mcf537x)
EnumValueEnum(target_device) String(5407) Value(mcf5407)
EnumValueEnum(target_device) String(54410) Value(mcf54410)
EnumValueEnum(target_device) String(54415) Value(mcf54415)
EnumValueEnum(target_device) String(54416) Value(mcf54416)
EnumValueEnum(target_device) String(54417) Value(mcf54417)
EnumValueEnum(target_device) String(54418) Value(mcf54418)
EnumValueEnum(target_device) String(54450) Value(mcf54450)
EnumValueEnum(target_device) String(54451) Value(mcf54451)
EnumValueEnum(target_device) String(54452) Value(mcf54452)
EnumValueEnum(target_device) String(54453) Value(mcf54453)
EnumValueEnum(target_device) String(54454) Value(mcf54454)
EnumValueEnum(target_device) String(54455) Value(mcf54455)
EnumValueEnum(target_device) String(5470) Value(mcf5470)
EnumValueEnum(target_device) String(5471) Value(mcf5471)
EnumValueEnum(target_device) String(5472) Value(mcf5472)
EnumValueEnum(target_device) String(5473) Value(mcf5473)
EnumValueEnum(target_device) String(5474) Value(mcf5474)
EnumValueEnum(target_device) String(5475) Value(mcf5475)
EnumValueEnum(target_device) String(547x) Value(mcf547x)
EnumValueEnum(target_device) String(5480) Value(mcf5480)
EnumValueEnum(target_device) String(5481) Value(mcf5481)
EnumValueEnum(target_device) String(5482) Value(mcf5482)
EnumValueEnum(target_device) String(5483) Value(mcf5483)
EnumValueEnum(target_device) String(5484) Value(mcf5484)
EnumValueEnum(target_device) String(5485) Value(mcf5485)
EnumValueEnum(target_device) String(548x) Value(mcf548x)
EnumValueEnum(target_device) String(68000) Value(m68000)
EnumValueEnum(target_device) String(68010) Value(m68010)
EnumValueEnum(target_device) String(68020) Value(m68020)
EnumValueEnum(target_device) String(68030) Value(m68030)
EnumValueEnum(target_device) String(68040) Value(m68040)
EnumValueEnum(target_device) String(68060) Value(m68060)
EnumValueEnum(target_device) String(68302) Value(m68302)
EnumValueEnum(target_device) String(68332) Value(m68332)
EnumValueEnum(target_device) String(cpu32) Value(cpu32)
EnumValueEnum(target_device) String(fidoa) Value(fidoa)
EnumValueEnum(tls_model) String(global-dynamic) Value(TLS_MODEL_GLOBAL_DYNAMIC)
EnumValueEnum(tls_model) String(initial-exec) Value(TLS_MODEL_INITIAL_EXEC)
EnumValueEnum(tls_model) String(local-dynamic) Value(TLS_MODEL_LOCAL_DYNAMIC)
EnumValueEnum(tls_model) String(local-exec) Value(TLS_MODEL_LOCAL_EXEC)
EnumValueEnum(uarch_type) String(68000) Value(u68000)
EnumValueEnum(uarch_type) String(68010) Value(u68010)
EnumValueEnum(uarch_type) String(68020) Value(u68020)
EnumValueEnum(uarch_type) String(68020-40) Value(u68020_40)
EnumValueEnum(uarch_type) String(68020-60) Value(u68020_60)
EnumValueEnum(uarch_type) String(68030) Value(u68030)
EnumValueEnum(uarch_type) String(68040) Value(u68040)
EnumValueEnum(uarch_type) String(68060) Value(u68060)
EnumValueEnum(uarch_type) String(cfv1) Value(ucfv1)
EnumValueEnum(uarch_type) String(cfv2) Value(ucfv2)
EnumValueEnum(uarch_type) String(cfv3) Value(ucfv3)
EnumValueEnum(uarch_type) String(cfv4) Value(ucfv4)
EnumValueEnum(uarch_type) String(cfv4e) Value(ucfv4e)
EnumValueEnum(uarch_type) String(cpu32) Value(ucpu32)
EnumValueEnum(vect_cost_model) String(cheap) Value(VECT_COST_MODEL_CHEAP)
EnumValueEnum(vect_cost_model) String(dynamic) Value(VECT_COST_MODEL_DYNAMIC)
EnumValueEnum(vect_cost_model) String(unlimited) Value(VECT_COST_MODEL_UNLIMITED)
EnumValueEnum(vtv_priority) String(none) Value(VTV_NO_PRIORITY)
EnumValueEnum(vtv_priority) String(preinit) Value(VTV_PREINIT_PRIORITY)
EnumValueEnum(vtv_priority) String(std) Value(VTV_STANDARD_PRIORITY)
EnumValueEnum(warn_aligned_new_level) String(all) Value(2)
EnumValueEnum(warn_aligned_new_level) String(global) Value(1)
EnumValueEnum(warn_aligned_new_level) String(none) Value(0)
FDriver C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-F <dir>	Add <dir> to the end of the main framework include path.
HC ObjC C++ ObjC++Print the name of header files as they are used.
HD
HFortran
HdD Joined Separate-Hd <dir>	Write D interface files to directory <dir>.
HeaderIncludeconfig/m68k/m68k-opts.h
HfD Joined Separate-Hf <file>	Write D interface to <file>.
IC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-I <dir>	Add <dir> to the end of the main include path.
ID Joined Separate
IFortran Joined Separate
JD Joined Separate
JFortran Joined Separate-J<directory>	Put MODULE files in 'directory'.
LBRIG Joined Separate
LDriver Joined Separate
LanguageBRIG
LanguageC
LanguageC++
LanguageD
LanguageFortran
LanguageLTO
LanguageLTODump
LanguageObjC
LanguageObjC++
MC ObjC C++ ObjC++Generate make dependencies.
MD
MFortran
MDC ObjC C++ ObjC++ NoDriverArg Separate MissingArgError(missing filename after %qs)Generate make dependencies and compile.
MDD Separate NoDriverArg
MDFortran Separate NoDriverArg
MFC ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)-MF <file>	Write dependency output to the given file.
MFD Joined Separate
MFFortran Joined Separate
MGC ObjC C++ ObjC++Treat missing header files as generated files.
MGD
MGFortran
MMC ObjC C++ ObjC++Like -M but ignore system header files.
MMD
MMFortran
MMDC ObjC C++ ObjC++ NoDriverArg Separate MissingArgError(missing filename after %qs)Like -MD but ignore system header files.
MMDD Separate NoDriverArg
MMDFortran Separate NoDriverArg
MPC ObjC C++ ObjC++Generate phony targets for all headers.
MPD
MPFortran
MQC ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)-MQ <target>	Add a MAKE-quoted target.
MQD Joined Separate
MQFortran Joined Separate
MTC ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)-MT <target>	Add an unquoted target.
MTD Joined Separate
MTFortran Joined Separate
NDriver
OCommon JoinedOrMissing Optimization-O<number>	Set optimization level to <number>.
OfastCommon OptimizationOptimize for speed disregarding exact standards compliance.
OgCommon OptimizationOptimize for debugging experience rather than speed or size.
OsCommon OptimizationOptimize for space rather than speed.
PC ObjC C++ ObjC++Do not generate #line directives.
PFortran
QDriver
QnDriver Negative(Qy)
QyDriver Negative(Qn)
RDriver Joined Separate
SDriver
SourceIncludecpplib.h
SourceIncludediagnostic-color.h
SourceIncludediagnostic-url.h
SourceIncludediagnostic.h
SourceIncludepretty-print.h
TDriver Joined Separate
TbssDriver Separate
Tbss=Driver Joined
TdataDriver Separate
Tdata=Driver Joined
TtextDriver Separate
Ttext=Driver Joined
UC ObjC C++ ObjC++ Joined Separate MissingArgError(macro name missing after %qs)-U<macro>	Undefine <macro>.
UFortran Joined Separate
VariableHOST_WIDE_INT function_entry_patch_area_size
VariableHOST_WIDE_INT function_entry_patch_area_start
Variablebool dump_base_name_prefixed = false
Variablebool exit_after_options
Variablebool flag_disable_hsa = false
Variablebool flag_dump_all_passed
Variablebool flag_opts_finished
Variablebool flag_stack_usage_info = false
Variablebool flag_warn_unused_result = false
Variablebool in_lto_p = false
Variablebool use_gnu_debug_info_extensions
Variablechar *help_enum_printed
Variablechar *help_printed
Variableconst char *m68k_library_id_string = "_current_shared_library_a5_offset_"
Variableconst char *main_input_basename
Variableconst char *main_input_filename
Variableenum debug_info_levels debug_info_level = DINFO_LEVEL_NONE
Variableenum debug_info_type write_symbols = NO_DEBUG
Variableenum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS] = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }
Variableenum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS] = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }
Variableenum dwarf_gnat_encodings gnat_encodings = DWARF_GNAT_ENCODINGS_DEFAULT
Variableenum incremental_link flag_incremental_link = INCREMENTAL_LINK_NONE
Variableenum stack_check_type flag_stack_check = NO_STACK_CHECK
Variableint flag_complex_method = 1
Variableint flag_debug_asm
Variableint flag_dump_rtl_in_asm
Variableint flag_gen_aux_info = 0
Variableint flag_generate_lto
Variableint flag_generate_offload = 0
Variableint flag_print_asm_name
Variableint flag_shlib
Variableint main_input_baselength
Variableint optimize
Variableint optimize_debug
Variableint optimize_fast
Variableint optimize_size
Variableint rtl_dump_and_exit
Variableint target_flags
Variableunsigned int flag_sanitize
Variableunsigned int flag_sanitize_coverage
Variableunsigned int flag_sanitize_recover = (SANITIZE_UNDEFINED | SANITIZE_UNDEFINED_NONDEFAULT | SANITIZE_KERNEL_ADDRESS) & ~(SANITIZE_UNREACHABLE | SANITIZE_RETURN)
Variableunsigned int help_columns
Variableunsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT
Variablevoid *flag_instrument_functions_exclude_files
Variablevoid *flag_instrument_functions_exclude_functions
WCommon RejectNegative Warning Alias(Wextra)This switch is deprecated; use -Wextra instead.
Wa,Driver JoinedOrMissing RejectNegative
WabiC ObjC C++ ObjC++ LTO Var(warn_abi) WarningWarn about things that will change when compiling with an ABI-compliant compiler.
Wabi-tagC++ ObjC++ Var(warn_abi_tag) WarningWarn if a subobject has an abi_tag attribute that the complete object type does not have.
Wabi=C ObjC C++ ObjC++ LTO Joined RejectNegative UInteger WarningWarn about things that change between the current -fabi-version and the specified version.
Wabsolute-valueC ObjC Var(warn_absolute_value) Warning EnabledBy(Wextra)Warn on suspicious calls of standard functions computing absolute values.
WaddressC ObjC C++ ObjC++ Var(warn_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about suspicious uses of memory addresses.
WaddressD Warning Var(warn_address)
Waddress-of-packed-memberC ObjC C++ ObjC++ Var(warn_address_of_packed_member) Init(1) WarningWarn when the address of packed member of struct or union is taken.
Waggregate-returnCommon Var(warn_aggregate_return) WarningWarn about returning structures, unions or arrays.
Waggressive-loop-optimizationsCommon Var(warn_aggressive_loop_optimizations) Init(1) WarningWarn if a loop with constant number of iterations triggers undefined behavior.
WaliasingFortran Warning Var(warn_aliasing) LangEnabledBy(Fortran,Wall)Warn about possible aliasing of dummy arguments.
Walign-commonsFortran Warning Var(warn_align_commons) Init(1)Warn about alignment of COMMON blocks.
Waligned-newC++ ObjC++ Alias(Waligned-new=,global,none)Warn about 'new' of type with extended alignment without -faligned-new.
Waligned-new=C++ ObjC++ Var(warn_aligned_new) Enum(warn_aligned_new_level) Joined RejectNegative Warning LangEnabledBy(C++ ObjC++,Wall,1,0)-Waligned-new=[none|global|all]	Warn even if 'new' uses a class member allocation function.
WallC ObjC C++ ObjC++ WarningEnable most warning messages.
WallD
WallFortran
Walloc-size-larger-than=C ObjC C++ LTO ObjC++ Var(warn_alloc_size_limit) Joined Host_Wide_Int ByteSize Warning Init(HOST_WIDE_INT_MAX)-Walloc-size-larger-than=<bytes>	Warn for calls to allocation functions thatattempt to allocate objects larger than the specified number of bytes.
Walloc-zeroC ObjC C++ ObjC++ Var(warn_alloc_zero) WarningWarn for calls to allocation functions that specify zero bytes.
WallocaC ObjC C++ ObjC++ Var(warn_alloca) WarningWarn on any use of alloca.
WallocaD
Walloca-larger-than=C ObjC C++ LTO ObjC++ Var(warn_alloca_limit) Warning Joined Host_Wide_Int ByteSize Init(HOST_WIDE_INT_MAX)-Walloca-larger-than=<number>	Warn on unbounded uses ofalloca, and on bounded uses of alloca whose bound can be larger than<number> bytes.
Walloca-larger-than=D
WampersandFortran Warning Var(warn_ampersand) LangEnabledBy(Fortran,Wall || Wpedantic)Warn about missing ampersand in continued character constants.
Wanalyzer-double-fcloseCommon Var(warn_analyzer_double_fclose) Init(1) WarningWarn about code paths in which a stdio FILE can be closed more than once.
Wanalyzer-double-freeCommon Var(warn_analyzer_double_free) Init(1) WarningWarn about code paths in which a pointer can be freed more than once.
Wanalyzer-exposure-through-output-fileCommon Var(warn_analyzer_exposure_through_output_file) Init(1) WarningWarn about code paths in which sensitive data is written to a file.
Wanalyzer-file-leakCommon Var(warn_analyzer_file_leak) Init(1) WarningWarn about code paths in which a stdio FILE is not closed.
Wanalyzer-free-of-non-heapCommon Var(warn_analyzer_free_of_non_heap) Init(1) WarningWarn about code paths in which a non-heap pointer is freed.
Wanalyzer-malloc-leakCommon Var(warn_analyzer_malloc_leak) Init(1) WarningWarn about code paths in which a heap-allocated pointer leaks.
Wanalyzer-null-argumentCommon Var(warn_analyzer_null_argument) Init(1) WarningWarn about code paths in which NULL is passed to a must-not-be-NULL function argument.
Wanalyzer-null-dereferenceCommon Var(warn_analyzer_null_dereference) Init(1) WarningWarn about code paths in which a NULL pointer is dereferenced.
Wanalyzer-possible-null-argumentCommon Var(warn_analyzer_possible_null_argument) Init(1) WarningWarn about code paths in which a possibly-NULL value is passed to a must-not-be-NULL function argument.
Wanalyzer-possible-null-dereferenceCommon Var(warn_analyzer_possible_null_dereference) Init(1) WarningWarn about code paths in which a possibly-NULL pointer is dereferenced.
Wanalyzer-stale-setjmp-bufferCommon Var(warn_analyzer_stale_setjmp_buffer) Init(1) WarningWarn about code paths in which a longjmp rewinds to a jmp_buf saved in a stack frame that has returned.
Wanalyzer-tainted-array-indexCommon Var(warn_analyzer_tainted_array_index) Init(1) WarningWarn about code paths in which an unsanitized value is used as an array index.
Wanalyzer-too-complexCommon Var(warn_analyzer_too_complex) Init(0) WarningWarn if the code is too complicated for the analyzer to fully explore.
Wanalyzer-unsafe-call-within-signal-handlerCommon Var(warn_analyzer_unsafe_call_within_signal_handler) Init(1) WarningWarn about code paths in which an async-signal-unsafe function is called from a signal handler.
Wanalyzer-use-after-freeCommon Var(warn_analyzer_use_after_free) Init(1) WarningWarn about code paths in which a freed value is used.
Wanalyzer-use-of-pointer-in-stale-stack-frameCommon Var(warn_analyzer_use_of_pointer_in_stale_stack_frame) Init(1) WarningWarn about code paths in which a pointer to a stale stack frame is used.
Wargument-mismatchFortran WarnRemovedDoes nothing. Preserved for backward compatibility.
Warith-conversionC ObjC C++ ObjC++ Var(warn_arith_conv) WarningWarn if conversion of the result of arithmetic might change the value even though converting the operands cannot.
Warray-boundsCommon Var(warn_array_bounds) WarningWarn if an array is accessed out of bounds.
Warray-boundsLangEnabledBy(C ObjC C++ LTO ObjC++)
Warray-bounds=Common Joined RejectNegative UInteger Var(warn_array_bounds) Warning IntegerRange(0, 2)Warn if an array is accessed out of bounds.
Warray-bounds=LangEnabledBy(C ObjC C++ LTO ObjC++,Wall,1,0)
Warray-temporariesFortran Warning Var(warn_array_temporaries)Warn about creation of array temporaries.
Wassign-interceptObjC ObjC++ Var(warn_assign_intercept) WarningWarn whenever an Objective-C assignment is being intercepted by the garbage collector.
Wattribute-aliasCommon Alias(Wattribute_alias=, 1, 0) WarningWarn about type safety and similar errors and mismatches in declarations with alias attributes.
Wattribute-alias=Common Joined RejectNegative UInteger Var(warn_attribute_alias) Init(1) Warning IntegerRange(0, 2)Warn about type safety and similar errors and mismatches in declarations with alias attributes.
Wattribute-warningCommon Var(warn_attribute_warning) Init(1) WarningWarn about uses of __attribute__((warning)) declarations.
WattributesCommon Var(warn_attributes) Init(1) WarningWarn about inappropriate attribute usage.
Wbad-function-castC ObjC Var(warn_bad_function_cast) WarningWarn about casting functions to incompatible types.
Wbool-compareC ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about boolean expression compared with an integer value different from true/false.
Wbool-operationC ObjC C++ ObjC++ Var(warn_bool_op) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about certain operations on boolean expressions.
Wbuiltin-declaration-mismatchC ObjC C++ ObjC++ Var(warn_builtin_declaraion_mismatch) Init(1) WarningWarn when a built-in function is declared with the wrong signature.
Wbuiltin-macro-redefinedC ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACRO_REDEFINED) Var(cpp_warn_builtin_macro_redefined) Init(1) WarningWarn when a built-in preprocessor macro is undefined or redefined.
Wc++-compatC ObjC Var(warn_cxx_compat) CPP(warn_cxx_operator_names) CppReason(CPP_W_CXX_OPERATOR_NAMES) Init(0) WarningWarn about C constructs that are not in the common subset of C and C++.
Wc++0x-compatC++ ObjC++ Warning Alias(Wc++11-compat) Undocumented
Wc++11-compatC++ ObjC++ Var(warn_cxx11_compat) Warning LangEnabledBy(C++ ObjC++,Wall) Init(0) CPP(cpp_warn_cxx11_compat) CppReason(CPP_W_CXX11_COMPAT)Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011.
Wc++14-compatC++ ObjC++ Var(warn_cxx14_compat) Warning LangEnabledBy(C++ ObjC++,Wall)Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.
Wc++17-compatC++ ObjC++ Var(warn_cxx17_compat) Warning LangEnabledBy(C++ ObjC++,Wall)Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.
Wc++1z-compatC++ ObjC++ Warning Alias(Wc++17-compat) Undocumented
Wc++20-compatC++ ObjC++ Var(warn_cxx20_compat) Warning LangEnabledBy(C++ ObjC++,Wall)Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.
Wc++2a-compatC++ ObjC++ Warning Alias(Wc++20-compat) Undocumented
Wc-binding-typeFortran Var(warn_c_binding_type) Warning LangEnabledBy(Fortran,Wall)Warn if the type of a variable might be not interoperable with C.
Wc11-c2x-compatC ObjC CPP(cpp_warn_c11_c2x_compat) CppReason(CPP_W_C11_C2X_COMPAT) Var(warn_c11_c2x_compat) Init(-1) WarningWarn about features not present in ISO C11, but present in ISO C2X.
Wc90-c99-compatC ObjC CPP(cpp_warn_c90_c99_compat) CppReason(CPP_W_C90_C99_COMPAT) Var(warn_c90_c99_compat) Init(-1) WarningWarn about features not present in ISO C90, but present in ISO C99.
Wc99-c11-compatC ObjC Var(warn_c99_c11_compat) Init(-1) WarningWarn about features not present in ISO C99, but present in ISO C11.
Wcannot-profileCommon Var(warn_cannot_profile) Init(1) WarningWarn when profiling instrumentation was requested, but could not be applied toa certain function.
Wcast-alignCommon Var(warn_cast_align) WarningWarn about pointer casts which increase alignment.
Wcast-align=strictCommon Var(warn_cast_align,2) WarningWarn about pointer casts which increase alignment.
Wcast-function-typeC ObjC C++ ObjC++ Var(warn_cast_function_type) Warning EnabledBy(Wextra)Warn about casts between incompatible function types.
Wcast-qualC ObjC C++ ObjC++ Var(warn_cast_qual) WarningWarn about casts which discard qualifiers.
Wcast-resultD Warning Var(warn_cast_result)Warn about casts that will produce a null result.
Wcatch-valueC++ ObjC++ Warning Alias(Wcatch-value=, 1, 0)Warn about catch handlers of non-reference type.
Wcatch-value=C++ ObjC++ Var(warn_catch_value) Warning Joined RejectNegative UInteger LangEnabledBy(C++ ObjC++,Wall, 1, 0) IntegerRange(0, 3)Warn about catch handlers of non-reference type.
Wchar-subscriptsC ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about subscripts whose type is \"char\".
Wcharacter-truncationFortran Var(warn_character_truncation) Warning LangEnabledBy(Fortran,Wall)Warn about truncated character expressions.
WchkpC ObjC C++ ObjC++ Warning WarnRemovedRemoved in GCC 9.  This switch has no effect.
Wclass-conversionC++ ObjC++ Var(warn_class_conversion) Init(1) WarningWarn when a conversion function will never be called due to the type it converts to.
Wclass-memaccessC++ ObjC++ Var(warn_class_memaccess) Warning LangEnabledBy(C++ ObjC++, Wall)Warn for unsafe raw memory writes to objects of class types.
WclobberedC ObjC C++ ObjC++ Var(warn_clobbered) Warning EnabledBy(Wextra)Warn about variables that might be changed by \"longjmp\" or \"vfork\".
Wcomma-subscriptC++ ObjC++ Var(warn_comma_subscript) WarningWarn about uses of a comma operator within a subscripting expression.
WcommentC ObjC C++ ObjC++ CPP(warn_comments) CppReason(CPP_W_COMMENTS) Var(cpp_warn_comment) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about possibly nested block comments, and C++ comments spanning more than one physical line.
WcommentsC ObjC C++ ObjC++ Warning Alias(Wcomment)Synonym for -Wcomment.
Wcompare-realsFortran Warning Var(warn_compare_reals) LangEnabledBy(Fortran,Wextra)Warn about equality comparisons involving REAL or COMPLEX expressions.
Wconditionally-supportedC++ ObjC++ Var(warn_conditionally_supported) WarningWarn for conditionally-supported constructs.
WconversionC ObjC C++ ObjC++ Var(warn_conversion) WarningWarn for implicit type conversions that may change a value.
WconversionFortran Var(warn_conversion) Warning LangEnabledBy(Fortran,Wall)
Wconversion-extraFortran Var(warn_conversion_extra) WarningWarn about most implicit conversions.
Wconversion-nullC++ ObjC++ Var(warn_conversion_null) Init(1) WarningWarn for converting NULL from/to a non-pointer type.
Wcoverage-mismatchCommon Var(warn_coverage_mismatch) Init(1) WarningWarn in case profiles in -fprofile-use do not match.
WcppC ObjC C++ ObjC++ CppReason(CPP_W_WARNING_DIRECTIVE)
WcppCommon Var(warn_cpp) Init(1) WarningWarn when a #warning directive is encountered.
Wctor-dtor-privacyC++ ObjC++ Var(warn_ctor_dtor_privacy) WarningWarn when all constructors and destructors are private.
Wdangling-elseC ObjC C++ ObjC++ Var(warn_dangling_else) Warning LangEnabledBy(C ObjC C++ ObjC++,Wparentheses)Warn about dangling else.
Wdate-timeC ObjC C++ ObjC++ CPP(warn_date_time) CppReason(CPP_W_DATE_TIME) Var(cpp_warn_date_time) Init(0) WarningWarn about __TIME__, __DATE__ and __TIMESTAMP__ usage.
Wdate-timeFortran
Wdeclaration-after-statementC ObjC Var(warn_declaration_after_statement) Init(-1) WarningWarn when a declaration is found after a statement.
Wdelete-incompleteC++ ObjC++ Var(warn_delete_incomplete) Init(1) WarningWarn when deleting a pointer to incomplete type.
Wdelete-non-virtual-dtorC++ ObjC++ Var(warn_delnonvdtor) Warning LangEnabledBy(C++ ObjC++,Wall || Weffc++)Warn about deleting polymorphic objects with non-virtual destructors.
WdeprecatedC C++ ObjC ObjC++ CPP(cpp_warn_deprecated) CppReason(CPP_W_DEPRECATED)
WdeprecatedCommon Var(warn_deprecated) Init(1) WarningWarn if a deprecated compiler feature, class, method, or field is used.
WdeprecatedD
Wdeprecated-copyC++ ObjC++ Var(warn_deprecated_copy) Warning LangEnabledBy(C++ ObjC++, Wextra)Mark implicitly-declared copy operations as deprecated if the class has auser-provided copy operation.
Wdeprecated-copy-dtorC++ ObjC++ Var(warn_deprecated_copy, 2) WarningMark implicitly-declared copy operations as deprecated if the class has auser-provided copy operation or destructor.
Wdeprecated-declarationsCommon Var(warn_deprecated_decl) Init(1) WarningWarn about uses of __attribute__((deprecated)) declarations.
Wdesignated-initC ObjC Var(warn_designated_init) Init(1) WarningWarn about positional initialization of structs requiring designated initializers.
Wdisabled-optimizationCommon Var(warn_disabled_optimization) WarningWarn when an optimization pass is disabled.
Wdiscarded-array-qualifiersC ObjC Var(warn_discarded_array_qualifiers) Init(1) WarningWarn if qualifiers on arrays which are pointer targets are discarded.
Wdiscarded-qualifiersC ObjC Var(warn_discarded_qualifiers) Init(1) WarningWarn if type qualifiers on pointers are discarded.
Wdiv-by-zeroC ObjC C++ ObjC++ Var(warn_div_by_zero) Init(1) WarningWarn about compile-time integer division by zero.
Wdo-subscriptFortran Var(warn_do_subscript) Warning LangEnabledBy(Fortran,Wextra)Warn about possibly incorrect subscripts in do loops.
Wdouble-promotionC ObjC C++ ObjC++ Var(warn_double_promotion) WarningWarn about implicit conversions from \"float\" to \"double\".
Wduplicate-decl-specifierC ObjC Var(warn_duplicate_decl_specifier) Warning LangEnabledBy(C ObjC,Wall)Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.
Wduplicated-branchesC ObjC C++ ObjC++ Var(warn_duplicated_branches) Init(0) WarningWarn about duplicated branches in if-else statements.
Wduplicated-condC ObjC C++ ObjC++ Var(warn_duplicated_cond) Init(0) WarningWarn about duplicated conditions in an if-else-if chain.
Weffc++C++ ObjC++ Var(warn_ecpp) WarningWarn about violations of Effective C++ style rules.
Wempty-bodyC ObjC C++ ObjC++ Var(warn_empty_body) Warning EnabledBy(Wextra)Warn about an empty body in an if or else statement.
Wendif-labelsC ObjC C++ ObjC++ CPP(warn_endif_labels) CppReason(CPP_W_ENDIF_LABELS) Var(cpp_warn_endif_labels) Init(1) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)Warn about stray tokens after #else and #endif.
Wenum-compareC ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) Warning LangEnabledBy(C ObjC,Wall || Wc++-compat)Warn about comparison of different enum types.
Wenum-conversionC ObjC Var(warn_enum_conversion) Init(0) Warning LangEnabledBy(C ObjC,Wextra)Warn about implicit conversion of enum types.
WerrorC ObjC C++ ObjC++
WerrorCommon Var(warnings_are_errors)Treat all warnings as errors.
WerrorD
Werror-implicit-function-declarationC ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)This switch is deprecated; use -Werror=implicit-function-declaration instead.
Werror=Common JoinedTreat specified warning as error.
Wexpansion-to-definedC ObjC C++ ObjC++ CPP(warn_expansion_to_defined) CppReason(CPP_W_EXPANSION_TO_DEFINED) Var(cpp_warn_expansion_to_defined) Init(0) Warning EnabledBy(Wextra || Wpedantic)Warn if \"defined\" is used outside #if.
WextraC ObjC C++ ObjC++ Warning
WextraCommon Var(extra_warnings) WarningPrint extra (possibly unwanted) warnings.
WextraFortran Warning
Wextra-semiC++ ObjC++ Var(warn_extra_semi) WarningWarn about semicolon after in-class function definition.
Wfatal-errorsCommon Var(flag_fatal_errors)Exit on the first error occurred.
Wfloat-conversionC ObjC C++ ObjC++ Var(warn_float_conversion) Warning LangEnabledBy(C ObjC C++ ObjC++,Wconversion)Warn for implicit type conversions that cause loss of floating point precision.
Wfloat-equalC ObjC C++ ObjC++ Var(warn_float_equal) WarningWarn if testing floating point numbers for equality.
WformatC ObjC C++ ObjC++ Warning Alias(Wformat=, 1, 0)Warn about printf/scanf/strftime/strfmon format string anomalies.
Wformat-contains-nulC ObjC C++ ObjC++ Var(warn_format_contains_nul) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)Warn about format strings that contain NUL bytes.
Wformat-diagC ObjC C++ ObjC++ Var(warn_format_diag) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)Warn about GCC format strings with strings unsuitable for diagnostics.
Wformat-extra-argsC ObjC C++ ObjC++ Var(warn_format_extra_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)Warn if passing too many arguments to a function for its format string.
Wformat-nonliteralC ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)Warn about format strings that are not literals.
Wformat-overflowC ObjC C++ LTO ObjC++ Warning Alias(Wformat-overflow=, 1, 0) IntegerRange(0, 2)Warn about function calls with format strings that write past the endof the destination region.  Same as -Wformat-overflow=1.
Wformat-overflow=C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_format_overflow) Warning LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=, warn_format >= 1, 0) IntegerRange(0, 2)Warn about function calls with format strings that write past the endof the destination region.
Wformat-securityC ObjC C++ ObjC++ Var(warn_format_security) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)Warn about possible security problems with format functions.
Wformat-signednessC ObjC C++ ObjC++ Var(warn_format_signedness) WarningWarn about sign differences with format functions.
Wformat-truncationC ObjC C++ LTO ObjC++ Warning Alias(Wformat-truncation=, 1, 0)Warn about calls to snprintf and similar functions that truncate output.Same as -Wformat-truncation=1.
Wformat-truncation=C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_format_trunc) Warning LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=, warn_format >= 1, 0) IntegerRange(0, 2)Warn about calls to snprintf and similar functions that truncate output.
Wformat-y2kC ObjC C++ ObjC++ Var(warn_format_y2k) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 2, 0)Warn about strftime formats yielding 2-digit years.
Wformat-zero-lengthC ObjC C++ ObjC++ Var(warn_format_zero_length) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 1, 0)Warn about zero-length formats.
Wformat=C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0) IntegerRange(0, 2)Warn about printf/scanf/strftime/strfmon format string anomalies.
Wframe-addressC ObjC C++ ObjC++ Var(warn_frame_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn when __builtin_frame_address or __builtin_return_address is used unsafely.
Wframe-larger-than=Common RejectNegative Joined Host_Wide_Int ByteSize Warning Var(warn_frame_larger_than_size) Init(HOST_WIDE_INT_MAX)-Wframe-larger-than=<byte-size>	Warn if a function's stack frame requires in excess of <byte-size>.
Wfree-nonheap-objectCommon Var(warn_free_nonheap_object) Init(1) WarningWarn when attempting to free a non-heap object.
Wfrontend-loop-interchangeFortran Var(flag_warn_frontend_loop_interchange)Warn if loops have been interchanged.
Wfunction-eliminationFortran Warning Var(warn_function_elimination) LangEnabledBy(Fortran,Wextra)Warn about function call elimination.
WhsaCommon Var(warn_hsa) Init(1) WarningWarn when a function cannot be expanded to HSAIL.
Wif-not-alignedC ObjC C++ ObjC++ Var(warn_if_not_aligned) Init(1) WarningWarn when the field in a struct is not aligned.
Wignored-attributesC C++ Var(warn_ignored_attributes) Init(1) WarningWarn whenever attributes are ignored.
Wignored-qualifiersC C++ Var(warn_ignored_qualifiers) Warning EnabledBy(Wextra)Warn whenever type qualifiers are ignored.
WimplicitC ObjC Var(warn_implicit) Warning LangEnabledBy(C ObjC,Wall)Warn about implicit declarations.
Wimplicit-fallthroughCommon Alias(Wimplicit-fallthrough=,3,0) Warning
Wimplicit-fallthrough=Common Var(warn_implicit_fallthrough) RejectNegative Joined UInteger Warning IntegerRange(0, 5)Warn when a switch case falls through.
Wimplicit-fallthrough=LangEnabledBy(C ObjC C++ ObjC++,Wextra,3,0)
Wimplicit-function-declarationC ObjC Var(warn_implicit_function_declaration) Init(-1) Warning LangEnabledBy(C ObjC,Wimplicit)Warn about implicit function declarations.
Wimplicit-intC ObjC Var(warn_implicit_int) Init(-1) Warning LangEnabledBy(C ObjC,Wimplicit)Warn when a declaration does not specify a type.
Wimplicit-interfaceFortran Warning Var(warn_implicit_interface)Warn about calls with implicit interface.
Wimplicit-procedureFortran Warning Var(warn_implicit_procedure)Warn about called procedures not explicitly declared.
WimportC ObjC C++ ObjC++ Undocumented Ignore
Winaccessible-baseC++ ObjC++ Var(warn_inaccessible_base) Init(1) WarningWarn when a base is inaccessible in derived due to ambiguity.
Wincompatible-pointer-typesC ObjC Var(warn_incompatible_pointer_types) Init(1) WarningWarn when there is a conversion between pointers that have incompatible types.
Winherited-variadic-ctorC++ ObjC++ Var(warn_inh_var_ctor) Init(1) WarningWarn about C++11 inheriting constructors when the base has a variadic constructor.
Winit-list-lifetimeC++ ObjC++ Var(warn_init_list) Warning Init(1)Warn about uses of std::initializer_list that can result in dangling pointers.
Winit-selfC ObjC C++ ObjC++ Var(warn_init_self) Warning LangEnabledBy(C++ ObjC++,Wall)Warn about variables which are initialized to themselves.
WinlineCommon Var(warn_inline) Warning OptimizationWarn when an inlined function cannot be inlined.
Wint-conversionC ObjC Var(warn_int_conversion) Init(1) WarningWarn about incompatible integer to pointer and pointer to integer conversions.
Wint-in-bool-contextC ObjC C++ ObjC++ Var(warn_int_in_bool_context) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn for suspicious integer expressions in boolean context.
Wint-to-pointer-castC ObjC C++ ObjC++ Var(warn_int_to_pointer_cast) Init(1) WarningWarn when there is a cast to a pointer from an integer of a different size.
Winteger-divisionFortran Warning Var(warn_integer_division) LangEnabledBy(Fortran,Wall)Warn about constant integer divisions with truncated results.
Wintrinsic-shadowFortran Warning Var(warn_intrinsic_shadow) LangEnabledBy(Fortran,Wall)Warn if a user-procedure has the same name as an intrinsic.
Wintrinsics-stdFortran Var(warn_intrinsics_std) Warning LangEnabledBy(Fortran,Wall)Warn on intrinsics not part of the selected standard.
Winvalid-memory-modelCommon Var(warn_invalid_memory_model) Init(1) WarningWarn when an atomic memory model parameter is known to be outside the valid range.
Winvalid-offsetofC++ ObjC++ Var(warn_invalid_offsetof) Init(1) WarningWarn about invalid uses of the \"offsetof\" macro.
Winvalid-pchC ObjC C++ ObjC++ CPP(warn_invalid_pch) CppReason(CPP_W_INVALID_PCH) Var(cpp_warn_invalid_pch) Init(0) WarningWarn about PCH files that are found but not used.
Wjump-misses-initC ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)Warn when a jump misses a variable initialization.
Wl,Driver JoinedOrMissing RejectNegative
Wlarger-than-Common RejectNegative Joined Warning Undocumented Alias(Wlarger-than=)
Wlarger-than=Common RejectNegative Joined Host_Wide_Int ByteSize Warning Var(warn_larger_than_size) Init(HOST_WIDE_INT_MAX)-Wlarger-than=<byte-size>	Warn if an object's size exceeds <byte-size>.
Wline-truncationFortran Warning Var(warn_line_truncation) LangEnabledBy(Fortran,Wall) Init(-1)Warn about truncated source lines.
Wliteral-suffixC++ ObjC++ CPP(warn_literal_suffix) CppReason(CPP_W_LITERAL_SUFFIX) Var(cpp_warn_literal_suffix) Init(1) WarningWarn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.
Wlogical-not-parenthesesC ObjC C++ ObjC++ Var(warn_logical_not_paren) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn when logical not is used on the left hand side operand of a comparison.
Wlogical-opC ObjC C++ ObjC++ Var(warn_logical_op) Init(0) WarningWarn when a logical operator is suspiciously always evaluating to true or false.
Wlong-longC ObjC C++ ObjC++ CPP(cpp_warn_long_long) CppReason(CPP_W_LONG_LONG) Var(warn_long_long) Init(-1) Warning LangEnabledBy(C ObjC,Wc90-c99-compat)Do not warn about using \"long long\" when -pedantic.
Wlto-type-mismatchCommon Var(warn_lto_type_mismatch) Init(1) WarningDuring link time optimization warn about mismatched types of global declarations.
WmainC ObjC C++ ObjC++ Var(warn_main) Init(-1) Warning LangEnabledBy(C ObjC,Wall, 2, 0)Warn about suspicious declarations of \"main\".
WmainLangEnabledBy(C ObjC C++ ObjC++,Wpedantic, 2, 0)
Wmaybe-uninitializedC ObjC C++ ObjC++ LTO LangEnabledBy(C ObjC C++ ObjC++ LTO,Wall)
Wmaybe-uninitializedCommon Var(warn_maybe_uninitialized) Warning EnabledBy(Wuninitialized)Warn about maybe uninitialized automatic variables.
Wmaybe-uninitializedFortran LangEnabledBy(Fortran,Wall)
Wmemset-elt-sizeC ObjC C++ ObjC++ Var(warn_memset_elt_size) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.
Wmemset-transposed-argsC ObjC C++ ObjC++ Var(warn_memset_transposed_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.
Wmisleading-indentationC C++ Common Var(warn_misleading_indentation) Warning LangEnabledBy(C C++,Wall)Warn when the indentation of the code does not reflect the block structure.
Wmismatched-tagsC++ ObjC++ Var(warn_mismatched_tags) WarningWarn when a class is redeclared or referenced using a mismatched class-key.
Wmissing-attributesC ObjC C++ ObjC++ Var(warn_missing_attributes) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about declarations of entities that may be missing attributesthat related entities have been declared with.
Wmissing-bracesC ObjC C++ ObjC++ Var(warn_missing_braces) Warning LangEnabledBy(C ObjC,Wall)Warn about possibly missing braces around initializers.
Wmissing-declarationsC ObjC C++ ObjC++ Var(warn_missing_declarations) WarningWarn about global functions without previous declarations.
Wmissing-field-initializersC ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)Warn about missing fields in struct initializers.
Wmissing-format-attributeC ObjC C++ ObjC++ Warning Alias(Wsuggest-attribute=format)
Wmissing-include-dirsC ObjC C++ ObjC++ CPP(warn_missing_include_dirs) CppReason(CPP_W_MISSING_INCLUDE_DIRS) Var(cpp_warn_missing_include_dirs) Init(0) WarningWarn about user-specified include directories that do not exist.
Wmissing-include-dirsFortran
Wmissing-noreturnCommon Warning Alias(Wsuggest-attribute=noreturn)
Wmissing-parameter-typeC ObjC Var(warn_missing_parameter_type) Warning EnabledBy(Wextra)Warn about function parameters declared without a type specifier in K&R-style functions.
Wmissing-profileCommon Var(warn_missing_profile) Init(1) WarningWarn in case profiles in -fprofile-use do not exist.
Wmissing-prototypesC ObjC Var(warn_missing_prototypes) WarningWarn about global functions without prototypes.
WmudflapC ObjC C++ ObjC++ WarnRemoved
WmulticharC ObjC C++ ObjC++ CPP(warn_multichar) CppReason(CPP_W_MULTICHAR) Var(cpp_warn_multichar) Init(0) WarningWarn about use of multi-character character constants.
Wmultiple-inheritanceC++ ObjC++ Var(warn_multiple_inheritance) WarningWarn on direct multiple inheritance.
Wmultistatement-macrosC ObjC C++ ObjC++ Var(warn_multistatement_macros) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.
WnamespacesC++ ObjC++ Var(warn_namespaces) WarningWarn on namespace definition.
WnarrowingC ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1) LangEnabledBy(C++ ObjC++,Wall || Wc++11-compat)Warn about narrowing conversions within { } that are ill-formed in C++11.
Wnested-externsC ObjC Var(warn_nested_externs) WarningWarn about \"extern\" declarations not at file scope.
Wno-alloc-size-larger-thanC ObjC C++ LTO ObjC++ Alias(Walloc-size-larger-than=,18446744073709551615EiB,none) WarningDisable Walloc-size-larger-than= warning.  Equivalent to Walloc-size-larger-than=<SIZE_MAX> or larger.
Wno-alloca-larger-thanC ObjC C++ LTO ObjC++ Alias(Walloca-larger-than=,18446744073709551615EiB,none) WarningDisable Walloca-larger-than= warning.  Equivalent to Walloca-larger-than=<SIZE_MAX> or larger.
Wno-alloca-larger-thanD
Wno-frame-larger-thanCommon Alias(Wframe-larger-than=,18446744073709551615EiB,none) WarningDisable -Wframe-larger-than= warning.  Equivalent to -Wframe-larger-than=<SIZE_MAX> or larger.
Wno-larger-thanCommon Alias(Wlarger-than=,18446744073709551615EiB,none) WarningDisable -Wlarger-than= warning.  Equivalent to -Wlarger-than=<SIZE_MAX> or larger.
Wno-stack-usageCommon Alias(Wstack-usage=,18446744073709551615EiB,none) WarningDisable Wstack-usage= warning.  Equivalent to Wstack-usage=<SIZE_MAX> or larger.
Wno-vla-larger-thanC ObjC C++ LTO ObjC++ Alias(Wvla-larger-than=,18446744073709551615EiB,none) WarningDisable Wvla-larger-than= warning.  Equivalent to Wvla-larger-than=<SIZE_MAX> or larger.
WnoexceptC++ ObjC++ Var(warn_noexcept) WarningWarn when a noexcept expression evaluates to false even though the expression can't actually throw.
Wnoexcept-typeC++ ObjC++ Warning Var(warn_noexcept_type) LangEnabledBy(C++ ObjC++,Wabi || Wc++17-compat)Warn if C++17 noexcept function type will change the mangled name of a symbol.
Wnon-template-friendC++ ObjC++ Var(warn_nontemplate_friend) Init(1) WarningWarn when non-templatized friend functions are declared within a template.
Wnon-virtual-dtorC++ ObjC++ Var(warn_nonvdtor) Warning LangEnabledBy(C++ ObjC++,Weffc++)Warn about non-virtual destructors.
WnonnullC ObjC C++ LTO ObjC++ LangEnabledBy(C ObjC C++ LTO ObjC++,Wall)
WnonnullC ObjC C++ LTO ObjC++ Var(warn_nonnull) Warning LangEnabledBy(C ObjC C++ LTO ObjC++,Wformat=,warn_format >= 1,0)Warn about NULL being passed to argument slots marked as requiring non-NULL.
Wnonnull-compareC ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)
Wnonnull-compareVar(warn_nonnull_compare) WarningWarn if comparing pointer parameter with nonnull attribute with NULL.
WnormalizedC ObjC C++ ObjC++ Warning Alias(Wnormalized=,nfc,none)
Wnormalized=C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(warn_normalize) CppReason(CPP_W_NORMALIZE) Init(normalized_C) Var(cpp_warn_normalize) Enum(cpp_normalize_level)-Wnormalized=[none|id|nfc|nfkc]	Warn about non-normalized Unicode strings.
Wnull-dereferenceCommon Var(warn_null_dereference) WarningWarn if dereferencing a NULL pointer may lead to erroneous or undefined behavior.
WodrCommon Var(warn_odr_violations) Init(1) WarningWarn about some C++ One Definition Rule violations during link time optimization.
Wold-style-castC++ ObjC++ Var(warn_old_style_cast) WarningWarn if a C-style cast is used in a program.
Wold-style-declarationC ObjC Var(warn_old_style_declaration) Warning EnabledBy(Wextra)Warn for obsolescent usage in a declaration.
Wold-style-definitionC ObjC Var(warn_old_style_definition) Init(-1) WarningWarn if an old-style parameter definition is used.
Wopenmp-simdC C++ Var(warn_openmp_simd) Warning LangEnabledBy(C C++,Wall)Warn if a simd directive is overridden by the vectorizer cost model.
Wopenmp-simdFortran
WoverflowCommon Var(warn_overflow) Init(1) WarningWarn about overflow in arithmetic expressions.
Woverlength-stringsC ObjC C++ ObjC++ Var(warn_overlength_strings) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)Warn if a string is longer than the maximum portable length specified by the standard.
Woverloaded-virtualC++ ObjC++ Var(warn_overloaded_virtual) WarningWarn about overloaded virtual function names.
Woverride-initC ObjC Var(warn_override_init) Warning EnabledBy(Wextra)Warn about overriding initializers without side effects.
Woverride-init-side-effectsC ObjC Var(warn_override_init_side_effects) Init(1) WarningWarn about overriding initializers with side effects.
Woverwrite-recursiveFortran Warning Var(warn_overwrite_recursive) Init(1)Warn that -fno-automatic may break recursion.
Wp,Driver JoinedOrMissing RejectNegative
WpackedCommon Var(warn_packed) WarningWarn when the packed attribute has no effect on struct layout.
Wpacked-bitfield-compatC ObjC C++ ObjC++ Var(warn_packed_bitfield_compat) Init(-1) WarningWarn about packed bit-fields whose offset changed in GCC 4.4.
Wpacked-not-alignedC ObjC C++ ObjC++ Var(warn_packed_not_aligned) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn when fields in a struct with the packed attribute are misaligned.
WpaddedCommon Var(warn_padded) WarningWarn when padding is required to align structure members.
WparenthesesC ObjC C++ ObjC++ Var(warn_parentheses) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about possibly missing parentheses.
WpedanticC ObjC C++ ObjC++ CPP(cpp_pedantic) CppReason(CPP_W_PEDANTIC) Warning
WpedanticCommon Var(pedantic) Init(0) WarningIssue warnings needed for strict compliance to the standard.
WpedanticFortran
Wpessimizing-moveC++ ObjC++ Var(warn_pessimizing_move) Warning LangEnabledBy(C++ ObjC++, Wall)Warn about calling std::move on a local object in a return statement preventing copy elision.
Wplacement-newC++ Warning Alias(Wplacement-new=, 1, 0)Warn for placement new expressions with undefined behavior.
Wplacement-new=C++ Joined RejectNegative UInteger Var(warn_placement_new) Init(-1) Warning IntegerRange(0, 2)Warn for placement new expressions with undefined behavior.
Wpmf-conversionsC++ ObjC++ Var(warn_pmf2ptr) Init(1) WarningWarn when converting the type of pointers to member functions.
Wpointer-arithC ObjC C++ ObjC++ Var(warn_pointer_arith) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)Warn about function pointer arithmetic.
Wpointer-compareC ObjC C++ ObjC++ Var(warn_pointer_compare) Init(1) WarningWarn when a pointer is compared with a zero character constant.
Wpointer-signC ObjC Var(warn_pointer_sign) Warning LangEnabledBy(C ObjC,Wall || Wpedantic)Warn when a pointer differs in signedness in an assignment.
Wpointer-to-int-castC ObjC Var(warn_pointer_to_int_cast) Init(1) WarningWarn when a pointer is cast to an integer of a different size.
WpragmasC ObjC C++ ObjC++ Var(warn_pragmas) Init(1) WarningWarn about misuses of pragmas.
Wprio-ctor-dtorC ObjC C++ ObjC++ Var(warn_prio_ctor_dtor) Init(1) WarningWarn if constructor or destructors with priorities from 0 to 100 are used.
Wproperty-assign-defaultObjC ObjC++ Var(warn_property_assign_default) Init(1) WarningWarn if a property for an Objective-C object has no assign semantics specified.
WprotocolObjC ObjC++ Var(warn_protocol) Init(1) WarningWarn if inherited methods are unimplemented.
WpsabiC ObjC C++ ObjC++ LTO Var(warn_psabi) Init(1) Warning Undocumented LangEnabledBy(C ObjC C++ ObjC++,Wabi)
WpsabiD
Wreal-q-constantFortran Warning Var(warn_real_q_constant) LangEnabledBy(Fortran,Wall)Warn about real-literal-constants with 'q' exponent-letter.
Wrealloc-lhsFortran Warning Var(warn_realloc_lhs) LangEnabledBy(Fortran,Wrealloc-lhs-all)Warn when a left-hand-side array variable is reallocated.
Wrealloc-lhs-allFortran Warning Var(warn_realloc_lhs_all)Warn when a left-hand-side variable is reallocated.
Wredundant-declsC ObjC C++ ObjC++ Var(warn_redundant_decls) WarningWarn about multiple declarations of the same object.
Wredundant-moveC++ ObjC++ Var(warn_redundant_move) Warning LangEnabledBy(C++ ObjC++,Wextra)Warn about redundant calls to std::move.
Wredundant-tagsC++ ObjC++ Var(warn_redundant_tags) WarningWarn when a class or enumerated type is referenced using a redundant class-key.
WregisterC++ ObjC++ Var(warn_register) WarningWarn about uses of register storage specifier.
WreorderC++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)Warn when the compiler reorders code.
WrestrictC ObjC C++ ObjC++ Var(warn_restrict) Warning LangEnabledBy(C ObjC C++ ObjC++, Wall)Warn when an argument passed to a restrict-qualified parameter aliases withanother argument.
Wreturn-local-addrCommon Var(warn_return_local_addr) Init(1) WarningWarn about returning a pointer/reference to a local or temporary variable.
Wreturn-typeC ObjC C++ ObjC++ Var(warn_return_type) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall) Init(-1)Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++).
Wreturn-typeFortran Warning LangEnabledBy(Fortran,Wall)
Wscalar-storage-orderC ObjC C++ ObjC++ Init(1) WarningWarn on suspicious constructs involving reverse scalar storage order.
WselectorObjC ObjC++ Var(warn_selector) WarningWarn if a selector has multiple methods.
Wsequence-pointC ObjC C++ ObjC++ Var(warn_sequence_point) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about possible violations of sequence point rules.
WshadowCommon Var(warn_shadow) WarningWarn when one variable shadows another.  Same as -Wshadow=global.
Wshadow-compatible-localCommon Warning Undocumented Alias(Wshadow=compatible-local)
Wshadow-ivarObjC ObjC++ Var(warn_shadow_ivar) EnabledBy(Wshadow) Init(1) WarningWarn if a local declaration hides an instance variable.
Wshadow-localCommon Warning Undocumented Alias(Wshadow=local)
Wshadow=compatible-localCommon Var(warn_shadow_compatible_local) Warning EnabledBy(Wshadow=local)Warn when one local variable shadows another local variable or parameter of compatible type.
Wshadow=globalCommon Warning Alias(Wshadow)Warn when one variable shadows another (globally).
Wshadow=localCommon Var(warn_shadow_local) Warning EnabledBy(Wshadow)Warn when one local variable shadows another local variable or parameter.
Wshift-count-negativeC ObjC C++ ObjC++ Var(warn_shift_count_negative) Init(1) WarningWarn if shift count is negative.
Wshift-count-overflowC ObjC C++ ObjC++ Var(warn_shift_count_overflow) Init(1) WarningWarn if shift count >= width of type.
Wshift-negative-valueC ObjC C++ ObjC++ Var(warn_shift_negative_value) Init(-1) WarningWarn if left shifting a negative value.
Wshift-overflowC ObjC C++ ObjC++ Warning Alias(Wshift-overflow=, 1, 0)Warn if left shift of a signed value overflows.
Wshift-overflow=C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_shift_overflow) Init(-1) Warning IntegerRange(0, 2)Warn if left shift of a signed value overflows.
Wsign-compareC ObjC C++ ObjC++ EnabledBy(Wextra)
Wsign-compareC ObjC C++ ObjC++ Var(warn_sign_compare) Warning LangEnabledBy(C++ ObjC++,Wall)Warn about signed-unsigned comparisons.
Wsign-conversionC ObjC C++ ObjC++ Var(warn_sign_conversion) Warning LangEnabledBy(C ObjC,Wconversion)Warn for implicit type conversions between signed and unsigned integers.
Wsign-promoC++ ObjC++ Var(warn_sign_promo) WarningWarn when overload promotes from unsigned to signed.
Wsized-deallocationC++ ObjC++ Var(warn_sized_deallocation) Warning EnabledBy(Wextra)Warn about missing sized deallocation functions.
Wsizeof-array-argumentC ObjC C++ ObjC++ Var(warn_sizeof_array_argument) Warning Init(1)Warn when sizeof is applied on a parameter declared as an array.
Wsizeof-pointer-divC ObjC C++ ObjC++ Var(warn_sizeof_pointer_div) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.
Wsizeof-pointer-memaccessC ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about suspicious length parameters to certain string functions if the argument uses sizeof.
WspeculativeDWarn from speculative compiles such as __traits(compiles).
Wstack-protectorCommon Var(warn_stack_protect) WarningWarn when not issuing stack smashing protection for some reason.
Wstack-usage=Common Joined RejectNegative Host_Wide_Int ByteSize Var(warn_stack_usage) Warning Init(HOST_WIDE_INT_MAX)-Wstack-usage=<byte-size>	Warn if stack usage might exceed <byte-size>.
Wstrict-aliasingCommon WarningWarn about code which might break strict aliasing rules.
Wstrict-aliasing=C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 3, 0) IntegerRange(0, 3)
Wstrict-aliasing=Common Joined RejectNegative UInteger Var(warn_strict_aliasing) WarningWarn about code which might break strict aliasing rules.
Wstrict-null-sentinelC++ ObjC++ Warning Var(warn_strict_null_sentinel)Warn about uncasted NULL used as sentinel.
Wstrict-overflowCommon WarningWarn about optimizations that assume that signed overflow is undefined.
Wstrict-overflow=C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0) IntegerRange(0, 5)
Wstrict-overflow=Common Joined RejectNegative UInteger Var(warn_strict_overflow) WarningWarn about optimizations that assume that signed overflow is undefined.
Wstrict-prototypesC ObjC Var(warn_strict_prototypes) WarningWarn about unprototyped function declarations.
Wstrict-selector-matchObjC ObjC++ Var(warn_strict_selector_match) WarningWarn if type signatures of candidate methods do not match exactly.
Wstring-compareC ObjC C++ LTO ObjC++ Warning Var(warn_string_compare) Warning LangEnabledBy(C ObjC C++ ObjC++, Wextra)Warn about calls to strcmp and strncmp used in equality expressions thatare necessarily true or false due to the length of one and size of the otherargument.
Wstringop-overflowC ObjC C++ LTO ObjC++ Warning Alias(Wstringop-overflow=, 2, 0)Warn about buffer overflow in string manipulation functions like memcpyand strcpy.
Wstringop-overflow=C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_stringop_overflow) Init(2) Warning LangEnabledBy(C ObjC C++ LTO ObjC++, Wall, 2, 0) IntegerRange(0, 4)Under the control of Object Size type, warn about buffer overflow in stringmanipulation functions like memcpy and strcpy.
Wstringop-truncationC ObjC C++ LTO ObjC++ Var(warn_stringop_truncation) Warning Init (1) LangEnabledBy(C ObjC C++ LTO ObjC++, Wall)Warn about truncation in string manipulation functions like strncat and strncpy.
Wsubobject-linkageC++ ObjC++ Var(warn_subobject_linkage) Warning Init(1)Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.
Wsuggest-attribute=coldCommon Var(warn_suggest_attribute_cold) WarningWarn about functions which might be candidates for __attribute__((cold)).
Wsuggest-attribute=constCommon Var(warn_suggest_attribute_const) WarningWarn about functions which might be candidates for __attribute__((const)).
Wsuggest-attribute=formatC ObjC C++ ObjC++ Var(warn_suggest_attribute_format) WarningWarn about functions which might be candidates for format attributes.
Wsuggest-attribute=mallocCommon Var(warn_suggest_attribute_malloc) WarningWarn about functions which might be candidates for __attribute__((malloc)).
Wsuggest-attribute=noreturnCommon Var(warn_suggest_attribute_noreturn) WarningWarn about functions which might be candidates for __attribute__((noreturn)).
Wsuggest-attribute=pureCommon Var(warn_suggest_attribute_pure) WarningWarn about functions which might be candidates for __attribute__((pure)).
Wsuggest-final-methodsCommon Var(warn_suggest_final_methods) WarningWarn about C++ virtual methods where adding final keyword would improve code quality.
Wsuggest-final-typesCommon Var(warn_suggest_final_types) WarningWarn about C++ polymorphic types where adding final keyword would improve code quality.
Wsuggest-overrideC++ ObjC++ Var(warn_override) WarningSuggest that the override keyword be used when the declaration of a virtualfunction overrides another.
WsurprisingFortran Warning Var(warn_surprising) LangEnabledBy(Fortran,Wall)Warn about \"suspicious\" constructs.
WswitchC ObjC C++ ObjC++ Var(warn_switch) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about enumerated switches, with no default, missing a case.
Wswitch-boolC ObjC C++ ObjC++ Var(warn_switch_bool) Warning Init(1)Warn about switches with boolean controlling expression.
Wswitch-defaultC ObjC C++ ObjC++ Var(warn_switch_default) WarningWarn about enumerated switches missing a \"default:\" statement.
Wswitch-enumC ObjC C++ ObjC++ Var(warn_switch_enum) WarningWarn about all enumerated switches missing a specific case.
Wswitch-outside-rangeC ObjC C++ ObjC++ Var(warn_switch_outside_range) Warning Init(1)Warn about switch values that are outside of the switch's type range.
Wswitch-unreachableCommon Var(warn_switch_unreachable) Warning Init(1)Warn about statements between switch's controlling expression and the firstcase.
Wsync-nandC C++ Var(warn_sync_nand) Init(1) WarningWarn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.
WsynthC++ ObjC++ Var(warn_synth) WarningDeprecated.  This switch has no effect.
Wsystem-headersC ObjC C++ ObjC++ Warning
Wsystem-headersCommon Var(warn_system_headers) WarningDo not suppress warnings from system headers.
WtabsFortran Warning Var(warn_tabs) LangEnabledBy(Fortran,Wall || Wpedantic)Permit nonconforming uses of the tab character.
Wtarget-lifetimeFortran Warning Var(warn_target_lifetime) LangEnabledBy(Fortran,Wall)Warn if the pointer in a pointer assignment might outlive its target.
Wtautological-compareC ObjC C++ ObjC++ Var(warn_tautological_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn if a comparison always evaluates to true or false.
WtemplatesC++ ObjC++ Var(warn_templates) WarningWarn on primary template declaration.
WtemplatesD
WterminateC++ ObjC++ Warning Var(warn_terminate) Init(1)Warn if a throw expression will always result in a call to terminate().
WtraditionalC ObjC CPP(cpp_warn_traditional) CppReason(CPP_W_TRADITIONAL) Var(warn_traditional) Init(0) WarningWarn about features not present in traditional C.
Wtraditional-conversionC ObjC Var(warn_traditional_conversion) WarningWarn of prototypes causing type conversions different from what would happen in the absence of prototype.
WtrampolinesCommon Var(warn_trampolines) WarningWarn whenever a trampoline is generated.
WtrigraphsC ObjC C++ ObjC++ CPP(warn_trigraphs) CppReason(CPP_W_TRIGRAPHS) Var(cpp_warn_trigraphs) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn if trigraphs are encountered that might affect the meaning of the program.
Wtype-limitsCommon Var(warn_type_limits) Warning EnabledBy(Wextra)Warn if a comparison is always true or always false due to the limited range of the data type.
Wundeclared-selectorObjC ObjC++ Var(warn_undeclared_selector) WarningWarn about @selector()s without previously declared methods.
WundefC ObjC C++ ObjC++ CPP(warn_undef) CppReason(CPP_W_UNDEF) Var(cpp_warn_undef) Init(0) WarningWarn if an undefined macro is used in an #if directive.
Wundefined-do-loopFortran Warning Var(warn_undefined_do_loop) LangEnabledBy(Fortran,Wall)Warn about an invalid DO loop.
WunderflowFortran Warning Var(warn_underflow) Init(1)Warn about underflow of numerical constant expressions.
WuninitializedC ObjC C++ ObjC++ LTO LangEnabledBy(C ObjC C++ ObjC++ LTO,Wall)
WuninitializedCommon Var(warn_uninitialized) Warning EnabledBy(Wextra)Warn about uninitialized automatic variables.
WuninitializedFortran LangEnabledBy(Fortran,Wall)
Wunknown-pragmasC ObjC C++ ObjC++ Warning Var(warn_unknown_pragmas) LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)Warn about unrecognized pragmas.
Wunknown-pragmasD LangEnabledBy(D, Wall)
Wunreachable-codeCommon Ignore WarningDoes nothing. Preserved for backward compatibility.
Wunsafe-loop-optimizationsCommon Ignore WarningDoes nothing. Preserved for backward compatibility.
Wunsuffixed-float-constantsC ObjC Var(warn_unsuffixed_float_constants) WarningWarn about unsuffixed float constants.
WunusedC ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)
WunusedCommon Var(warn_unused) Init(0) WarningEnable all -Wunused- warnings.
WunusedLangEnabledBy(Fortran,Wall)
Wunused-but-set-parameterCommon Var(warn_unused_but_set_parameter) Warning EnabledBy(Wunused && Wextra)Warn when a function parameter is only set, otherwise unused.
Wunused-but-set-variableCommon Var(warn_unused_but_set_variable) Warning EnabledBy(Wunused)Warn when a variable is only set, otherwise unused.
Wunused-const-variableC ObjC C++ ObjC++ Warning Alias(Wunused-const-variable=, 2, 0)Warn when a const variable is unused.
Wunused-const-variable=C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_unused_const_variable) Warning LangEnabledBy(C ObjC,Wunused-variable, 1, 0) IntegerRange(0, 2)Warn when a const variable is unused.
Wunused-dummy-argumentFortran Warning Var(warn_unused_dummy_argument) LangEnabledBy(Fortran,Wall)Warn about unused dummy arguments.
Wunused-functionCommon Var(warn_unused_function) Warning EnabledBy(Wunused)Warn when a function is unused.
Wunused-labelCommon Var(warn_unused_label) Warning EnabledBy(Wunused)Warn when a label is unused.
Wunused-local-typedefsC ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning EnabledBy(Wunused)Warn when typedefs locally defined in a function are not used.
Wunused-macrosC ObjC C++ ObjC++ CppReason(CPP_W_UNUSED_MACROS) Var(cpp_warn_unused_macros) WarningWarn about macros defined in the main file that are not used.
Wunused-parameterCommon Var(warn_unused_parameter) Warning EnabledBy(Wunused && Wextra)Warn when a function parameter is unused.
Wunused-resultC ObjC C++ ObjC++ Var(warn_unused_result) Init(1) WarningWarn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.
Wunused-valueCommon Var(warn_unused_value) Warning EnabledBy(Wunused)Warn when an expression value is unused.
Wunused-variableC ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wunused)
Wunused-variableCommon Var(warn_unused_variable) Warning EnabledBy(Wunused)Warn when a variable is unused.
Wuse-without-onlyFortran Var(warn_use_without_only) WarningWarn about USE statements that have no ONLY qualifier.
Wuseless-castC++ ObjC++ Var(warn_useless_cast) WarningWarn about useless casts.
WvarargsC ObjC C++ ObjC++ Warning Var(warn_varargs) Init(1)Warn about questionable usage of the macros used to retrieve variable arguments.
Wvariadic-macrosC ObjC C++ ObjC++ CPP(warn_variadic_macros) CppReason(CPP_W_VARIADIC_MACROS) Var(cpp_warn_variadic_macros) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic || Wtraditional)Warn about using variadic macros.
Wvector-operation-performanceCommon Var(warn_vector_operation_performance) WarningWarn when a vector operation is compiled outside the SIMD.
Wvirtual-inheritanceC++ ObjC++ Var(warn_virtual_inheritance) WarningWarn on direct virtual inheritance.
Wvirtual-move-assignC++ ObjC++ Var(warn_virtual_move_assign) Warning Init(1)Warn if a virtual base has a non-trivial move assignment operator.
WvlaC ObjC C++ ObjC++ Var(warn_vla) Init(-1) WarningWarn if a variable length array is used.
Wvla-larger-than=C ObjC C++ LTO ObjC++ Var(warn_vla_limit) Warning Joined Host_Wide_Int ByteSize Init(HOST_WIDE_INT_MAX)-Wvla-larger-than=<number>	Warn on unbounded uses of variable-lengtharrays, and on bounded uses of variable-length arrays whose bound can belarger than <number> bytes.<number> bytes.
WvolatileC++ ObjC++ Var(warn_volatile) WarningWarn about deprecated uses of volatile qualifier.
Wvolatile-register-varC ObjC C++ ObjC++ Var(warn_volatile_register_var) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn when a register variable is declared volatile.
Wwrite-stringsC ObjC C++ ObjC++ Var(warn_write_strings) WarningIn C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.
Wzero-as-null-pointer-constantC++ ObjC++ Var(warn_zero_as_null_pointer_constant) WarningWarn when a literal '0' is used as null pointer.
Wzero-length-boundsC ObjC C++ ObjC++ Var(warn_zero_length_bounds) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)Warn about accesses to interior zero-length array members.
WzerotripFortran Warning Var(warn_zerotrip) LangEnabledBy(Fortran,Wall)Warn about zero-trip DO loops.
XDGenerate JSON file.
XassemblerDriver Separate
XfD Joined Separate-Xf <file>	Write JSON output to the given <file>.
XlinkerDriver Separate
XpreprocessorDriver Separate
ZDriver
ansiC ObjC C++ ObjC++A synonym for -std=c89 (for C) or -std=c++98 (for C++).
assert=Driver JoinedOrMissing
aux-infoCommon Separate Var(aux_info_file_name)-aux-info <file>	Emit declaration information into <file>.
aux-info=Common Joined Alias(aux-info)
auxbaseCommon Separate RejectDriver Var(aux_base_name)
auxbase-stripCommon Separate RejectDriver
cDriver
callgraphLTODump Var(flag_dump_callgraph)Dump the symtab callgraph.
coverageDriver
cppFortran Negative(nocpp)Enable preprocessing.
cpp=Fortran Joined Negative(nocpp) Undocumented NoDWARFRecord
cxx-isystemC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-cxx-isystem <dir>	Add <dir> to the start of the C++ system include path
dC ObjC C++ ObjC++ Joined
dCommon Joined-d<letters>	Enable dumps from specific passes of the compiler.
dFortran Joined
debuglib=Driver JoinedDebug library to use instead of phobos.
defaultlib=Driver JoinedDefault library to use instead of phobos.
defined-onlyLTODump Var(flag_lto_dump_defined)Dump only the defined symbols.
demangleLTODump Var(flag_lto_dump_demangle)Dump the demangled output.
dstartfilesDriverDo link the standard D startup files in the compilation.
dump-body=LTODump RejectNegative Joined Var(flag_dump_body)
dump-level=LTODump RejectNegative Joined Var(flag_dump_level)
dumpbaseCommon Separate Var(dump_base_name)-dumpbase <file>	Set the file basename to be used for dumps.
dumpdirCommon Separate Var(dump_dir_name)-dumpdir <dir>	Set the directory name to be used for dumps.
dumpfullversionDriver
dumpmachineDriver
dumpspecsDriver
dumpversionDriver
eDriver Joined Separate
export-dynamicDriver Undocumented
fPICCommon Report Var(flag_pic,2) Negative(fPIE) Init(-1)Generate position-independent code if possible (large mode).
fPIECommon Report Var(flag_pie,2) Negative(fpic) Init(-1)Generate position-independent code for executables if possible (large mode).
fabi-compat-version=C++ ObjC++ Joined RejectNegative UInteger Var(flag_abi_compat_version) Init(-1)The version of the C++ ABI used for -Wabi warnings and link compatibility aliases.
fabi-version=Common Joined RejectNegative UInteger Var(flag_abi_version) Init(14)The version of the C++ ABI in use.
faccess-controlC++ ObjC++ Var(flag_access_control) Init(1)Enforce class member access control semantics.
fada-spec-parent=C ObjC C++ ObjC++ RejectNegative Joined Var(ada_specs_parent)-fada-spec-parent=unit	Dump Ada specs as child units of given parent.
faggressive-function-eliminationFortran Var(flag_aggressive_function_elimination)Eliminate multiple function invocations also for impure functions.
faggressive-loop-optimizationsCommon Report Var(flag_aggressive_loop_optimizations) Optimization Init(1)Aggressively optimize loops using language constraints.
falign-commonsFortran Var(flag_align_commons) Init(1)Enable alignment of COMMON blocks.
falign-functionsCommon Report Var(flag_align_functions) OptimizationAlign the start of functions.
falign-functions=Common RejectNegative Joined Var(str_align_functions) Optimization
falign-jumpsCommon Report Var(flag_align_jumps) OptimizationAlign labels which are only reached by jumping.
falign-jumps=Common RejectNegative Joined Var(str_align_jumps) Optimization
falign-labelsCommon Report Var(flag_align_labels) OptimizationAlign all labels.
falign-labels=Common RejectNegative Joined Var(str_align_labels) Optimization
falign-loopsCommon Report Var(flag_align_loops) OptimizationAlign the start of loops.
falign-loops=Common RejectNegative Joined Var(str_align_loops) Optimization
faligned-newC++ ObjC++ Alias(faligned-new=,1,0)Support C++17 allocation of over-aligned types.
faligned-new=C++ ObjC++ Joined RejectNegative Var(aligned_new_threshold) UInteger Init(-1)-faligned-new=<N>	Use C++17 over-aligned type allocation for alignments greater than N.
fall-instantiationsDGenerate code for all template instantiations.
fall-intrinsicsFortran RejectNegative Var(flag_all_intrinsics)All intrinsics procedures are available regardless of selected standard.
fall-virtualC++ ObjC++ WarnRemoved
fallocation-dceCommon Report Var(flag_allocation_dce) Init(1) OptimizationTell DCE to remove unused C++ allocations.
fallow-argument-mismatchFortran Var(flag_allow_argument_mismatch) LangEnabledBy(Fortran,std=legacy)Accept argument mismatches in procedure calls.
fallow-invalid-bozFortran RejectNegative Var(flag_allow_invalid_boz)Allow a BOZ literal constant to appear in an invalid context and with X instead of Z.
fallow-leading-underscoreFortran Undocumented Var(flag_allow_leading_underscore)
fallow-parameterless-variadic-functionsC ObjC Var(flag_allow_parameterless_variadic_functions)Allow variadic functions without named parameter.
fallow-store-data-racesCommon Report Var(flag_store_data_races) OptimizationAllow the compiler to introduce new data races on stores.
falt-external-templatesC++ ObjC++ WarnRemovedNo longer supported.
fanalyzerCommon Var(flag_analyzer)Enable static analysis pass.
fanalyzer-call-summariesCommon Var(flag_analyzer_call_summaries) Init(0)Approximate the effect of function calls to simplify analysis.
fanalyzer-checker=Common Joined RejectNegative Var(flag_analyzer_checker)Restrict the analyzer to run just the named checker.
fanalyzer-fine-grainedCommon Var(flag_analyzer_fine_grained) Init(0)Avoid combining multiple statements into one exploded edge.
fanalyzer-show-duplicate-countCommon Var(flag_analyzer_show_duplicate_count) Init(0)Issue a note when diagnostics are deduplicated.
fanalyzer-state-mergeCommon Var(flag_analyzer_state_merge) Init(1)Merge similar-enough states during analysis.
fanalyzer-state-purgeCommon Var(flag_analyzer_state_purge) Init(1)Purge unneeded state during analysis.
fanalyzer-transitivityCommon Var(flag_analyzer_transitivity) Init(0)Enable transitivity of constraints during analysis.
fanalyzer-verbose-edgesCommon Var(flag_analyzer_verbose_edges) Init(0)Emit more verbose descriptions of control flow in diagnostics.
fanalyzer-verbose-state-changesCommon Var(flag_analyzer_verbose_state_changes) Init(0)Emit more verbose descriptions of state changes in diagnostics.
fanalyzer-verbosity=Common Joined UInteger Var(analyzer_verbosity) Init(2)Control which events are displayed in diagnostic paths.
fargument-aliasCommon IgnoreDoes nothing. Preserved for backward compatibility.
fargument-noaliasCommon IgnoreDoes nothing. Preserved for backward compatibility.
fargument-noalias-anythingCommon IgnoreDoes nothing. Preserved for backward compatibility.
fargument-noalias-globalCommon IgnoreDoes nothing. Preserved for backward compatibility.
fasan-shadow-offset=Common Joined RejectNegative Var(common_deferred_options) Defer-fasan-shadow-offset=<number>	Use custom shadow memory offset.
fasmC ObjC C++ ObjC++ Var(flag_no_asm, 0)Recognize the \"asm\" keyword.
fassertD Var(flag_assert)Generate code for assert contracts.
fassociative-mathCommon Report Var(flag_associative_math) SetByCombined OptimizationAllow optimization for floating-point arithmetic which may change theresult of the operation due to rounding.
fassume-phsaBRIG Report Var(flag_assume_phsa) Init(1) OptimizationAssume we are finalizing for phsa and its libhsail-rt.  Enables additionalphsa-specific optimizations (default).
fasynchronous-unwind-tablesCommon Report Var(flag_asynchronous_unwind_tables) OptimizationGenerate unwind tables that are exact at each instruction boundary.
fauto-inc-decCommon Report Var(flag_auto_inc_dec) Init(1) OptimizationGenerate auto-inc/dec instructions.
fauto-profileCommon Report Var(flag_auto_profile)Use sample profile information for call graph node weights. The defaultprofile file is fbdata.afdo in 'pwd'.
fauto-profile=Common Joined RejectNegative Var(auto_profile_file)Use sample profile information for call graph node weights. The profilefile is specified in the argument.
fautomaticFortran Var(flag_automatic) Init(1)Do not treat local variables and COMMON blocks as if they were named in SAVE statements.
fbackslashFortran Var(flag_backslash)Specify that backslash in string introduces an escape character.
fbacktraceFortran Var(flag_backtrace) Init(1)Produce a backtrace when a runtime error is encountered.
fblas-matmul-limit=Fortran RejectNegative Joined UInteger Var(flag_blas_matmul_limit) Init(30)-fblas-matmul-limit=<n>	Size of the smallest matrix for which matmul will use BLAS.
fbounds-checkCommon Report Var(flag_bounds_check)Generate code to check bounds before indexing arrays.
fbounds-checkD
fbounds-check=D Joined RejectNegative Enum(bounds_check) Var(flag_bounds_check)-fbounds-check=[on|safeonly|off]	Turn array bounds checks on, in @safe code only, or off.
fbranch-count-regCommon Report Var(flag_branch_on_count_reg) OptimizationReplace add, compare, branch with branch on count register.
fbranch-probabilitiesCommon Report Var(flag_branch_probabilities) OptimizationUse profiling information for branch probabilities.
fbranch-target-load-optimizeCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fbranch-target-load-optimize2Common IgnoreDoes nothing.  Preserved for backward compatibility.
fbtr-bb-exclusiveCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fbuilding-libgccC ObjC C++ ObjC++ Undocumented Var(flag_building_libgcc)
fbuilding-libphobos-testsD Undocumented Var(flag_building_libphobos_tests)
fbuiltinC ObjC C++ ObjC++ Var(flag_no_builtin, 0)Recognize built-in functions.
fbuiltinD Var(flag_no_builtin, 0)
fbuiltin-C ObjC C++ ObjC++ Joined
fc-prototypesFortran Var(flag_c_prototypes)Generate C prototypes from BIND(C) declarations.
fc-prototypes-externalFortran Var(flag_c_prototypes_external)Generate C prototypes from non-BIND(C) external procedure definitions.
fcall-saved-Common Joined RejectNegative Var(common_deferred_options) Defer-fcall-saved-<register>	Mark <register> as being preserved across functions.
fcall-used-Common Joined RejectNegative Var(common_deferred_options) Defer-fcall-used-<register>	Mark <register> as being corrupted by function calls.
fcaller-savesCommon Report Var(flag_caller_saves) OptimizationSave registers around function calls.
fcallgraph-infoCommon Report RejectNegative Var(flag_callgraph_info) Init(NO_CALLGRAPH_INFO);Output callgraph information on a per-file basis.
fcallgraph-info=Common Report RejectNegative JoinedOutput callgraph information on a per-file basis with decorations.
fcanonical-system-headersC ObjC C++ ObjC++Where shorter, use canonicalized paths to systems headers.
fcf-protectionCommon RejectNegative Alias(fcf-protection=,full)
fcf-protection=Common Report Joined RejectNegative Enum(cf_protection_level) Var(flag_cf_protection) Init(CF_NONE)-fcf-protection=[full|branch|return|none|check]	Instrument functions with checks to verify jump/call/return control-flow transferinstructions have valid targets.
fchar8_tC++ ObjC++ Var(flag_char8_t) Init(-1)Enable the char8_t fundamental type and use it as the type for UTF-8 stringand character literals.
fcheck-array-temporariesFortranProduce a warning at runtime if a array temporary has been created for a procedure argument.
fcheck-data-depsCommon IgnoreThis switch is deprecated; do not use.
fcheck-newCommon Var(flag_check_new)Check the return value of new in C++.
fcheck-pointer-boundsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fcheck=Fortran RejectNegative JoinedOrMissing-fcheck=[...]	Specify which runtime checks are to be performed.
fcheckingCommon Var(flag_checking) Init(CHECKING_P ? ENABLE_EXTRA_CHECKING ? 2 : 1 : 0)Perform internal consistency checkings.
fchecking=Common Joined RejectNegative UInteger Var(flag_checking)Perform internal consistency checkings.
fchkp-check-incomplete-typeC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-check-readC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-check-writeC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-first-field-has-own-boundsC ObjC C++ ObjC++ LTO WarnRemoved RejectNegativeRemoved in GCC 9.  This switch has no effect.
fchkp-flexible-struct-trailing-arraysC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-instrument-callsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-instrument-marked-onlyC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-narrow-boundsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-narrow-to-innermost-arrayC ObjC C++ ObjC++ LTO WarnRemoved RejectNegativeRemoved in GCC 9.  This switch has no effect.
fchkp-optimizeC ObjC C++ ObjC++ LTO WarnRemoved
fchkp-store-boundsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-treat-zero-dynamic-size-as-infiniteC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-use-fast-string-functionsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-use-nochk-string-functionsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-use-static-boundsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-use-static-const-boundsC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-use-wrappersC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fchkp-zero-input-bounds-for-mainC ObjC C++ ObjC++ LTO WarnRemovedRemoved in GCC 9.  This switch has no effect.
fcilkplusC ObjC C++ ObjC++ LTO Undocumented IgnoreRemoved in GCC 8.  This switch has no effect.
fcoarray=Fortran RejectNegative Joined Enum(gfc_fcoarray) Var(flag_coarray) Init(GFC_FCOARRAY_NONE)-fcoarray=<none|single|lib>	Specify which coarray parallelization should be used.
fcode-hoistingCommon Report Var(flag_code_hoisting) OptimizationEnable code hoisting.
fcombine-stack-adjustmentsCommon Report Var(flag_combine_stack_adjustments) OptimizationLooks for opportunities to reduce stack adjustments and stack references.
fcommonCommon Report Var(flag_no_common,0) Init(1)Put uninitialized globals in the common section.
fcompare-debugDriver
fcompare-debug-secondCommon Driver RejectNegative Var(flag_compare_debug)Run only the second compilation of -fcompare-debug.
fcompare-debug=Common Driver JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)-fcompare-debug[=<opts>]	Compile with and without e.g. -gtoggle, and compare the final-insns dump.
fcompare-elimCommon Report Var(flag_compare_elim_after_reload) OptimizationPerform comparison elimination after register allocation has finished.
fconceptsC++ ObjC++ Var(flag_concepts)Enable support for C++ concepts.
fconcepts-diagnostics-depth=C++ ObjC++ Joined RejectNegative UInteger Var(concepts_diagnostics_max_depth) Init(1)Specify maximum error replay depth during recursive diagnosis of a constraint satisfaction failure.
fconcepts-tsC++ ObjC++ Var(flag_concepts_ts) Init(0)Enable certain features present in the Concepts TS.
fcond-mismatchC ObjC C++ ObjC++Allow the arguments of the '?' operator to have different types.
fconserve-spaceC++ ObjC++ IgnoreDoes nothing.  Preserved for backward compatibility.
fconserve-stackCommon Var(flag_conserve_stack) OptimizationDo not perform optimizations increasing noticeably stack usage.
fconstant-string-class=ObjC ObjC++ Joined MissingArgError(no class name specified with %qs)-fconst-string-class=<name>	Use class <name> for constant strings.
fconstexpr-cache-depth=C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_cache_depth) Init(8)-fconstexpr-cache-depth=<number>	Specify maximum constexpr recursion cache depth.
fconstexpr-depth=C++ ObjC++ Joined RejectNegative UInteger Var(max_constexpr_depth) Init(512)-fconstexpr-depth=<number>	Specify maximum constexpr recursion depth.
fconstexpr-loop-limit=C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_loop_limit) Init(262144)-fconstexpr-loop-limit=<number>	Specify maximum constexpr loop iteration count.
fconstexpr-ops-limit=C++ ObjC++ Joined RejectNegative Host_Wide_Int Var(constexpr_ops_limit) Init(33554432)-fconstexpr-ops-limit=<number>	Specify maximum number of constexpr operations during a single constexpr evaluation.
fconvert=Fortran RejectNegative Joined Enum(gfc_convert) Var(flag_convert) Init(GFC_FLAG_CONVERT_NATIVE)-fconvert=<big-endian|little-endian|native|swap>	The endianness used for unformatted files.
fcoroutinesC++ LTO Var(flag_coroutines)Enable C++ coroutines (experimental).
fcprop-registersCommon Report Var(flag_cprop_registers) OptimizationPerform a register copy-propagation optimization pass.
fcray-pointerFortran Var(flag_cray_pointer)Use the Cray Pointer extension.
fcrossjumpingCommon Report Var(flag_crossjumping) OptimizationPerform cross-jumping optimization.
fcse-follow-jumpsCommon Report Var(flag_cse_follow_jumps) OptimizationWhen running CSE, follow jumps to their targets.
fcse-skip-blocksCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fcx-fortran-rulesCommon Report Var(flag_cx_fortran_rules) OptimizationComplex multiplication and division follow Fortran rules.
fcx-limited-rangeCommon Report Var(flag_cx_limited_range) Optimization SetByCombinedOmit range reduction step when performing complex division.
fd-lines-as-codeFortran RejectNegativeIgnore 'D' in column one in fixed form.
fd-lines-as-commentsFortran RejectNegativeTreat lines with 'D' in column one as comments.
fdata-sectionsCommon Report Var(flag_data_sections)Place data items into their own section.
fdbg-cnt-listCommon Report Var(common_deferred_options) DeferList all available debugging counters with their limits and counts.
fdbg-cnt=Common RejectNegative Joined Var(common_deferred_options) Defer-fdbg-cnt=<counter>[:<lower_limit1>-]<upper_limit1>[:<lower_limit2>-<upper_limit2>:...][,<counter>:...]	Set the debug counter limit.
fdceCommon Var(flag_dce) Init(1) OptimizationUse the RTL dead code elimination pass.
fdebugDCompile in debug code.
fdebug-cppC ObjC C++ ObjC++Emit debug annotations during preprocessing.
fdebug-prefix-map=Common Joined RejectNegative Var(common_deferred_options) Defer-fdebug-prefix-map=<old>=<new>	Map one directory name to another in debug information.
fdebug-regex-map=Common Joined RejectNegative Var(common_deferred_options) DeferMap one directory name to another in debug information using regular expression matching.
fdebug-types-sectionCommon Report Var(flag_debug_types_section) Init(0)Output .debug_types section when using DWARF v4 debuginfo.
fdebug=D Joined RejectNegative-fdebug=<level|ident>	Compile in debug code, code <= <level>, or code identified by <ident>.
fdecFortran Var(flag_dec)Enable all DEC language extensions.
fdec-blank-format-itemFortran Var(flag_dec_blank_format_item)Enable the use of blank format items in format strings.
fdec-char-conversionsFortran Var(flag_dec_char_conversions)Enable the use of character literals in assignments and data statementsfor non-character variables.
fdec-format-defaultsFortran Var(flag_dec_format_defaults)Enable default widths for i, f and g format specifiers.
fdec-includeFortran Var(flag_dec_include)Enable legacy parsing of INCLUDE as statement.
fdec-intrinsic-intsFortran Var(flag_dec_intrinsic_ints)Enable kind-specific variants of integer intrinsic functions.
fdec-mathFortran Var(flag_dec_math)Enable legacy math intrinsics for compatibility.
fdec-staticFortran Var(flag_dec_static)Enable DEC-style STATIC and AUTOMATIC attributes.
fdec-structureFortran Var(flag_dec_structure)Enable support for DEC STRUCTURE/RECORD.
fdeclone-ctor-dtorC++ ObjC++ Var(flag_declone_ctor_dtor) Init(-1)Factor complex constructors and destructors to favor space over speed.
fdeduce-init-listC++ ObjC++ IgnoreDoes nothing.  Preserved for backward compatibility.
fdefault-double-8Fortran Var(flag_default_double)Set the default double precision kind to an 8 byte wide type.
fdefault-inlineC++ ObjC++ IgnoreDoes nothing.  Preserved for backward compatibility.
fdefault-integer-8Fortran Var(flag_default_integer)Set the default integer kind to an 8 byte wide type.
fdefault-real-10Fortran Var(flag_default_real_10)Set the default real kind to an 10 byte wide type.
fdefault-real-16Fortran Var(flag_default_real_16)Set the default real kind to an 16 byte wide type.
fdefault-real-8Fortran Var(flag_default_real_8)Set the default real kind to an 8 byte wide type.
fdefer-popCommon Report Var(flag_defer_pop) OptimizationDefer popping functions args from stack until later.
fdelayed-branchCommon Report Var(flag_delayed_branch) OptimizationAttempt to fill delay slots of branch instructions.
fdelete-dead-exceptionsCommon Report Var(flag_delete_dead_exceptions) Init(0) OptimizationDelete dead instructions that may throw exceptions.
fdelete-null-pointer-checksCommon Report Var(flag_delete_null_pointer_checks) Init(-1) OptimizationDelete useless null pointer checks.
fdevirtualizeCommon Report Var(flag_devirtualize) OptimizationTry to convert virtual calls to direct ones.
fdevirtualize-at-ltransCommon Report Var(flag_ltrans_devirtualize)Stream extra data to support more aggressive devirtualization in LTO local transformation mode.
fdevirtualize-speculativelyCommon Report Var(flag_devirtualize_speculatively) OptimizationPerform speculative devirtualization.
fdiagnostics-colorCommon Alias(fdiagnostics-color=,always,never)
fdiagnostics-color=Driver Common Joined RejectNegative Var(flag_diagnostics_show_color) Enum(diagnostic_color_rule) Init(DIAGNOSTICS_COLOR_NO)-fdiagnostics-color=[never|always|auto]	Colorize diagnostics.
fdiagnostics-format=Common Joined RejectNegative Enum(diagnostics_output_format)-fdiagnostics-format=[text|json]	Select output format.
fdiagnostics-generate-patchCommon Var(flag_diagnostics_generate_patch)Print fix-it hints to stderr in unified diff format.
fdiagnostics-minimum-margin-width=Common Joined UInteger Var(diagnostics_minimum_margin_width) Init(6)Set minimum width of left margin of source code when showing source.
fdiagnostics-parseable-fixitsCommon Var(flag_diagnostics_parseable_fixits)Print fix-it hints in machine-readable form.
fdiagnostics-path-format=Common Joined RejectNegative Var(flag_diagnostics_path_format) Enum(diagnostic_path_format) Init(DPF_INLINE_EVENTS)Specify how to print any control-flow path associated with a diagnostic.
fdiagnostics-show-caretCommon Var(flag_diagnostics_show_caret) Init(1)Show the source line with a caret indicating the column.
fdiagnostics-show-cweCommon Var(flag_diagnostics_show_cwe) Init(1)Print CWE identifiers for diagnostic messages, where available.
fdiagnostics-show-labelsCommon Var(flag_diagnostics_show_labels) Init(1)Show labels annotating ranges of source code when showing source.
fdiagnostics-show-line-numbersCommon Var(flag_diagnostics_show_line_numbers) Init(1)Show line numbers in the left margin when showing source.
fdiagnostics-show-location=Common Joined RejectNegative Enum(diagnostic_prefixing_rule)-fdiagnostics-show-location=[once|every-line]	How often to emit source location at the beginning of line-wrapped diagnostics.
fdiagnostics-show-optionCommon Var(flag_diagnostics_show_option) Init(1)Amend appropriate diagnostic messages with the command line option that controls them.
fdiagnostics-show-path-depthsCommon Var(flag_diagnostics_show_path_depths) Init(0)Show stack depths of events in paths.
fdiagnostics-show-template-treeC++ ObjC++ Var(flag_diagnostics_show_template_tree) Init(0)Print hierarchical comparisons when template types are mismatched.
fdiagnostics-urls=Driver Common Joined RejectNegative Var(flag_diagnostics_show_urls) Enum(diagnostic_url_rule) Init(DIAGNOSTICS_URL_AUTO)-fdiagnostics-urls=[never|always|auto]	Embed URLs in diagnostics.
fdirectives-onlyC ObjC C++ ObjC++Preprocess directives only.
fdisable-Common Joined RejectNegative Var(common_deferred_options) Defer-fdisable-[tree|rtl|ipa]-<pass>=range1+range2	Disable an optimization pass.
fdocDGenerate documentation.
fdoc-dir=D Joined RejectNegative-fdoc-dir=<dir>	Write documentation file to directory <dir>.
fdoc-file=D Joined RejectNegative-fdoc-file=<file>	Write documentation to <file>.
fdoc-inc=D Joined RejectNegative-fdoc-inc=<file>	Include a Ddoc macro <file>.
fdollar-okFortran Var(flag_dollar_ok)Allow dollar signs in entity names.
fdollars-in-identifiersC ObjC C++ ObjC++Permit '$' as an identifier character.
fdruntimeDAssume that standard D runtime libraries and \"D main\" exist.
fdseCommon Var(flag_dse) Init(0) OptimizationUse the RTL dead store elimination pass.
fdump-Common Joined RejectNegative Var(common_deferred_options) Defer-fdump-<type>	Dump various compiler internals to a file.
fdump-ada-specC ObjC C++ ObjC++ RejectNegative Var(flag_dump_ada_spec)Write all declarations as Ada code transitively.
fdump-ada-spec-slimC ObjC C++ ObjC++ RejectNegative Var(flag_dump_ada_spec_slim)Write all declarations as Ada code for the given file only.
fdump-analyzerCommon RejectNegative Var(flag_dump_analyzer)Dump various analyzer internals to SRCFILE.analyzer.txt.
fdump-analyzer-callgraphCommon RejectNegative Var(flag_dump_analyzer_callgraph)Dump analyzer-specific call graph information to a SRCFILE.callgraph.dot file.
fdump-analyzer-exploded-graphCommon RejectNegative Var(flag_dump_analyzer_exploded_graph)Dump the analyzer exploded graph to a SRCFILE.eg.dot file.
fdump-analyzer-exploded-nodesCommon RejectNegative Var(flag_dump_analyzer_exploded_nodes)Emit diagnostics showing the location of nodes in the exploded graph.
fdump-analyzer-exploded-nodes-2Common RejectNegative Var(flag_dump_analyzer_exploded_nodes_2)Dump a textual representation of the exploded graph to SRCFILE.eg.txt.
fdump-analyzer-exploded-nodes-3Common RejectNegative Var(flag_dump_analyzer_exploded_nodes_3)Dump a textual representation of the exploded graph to SRCFILE.eg-ID.txt.
fdump-analyzer-state-purgeCommon RejectNegative Var(flag_dump_analyzer_state_purge)Dump state-purging information to a SRCFILE.state-purge.dot file.
fdump-analyzer-stderrCommon RejectNegative Var(flag_dump_analyzer_stderr)Dump various analyzer internals to stderr.
fdump-analyzer-supergraphCommon RejectNegative Var(flag_dump_analyzer_supergraph)Dump the analyzer supergraph to a SRCFILE.supergraph.dot file.
fdump-coreFortran IgnoreDoes nothing. Preserved for backward compatibility.
fdump-d-originalDDisplay the frontend AST after parsing and semantic passes.
fdump-final-insnsDriver RejectNegative
fdump-final-insns=Common RejectNegative Joined Var(flag_dump_final_insns)-fdump-final-insns=filename	Dump to filename the insns at the end of translation.
fdump-fortran-globalFortran Var(flag_dump_fortran_global)Display the global symbol table after parsing.
fdump-fortran-optimizedFortran Var(flag_dump_fortran_optimized)Display the code tree after front end optimization.
fdump-fortran-originalFortran Var(flag_dump_fortran_original)Display the code tree after parsing.
fdump-go-spec=Common RejectNegative Joined Var(flag_dump_go_spec)-fdump-go-spec=filename	Write all declarations to file as Go code.
fdump-internal-locationsCommon Var(flag_dump_locations) Init(0)Dump detailed information on GCC's internal representation of source code locations.
fdump-noaddrCommon Report Var(flag_dump_noaddr)Suppress output of addresses in debugging dumps.
fdump-parse-treeFortran Alias(fdump-fortran-original)Display the code tree after parsing; deprecated option.
fdump-passesCommon Var(flag_dump_passes) Init(0)Dump optimization passes.
fdump-unnumberedCommon Report Var(flag_dump_unnumbered)Suppress output of instruction numbers, line number notes and addresses in debugging dumps.
fdump-unnumbered-linksCommon Report Var(flag_dump_unnumbered_links)Suppress output of previous and next insn numbers in debugging dumps.
fdwarf2-cfi-asmCommon Report Var(flag_dwarf2_cfi_asm) Init(HAVE_GAS_CFI_DIRECTIVE)Enable CFI tables via GAS assembler directives.
fearly-inliningCommon Report Var(flag_early_inlining) Init(1) OptimizationPerform early inlining.
felide-constructorsC++ ObjC++ Var(flag_elide_constructors) Init(1)
felide-typeC++ ObjC++ Var(flag_elide_type) Init(1)Do not elide common elements in template comparisons.
feliminate-dwarf2-dupsCommon IgnoreDoes nothing.  Preserved for backward compatibility.
feliminate-unused-debug-symbolsCommon Report Var(flag_debug_only_used_symbols) Init(1)Perform unused symbol elimination in debug info.
feliminate-unused-debug-typesCommon Report Var(flag_eliminate_unused_debug_types) Init(1)Perform unused type elimination in debug info.
femit-class-debug-alwaysCommon Report Var(flag_emit_class_debug_always) Init(0)Do not suppress C++ class debug information.
femit-struct-debug-baseonlyC ObjC C++ ObjC++-femit-struct-debug-baseonly	Aggressive reduced debug info for structs.
femit-struct-debug-detailed=C ObjC C++ ObjC++ Joined-femit-struct-debug-detailed=<spec-list>	Detailed reduced debug info for structs.
femit-struct-debug-reducedC ObjC C++ ObjC++-femit-struct-debug-reduced	Conservative reduced debug info for structs.
fenable-Common Joined RejectNegative Var(common_deferred_options) Defer-fenable-[tree|rtl|ipa]-<pass>=range1+range2	Enable an optimization pass.
fenforce-eh-specsC++ ObjC++ Var(flag_enforce_eh_specs) Init(1)Generate code to check exception specifications.
fenum-int-equivC++ ObjC++ WarnRemoved
fexceptionsCommon Report Var(flag_exceptions) OptimizationEnable exception handling.
fexcess-precision=Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision) Init(EXCESS_PRECISION_DEFAULT) Optimization SetByCombined-fexcess-precision=[fast|standard]	Specify handling of excess floating-point precision.
fexec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fexec-charset=<cset>	Convert all strings and character constants to character set <cset>.
fexpensive-optimizationsCommon Report Var(flag_expensive_optimizations) OptimizationPerform a number of minor, expensive optimizations.
fext-numeric-literalsC++ ObjC++ Var(flag_ext_numeric_literals) Init(1)Interpret imaginary, fixed-point, or other gnu number suffix as the correspondingnumber literal rather than a user-defined number literal.
fextended-identifiersC ObjC C++ ObjC++Permit universal character names (\\u and \\U) in identifiers.
fextern-tls-initC++ ObjC++ Var(flag_extern_tls_init) Init(-1)Support dynamic initialization of thread-local variables in a different translation unit.
fexternal-blasFortran Var(flag_external_blas)Specify that an external BLAS library should be used for matmul calls on large-size arrays.
fexternal-templatesC++ ObjC++ WarnRemoved
ff2cFortran Var(flag_f2c)Use f2c calling convention.
ffast-mathCommon Optimization
ffat-lto-objectsCommon Var(flag_fat_lto_objects)Output lto objects containing both the intermediate language and binary output.
ffile-prefix-map=Common Joined RejectNegative Var(common_deferred_options) Defer-ffile-prefix-map=<old>=<new>	Map one directory name to another in compilation result.
ffinite-loopsCommon Report Var(flag_finite_loops) Optimization Init(0)Assume that loops with an exit will terminate and not loop indefinitely.
ffinite-math-onlyCommon Report Var(flag_finite_math_only) Optimization SetByCombinedAssume no NaNs or infinities are generated.
ffixed-Common Joined RejectNegative Var(common_deferred_options) Defer-ffixed-<register>	Mark <register> as being unavailable to the compiler.
ffixed-formFortran RejectNegativeAssume that the source file is fixed form.
ffixed-line-length-Fortran RejectNegative Joined UInteger Var(flag_fixed_line_length) Init(72)-ffixed-line-length-<n>	Use n as character line width in fixed mode.
ffixed-line-length-noneFortran RejectNegative Var(flag_fixed_line_length,0)Allow arbitrary character line width in fixed mode.
ffloat-storeCommon Report Var(flag_float_store) OptimizationDon't allocate floats and doubles in extended-precision registers.
ffor-scopeC++ ObjC++ WarnRemoved
fforce-addrCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fforward-propagateCommon Report Var(flag_forward_propagate) OptimizationPerform a forward propagation pass on RTL.
ffp-contract=Common Joined RejectNegative Enum(fp_contract_mode) Var(flag_fp_contract_mode) Init(FP_CONTRACT_FAST) Optimization-ffp-contract=[off|on|fast]	Perform floating-point expression contraction.
ffp-int-builtin-inexactCommon Report Var(flag_fp_int_builtin_inexact) Init(1) OptimizationAllow built-in functions ceil, floor, round, trunc to raise \"inexact\" exceptions.
ffpe-summary=Fortran RejectNegative JoinedOrMissing-ffpe-summary=[...]	Print summary of floating point exceptions.
ffpe-trap=Fortran RejectNegative JoinedOrMissing-ffpe-trap=[...]	Stop on following floating point exceptions.
ffree-formFortran RejectNegativeAssume that the source file is free form.
ffree-line-length-Fortran RejectNegative Joined UInteger Var(flag_free_line_length) Init(132)-ffree-line-length-<n>	Use n as character line width in free mode.
ffree-line-length-noneFortran RejectNegative Var(flag_free_line_length,0)Allow arbitrary character line width in free mode.
ffreestandingC ObjC C++ ObjC++Do not assume that standard C libraries and \"main\" exist.
ffriend-injectionC++ ObjC++ WarnRemoved
ffrontend-loop-interchangeFortran Var(flag_frontend_loop_interchange) Init(-1)Try to interchange loops if profitable.
ffrontend-optimizeFortran Var(flag_frontend_optimize) Init(-1)Enable front end optimization.
ffunction-cseCommon Report Var(flag_no_function_cse,0) OptimizationAllow function addresses to be held in registers.
ffunction-sectionsCommon Report Var(flag_function_sections)Place each function into its own section.
fgcseCommon Report Var(flag_gcse) OptimizationPerform global common subexpression elimination.
fgcse-after-reloadCommon Report Var(flag_gcse_after_reload) OptimizationPerform global common subexpression elimination after register allocation hasfinished.
fgcse-lasCommon Report Var(flag_gcse_las) Init(0) OptimizationPerform redundant load after store elimination in global common subexpressionelimination.
fgcse-lmCommon Report Var(flag_gcse_lm) Init(1) OptimizationPerform enhanced load motion during global common subexpression elimination.
fgcse-smCommon Report Var(flag_gcse_sm) Init(0) OptimizationPerform store motion after global common subexpression elimination.
fgimpleC Var(flag_gimple) Init(0)Enable parsing GIMPLE.
fgnat-encodings=Common Enum(dwarf_gnat_encodings) Joined RejectNegative Report Undocumented Var(gnat_encodings)-fgnat-encodings=[all|gdb|minimal]	Select the balance between GNAT encodings and standard DWARF emitted in the debug information.
fgnu-keywordsC++ ObjC++ Var(flag_no_gnu_keywords, 0)Recognize GNU-defined keywords.
fgnu-runtimeObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)Generate code for GNU runtime environment.
fgnu-tmCommon Report Var(flag_tm)Enable support for GNU transactional memory.
fgnu-uniqueCommon Report Var(flag_gnu_unique) Init(1)Use STB_GNU_UNIQUE if supported by the assembler.
fgnu89-inlineC ObjC Var(flag_gnu89_inline) Init(-1)Use traditional GNU semantics for inline functions.
fgraphiteCommon Report Var(flag_graphite) OptimizationEnable in and out of Graphite representation.
fgraphite-identityCommon Report Var(flag_graphite_identity) OptimizationEnable Graphite Identity transformation.
fguess-branch-probabilityCommon Report Var(flag_guess_branch_prob) OptimizationEnable guessing of branch probabilities.
fguiding-declsC++ ObjC++ WarnRemoved
fhandle-exceptionsC++ ObjC++ Optimization Alias(fexceptions) Warn({%<-fhandle-exceptions%> has been renamed %<-fexceptions%> (and is now on by default)})
fhelpCommon Driver Alias(-help)
fhelp=Common Driver Joined Alias(-help=)
fhoist-adjacent-loadsCommon Report Var(flag_hoist_adjacent_loads) OptimizationEnable hoisting adjacent loads to encourage generating conditional moveinstructions.
fhonor-stdC++ ObjC++ WarnRemoved
fhostedC ObjCAssume normal C execution environment.
fhuge-objectsC++ ObjC++ WarnRemovedNo longer supported.
fidentCommon Report Var(flag_no_ident,0)Process #ident directives.
fif-conversionCommon Report Var(flag_if_conversion) OptimizationPerform conversion of conditional jumps to branchless equivalents.
fif-conversion2Common Report Var(flag_if_conversion2) OptimizationPerform conversion of conditional jumps to conditional execution.
fignore-unknown-pragmasDIgnore unsupported pragmas.
fimplement-inlinesC++ ObjC++ Var(flag_implement_inlines) Init(1)Export functions even if they can be inlined.
fimplicit-inline-templatesC++ ObjC++ Var(flag_implicit_inline_templates) Init(1)Emit implicit instantiations of inline templates.
fimplicit-noneFortran Var(flag_implicit_none)Specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements.
fimplicit-templatesC++ ObjC++ Var(flag_implicit_templates) Init(1)Emit implicit instantiations of templates.
findirect-inliningCommon Report Var(flag_indirect_inlining) OptimizationPerform indirect inlining.
finhibit-size-directiveCommon Report Var(flag_inhibit_size_directive)Do not generate .size directives.
finit-character=Fortran RejectNegative Joined UInteger-finit-character=<n>	Initialize local character variables to ASCII value n.
finit-derivedFortran Var(flag_init_derived)Initialize components of derived type variables according to other init flags.
finit-integer=Fortran RejectNegative Joined-finit-integer=<n>	Initialize local integer variables to n.
finit-local-zeroFortranInitialize local variables to zero (from g77).
finit-logical=Fortran RejectNegative Joined-finit-logical=<true|false>	Initialize local logical variables.
finit-real=Fortran RejectNegative ToLower Joined Enum(gfc_init_local_real) Var(flag_init_real) Init(GFC_INIT_REAL_OFF)-finit-real=<zero|snan|nan|inf|-inf>	Initialize local real variables.
finlineCommon Report Var(flag_no_inline,0) Init(0) OptimizationEnable inlining of function declared \"inline\", disabling disables all inlining.
finline-arg-packingFortran  Var(flag_inline_arg_packing) Init(-1)-finline-arg-packing	Perform argument packing inline.
finline-atomicsCommon Report Var(flag_inline_atomics) Init(1) OptimizationInline __atomic operations when a lock free instruction sequence is available.
finline-functionsCommon Report Var(flag_inline_functions) OptimizationIntegrate functions not declared \"inline\" into their callers when profitable.
finline-functions-called-onceCommon Report Var(flag_inline_functions_called_once) OptimizationIntegrate functions only required by their single caller.
finline-limit-Common RejectNegative Joined Alias(finline-limit=)
finline-limit=Common RejectNegative Joined UInteger-finline-limit=<number>	Limit the size of inlined functions to <number>.
finline-matmul-limit=Fortran RejectNegative Joined UInteger Var(flag_inline_matmul_limit) Init(-1)-finline-matmul-limit=<n>	Specify the size of the largest matrix for which matmul will be inlined.
finline-small-functionsCommon Report Var(flag_inline_small_functions) OptimizationIntegrate functions into their callers when code size is known not to grow.
finput-charset=C ObjC C++ ObjC++ Joined RejectNegative-finput-charset=<cset>	Specify the default character set for source files.
finstrument-functionsCommon Report Var(flag_instrument_function_entry_exit)Instrument function entry and exit with profiling calls.
finstrument-functions-exclude-file-list=Common RejectNegative Joined-finstrument-functions-exclude-file-list=filename,...	Do not instrument functions listed in files.
finstrument-functions-exclude-function-list=Common RejectNegative Joined-finstrument-functions-exclude-function-list=name,...	Do not instrument listed functions.
finteger-4-integer-8Fortran RejectNegative Var(flag_integer4_kind,8)Interpret any INTEGER(4) as an INTEGER(8).
fintrinsic-modules-pathFortran RejectNegative SeparateSpecify where to find the compiled intrinsic modules.
fintrinsic-modules-path=Fortran RejectNegative JoinedSpecify where to find the compiled intrinsic modules.
finvariantsD Var(flag_invariants)Generate code for class invariant contracts.
fipa-bit-cpCommon Report Var(flag_ipa_bit_cp) OptimizationPerform interprocedural bitwise constant propagation.
fipa-cpCommon Report Var(flag_ipa_cp) OptimizationPerform interprocedural constant propagation.
fipa-cp-alignmentCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fipa-cp-cloneCommon Report Var(flag_ipa_cp_clone) OptimizationPerform cloning to make Interprocedural constant propagation stronger.
fipa-icfCommon Report Var(flag_ipa_icf) OptimizationPerform Identical Code Folding for functions and read-only variables.
fipa-icf-functionsCommon Report Var(flag_ipa_icf_functions) OptimizationPerform Identical Code Folding for functions.
fipa-icf-variablesCommon Report Var(flag_ipa_icf_variables) OptimizationPerform Identical Code Folding for variables.
fipa-matrix-reorgCommon IgnoreDoes nothing. Preserved for backward compatibility.
fipa-profileCommon Report Var(flag_ipa_profile) Init(0) OptimizationPerform interprocedural profile propagation.
fipa-ptaCommon Report Var(flag_ipa_pta) Init(0) OptimizationPerform interprocedural points-to analysis.
fipa-pure-constCommon Report Var(flag_ipa_pure_const) Init(0) OptimizationDiscover pure and const functions.
fipa-raCommon Report Var(flag_ipa_ra) OptimizationUse caller save register across calls if possible.
fipa-referenceCommon Report Var(flag_ipa_reference) Init(0) OptimizationDiscover read-only and non addressable static variables.
fipa-reference-addressableCommon Report Var(flag_ipa_reference_addressable) Init(0) OptimizationDiscover read-only, write-only and non-addressable static variables.
fipa-sraCommon Report Var(flag_ipa_sra) Init(0) OptimizationPerform interprocedural reduction of aggregates.
fipa-stack-alignmentCommon Report Var(flag_ipa_stack_alignment) Init(1) OptimizationReduce stack alignment on call sites if possible.
fipa-struct-reorgCommon IgnoreDoes nothing. Preserved for backward compatibility.
fipa-vrpCommon Report Var(flag_ipa_vrp) OptimizationPerform IPA Value Range Propagation.
fira-algorithm=Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB) Optimization-fira-algorithm=[CB|priority]	Set the used IRA algorithm.
fira-hoist-pressureCommon Report Var(flag_ira_hoist_pressure) Init(1) OptimizationUse IRA based register pressure calculationin RTL hoist optimizations.
fira-loop-pressureCommon Report Var(flag_ira_loop_pressure) OptimizationUse IRA based register pressure calculationin RTL loop optimizations.
fira-region=Common Joined RejectNegative Enum(ira_region) Var(flag_ira_region) Init(IRA_REGION_AUTODETECT) Optimization-fira-region=[one|all|mixed]	Set regions for IRA.
fira-share-save-slotsCommon Report Var(flag_ira_share_save_slots) Init(1) OptimizationShare slots for saving different hard registers.
fira-share-spill-slotsCommon Report Var(flag_ira_share_spill_slots) Init(1) OptimizationShare stack slots for spilled pseudo-registers.
fira-verbose=Common RejectNegative Joined UInteger Var(flag_ira_verbose) Init(5)-fira-verbose=<number>	Control IRA's level of diagnostic messages.
fisolate-erroneous-paths-attributeCommon Report Var(flag_isolate_erroneous_paths_attribute) OptimizationDetect paths that trigger erroneous or undefined behavior due to a null valuebeing used in a way forbidden by a returns_nonnull or nonnullattribute.  Isolate those paths from the main control flow and turn thestatement with erroneous or undefined behavior into a trap.
fisolate-erroneous-paths-dereferenceCommon Report Var(flag_isolate_erroneous_paths_dereference) OptimizationDetect paths that trigger erroneous or undefined behavior due todereferencing a null pointer.  Isolate those paths from the main controlflow and turn the statement with erroneous or undefined behavior into a trap.
fivar-visibility=ObjC ObjC++ Joined RejectNegative Enum(ivar_visibility) Var(default_ivar_visibility) Init(IVAR_VISIBILITY_PROTECTED)-fvisibility=[private|protected|public|package]	Set the default symbol visibility.
fivoptsCommon Report Var(flag_ivopts) Init(1) OptimizationOptimize induction variables on trees.
fjump-tablesCommon Var(flag_jump_tables) Init(1) OptimizationUse jump tables for sufficiently large switch statements.
fkeep-gc-roots-liveCommon Undocumented Report Var(flag_keep_gc_roots_live) Optimization
fkeep-inline-dllexportC C++ ObjC ObjC++ Var(flag_keep_inline_dllexport) Init(1) Report Condition(TARGET_DLLIMPORT_DECL_ATTRIBUTES)Don't emit dllexported inline functions unless needed.
fkeep-inline-functionsCommon Report Var(flag_keep_inline_functions)Generate code for functions even if they are fully inlined.
fkeep-static-constsCommon Report Var(flag_keep_static_consts) Init(1)Emit static const variables even if they are not used.
fkeep-static-functionsCommon Report Var(flag_keep_static_functions)Generate code for static functions even if they are never called.
flabels-okC++ ObjC++ WarnRemoved
flax-vector-conversionsC ObjC C++ ObjC++ Var(flag_lax_vector_conversions)Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.
fleading-underscoreCommon Report Var(flag_leading_underscore) Init(-1)Give external symbols a leading underscore.
flifetime-dseCommon Report Var(flag_lifetime_dse,2) Init(2) OptimizationTell DSE that the storage for a C++ object is dead when the constructorstarts and when the destructor finishes.
flifetime-dse=Common Joined RejectNegative UInteger Var(flag_lifetime_dse) Optimization IntegerRange(0, 2)
flimit-function-alignmentCommon Report Var(flag_limit_function_alignment) Optimization Init(0)
flinker-output=LTO Report Driver Joined RejectNegative Enum(lto_linker_output) Var(flag_lto_linker_output) Init(LTO_LINKER_OUTPUT_UNKNOWN)Set linker output type (used internally during LTO optimization).
flive-patchingCommon RejectNegative Alias(flive-patching=,inline-clone) Optimization
flive-patching=Common Report Joined RejectNegative Enum(live_patching_level) Var(flag_live_patching) Init(LIVE_PATCHING_NONE) Optimization-flive-patching=[inline-only-static|inline-clone]	Control IPAoptimizations to provide a safe compilation for live-patching.  At the sametime, provides multiple-level control on the enabled IPA optimizations.
flive-range-shrinkageCommon Report Var(flag_live_range_shrinkage) Init(0) OptimizationRelief of register pressure through live range shrinkage.
flocal-ivarsObjC ObjC++ Var(flag_local_ivars) Init(1)Allow access to instance variables as if they were local declarations within instance method implementations.
floop-blockCommon Alias(floop-nest-optimize)Enable loop nest transforms.  Same as -floop-nest-optimize.
floop-flattenCommon IgnoreDoes nothing. Preserved for backward compatibility.
floop-interchangeCommon Report Var(flag_loop_interchange) OptimizationEnable loop interchange on trees.
floop-nest-optimizeCommon Report Var(flag_loop_nest_optimize) OptimizationEnable the loop nest optimizer.
floop-optimizeCommon IgnoreDoes nothing.  Preserved for backward compatibility.
floop-parallelize-allCommon Report Var(flag_loop_parallelize_all) OptimizationMark all loops as parallel.
floop-strip-mineCommon Alias(floop-nest-optimize)Enable loop nest transforms.  Same as -floop-nest-optimize.
floop-unroll-and-jamCommon Report Var(flag_unroll_jam) OptimizationPerform unroll-and-jam on loops.
flra-rematCommon Report Var(flag_lra_remat) OptimizationDo CFG-sensitive rematerialization in LRA.
fltoCommonEnable link-time optimization.
flto-compression-level=Common Joined RejectNegative UInteger Var(flag_lto_compression_level) Init(-1) IntegerRange(0, 19)-flto-compression-level=<number>	Use zlib/zstd compression level <number> for IL.
flto-odr-type-mergingCommon IgnoreDoes nothing.  Preserved for backward compatibility.
flto-partition=Common Joined RejectNegative Enum(lto_partition_model) Var(flag_lto_partition) Init(LTO_PARTITION_BALANCED)Specify the algorithm to partition symbols and vars at linktime.
flto-reportCommon Report Var(flag_lto_report) Init(0)Report various link-time optimization statistics.
flto-report-wpaCommon Report Var(flag_lto_report_wpa) Init(0)Report various link-time optimization statistics for WPA only.
flto=Common RejectNegative Joined Var(flag_lto)Link-time optimization with number of parallel jobs or jobserver.
fltransLTO Report Var(flag_ltrans)Run the link-time optimizer in local transformation (LTRANS) mode.
fltrans-output-list=LTO Joined Var(ltrans_output_list)Specify a file to which a list of files output by LTRANS is written.
fmacro-prefix-map=C ObjC C++ ObjC++ Joined RejectNegative-fmacro-prefix-map=<old>=<new>	Map one directory name to another in __FILE__, __BASE_FILE__, and __builtin_FILE().
fmainD RejectNegativeGenerate a default D main() function when compiling.
fmath-errnoCommon Report Var(flag_errno_math) Init(1) Optimization SetByCombinedSet errno after built-in math functions.
fmax-array-constructor=Fortran RejectNegative Joined UInteger Var(flag_max_array_constructor) Init(65535)-fmax-array-constructor=<n>	Maximum number of objects in an array constructor.
fmax-errors=Common Joined RejectNegative UInteger Var(flag_max_errors)-fmax-errors=<number>	Maximum number of errors to report.
fmax-identifier-length=Fortran RejectNegative Joined UInteger-fmax-identifier-length=<n>	Maximum identifier length.
fmax-include-depth=C ObjC C++ ObjC++ Joined RejectNegative UIntegerfmax-include-depth=<number> Set the maximum depth of the nested #include.
fmax-stack-var-size=Fortran RejectNegative Joined UInteger Var(flag_max_stack_var_size) Init(-2)-fmax-stack-var-size=<n>	Size in bytes of the largest array that will be put on the stack.
fmax-subrecord-length=Fortran RejectNegative Joined UInteger Var(flag_max_subrecord_length)-fmax-subrecord-length=<n>	Maximum length for subrecords.
fmem-reportCommon Report Var(mem_report)Report on permanent memory allocation.
fmem-report-wpaCommon Report Var(mem_report_wpa)Report on permanent memory allocation in WPA only.
fmerge-all-constantsCommon Report Var(flag_merge_constants,2) Init(1)Attempt to merge identical constants and constant variables.
fmerge-constantsCommon Report Var(flag_merge_constants,1)Attempt to merge identical constants across compilation units.
fmerge-debug-stringsCommon Report Var(flag_merge_debug_strings) Init(1)Attempt to merge identical debug strings across compilation units.
fmessage-length=Common RejectNegative Joined UInteger-fmessage-length=<number>	Limit diagnostics to <number> characters per line.  0 suppresses line-wrapping.
fmodule-file=D Joined RejectNegative-fmodule-file=<package.module>=<filespec>	use <filespec> as source file for <package.module>.
fmodule-privateFortran Var(flag_module_private)Set default accessibility of module entities to PRIVATE.
fmoduleinfoD Var(flag_moduleinfo)Generate ModuleInfo struct for output module.
fmodulo-schedCommon Report Var(flag_modulo_sched) OptimizationPerform SMS based modulo scheduling before the first scheduling pass.
fmodulo-sched-allow-regmovesCommon Report Var(flag_modulo_sched_allow_regmoves) OptimizationPerform SMS based modulo scheduling with register moves allowed.
fmove-loop-invariantsCommon Report Var(flag_move_loop_invariants) OptimizationMove loop invariant computations out of loops.
fms-extensionsC ObjC C++ ObjC++ Var(flag_ms_extensions)Don't warn about uses of Microsoft extensions.
fmudflapC ObjC C++ ObjC++ WarnRemoved
fmudflapirC ObjC C++ ObjC++ WarnRemoved
fmudflapthC ObjC C++ ObjC++ WarnRemoved
fname-mangling-version-C++ ObjC++ Joined WarnRemoved
fnew-abiC++ ObjC++ WarnRemoved
fnew-inheriting-ctorsC++ ObjC++ Var(flag_new_inheriting_ctors) Init(1)Implement C++17 inheriting constructor semantics.
fnew-ttp-matchingC++ ObjC++ Var(flag_new_ttp)Implement resolution of DR 150 for matching of template template arguments.
fnext-runtimeObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime)Generate code for NeXT (Apple Mac OS X) runtime environment.
fnil-receiversObjC ObjC++ Var(flag_nil_receivers) Init(1)Assume that receivers of Objective-C messages may be nil.
fnon-call-exceptionsCommon Report Var(flag_non_call_exceptions) OptimizationSupport synchronous non-call exceptions.
fnonansi-builtinsC++ ObjC++ Var(flag_no_nonansi_builtin, 0)
fnonnull-objectsC++ ObjC++ WarnRemoved
fnothrow-optC++ ObjC++ Optimization Var(flag_nothrow_opt)Treat a throw() exception specification as noexcept to improve code size.
fobjc-abi-version=ObjC ObjC++ LTO Joined Report RejectNegative UInteger Var(flag_objc_abi)Specify which ABI to use for Objective-C family code and meta-data generation.
fobjc-call-cxx-cdtorsObjC++ Var(flag_objc_call_cxx_cdtors)Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed.
fobjc-direct-dispatchObjC ObjC++ Var(flag_objc_direct_dispatch)Allow fast jumps to the message dispatcher.
fobjc-exceptionsObjC ObjC++ Var(flag_objc_exceptions)Enable Objective-C exception and synchronization syntax.
fobjc-gcObjC ObjC++ LTO Var(flag_objc_gc)Enable garbage collection (GC) in Objective-C/Objective-C++ programs.
fobjc-nilcheckObjC ObjC++ Var(flag_objc_nilcheck,1)Enable inline checks for nil receivers with the NeXT runtime and ABI version 2.
fobjc-sjlj-exceptionsObjC ObjC++ Var(flag_objc_sjlj_exceptions) Init(-1)Enable Objective-C setjmp exception handling runtime.
fobjc-std=objc1ObjC ObjC++ Var(flag_objc1_only)Conform to the Objective-C 1.0 language as implemented in GCC 4.0.
foffload-abi=Common Joined RejectNegative Enum(offload_abi) Var(flag_offload_abi) Init(OFFLOAD_ABI_UNSET)-foffload-abi=[lp64|ilp32]	Set the ABI to use in an offload compiler.
foffload=Common Driver Joined MissingArgError(options or targets missing after %qs)-foffload=<targets>=<options>	Specify offloading targets and options for them.
fomit-frame-pointerCommon Report Var(flag_omit_frame_pointer) OptimizationWhen possible do not generate stack frames.
fonly=D Joined RejectNegativeProcess all modules specified on the command line, but only generate code for the module specified by the argument.
fopenaccC ObjC C++ ObjC++ LTO Var(flag_openacc)Enable OpenACC.
fopenaccFortran LTO
fopenacc-dim=C ObjC C++ ObjC++ LTO Joined Var(flag_openacc_dims)Specify default OpenACC compute dimensions.
fopenacc-dim=Fortran LTO Joined Var(flag_openacc_dims)
fopenmpC ObjC C++ ObjC++ LTO Var(flag_openmp)Enable OpenMP (implies -frecursive in Fortran).
fopenmpFortran LTO
fopenmp-simdC ObjC C++ ObjC++ Var(flag_openmp_simd)Enable OpenMP's SIMD directives.
fopenmp-simdFortran
foperator-namesC++ ObjC++Recognize C++ keywords like \"compl\" and \"xor\".
fopt-infoCommon Report Var(flag_opt_info) OptimizationEnable all optimization info dumps on stderr.
fopt-info-Common Joined RejectNegative Var(common_deferred_options) Defer-fopt-info[-<type>=filename]	Dump compiler optimization details.
foptimize-register-moveCommon IgnoreDoes nothing. Preserved for backward compatibility.
foptimize-sibling-callsCommon Report Var(flag_optimize_sibling_calls) OptimizationOptimize sibling and tail recursive calls.
foptimize-strlenCommon Report Var(flag_optimize_strlen) OptimizationEnable string length optimizations on trees.
foptional-diagsC++ ObjC++ IgnoreDoes nothing.  Preserved for backward compatibility.
fpack-derivedFortran Var(flag_pack_derived)Try to lay out derived types as compactly as possible.
fpack-structCommon Report Var(flag_pack_struct) OptimizationPack structure members together without holes.
fpack-struct=Common RejectNegative Joined UInteger Optimization-fpack-struct=<number>	Set initial maximum structure member alignment.
fpad-sourceFortran Var(flag_pad_source) Init(1)Pad shorter fixed form lines to line width with spaces.
fpartial-inliningCommon Report Var(flag_partial_inlining) OptimizationPerform partial inlining.
fpatchable-function-entry=Common Joined OptimizationInsert NOP instructions at each function entry.
fpcc-struct-returnCommon Report Var(flag_pcc_struct_return,1) Init(DEFAULT_PCC_STRUCT_RETURN)Return small aggregates in memory, not registers.
fpch-depsC ObjC C++ ObjC++
fpch-preprocessC ObjC C++ ObjC++Look for and use PCH files even when preprocessing.
fpeel-loopsCommon Report Var(flag_peel_loops) OptimizationPerform loop peeling.
fpeepholeCommon Report Var(flag_no_peephole,0) OptimizationEnable machine specific peephole optimizations.
fpeephole2Common Report Var(flag_peephole2) OptimizationEnable an RTL peephole pass before sched2.
fpermissiveC++ ObjC++ Var(flag_permissive)Downgrade conformance errors to warnings.
fpermitted-flt-eval-methods=Common Joined RejectNegative Enum(permitted_flt_eval_methods) Var(flag_permitted_flt_eval_methods) Init(PERMITTED_FLT_EVAL_METHODS_DEFAULT)-fpermitted-flt-eval-methods=[c11|ts-18661]	Specify which values of FLT_EVAL_METHOD are permitted.
fpicCommon Report Var(flag_pic,1) Negative(fpie) Init(-1)Generate position-independent code if possible (small mode).
fpieCommon Report Var(flag_pie,1) Negative(fPIC) Init(-1)Generate position-independent code for executables if possible (small mode).
fplan9-extensionsC ObjC Var(flag_plan9_extensions)Enable Plan 9 language extensions.
fpltCommon Report Var(flag_plt) Init(1) OptimizationUse PLT for PIC calls (-fno-plt: load the address from GOT at call site).
fplugin-arg-Common Joined RejectNegative Var(common_deferred_options) Defer-fplugin-arg-<name>-<key>[=<value>]	Specify argument <key>=<value> for plugin <name>.
fplugin=Common Joined RejectNegative Var(common_deferred_options) DeferSpecify a plugin to load.
fpost-ipa-mem-reportCommon Report Var(post_ipa_mem_report)Report on memory allocation before interprocedural optimization.
fpostconditionsD Var(flag_postconditions)Generate code for postcondition contracts.
fpre-include=Fortran RejectNegative Joined Var(flag_pre_include) UndocumentedPath to header file that should be pre-included before each compilation unit.
fpre-ipa-mem-reportCommon Report Var(pre_ipa_mem_report)Report on memory allocation before interprocedural optimization.
fpreconditionsD Var(flag_preconditions)Generate code for precondition contracts.
fpredictive-commoningCommon Report Var(flag_predictive_commoning) OptimizationRun predictive commoning optimization.
fprefetch-loop-arraysCommon Report Var(flag_prefetch_loop_arrays) Init(-1) OptimizationGenerate prefetch instructions, if available, for arrays in loops.
fpreprocessedC ObjC C++ ObjC++Treat the input file as already preprocessed.
fpreprocessedFortran
fpretty-templatesC++ ObjC++ Var(flag_pretty_templates) Init(1)Do not pretty-print template specializations as the template signature followed by the arguments.
fprintf-return-valueC ObjC C++ ObjC++ LTO Optimization Var(flag_printf_return_value) Init(1)Treat known sprintf return values as constants.
fprofileCommon Report Var(profile_flag)Enable basic program profiling code.
fprofile-abs-pathCommon Report Var(profile_abs_path_flag)Generate absolute source path names for gcov.
fprofile-arcsCommon Report Var(profile_arc_flag)Insert arc-based program profiling code.
fprofile-correctionCommon Report Var(flag_profile_correction)Enable correction of flow inconsistent profile data input.
fprofile-dir=Common Joined RejectNegative Var(profile_data_prefix)Set the top-level directory for storing the profile data.The default is 'pwd'.
fprofile-exclude-files=Common Joined RejectNegative Var(flag_profile_exclude_files)Instrument only functions from files where names do not match all the regular expressions (separated by a semi-colon).
fprofile-filter-files=Common Joined RejectNegative Var(flag_profile_filter_files)Instrument only functions from files where names match any regular expression (separated by a semi-colon).
fprofile-generateCommonEnable common options for generating profile info for profile feedback directed optimizations.
fprofile-generate=Common Joined RejectNegativeEnable common options for generating profile info for profile feedback directed optimizations, and set -fprofile-dir=.
fprofile-note=Common Joined RejectNegative Var(profile_note_location)Select the name for storing the profile note file.
fprofile-partial-trainingCommon Report Var(flag_profile_partial_training) OptimizationDo not assume that functions never executed during the train run are cold.
fprofile-prefix-path=Common Joined RejectNegative Var(profile_prefix_path)Remove prefix from absolute path before mangling name for -fprofile-generate= and -fprofile-use=.
fprofile-reorder-functionsCommon Report Var(flag_profile_reorder_functions) OptimizationEnable function reordering that improves code placement.
fprofile-reportCommon Report Var(profile_report)Report on consistency of profile.
fprofile-reproducible=Common Joined RejectNegative Var(flag_profile_reproducible) Enum(profile_reproducibility) Init(PROFILE_REPRODUCIBILITY_SERIAL)-fprofile-reproducible=[serial|parallel-runs|multithreaded]	Control level of reproducibility of profile gathered by -fprofile-generate.
fprofile-update=Common Joined RejectNegative Enum(profile_update) Var(flag_profile_update) Init(PROFILE_UPDATE_SINGLE)-fprofile-update=[single|atomic|prefer-atomic]	Set the profile update method.
fprofile-useCommon Var(flag_profile_use)Enable common options for performing profile feedback directed optimizations.
fprofile-use=Common Joined RejectNegativeEnable common options for performing profile feedback directed optimizations, and set -fprofile-dir=.
fprofile-valuesCommon Report Var(flag_profile_values)Insert code to profile values of expressions.
fprotect-parensFortran Var(flag_protect_parens) Init(-1)Protect parentheses in expressions.
frandom-seedCommon Var(common_deferred_options) Defer
frandom-seed=Common Joined RejectNegative Var(common_deferred_options) Defer-frandom-seed=<string>	Make compile reproducible using <string>.
frange-checkFortran Var(flag_range_check) Init(1)Enable range checking during compilation.
freal-4-real-10Fortran RejectNegative Var(flag_real4_kind,10)Interpret any REAL(4) as a REAL(10).
freal-4-real-16Fortran RejectNegative Var(flag_real4_kind,16)Interpret any REAL(4) as a REAL(16).
freal-4-real-8Fortran RejectNegative Var(flag_real4_kind,8)Interpret any REAL(4) as a REAL(8).
freal-8-real-10Fortran RejectNegative Var(flag_real8_kind,10)Interpret any REAL(8) as a REAL(10).
freal-8-real-16Fortran RejectNegative Var(flag_real8_kind,16)Interpret any REAL(8) as a REAL(16).
freal-8-real-4Fortran RejectNegative Var(flag_real8_kind,4)Interpret any REAL(8) as a REAL(4).
frealloc-lhsFortran Var(flag_realloc_lhs) Init(-1)Reallocate the LHS in assignments.
freciprocal-mathCommon Report Var(flag_reciprocal_math) SetByCombined OptimizationSame as -fassociative-math for expressions which include division.
frecord-gcc-switchesCommon Report Var(flag_record_gcc_switches)Record gcc command line switches in the object file.
frecord-marker=4Fortran RejectNegative Var(flag_record_marker,4)Use a 4-byte record marker for unformatted files.
frecord-marker=8Fortran RejectNegative Var(flag_record_marker,8)Use an 8-byte record marker for unformatted files.
frecursiveFortran Var(flag_recursive)Allocate local variables on the stack to allow indirect recursion.
freeCommon Report Var(flag_ree) Init(0) OptimizationTurn on Redundant Extensions Elimination pass.
freg-struct-returnCommon Report Var(flag_pcc_struct_return,0) OptimizationReturn small aggregates in registers.
fregmoveCommon IgnoreDoes nothing. Preserved for backward compatibility.
freleaseDCompile release version.
frename-registersCommon Report Var(flag_rename_registers) Init(2) OptimizationPerform a register renaming optimization pass.
freorder-blocksCommon Report Var(flag_reorder_blocks) OptimizationReorder basic blocks to improve code placement.
freorder-blocks-algorithm=Common Joined RejectNegative Enum(reorder_blocks_algorithm) Var(flag_reorder_blocks_algorithm) Init(REORDER_BLOCKS_ALGORITHM_SIMPLE) Optimization-freorder-blocks-algorithm=[simple|stc]	Set the used basic block reordering algorithm.
freorder-blocks-and-partitionCommon Report Var(flag_reorder_blocks_and_partition) OptimizationReorder basic blocks and partition into hot and cold sections.
freorder-functionsCommon Report Var(flag_reorder_functions) OptimizationReorder functions to improve code placement.
frepack-arraysFortran Var(flag_repack_arrays)Copy array sections into a contiguous block on procedure entry.
freplace-objc-classesObjC ObjC++ LTO Var(flag_replace_objc_classes)Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime.
frepoC++ ObjC++ WarnRemovedRemoved in GCC 10.  This switch has no effect.
freport-bugCommon Driver Var(flag_report_bug)Collect and dump debug information into temporary file if ICE in C/C++compiler occurred.
frerun-cse-after-loopCommon Report Var(flag_rerun_cse_after_loop) OptimizationAdd a common subexpression elimination pass after loop optimizations.
frerun-loop-optCommon IgnoreDoes nothing.  Preserved for backward compatibility.
freschedule-modulo-scheduled-loopsCommon Report Var(flag_resched_modulo_sched) OptimizationEnable/Disable the traditional scheduling in loops that already passed modulo scheduling.
fresolution=LTO JoinedThe resolution file.
frounding-mathCommon Report Var(flag_rounding_math) Optimization SetByCombinedDisable optimizations that assume default FP rounding behavior.
frttiC++ ObjC++ Optimization Var(flag_rtti) Init(1)Generate run time type descriptor information.
frttiD
fsanitize-address-use-after-scopeCommon Driver Report Var(flag_sanitize_address_use_after_scope) Init(0)
fsanitize-coverage=Common Report JoinedSelect type of coverage sanitization.
fsanitize-recoverCommon ReportThis switch is deprecated; use -fsanitize-recover= instead.
fsanitize-recover=Common Report JoinedAfter diagnosing undefined behavior attempt to continue execution.
fsanitize-sections=Common Joined RejectNegative Var(common_deferred_options) Defer-fsanitize-sections=<sec1,sec2,...>	Sanitize global variablesin user-defined sections.
fsanitize-undefined-trap-on-errorCommon Driver Report Var(flag_sanitize_undefined_trap_on_error) Init(0)Use trap instead of a library function for undefined behavior sanitization.
fsanitize=Common Driver Report JoinedSelect what to sanitize.
fsave-optimization-recordCommon Report Var(flag_save_optimization_record) OptimizationWrite a SRCFILE.opt-record.json file detailing what optimizations were performed.
fsched-critical-path-heuristicCommon Report Var(flag_sched_critical_path_heuristic) Init(1) OptimizationEnable the critical path heuristic in the scheduler.
fsched-dep-count-heuristicCommon Report Var(flag_sched_dep_count_heuristic) Init(1) OptimizationEnable the dependent count heuristic in the scheduler.
fsched-group-heuristicCommon Report Var(flag_sched_group_heuristic) Init(1) OptimizationEnable the group heuristic in the scheduler.
fsched-interblockCommon Report Var(flag_schedule_interblock) Init(1) OptimizationEnable scheduling across basic blocks.
fsched-last-insn-heuristicCommon Report Var(flag_sched_last_insn_heuristic) Init(1) OptimizationEnable the last instruction heuristic in the scheduler.
fsched-pressureCommon Report Var(flag_sched_pressure) Init(0) OptimizationEnable register pressure sensitive insn scheduling.
fsched-rank-heuristicCommon Report Var(flag_sched_rank_heuristic) Init(1) OptimizationEnable the rank heuristic in the scheduler.
fsched-specCommon Report Var(flag_schedule_speculative) Init(1) OptimizationAllow speculative motion of non-loads.
fsched-spec-insn-heuristicCommon Report Var(flag_sched_spec_insn_heuristic) Init(1) OptimizationEnable the speculative instruction heuristic in the scheduler.
fsched-spec-loadCommon Report Var(flag_schedule_speculative_load) OptimizationAllow speculative motion of some loads.
fsched-spec-load-dangerousCommon Report Var(flag_schedule_speculative_load_dangerous) OptimizationAllow speculative motion of more loads.
fsched-stalled-insnsCommon Report Var(flag_sched_stalled_insns) Optimization UIntegerAllow premature scheduling of queued insns.
fsched-stalled-insns-depCommon Report Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization UIntegerSet dependence distance checking in premature scheduling of queued insns.
fsched-stalled-insns-dep=Common RejectNegative Joined UInteger Optimization-fsched-stalled-insns-dep=<number>	Set dependence distance checking in premature scheduling of queued insns.
fsched-stalled-insns=Common RejectNegative Joined UInteger Optimization-fsched-stalled-insns=<number>	Set number of queued insns that can be prematurely scheduled.
fsched-verbose=Common RejectNegative Joined UInteger Var(sched_verbose_param) Init(1)-fsched-verbose=<number>	Set the verbosity level of the scheduler.
fsched2-use-superblocksCommon Report Var(flag_sched2_use_superblocks) OptimizationIf scheduling post reload, do superblock scheduling.
fsched2-use-tracesCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fschedule-fusionCommon Report Var(flag_schedule_fusion) Init(2) OptimizationPerform a target dependent instruction fusion optimization pass.
fschedule-insnsCommon Report Var(flag_schedule_insns) OptimizationReschedule instructions before register allocation.
fschedule-insns2Common Report Var(flag_schedule_insns_after_reload) OptimizationReschedule instructions after register allocation.
fsecond-underscoreFortran Var(flag_second_underscore) Init(-1)Append a second underscore if the name already contains an underscore.
fsection-anchorsCommon Report Var(flag_section_anchors) OptimizationAccess data in the same section from shared anchor points.
fseeCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fsel-sched-pipeliningCommon Report Var(flag_sel_sched_pipelining) Init(0) OptimizationPerform software pipelining of inner loops during selective scheduling.
fsel-sched-pipelining-outer-loopsCommon Report Var(flag_sel_sched_pipelining_outer_loops) Init(0) OptimizationPerform software pipelining of outer loops during selective scheduling.
fsel-sched-reschedule-pipelinedCommon Report Var(flag_sel_sched_reschedule_pipelined) Init(0) OptimizationReschedule pipelined regions without pipelining.
fselective-schedulingCommon Report Var(flag_selective_scheduling) OptimizationSchedule instructions using selective scheduling algorithm.
fselective-scheduling2Common Report Var(flag_selective_scheduling2) OptimizationRun selective scheduling after reload.
fself-test=Common Undocumented Joined Var(flag_self_test)Run self-tests, using the given path to locate test files.
fsemantic-interpositionCommon Report Var(flag_semantic_interposition) Init(1)Allow interposing function (or variables) by ones with different semantics (or initializer) respectively by dynamic linker.
fshort-enumsC ObjC C++ ObjC++ LTO Optimization Var(flag_short_enums)Use the narrowest integer type possible for enumeration types.
fshort-enumsFortran Var(flag_short_enums)
fshort-wcharC ObjC C++ ObjC++ LTO Optimization Var(flag_short_wchar)Force the underlying type for \"wchar_t\" to be \"unsigned short\".
fshow-columnCommon Report Var(flag_show_column) Init(1)Show column numbers in diagnostics, when available.  Default on.
fshrink-wrapCommon Report Var(flag_shrink_wrap) OptimizationEmit function prologues only before parts of the function that need it,rather than at the top of the function.
fshrink-wrap-separateCommon Report Var(flag_shrink_wrap_separate) Init(1) OptimizationShrink-wrap parts of the prologue and epilogue separately.
fsign-zeroFortran Var(flag_sign_zero) Init(1)Apply negative sign to zero values.
fsignaling-nansCommon Report Var(flag_signaling_nans) Optimization SetByCombinedDisable optimizations observable by IEEE signaling NaNs.
fsigned-bitfieldsC ObjC C++ ObjC++ Var(flag_signed_bitfields) Init(1)When \"signed\" or \"unsigned\" is not given make the bitfield signed.
fsigned-charC ObjC C++ ObjC++ LTO Var(flag_signed_char)Make \"char\" signed by default.
fsigned-zerosCommon Report Var(flag_signed_zeros) Init(1) Optimization SetByCombinedDisable floating point optimizations that ignore the IEEE signedness of zero.
fsimd-cost-model=Common Joined RejectNegative Enum(vect_cost_model) Var(flag_simd_cost_model) Init(VECT_COST_MODEL_UNLIMITED) Optimization-fsimd-cost-model=[unlimited|dynamic|cheap]	Specifies the vectorization cost model for code marked with a simd directive.
fsingle-precision-constantCommon Report Var(flag_single_precision_constant) OptimizationConvert floating point constants to single precision constants.
fsized-deallocationC++ ObjC++ Var(flag_sized_deallocation) Init(-1)Enable C++14 sized deallocation support.
fsplit-ivs-in-unrollerCommon Report Var(flag_split_ivs_in_unroller) Init(1) OptimizationSplit lifetimes of induction variables when loops are unrolled.
fsplit-loopsCommon Report Var(flag_split_loops) OptimizationPerform loop splitting.
fsplit-pathsCommon Report Var(flag_split_paths) Init(0) OptimizationSplit paths leading to loop backedges.
fsplit-stackCommon Report Var(flag_split_stack) Init(-1)Generate discontiguous stack frames.
fsplit-wide-typesCommon Report Var(flag_split_wide_types) OptimizationSplit wide types into independent registers.
fsplit-wide-types-earlyCommon Report Var(flag_split_wide_types_early) OptimizationSplit wide types into independent registers earlier.
fsquangleC++ ObjC++ WarnRemoved
fssa-backpropCommon Report Var(flag_ssa_backprop) Init(1) OptimizationEnable backward propagation of use properties at the SSA level.
fssa-phioptCommon Report Var(flag_ssa_phiopt) OptimizationOptimize conditional patterns using SSA PHI nodes.
fsso-struct=C ObjC Joined RejectNegative Enum(sso_struct) Var(default_sso) Init(SSO_NATIVE)-fsso-struct=[big-endian|little-endian|native]	Set the default scalar storage order.
fstack-arraysFortran Var(flag_stack_arrays) Init(-1)Put all local arrays on stack.
fstack-checkCommon Alias(fstack-check=, specific, no)Insert stack checking code into the program.  Same as -fstack-check=specific.
fstack-check=Common Report RejectNegative Joined Optimization-fstack-check=[no|generic|specific]	Insert stack checking code into the program.
fstack-clash-protectionCommon Report Var(flag_stack_clash_protection) OptimizationInsert code to probe each page of stack space as it is allocated to protectfrom stack-clash style attacks.
fstack-limitCommon Var(common_deferred_options) Defer
fstack-limit-register=Common RejectNegative Joined Var(common_deferred_options) Defer-fstack-limit-register=<register>	Trap if the stack goes past <register>.
fstack-limit-symbol=Common RejectNegative Joined Var(common_deferred_options) Defer-fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>.
fstack-protectorCommon Report Var(flag_stack_protect, 1) Init(-1) OptimizationUse propolice as a stack protection method.
fstack-protector-allCommon Report RejectNegative Var(flag_stack_protect, 2) Init(-1) OptimizationUse a stack protection method for every function.
fstack-protector-explicitCommon Report RejectNegative Var(flag_stack_protect, 4) OptimizationUse stack protection method only for functions with the stack_protect attribute.
fstack-protector-strongCommon Report RejectNegative Var(flag_stack_protect, 3) Init(-1) OptimizationUse a smart stack protection method for certain functions.
fstack-reuse=Common Joined RejectNegative Enum(stack_reuse_level) Var(flag_stack_reuse) Init(SR_ALL) Optimization-fstack-reuse=[all|named_vars|none]	Set stack reuse level for local variables.
fstack-usageCommon RejectNegative Var(flag_stack_usage)Output stack usage information on a per-function basis.
fstatsC++ ObjC++ Var(flag_detailed_statistics)Display statistics accumulated during compilation.
fstdarg-optCommon Report Var(flag_stdarg_opt) Init(1) OptimizationOptimize amount of stdarg registers saved to stack at start of function.
fstore-mergingCommon Report Var(flag_store_merging) OptimizationMerge adjacent stores.
fstrength-reduceCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fstrict-aliasingCommon Report Var(flag_strict_aliasing) OptimizationAssume strict aliasing rules apply.
fstrict-enumsC++ ObjC++ Optimization Var(flag_strict_enums)Assume that values of enumeration type are always within the minimum range of that type.
fstrict-overflowCommon ReportTreat signed overflow as undefined.  Negated as -fwrapv -fwrapv-pointer.
fstrict-prototypeC++ ObjC++ WarnRemoved
fstrict-volatile-bitfieldsCommon Report Var(flag_strict_volatile_bitfields) Init(-1) OptimizationForce bitfield accesses to match their type width.
fstrong-eval-orderC++ ObjC++ Common Alias(fstrong-eval-order=, all, none)Follow the C++17 evaluation order requirements for assignment expressions,shift, member function calls, etc.
fstrong-eval-order=C++ ObjC++ Common Var(flag_strong_eval_order) Joined Enum(strong_eval_order) RejectNegative Init(-1)Follow the C++17 evaluation order requirements for assignment expressions,shift, member function calls, etc.
fswitch-errorsD Var(flag_switch_errors)Generate code for switches without a default case.
fsync-libcallsCommon Report Var(flag_sync_libcalls) Init(1)Implement __atomic operations via libcalls to legacy __sync functions.
fsyntax-onlyCommon Report Var(flag_syntax_only)Check for syntax errors, then stop.
ftabstop=C ObjC C++ ObjC++ Joined RejectNegative UInteger-ftabstop=<number>	Distance between tab stops for column reporting.
ftail-call-workaroundFortran Alias(ftail-call-workaround=,1,0)
ftail-call-workaround=Fortran RejectNegative Joined UInteger IntegerRange(0, 2) Var(flag_tail_call_workaround) Init(1)Disallow tail call optimization when a calling routine may have omitted character lengths.
ftarget-helpCommon Driver Alias(-target-help)
ftemplate-backtrace-limit=C++ ObjC++ Joined RejectNegative UInteger Var(template_backtrace_limit) Init(10)Set the maximum number of template instantiation notes for a single warning or error.
ftemplate-depth-C++ ObjC++ Joined RejectNegative Undocumented Alias(ftemplate-depth=)
ftemplate-depth=C++ ObjC++ Joined RejectNegative UInteger-ftemplate-depth=<number>	Specify maximum template instantiation depth.
ftest-coverageCommon Report Var(flag_test_coverage)Create data files needed by \"gcov\".
ftest-forall-tempFortran Var(flag_test_forall_temp) Init(0)Force creation of temporary to test infrequently-executed forall code.
fthis-is-variableC++ ObjC++ WarnRemoved
fthread-jumpsCommon Report Var(flag_thread_jumps) OptimizationPerform jump threading optimizations.
fthreadsafe-staticsC++ ObjC++ Optimization Var(flag_threadsafe_statics) Init(1)-fno-threadsafe-statics	Do not generate thread-safe code for initializing local statics.
ftime-reportCommon Report Var(time_report)Report the time taken by each compiler pass.
ftime-report-detailsCommon Report Var(time_report_details)Record times taken by sub-phases separately.
ftls-model=Common Joined RejectNegative Enum(tls_model) Var(flag_tls_default) Init(TLS_MODEL_GLOBAL_DYNAMIC)-ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]	Set the default thread-local storage code generation model.
ftoplevel-reorderCommon Report Var(flag_toplevel_reorder) Init(2) OptimizationReorder top level functions, variables, and asms.
ftracerCommon Report Var(flag_tracer) OptimizationPerform superblock formation via tail duplication.
ftrack-macro-expansionC ObjC C++ ObjC++ JoinedOrMissing RejectNegative UInteger
ftrack-macro-expansion=C ObjC C++ ObjC++ JoinedOrMissing RejectNegative UInteger-ftrack-macro-expansion=<0|1|2>	Track locations of tokens coming from macro expansion and display them in error messages.
ftrampolinesCommon Report Var(flag_trampolines) Init(0)For targets that normally need trampolines for nested functions, alwaysgenerate them instead of using descriptors.
ftransition=allD RejectNegativeList information on all language changes.
ftransition=checkimportsD RejectNegativeGive deprecation messages about -ftransition=import anomalies.
ftransition=complexD RejectNegativeList all usages of complex or imaginary types.
ftransition=dip1000D RejectNegativeImplement DIP1000: Scoped pointers (experimental).
ftransition=dip25D RejectNegativeImplement DIP25: Sealed references (experimental).
ftransition=fieldD RejectNegativeList all non-mutable fields which occupy an object instance.
ftransition=importD RejectNegativeRevert to single phase name lookup.
ftransition=nogcD RejectNegativeList all hidden GC allocations.
ftransition=tlsD RejectNegativeList all variables going into thread local storage.
ftrapping-mathCommon Report Var(flag_trapping_math) Init(1) Optimization SetByCombinedAssume floating-point operations can trap.
ftrapvCommon Report Var(flag_trapv) OptimizationTrap for signed overflow in addition, subtraction and multiplication.
ftree-bit-ccpCommon Report Var(flag_tree_bit_ccp) OptimizationEnable SSA-BIT-CCP optimization on trees.
ftree-builtin-call-dceCommon Report Var(flag_tree_builtin_call_dce) Init(0) OptimizationEnable conditional dead code elimination for builtin calls.
ftree-ccpCommon Report Var(flag_tree_ccp) OptimizationEnable SSA-CCP optimization on trees.
ftree-chCommon Report Var(flag_tree_ch) OptimizationEnable loop header copying on trees.
ftree-coalesce-inlined-varsCommon Ignore RejectNegativeDoes nothing.  Preserved for backward compatibility.
ftree-coalesce-varsCommon Report Var(flag_tree_coalesce_vars) OptimizationEnable SSA coalescing of user variables.
ftree-copy-propCommon Report Var(flag_tree_copy_prop) OptimizationEnable copy propagation on trees.
ftree-copyrenameCommon IgnoreDoes nothing.  Preserved for backward compatibility.
ftree-cselimCommon Report Var(flag_tree_cselim) Init(2) OptimizationTransform condition stores into unconditional ones.
ftree-dceCommon Report Var(flag_tree_dce) OptimizationEnable SSA dead code elimination optimization on trees.
ftree-dominator-optsCommon Report Var(flag_tree_dom) OptimizationEnable dominator optimizations.
ftree-dseCommon Report Var(flag_tree_dse) OptimizationEnable dead store elimination.
ftree-forwpropCommon Report Var(flag_tree_forwprop) Init(1) OptimizationEnable forward propagation on trees.
ftree-freCommon Report Var(flag_tree_fre) OptimizationEnable Full Redundancy Elimination (FRE) on trees.
ftree-loop-distribute-patternsCommon Report Var(flag_tree_loop_distribute_patterns) OptimizationEnable loop distribution for patterns transformed into a library call.
ftree-loop-distributionCommon Report Var(flag_tree_loop_distribution) OptimizationEnable loop distribution on trees.
ftree-loop-if-convertCommon Report Var(flag_tree_loop_if_convert) Init(-1) OptimizationConvert conditional jumps in innermost loops to branchless equivalents.
ftree-loop-if-convert-storesCommon IgnoreDoes nothing. Preserved for backward compatibility.
ftree-loop-imCommon Report Var(flag_tree_loop_im) Init(1) OptimizationEnable loop invariant motion on trees.
ftree-loop-ivcanonCommon Report Var(flag_tree_loop_ivcanon) Init(1) OptimizationCreate canonical induction variables in loops.
ftree-loop-linearCommon Alias(floop-nest-optimize)Enable loop nest transforms.  Same as -floop-nest-optimize.
ftree-loop-optimizeCommon Report Var(flag_tree_loop_optimize) Init(1) OptimizationEnable loop optimizations on tree level.
ftree-loop-vectorizeCommon Report Var(flag_tree_loop_vectorize) Optimization EnabledBy(ftree-vectorize)Enable loop vectorization on trees.
ftree-lrsCommon Report Var(flag_tree_live_range_split) OptimizationPerform live range splitting during the SSA->normal pass.
ftree-parallelize-loops=Common Report Joined RejectNegative UInteger Var(flag_tree_parallelize_loops) Init(1) Optimization-ftree-parallelize-loops=<number>	Enable automatic parallelization of loops.
ftree-partial-preCommon Report Var(flag_tree_partial_pre) OptimizationIn SSA-PRE optimization on trees, enable partial-partial redundancy elimination.
ftree-phipropCommon Report Var(flag_tree_phiprop) Init(1) OptimizationEnable hoisting loads from conditional pointers.
ftree-preCommon Report Var(flag_tree_pre) OptimizationEnable SSA-PRE optimization on trees.
ftree-ptaCommon Report Var(flag_tree_pta) OptimizationPerform function-local points-to analysis on trees.
ftree-reassocCommon Report Var(flag_tree_reassoc) Init(1) OptimizationEnable reassociation on tree level.
ftree-saliasCommon IgnoreDoes nothing.  Preserved for backward compatibility.
ftree-scev-cpropCommon Report Var(flag_tree_scev_cprop) Init(1) OptimizationEnable copy propagation of scalar-evolution information.
ftree-sinkCommon Report Var(flag_tree_sink) OptimizationEnable SSA code sinking on trees.
ftree-slp-vectorizeCommon Report Var(flag_tree_slp_vectorize) Optimization EnabledBy(ftree-vectorize)Enable basic block vectorization (SLP) on trees.
ftree-slsrCommon Report Var(flag_tree_slsr) OptimizationPerform straight-line strength reduction.
ftree-sraCommon Report Var(flag_tree_sra) OptimizationPerform scalar replacement of aggregates.
ftree-store-ccpCommon IgnoreDoes nothing.  Preserved for backward compatibility.
ftree-store-copy-propCommon IgnoreDoes nothing.  Preserved for backward compatibility.
ftree-switch-conversionCommon Report Var(flag_tree_switch_conversion) OptimizationPerform conversions of switch initializations.
ftree-tail-mergeCommon Report Var(flag_tree_tail_merge) OptimizationEnable tail merging on trees.
ftree-terCommon Report Var(flag_tree_ter) OptimizationReplace temporary expressions in the SSA->normal pass.
ftree-vect-loop-versionCommon IgnoreDoes nothing. Preserved for backward compatibility.
ftree-vectorizeCommon Report OptimizationEnable vectorization on trees.
ftree-vectorizer-verbose=Common Joined RejectNegative IgnoreDoes nothing.  Preserved for backward compatibility.
ftree-vrpCommon Report Var(flag_tree_vrp) Init(0) OptimizationPerform Value Range Propagation on trees.
funconstrained-commonsCommon Var(flag_unconstrained_commons) OptimizationAssume common declarations may be overridden with ones with a largertrailing array.
funderscoringFortran Var(flag_underscoring) Init(1)Append underscores to externally visible names.
funit-at-a-timeCommon Report Var(flag_unit_at_a_time) Init(1)Compile whole compilation unit at a time.
funittestDCompile in unittest code.
funroll-all-loopsCommon Report Var(flag_unroll_all_loops) OptimizationPerform loop unrolling for all loops.
funroll-completely-grow-sizeUndocumented Var(flag_cunroll_grow_size) Optimization
funroll-loopsCommon Report Var(flag_unroll_loops) OptimizationPerform loop unrolling when iteration count is known.
funsafe-loop-optimizationsCommon IgnoreDoes nothing.  Preserved for backward compatibility.
funsafe-math-optimizationsCommon Report Var(flag_unsafe_math_optimizations) Optimization SetByCombinedAllow math optimizations that may violate IEEE or ISO standards.
funsigned-bitfieldsC ObjC C++ ObjC++ Var(flag_signed_bitfields, 0)When \"signed\" or \"unsigned\" is not given make the bitfield unsigned.
funsigned-charC ObjC C++ ObjC++ LTO Var(flag_signed_char, 0)Make \"char\" unsigned by default.
funswitch-loopsCommon Report Var(flag_unswitch_loops) OptimizationPerform loop unswitching.
funwind-tablesCommon Report Var(flag_unwind_tables) OptimizationJust generate unwind tables for exception handling.
fuse-cxa-atexitC++ ObjC++ Var(flag_use_cxa_atexit) Init(DEFAULT_USE_CXA_ATEXIT)Use __cxa_atexit to register destructors.
fuse-cxa-get-exception-ptrC++ ObjC++ Var(flag_use_cxa_get_exception_ptr) Init(2)Use __cxa_get_exception_ptr in exception handling.
fuse-ld=bfdCommon Driver Negative(fuse-ld=gold)Use the bfd linker instead of the default linker.
fuse-ld=goldCommon Driver Negative(fuse-ld=bfd)Use the gold linker instead of the default linker.
fuse-ld=lldCommon Driver Negative(fuse-ld=lld)Use the lld LLVM linker instead of the default linker.
fuse-linker-pluginCommon Undocumented Var(flag_use_linker_plugin)
fvar-trackingCommon Report Var(flag_var_tracking) Init(2) PerFunctionPerform variable tracking.
fvar-tracking-assignmentsCommon Report Var(flag_var_tracking_assignments) Init(2) PerFunctionPerform variable tracking by annotating assignments.
fvar-tracking-assignments-toggleCommon Report Var(flag_var_tracking_assignments_toggle) PerFunctionToggle -fvar-tracking-assignments.
fvar-tracking-uninitCommon Report Var(flag_var_tracking_uninit) PerFunctionPerform variable tracking and also tag variables that are uninitialized.
fvariable-expansion-in-unrollerCommon Report Var(flag_variable_expansion_in_unroller) OptimizationApply variable expansion when loops are unrolled.
fvect-cost-modelCommon Alias(fvect-cost-model=,dynamic,unlimited)Enables the dynamic vectorizer cost model.  Preserved for backward compatibility.
fvect-cost-model=Common Joined RejectNegative Enum(vect_cost_model) Var(flag_vect_cost_model) Init(VECT_COST_MODEL_DEFAULT) Optimization-fvect-cost-model=[unlimited|dynamic|cheap]	Specifies the cost model for vectorization.
fverbose-asmCommon Report Var(flag_verbose_asm)Add extra commentary to assembler output.
fversionCommon Driver Alias(-version)
fversion-loops-for-stridesCommon Report Var(flag_version_loops_for_strides) OptimizationVersion loops based on whether indices have a stride of one.
fversion=D Joined RejectNegative-fversion=<level|ident>	Compile in version code >= <level> or identified by <ident>.
fvisibility-inlines-hiddenC++ ObjC++Marks all inlined functions and methods as having hidden visibility.
fvisibility-ms-compatC++ ObjC++ Var(flag_visibility_ms_compat)Changes visibility to match Microsoft Visual Studio by default.
fvisibility=Common Joined RejectNegative Enum(symbol_visibility) Var(default_visibility) Init(VISIBILITY_DEFAULT)-fvisibility=[default|internal|hidden|protected]	Set the default symbol visibility.
fvptCommon Report Var(flag_value_profile_transformations) OptimizationUse expression value profiles in optimizations.
fvtable-gcC++ ObjC++ WarnRemovedNo longer supported.
fvtable-thunksC++ ObjC++ WarnRemoved No longer supported.
fvtable-verify=Common Joined RejectNegative Enum(vtv_priority) Var(flag_vtable_verify) Init(VTV_NO_PRIORITY)Validate vtable pointers before using them.
fvtv-countsCommon Var(flag_vtv_counts)Output vtable verification counters.
fvtv-debugCommon Var(flag_vtv_debug)Output vtable verification pointer sets information.
fweakC++ ObjC++ Var(flag_weak) Init(1)Emit common-like symbols as weak symbols.
fweakD Var(flag_weak) Init(1)Emit common-like symbols as weak symbols.
fwebCommon Report Var(flag_web) Init(2) OptimizationConstruct webs and split unrelated uses of single variable.
fwhole-fileFortran IgnoreDoes nothing.  Preserved for backward compatibility.
fwhole-programCommon Report Var(flag_whole_program) Init(0)Perform whole program optimizations.
fwide-exec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fwide-exec-charset=<cset>	Convert all wide strings and character constants to character set <cset>.
fworking-directoryC ObjC C++ ObjC++ Var(flag_working_directory) Init(-1)Generate a #line directive pointing at the current working directory.
fworking-directoryFortran
fwpaLTO Driver ReportRun the link-time optimizer in whole program analysis (WPA) mode.
fwpa=LTO Driver RejectNegative Joined Var(flag_wpa)Whole program analysis (WPA) mode with number of parallel jobs specified.
fwrapvCommon Report Var(flag_wrapv) OptimizationAssume signed arithmetic overflow wraps around.
fwrapv-pointerCommon Report Var(flag_wrapv_pointer) OptimizationAssume pointer overflow wraps around.
fxrefC++ ObjC++ WarnRemovedNo longer supported.
fzeeCommon IgnoreDoes nothing.  Preserved for backward compatibility.
fzero-initialized-in-bssCommon Report Var(flag_zero_initialized_in_bss) Init(1)Put zero initialized data in the bss section.
fzero-linkObjC ObjC++ Var(flag_zero_link)Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode.
gCommon Driver RejectNegative JoinedOrMissingGenerate debug information in default format.
gas-loc-supportCommon Driver Var(dwarf2out_as_loc_support) Init(2)Assume assembler support for (DWARF2+) .loc directives.
gas-locview-supportCommon Driver Var(dwarf2out_as_locview_support) Init(2)Assume assembler support for view in (DWARF2+) .loc directives.
gcoffCommon Driver WarnRemovedDoes nothing.  Preserved for backward compatibility.
gcoff1Common Driver WarnRemovedDoes nothing.  Preserved for backward compatibility.
gcoff2Common Driver WarnRemovedDoes nothing.  Preserved for backward compatibility.
gcoff3Common Driver WarnRemovedDoes nothing.  Preserved for backward compatibility.
gcolumn-infoCommon Driver Var(debug_column_info,1) Init(1)Record DW_AT_decl_column and DW_AT_call_column in DWARF.
gdescribe-diesCommon Driver Report Var(flag_describe_dies) Init(0)Add description attributes to some DWARF DIEs that have no name attribute.
gdwarfCommon Driver JoinedOrMissing Negative(gdwarf-)Generate debug information in default version of DWARF format.
gdwarf-Common Driver Joined UInteger Var(dwarf_version) Init(4) Negative(gstabs)Generate debug information in DWARF v2 (or later) format.
gen-declsObjC ObjC++ Driver Var(flag_gen_declaration) RejectNegativeDump declarations to a .decl file.
ggdbCommon Driver JoinedOrMissingGenerate debug information in default extended format.
ggnu-pubnamesCommon Driver Negative(gno-pubnames) Var(debug_generate_pub_sections, 2)Generate DWARF pubnames and pubtypes sections with GNU extensions.
gimple-statsLTODump Var(flag_lto_gimple_stats)Dump the statistics of gimple statements.
ginline-pointsCommon Driver Var(debug_inline_points) Init(2)Generate extended entry point information for inlined functions.
ginternal-reset-location-viewsCommon Driver Var(debug_internal_reset_location_views) Init(2)Compute locview reset points based on insn length estimates.
gno-RejectNegative Joined Undocumented
gno-pubnamesCommon Driver Negative(gpubnames) Var(debug_generate_pub_sections, 0) Init(-1)Don't generate DWARF pubnames and pubtypes sections.
gpubnamesCommon Driver Negative(ggnu-pubnames) Var(debug_generate_pub_sections, 1)Generate DWARF pubnames and pubtypes sections.
grecord-gcc-switchesCommon Driver Var(dwarf_record_gcc_switches) Init(1)Record gcc command line switches in DWARF DW_AT_producer.
gsplit-dwarfCommon Driver Var(dwarf_split_debug_info) Init(0)Generate debug information in separate .dwo files.
gstabsCommon Driver JoinedOrMissing Negative(gstabs+)Generate debug information in STABS format.
gstabs+Common Driver JoinedOrMissing Negative(gvms)Generate debug information in extended STABS format.
gstatement-frontiersCommon Driver Var(debug_nonbind_markers_p) Init(2)Emit progressive recommended breakpoint locations.
gstrict-dwarfCommon Driver Report Var(dwarf_strict) Init(0)Don't emit DWARF additions beyond selected version.
gtoggleCommon Driver Report Var(flag_gtoggle)Toggle debug information generation.
gvariable-location-viewsCommon Driver Var(debug_variable_location_views, 1) Init(2)Augment variable location lists with progressive views.
gvariable-location-views=incompat5Common Driver RejectNegative Var(debug_variable_location_views, -1) Init(2)
gvmsCommon Driver JoinedOrMissing Negative(gxcoff)Generate debug information in VMS format.
gxcoffCommon Driver JoinedOrMissing Negative(gxcoff+)Generate debug information in XCOFF format.
gxcoff+Common Driver JoinedOrMissing Negative(gdwarf)Generate debug information in extended XCOFF format.
gzCommon DriverGenerate compressed debug sections.
gz=Common Driver RejectNegative Joined Enum(compressed_debug_sections)-gz=<format>	Generate compressed debug sections in format <format>.
hDriver Joined Separate
helpLTODump Var(flag_lto_dump_tool_help)Dump the dump tool command line options.
idirafterC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-idirafter <dir>	Add <dir> to the end of the system include path.
idirafterFortran Joined Separate
imacrosC ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)-imacros <file>	Accept definition of macros in <file>.
imultiarchCommon Joined Separate RejectDriver Var(imultiarch) Init(0)-imultiarch <dir>	Set <dir> to be the multiarch include subdirectory.
imultilibC ObjC C++ ObjC++ Joined Separate-imultilib <dir>	Set <dir> to be the multilib include subdirectory.
imultilibD Joined Separate
imultilibFortran Joined Separate
includeC ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)-include <file>	Include the contents of <file> before other files.
iplugindir=Common Joined Var(plugindir_string) Init(0)-iplugindir=<dir>	Set <dir> to be the default plugin directory.
iprefixC ObjC C++ ObjC++ Joined Separate-iprefix <path>	Specify <path> as a prefix for next two options.
iprefixD Joined Separate
iprefixFortran Joined Separate
iquoteC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-iquote <dir>	Add <dir> to the end of the quote include path.
iquoteFortran Joined Separate
iremapC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-iremap <src:dst>	Convert <src> to <dst> if it occurs as prefix in __FILE__.
isysrootC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-isysroot <dir>	Set <dir> to be the system root directory.
isysrootD Joined Separate
isysrootFortran Joined Separate
isystemC ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)-isystem <dir>	Add <dir> to the start of the system include path.
isystemD Joined Separate
isystemFortran Joined Separate
iwithprefixC ObjC C++ ObjC++ Joined Separate-iwithprefix <dir>	Add <dir> to the end of the system include path.
iwithprefixbeforeC ObjC C++ ObjC++ Joined Separate-iwithprefixbefore <dir>	Add <dir> to the end of the main include path.
lDriver Joined Separate
lang-asmC Undocumented RejectDriver
listLTODump Var(flag_lto_dump_list)Call the dump function for variables and function in IL.
m5200Target RejectNegative Alias(mcpu=, 5206)Generate code for a 520X.
m5206eTarget RejectNegative Alias(mcpu=, 5206e)Generate code for a 5206e.
m528xTarget RejectNegative Alias(mcpu=, 528x)Generate code for a 528x.
m5307Target RejectNegative Alias(mcpu=, 5307)Generate code for a 5307.
m5407Target RejectNegative Alias(mcpu=, 5407)Generate code for a 5407.
m68000Target RejectNegative Alias(mcpu=, 68000)Generate code for a 68000.
m68010Target RejectNegative Alias(mcpu=, 68010)Generate code for a 68010.
m68020Target RejectNegative Alias(mcpu=, 68020)Generate code for a 68020.
m68020-40Target RejectNegativeGenerate code for a 68040, without any new instructions.
m68020-60Target RejectNegativeGenerate code for a 68060, without any new instructions.
m68030Target RejectNegative Alias(mcpu=, 68030)Generate code for a 68030.
m68040Target RejectNegative Alias(mcpu=, 68040)Generate code for a 68040.
m68060Target RejectNegative Alias(mcpu=, 68060)Generate code for a 68060.
m68302Target RejectNegative Alias(mcpu=, 68302)Generate code for a 68302.
m68332Target RejectNegative Alias(mcpu=, 68332)Generate code for a 68332.
m68851TargetGenerate code for a 68851.
m68881Target RejectNegative Mask(HARD_FLOAT)Generate code that uses 68881 floating-point instructions.
malign-intTarget Report Mask(ALIGN_INT)Align variables on a 32-bit boundary.
march=Target RejectNegative Joined Enum(m68k_isa) Var(m68k_arch_option)Specify the name of the target architecture.
mbitfieldTarget Report Mask(BITFIELD)Use the bit-field instructions.
mc68000Target RejectNegative Alias(mcpu=, 68000)Generate code for a 68000.
mc68020Target RejectNegative Alias(mcpu=, 68020)Generate code for a 68020.
mcfv4eTarget RejectNegative Alias(mcpu=, 547x)Generate code for a ColdFire v4e.
mcpu32Target RejectNegative Alias(mcpu=, 68332)Generate code for a cpu32.
mcpu=Target RejectNegative Joined Enum(target_device) Var(m68k_cpu_option) Init(unk_device)Specify the target CPU.
mdivTarget Report Mask(CF_HWDIV)Use hardware division instructions on ColdFire.
mfidoaTarget RejectNegativeGenerate code for a Fido A.
mhard-floatTarget RejectNegative Mask(HARD_FLOAT)Generate code which uses hardware floating point instructions.
mid-shared-libraryTarget Report Mask(ID_SHARED_LIBRARY)Enable ID based shared library.
mlong-jump-table-offsetsTarget Report RejectNegative Mask(LONG_JUMP_TABLE_OFFSETS)Use 32-bit offsets in jump tables rather than 16-bit offsets.
mnobitfieldTarget RejectNegative InverseMask(BITFIELD)Do not use the bit-field instructions.
mnortdTarget RejectNegative InverseMask(RTD)Use normal calling convention.
mnoshortTarget RejectNegative InverseMask(SHORT)Consider type 'int' to be 32 bits wide.
mpcrelTarget Report Mask(PCREL)Generate pc-relative code.
mrtdTarget Report Mask(RTD)Use different calling convention using 'rtd'.
msep-dataTarget Report Mask(SEP_DATA)Enable separate data segment.
mshared-library-id=Target RejectNegative Joined UIntegerID of shared library to build.
mshortTarget Report Mask(SHORT)Consider type 'int' to be 16 bits wide.
msoft-floatTarget RejectNegative InverseMask(HARD_FLOAT)Generate code with library calls for floating point.
mstrict-alignTarget Report Mask(STRICT_ALIGNMENT)Do not use unaligned memory references.
mtune=Target RejectNegative Joined Enum(uarch_type) Var(m68k_tune_option) Init(unk_arch)Tune for the specified target CPU or architecture.
mxgotTarget Report Mask(XGOT)Support more than 8192 GOT entries on ColdFire.
mxtlsTarget Report Mask(XTLS)Support TLS segment larger than 64K.
nDriver
name-sortLTODump Var(flag_lto_name_sort)Sort the symbols alphabetically.
no-canonical-prefixesDriver
no-integrated-cppDriver
no-pieDriver RejectNegative Negative(shared)Don't create a dynamically linked position independent executable.
nocppFortran Negative(cpp)Disable preprocessing.
nodefaultlibsDriver
nolibcDriver
nophoboslibDriverDo not link the standard D library in the compilation.
nostartfilesDriver
nostdincC ObjC C++ ObjC++Do not search standard system include directories (those specified with -isystem will still be used).
nostdincD
nostdincFortran
nostdinc++C++ ObjC++Do not search standard system include directories for C++.
nostdlibDriver
oC ObjC C++ ObjC++ Joined Separate
oCommon Driver Joined Separate Var(asm_file_name) MissingArgError(missing filename after %qs)-o <file>	Place output into <file>.
oFortran Joined Separate
objectsLTODump Var(flag_lto_dump_objects)Dump the details of LTO objects.
pCommon Var(profile_flag)Enable function profiling.
pass-exit-codesDriver Var(pass_exit_codes)
pedanticC ObjC C++ ObjC++ Alias(Wpedantic)
pedanticCommon Alias(Wpedantic)
pedantic-errorsCommon Var(flag_pedantic_errors)Like -pedantic but issue them as errors.
pgDriver
pieDriver RejectNegative Negative(no-pie)Create a dynamically linked position independent executable.
pipeDriver Var(use_pipes)
posixDriver
print-file-name=Driver JoinedOrMissing Var(print_file_name)
print-libgcc-file-nameDriver
print-multi-directoryDriver Var(print_multi_directory)
print-multi-libDriver Var(print_multi_lib)
print-multi-os-directoryDriver Var(print_multi_os_directory)
print-multiarchDriver Var(print_multiarch)
print-objc-runtime-infoObjC ObjC++Generate C header of platform-specific features.
print-prog-name=Driver JoinedOrMissing Var(print_prog_name)
print-search-dirsDriver Var(print_search_dirs)
print-sysrootDriver Var(print_sysroot)
print-sysroot-headers-suffixDriver Var(print_sysroot_headers_suffix)
print-valueLTODump Var(flag_lto_print_value)Print the initial values of the variables.
pthreadDriver
quietCommon Var(quiet_flag) RejectDriverDo not display functions compiled or elapsed time.
rDriver
rdynamicDriver
remapC ObjC C++ ObjC++Remap file names when including files.
reverse-sortLTODump Var(flag_lto_reverse_sort)Display the symbols in reverse order.
rpath=Driver JoinedOrMissing
sDriver
save-tempsDriver
save-temps=Driver Joined
sharedDriver RejectNegative Negative(static-pie)Create a shared library.
shared-libgccDriver
shared-libphobosDriverLink the standard D library dynamically in the compilation.
size-sortLTODump Var(flag_lto_size_sort)Sort the symbols according to size.
specsDriver Separate Alias(specs=)
specs=Driver Joined
staticDriver
static-libasanDriver
static-libgccDriver
static-libgfortranDriver
static-libgfortranFortranStatically link the GNU Fortran helper library (libgfortran).
static-libgoDriver
static-liblsanDriver
static-libmpxDriver WarnRemovedRemoved in GCC 9.  This switch has no effect.
static-libmpxwrappersDriver WarnRemovedRemoved in GCC 9.  This switch has no effect.
static-libphobosDriverLink the standard D library statically in the compilation.
static-libstdc++Driver
static-libtsanDriver
static-libubsanDriver
static-pieDriver RejectNegative Negative(pie)Create a static position independent executable.
std=c++03C++ ObjC++ Alias(std=c++98)Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum.
std=c++0xC++ ObjC++ Alias(std=c++11) UndocumentedDeprecated in favor of -std=c++11.
std=c++11C++ ObjC++Conform to the ISO 2011 C++ standard.
std=c++14C++ ObjC++Conform to the ISO 2014 C++ standard.
std=c++17C++ ObjC++Conform to the ISO 2017 C++ standard.
std=c++1yC++ ObjC++ Alias(std=c++14) UndocumentedDeprecated in favor of -std=c++14.
std=c++1zC++ ObjC++ Alias(std=c++17) UndocumentedDeprecated in favor of -std=c++17.
std=c++20C++ ObjC++ Alias(std=c++2a)Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).
std=c++2aC++ ObjC++Conform to the ISO 2020 C++ draft standard (experimental and incomplete support).
std=c++98C++ ObjC++Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum.
std=c11C ObjCConform to the ISO 2011 C standard.
std=c17C ObjCConform to the ISO 2017 C standard (published in 2018).
std=c18C ObjC Alias(std=c17)Conform to the ISO 2017 C standard (published in 2018).
std=c1xC ObjC Alias(std=c11)Deprecated in favor of -std=c11.
std=c2xC ObjCConform to the ISO 202X C standard draft (experimental and incomplete support).
std=c89C ObjC Alias(std=c90)Conform to the ISO 1990 C standard.
std=c90C ObjCConform to the ISO 1990 C standard.
std=c99C ObjCConform to the ISO 1999 C standard.
std=c9xC ObjC Alias(std=c99)Deprecated in favor of -std=c99.
std=f2003FortranConform to the ISO Fortran 2003 standard.
std=f2008FortranConform to the ISO Fortran 2008 standard.
std=f2008tsFortranConform to the ISO Fortran 2008 standard including TS 29113.
std=f2018FortranConform to the ISO Fortran 2018 standard.
std=f95FortranConform to the ISO Fortran 95 standard.
std=gnuFortranConform to nothing in particular.
std=gnu++03C++ ObjC++ Alias(std=gnu++98)Conform to the ISO 1998 C++ standard revised by the 2003 technicalcorrigendum with GNU extensions.
std=gnu++0xC++ ObjC++ Alias(std=gnu++11) UndocumentedDeprecated in favor of -std=gnu++11.
std=gnu++11C++ ObjC++Conform to the ISO 2011 C++ standard with GNU extensions.
std=gnu++14C++ ObjC++Conform to the ISO 2014 C++ standard with GNU extensions.
std=gnu++17C++ ObjC++Conform to the ISO 2017 C++ standard with GNU extensions.
std=gnu++1yC++ ObjC++ Alias(std=gnu++14) UndocumentedDeprecated in favor of -std=gnu++14.
std=gnu++1zC++ ObjC++ Alias(std=gnu++17) UndocumentedDeprecated in favor of -std=gnu++17.
std=gnu++20C++ ObjC++ Alias(std=gnu++2a)Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).
std=gnu++2aC++ ObjC++Conform to the ISO 2020 C++ draft standard with GNU extensions (experimental and incomplete support).
std=gnu++98C++ ObjC++Conform to the ISO 1998 C++ standard revised by the 2003 technicalcorrigendum with GNU extensions.
std=gnu11C ObjCConform to the ISO 2011 C standard with GNU extensions.
std=gnu17C ObjCConform to the ISO 2017 C standard (published in 2018) with GNU extensions.
std=gnu18C ObjC Alias(std=gnu17)Conform to the ISO 2017 C standard (published in 2018) with GNU extensions.
std=gnu1xC ObjC Alias(std=gnu11)Deprecated in favor of -std=gnu11.
std=gnu2xC ObjCConform to the ISO 202X C standard draft with GNU extensions (experimental and incomplete support).
std=gnu89C ObjC Alias(std=gnu90)Conform to the ISO 1990 C standard with GNU extensions.
std=gnu90C ObjCConform to the ISO 1990 C standard with GNU extensions.
std=gnu99C ObjCConform to the ISO 1999 C standard with GNU extensions.
std=gnu9xC ObjC Alias(std=gnu99)Deprecated in favor of -std=gnu99.
std=iso9899:1990C ObjC Alias(std=c90)Conform to the ISO 1990 C standard.
std=iso9899:199409C ObjCConform to the ISO 1990 C standard as amended in 1994.
std=iso9899:1999C ObjC Alias(std=c99)Conform to the ISO 1999 C standard.
std=iso9899:199xC ObjC Alias(std=c99)Deprecated in favor of -std=iso9899:1999.
std=iso9899:2011C ObjC Alias(std=c11)Conform to the ISO 2011 C standard.
std=iso9899:2017C ObjC Alias(std=c17)Conform to the ISO 2017 C standard (published in 2018).
std=iso9899:2018C ObjC Alias(std=c17)Conform to the ISO 2017 C standard (published in 2018).
std=legacyFortranAccept extensions to support legacy code.
symbol=LTODump RejectNegative Joined Var(flag_lto_dump_symbol)
symbolicDriver
tDriver
timeDriver Var(report_times)
time=Driver JoinedOrMissing
traditionalDriver
traditional-cppC ObjC C++ ObjC++Enable traditional preprocessing.
tree-statsLTODump Var(flag_lto_tree_stats)Dump the statistics of trees.
trigraphsC ObjC C++ ObjC++-trigraphs	Support ISO C trigraphs.
type-statsLTODump Var(flag_lto_dump_type_stats)Dump the statistics of tree types.
uDriver Joined Separate
undefC ObjC C++ ObjC++ Var(flag_undef)Do not predefine system-specific and GCC-specific macros.
undefDriver
undefFortran
vC ObjC C++ ObjC++
vCommon Driver Var(verbose_flag)Enable verbose output.
vD
vFortran
versionCommon Var(version_flag) RejectDriverDisplay the compiler's version.
wC ObjC C++ ObjC++
wCommon Var(inhibit_warnings)Suppress warnings.
wrapperDriver Separate Var(wrapper_string)
xDriver Joined Separate
zDriver Joined Separate
