.\"    $NetBSD: npf.conf.5,v 1.48.4.1 2018/09/01 06:19:12 martin Exp $
.\"
.\" Copyright (c) 2009-2017 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This material is based upon work partially supported by The
.\" NetBSD Foundation under a contract with Mindaugas Rasiukevicius.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 31, 2018
.Dt NPF.CONF 5
.Os
.Sh NAME
.Nm npf.conf
.Nd NPF packet filter configuration file
.\" -----
.Sh DESCRIPTION
.Nm
is the default configuration file for the NPF packet filter.
.Pp
This manual page serves as a reference for editing
.Nm .
Please refer to the official NPF documentation website for comprehensive and
in-depth information.
.Pp
There are multiple structural elements that
.Nm
may contain, such as:
.Bl -bullet -offset indent
.It
variables
.It
table definitions (with or without content)
.It
abstraction groups
.It
packet filtering rules
.It
map rules for address translation
.It
application level gateways
.It
procedure definitions to call on filtered packets.
.El
.Sh SYNTAX
.Ss Variables
Variables are specified using the dollar ($) sign, which is used for both
definition and referencing of a variable.
Variables are defined by assigning a value to them as follows:
.Bd -literal
$var1 = 10.0.0.1
.Ed
.Pp
A variable may also be defined as a set:
.Bd -literal
$var2 = { 10.0.0.1, 10.0.0.2 }
.Ed
.Pp
Common variable definitions are for IP addresses, networks, ports,
and interfaces.
.Ss Tables
Tables are specified using a name between angle brackets
< and >.
The following is an example of table definition:
.Bd -literal
table <black> type hash dynamic
.Pp
.Ed
Currently, tables support three data storage types: "hash", "tree", or "cdb".
Tables can also be set as containing "dynamic" or "static" data i.e. loaded from
 a specified file.
Tables of type "hash" and "cdb" can only contain IP addresses.
Only static data can be used with a storage type of "cdb".
.Pp
The specified file should contain a list of IP addresses and/or networks in the
form of:
.Bd -literal
10.0.0.0/24
10.1.1.1
.Ed
.Ss Interfaces
Interfaces can be specified as the values of the variables:
.Bd -literal
$pub_if_list = { inet4(wm0), inet4(wm1) }
.Ed
.Pp
In the context of filtering, an interface provides a list of all its IP
addresses, both IPv4 and IPv6.
Specific addresses configured on an interface can also be selected by family,
e.g.:
.Bd -literal
$pub_if4 = inet4(wm0)
$pub_if46 = { inet4(wm0), inet6(wm0) }
.Ed
.Pp
In the above examples, NPF will statically capture the interface
addresses on configuration load.
.Pp
The following can be used for dynamic handling of the interface addresses:
.Bd -literal
$pub_if = ifaddrs(wm0)
.Ed
.Pp
In this case, the expression will represent the runtime list of addresses,
reflecting any changes to the interface, including the attach and detach.
Marking the interface as ``down'' has no effect, i.e. all addresses will
remain present.
.Pp
A dynamic address list represents both the IPv4 and IPv6 addresses configured on
an interface.
The
.Cd family
keyword can be used in combination of a filtering rule to be explicit.
.Ss Groups
NPF requires that all rules be defined within groups.
Groups can be thought of as higher level rules which can contain subrules.
Groups may have the following options: name, interface, and direction.
Packets matching group criteria are passed to the ruleset of that group.
If a packet does not match any group, it is passed to the
.Cd default group .
The
.Cd default group
must always be defined.
.Pp
Example of configuration:
.Bd -literal
group "my-name" in on wm0 {
	# List of rules, for packets received on wm0
}
group default {
	# List of rules, for the other packets
}
.Ed
.Ss Rules
With a rule statement NPF is instructed to
.Cd pass
or
.Cd block
a packet depending on packet header information, transit direction and
the interface it arrived on, either immediately upon match or using the
last match.
.Pp
If a packet matches a rule which has the
.Cd final
option set, this rule is considered the last matching rule, and
evaluation of subsequent rules is skipped.
Otherwise, the last matching rule is used.
.Pp
A rule can also instruct NPF to create an entry in the state table
when passing the packet, to notify the sender when blocking it, and
to apply a procedure to the packet (e.g. "log") in either case.
.Pp
To notify the sender of a blocking decision, three
.Cd return
options can be used in conjunction with a
.Cd block
rule:
.Bl -tag -width Xreturn-icmpXX -offset indent
.It return
Behaves as return-rst or return-icmp, depending on whether the packet
being blocked is TCP or UDP.
.It return-rst
Return a TCP RST message, when the packet being blocked is a TCP packet.
Applies to IPv4 and IPv6.
.It return-icmp
Return an ICMP UNREACHABLE message, when the packet being blocked is a UDP packet.
Applies to IPv4 and IPv6.
.El
.Pp
A "fully-featured" rule would for example be:
.Bd -literal
pass stateful in final family inet4 proto tcp flags S/SA \\
	from $source port $sport to $dest port $dport apply "someproc"
.Ed
.Pp
Any protocol in
.Pa /etc/protocols
can be specified.
Further packet
specification at present is limited to protocol TCP understanding flags,
TCP and UDP understanding source and destination ports, and ICMP and
IPv6-ICMP understanding icmp-type.
.Pp
Alternatively, NPF supports
.Xr pcap-filter 7
syntax, for example:
.Bd -literal
block out final pcap-filter "tcp and dst 10.1.1.252"
.Ed
.Pp
Fragments are not selectable since NPF always reassembles packets
before further processing.
.Ss Stateful
Stateful packet inspection is enabled using the
.Cd stateful
or
.Cd stateful-ends
keywords.
The former creates a state which is uniquely identified by a 5-tuple (source
and destination IP addresses, port numbers and an interface identifier).
The latter excludes the interface identifier and must be used with
precaution.
In both cases, a full TCP state tracking is performed for TCP connections
and a limited tracking for message-based protocols (UDP and ICMP).
.Pp
The
.Cd flags
keyword can be used in conjunction with the
.Cd stateful
keyword to match the packets against specific TCP flags, according to
the following syntax:
.Bl -tag -width flagsXX -offset indent
.It flags Ar match[/mask]
.El
.Pp
Where
.Ar match
is the set of TCP flags to be matched, out of the
.Ar mask
set, both sets being represented as a string combination of: S (SYN),
A (ACK), F (FIN), R (RST). The flags that are not present in
.Ar mask
are ignored.
.Pp
By default, a stateful rule implies SYN-only flag check ("flags S/SAFR")
for the TCP packets.
It is not advisable to change this behavior; however,
it can be overridden with the aforementioned
.Cd flags
keyword.
.Ss Map
Network Address Translation (NAT) is expressed in a form of segment mapping.
The translation may be
.Cd dynamic
(stateful) or
.Cd static
(stateless).
The following mapping types are available:
.Bl -tag -width <-> -offset indent
.It Pa ->
outbound NAT (translation of the source)
.It Pa <-
inbound NAT (translation of the destination)
.It Pa <->
bi-directional NAT (combination of inbound and outbound NAT)
.El
.Pp
The following would translate the source (10.1.1.0/24) to the IP address
specified by $pub_ip for the packets on the interface $ext_if.
.Bd -literal
map $ext_if dynamic 10.1.1.0/24 -> $pub_ip
.Ed
.Pp
Several NAT algorithms are available, and can be chosen using the
.Cd algo
keyword.
By default, NPF will use the NAPT algorithm.
The other available algorithms are:
.Bl -tag -width Xnpt66XX -offset indent
.It npt66
IPv6-to-IPv6 network prefix translation (NPTv6).
.El
.Pp
Translations are implicitly filtered by limiting the operation to the
network segments specified, that is, translation would be performed only
on packets originating from the 10.1.1.0/24 network.
Explicit filter criteria can be specified using "pass <criteria>" as
an additional option of the mapping.
.Ss Application Level Gateways
Certain application layer protocols are not compatible with NAT and require
translation outside layers 3 and 4.
Such translation is performed by packet filter extensions called
Application Level Gateways (ALGs).
.Pp
NPF supports the following ALGs:
.Bl -tag -width XicmpXX -offset indent
.It icmp
ICMP ALG.
Allows to find an active connection by looking at the ICMP payload, and to
perform NAT translation of the ICMP payload.
Applies to IPv4 and IPv6.
.El
.Pp
The ALGs are built-in, unless NPF is used as kernel module, in which case
they come as kernel modules too.
In that case, the ALG kernel modules can be autoloaded through the
configuration, using the
.Cd alg
keyword.
.Pp
For example:
.Bd -literal
alg "icmp"
.Ed
.Pp
Alternatively, the ALG kernel modules can be loaded manually, using
.Xr modload 8 .
.Ss Procedures
A rule procedure is defined as a collection of extension calls (it
may have none).
Every extension call has a name and a list of options in the form of
key-value pairs.
Depending on the call, the key might represent the argument and the value
might be optional.
Available options:
.Bl -tag -width Xlog:XinterfaceXX -offset indent
.It log: Ar interface
Log events.
This requires the npf_ext_log kernel module, which would normally get
auto-loaded by NPF.
The specified npflog interface would also be auto-created once the
configuration is loaded.
The log packets can be written to a file using the
.Xr npfd 8
daemon.
.It normalize: Xo
.Ar option1
.Op , Ar option2
.Ar ...
.Xc
Modify packets according to the specified normalization options.
This requires the npf_ext_normalize kernel module, which would normally get
auto-loaded by NPF.
.El
.Pp
The available normalization options are:
.Bl -tag -width XXmin-ttlXXvalueXX -offset indent
.It Dq random-id
Randomize the IPv4 ID parameter.
.It Do min-ttl Dc Ar value
Enforce a minimum value for the IPv4 Time To Live (TTL) parameter.
.It Do max-mss Dc Ar value
Enforce a maximum value for the MSS on TCP packets.
.It Dq no-df
Remove the Don't Fragment (DF) flag from IPv4 packets.
.El
.Pp
For example:
.Bd -literal
procedure "someproc" {
	log: npflog0
	normalize: "random-id", "min-ttl" 64, "max-mss" 1432
}
.Ed
.Pp
In this case, the procedure calls the logging and normalization modules.
.Ss Misc
Text after a hash
.Pq Sq #
character is considered a comment.
The backslash
.Pq Sq \e
character at the end of a line marks a continuation line,
i.e., the next line is considered an extension of the present line.
.Sh GRAMMAR
The following is a non-formal BNF-like definition of the grammar.
The definition is simplified and is intended to be human readable,
therefore it does not strictly represent the formal grammar.
.Bd -literal
# Syntax of a single line.  Lines can be separated by LF (\\n) or
# a semicolon.  Comments start with a hash (#) character.

syntax		= var-def | set-param | alg | table-def |
		  map | group | proc | comment

# Variable definition.  Names can be alpha-numeric, including "_" character.

var-name	= "$" . string
interface	= interface-name | var-name
var-def		= var "=" ( var-value | "{" value *[ "," value ] "}" )

# Parameter setting.
set-param	= "set" param-value

# Application level gateway.  The name should be in double quotes.

alg		= "alg" alg-name
alg-name	= "icmp"

# Table definition.  Table ID shall be numeric.  Path is in the double quotes.

table-id	= <table-name>
table-def	= "table" table-id "type" ( "hash" | "tree" | "cdb" )
		  ( "dynamic" | "file" path )

# Mapping for address translation.

map		= "map" interface
		  ( "static" [ "algo" map-algo ] | "dynamic" ) [ proto ]
		  map-seg ( "->" | "<-" | "<->" ) map-seg
		  [ "pass" [ proto ] filt-opts ]

map-algo	= "npt66"
map-seg		= ( addr-mask | interface ) [ port-opts ]

# Rule procedure definition.  The name should be in the double quotes.
#
# Each call can have its own options in a form of key-value pairs.
# Both key and values may be strings (either in double quotes or not)
# and numbers, depending on the extension.

proc		= "procedure" proc-name "{" *( proc-call [ new-line ] ) "}"
proc-opts	= key [ " " val ] [ "," proc-opts ]
proc-call	= call-name ":" proc-opts new-line

# Group definition and the rule list.

group		= "group" ( "default" | group-opts ) "{" rule-list "}"
group-opts	= name-string [ "in" | "out" ] [ "on" interface ]
rule-list	= [ rule new-line ] rule-list

npf-filter	= [ "family" family-opt ] [ proto ] ( "all" | filt-opts )
static-rule	= ( "block" [ block-opts ] | "pass" )
		  [ "stateful" | "stateful-ends" ]
		  [ "in" | "out" ] [ "final" ] [ "on" interface ]
		  ( npf-filter | "pcap-filter" pcap-filter-expr )
		  [ "apply" proc-name ]

dynamic-ruleset	= "ruleset" group-opts
rule		= static-rule | dynamic-ruleset

tcp-flag-mask	= tcp-flags
tcp-flags	= [ "S" ] [ "A" ] [ "F" ] [ "R" ]
proto		= "proto" protocol [ proto-opts ]
block-opts	= "return-rst" | "return-icmp" | "return"
family-opt	= "inet4" | "inet6"
proto-opts	= "flags" tcp-flags [ "/" tcp-flag-mask ] |
		  "icmp-type" type [ "code" icmp-code ]

filt-opts	= "from" filt-addr [ port-opts ] "to" filt-addr [ port-opts ]
filt-addr	= [ "!" ] [ interface | addr-mask | table-id | "any" ]

port-opts	= "port" ( port-num | port-from "-" port-to | var-name )
addr-mask	= addr [ "/" mask ]
.Ed
.\" -----
.Sh FILES
.Bl -tag -width /usr/share/examples/npf -compact
.It Pa /dev/npf
control device
.It Pa /etc/npf.conf
default configuration file
.It Pa /usr/share/examples/npf
directory containing further examples
.El
.\" -----
.Sh EXAMPLES
.Bd -literal
$ext_if = { inet4(wm0) }
$int_if = { inet4(wm1) }

table <blacklist> type hash file "/etc/npf_blacklist"
table <limited> type tree dynamic

$services_tcp = { http, https, smtp, domain, 6000, 9022 }
$services_udp = { domain, ntp, 6000 }
$localnet = { 10.1.1.0/24 }

alg "icmp"

# Note: if $ext_if has multiple IP address (e.g. IPv6 as well),
# then the translation address has to be specified explicitly.
map $ext_if dynamic 10.1.1.0/24 -> $ext_if
map $ext_if dynamic proto tcp 10.1.1.2 port 22 <- $ext_if port 9022

procedure "log" {
	# The logging facility can be used together with npfd(8).
	log: npflog0
}

group "external" on $ext_if {
	pass stateful out final all

	block in final from <blacklist>
	pass stateful in final family inet4 proto tcp to $ext_if port ssh apply "log"
	pass stateful in final proto tcp to $ext_if port $services_tcp
	pass stateful in final proto udp to $ext_if port $services_udp
	pass stateful in final proto tcp to $ext_if port 49151-65535	# Passive FTP
	pass stateful in final proto udp to $ext_if port 33434-33600	# Traceroute
}

group "internal" on $int_if {
	block in all
	block in final from <limited>

	# Ingress filtering as per BCP 38 / RFC 2827.
	pass in final from $localnet
	pass out final all
}

group default {
	pass final on lo0 all
	block all
}
.Ed
.\" -----
.Sh SEE ALSO
.Xr bpf 4 ,
.Xr npf 7 ,
.Xr pcap-filter 7 ,
.Xr npfctl 8 ,
.Xr npfd 8
.Pp
.Lk http://www.netbsd.org/~rmind/npf/ "NPF documentation website"
.Sh HISTORY
NPF first appeared in
.Nx 6.0 .
.Sh AUTHORS
NPF was designed and implemented by
.An Mindaugas Rasiukevicius .
