DONE
----
1.  Removed linking of the kernel compat object library into all kernels;
    using the .o library caused some build breakage, and resulted in the
    bulk of the compat code being included in every kernel, but without
    any module linkage.  In turn, this caused failure when loading some
    modules due to symbols already being defined in the kernel.

2.  Reverted some intentional breakage for loading the sysv_ipc module;
    the breakage was introduced as the fix for the above-mentioned build
    breakage.  

3.  Split the sysv_ipc compat routines into their own compat_sysv module.

4.  Resolved some inter-module dependencies.

5.  Extracted some net/if.c compat routines into the compat module, and
    replaced the originals with indirect (vectored) function calls.

6.  Implemented a mechanism for modules to include "aliases", allowing
    a single module file to declare multiple names.  For example, a
    single "compat" module could declare compat_80, compat_70, etc, and
    other modules could depend on specific compat levels rather than on
    the entirety of compat.

7.  Reconfirmed existing compat-module dependencies, and update the
    defopt/defflag lines in the config files* as needed, to insure that
    built-in dependencies get resolved.

8.  Fixed limits on the number of module depedencies and maximum
    recursion level have been removed.  Previous code for reporting
    module status to userland has been versioned and moved to the
    compat_80 module.

9.  The old monolithic compat module has been broken into multiple
    modules, one for each old NetBSD version.  The monolithic module
    is still available, and uses the alias mechanism to "advertise"
    that the component modules are available.

    Similarly, the compat_sysv module has also been split into several
    version-specific modules.

    There are still several areas which are not complete - see the
    TODO list below for more details.

10. syscalls.master has been updated to autoload the version-specific
    compat modules rather than the monolithic modules.


TODO
----
1.  Audit the entire code base for any remaining embedded #ifdef's for
    COMPAT_xx.  When found, move the actual compat code into the compat
    hierarchy and replace originals with indirect (vectored) calls.

2.  The rtsock compat code is a disaster, with rtsock_50.c #include-ing
    the main rtsock.c code with various manipulations of the COMPAT_50
    macro.

3.  The compat_60 module still needs some work for XEN systems.  We
    probably need some build infrastructure changes to ensure that
    XEN (and, for i386, XEN-PAE) modules are build with the correct
    macros defined and with -I directories specified in the same order
    as for building kernels.

4.  Update syscalls.master to point the compat calls at the specific
    modules rather than the monolithic compat module.  Update the
    "required" lists of other modules, too.

5.  The rtsock compatability code needs to be de-spaghetti'd and made
    separable into rtsock_70 and rtsock_50 pieces.

6.  Once rtsock is separated, compat_14 references to rtsock_50 routines
    needs to be verified.

7.  For compat_60, still need to figure out what to do with BSDPTY and
    tty_ptm

8.  Also for compat_60, need to fix the building of XEN (and, for i386,
    XEN-PAE) module variants so that the obj-dir symlinks and the -I
    include order match those present in a kernel build.  See PR/53130
    (Currently, this affects the compat_60 module and its implementation
    of microcode updates for AMD processors - i386 and amd64.)

9.  For compat_50, in addition to rtsock there are some things in dev/vnd,
    dev/gpio, and dev/wscons/wsmux that I haven't been able to cleanly
    separate.

10. There seems to be quite a bit of MD compat_xx code, in the various
    sys/arch/ directories.  I haven't yet looked at any of this.  But it
    seems to me that the MI compat build infrastructure should have some
    mechanism to "reach over" to the MD code, #include a Makefile.inc file,
    and perhaps define something to enable the MI modcmd code to call a
    compat_xx_MD_init() routine.

    Note also that there are a few bits of MD code that is COMPAT_44
    related.  The only bit of MI COMPAT_44 code is in the single module
    shared by COMPAT_43 and COMPAT_09.  This affects the cesfic, hp300,
    news68k, and x68k platforms, all in their respective machdep.c
    source file.  Additionally, the zaurus platform defines COMPAT_44 in
    its INSTALL kernel configuration - but no other configuration files!

