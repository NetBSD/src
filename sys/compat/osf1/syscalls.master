	$NetBSD: syscalls.master,v 1.48.28.1 2014/05/18 17:45:33 rmind Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; NetBSD COMPAT_OSF1 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#if defined(_KERNEL_OPT)
#include "opt_compat_43.h"
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/syscallargs.h>

#include <compat/osf1/osf1.h>
#include <compat/osf1/osf1_syscallargs.h>

%%

0	NOARGS		{ int|sys||nosys(void); } syscall
1	NOARGS		{ int|sys||exit(int rval); }
2	NOARGS		{ int|sys||fork(void); }
3	NOARGS		{ int|sys||read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int|sys||write(int fd, const char *buf, \
			    u_int nbyte); }
5	UNIMPL		old open
6	NOARGS		{ int|sys||close(int fd); }
7	STD		{ int|osf1_sys||wait4(int pid, int *status, \
			    int options, struct osf1_rusage *rusage); }
8	UNIMPL		old creat
9	NOARGS		{ int|sys||link(const char *path, const char *link); }
10	NOARGS		{ int|sys||unlink(const char *path); }
11	UNIMPL		execv
12	NOARGS		{ int|sys||chdir(const char *path); }
13	NOARGS		{ int|sys||fchdir(int fd); }
14	STD		{ int|osf1_sys||mknod(const char *path, int mode, \
			    int dev); }
15	NOARGS		{ int|sys||chmod(const char *path, int mode); }
16	NOARGS		{ int|sys||__posix_chown(const char *path, int uid, \
			    int gid); }
17	NOARGS		{ int|sys||obreak(char *nsize); }
18	STD		{ int|osf1_sys||getfsstat(struct osf1_statfs *buf, \
			    long bufsize, int flags); }
19	STD		{ off_t|osf1_sys||lseek(int fd, off_t offset, \
			    int whence); }
20	NOARGS		{ pid_t|sys||getpid_with_ppid(void); }
21	STD		{ int|osf1_sys||mount(int type, const char *path, \
			    int flags, void *data); }
22	STD		{ int|osf1_sys||unmount(const char *path, int flags); }
23	STD		{ int|osf1_sys||setuid(uid_t uid); }
24	NOARGS		{ uid_t|sys||getuid_with_euid(void); }
25	UNIMPL		exec_with_loader
26	UNIMPL		ptrace
27	STD		{ int|osf1_sys||recvmsg_xopen(int s, \
			    struct osf1_msghdr_xopen *msg, int flags); }
28	STD		{ int|osf1_sys||sendmsg_xopen(int s, \
			    const struct osf1_msghdr_xopen *msg, int flags); }
29	UNIMPL		recvfrom
30	UNIMPL		accept
31	UNIMPL		getpeername
32	UNIMPL		getsockname
33	STD		{ int|osf1_sys||access(const char *path, int flags); }
34	UNIMPL		chflags
35	UNIMPL		fchflags
36	NOARGS		{ int|sys||sync(void); }
37	NOARGS		{ int|sys||kill(int pid, int signum); }
38	UNIMPL		old stat
39	NOARGS		{ int|sys||setpgid(int pid, int pgid); }
40	UNIMPL		old lstat
41	NOARGS		{ int|sys||dup(int fd); }
42	NOARGS		{ int|sys||pipe(void); }
43	STD		{ int|osf1_sys||set_program_attributes( \
                          void *taddr, unsigned long tsize, \
                          void *daddr, unsigned long dsize); }
44	UNIMPL		profil
45	STD		{ int|osf1_sys||open(const char *path, int flags, \
			    int mode); }
46	OBSOL		sigaction
47	NOARGS		{ gid_t|sys||getgid_with_egid(void); }
; XXX
48	NOARGS		{ int|compat_13_sys||sigprocmask(int how, \
			    sigset13_t mask); }
49	NOARGS		{ int|sys||__getlogin(char *namebuf, u_int namelen); }
50	NOARGS		{ int|sys||__setlogin(const char *namebuf); }
51	NOARGS		{ int|sys||acct(const char *path); }
52	UNIMPL		sigpending
53	STD		{ int|osf1_sys||classcntl(int opcode, int arg1, \
			    int arg2, int arg3); }
54	STD		{ int|osf1_sys||ioctl(int fd, int com, void *data); }
55	STD		{ int|osf1_sys||reboot(int opt); }
56	NOARGS		{ int|sys||revoke(const char *path); }
57	NOARGS		{ int|sys||symlink(const char *path, \
			    const char *link); }
58	NOARGS		{ int|sys||readlink(const char *path, char *buf, \
			    int count); }
59	STD		{ int|osf1_sys||execve(const char *path, \
			    char * const *argp, char * const *envp); }
60	NOARGS		{ int|sys||umask(int newmask); }
61	NOARGS		{ int|sys||chroot(const char *path); }
62	UNIMPL		old fstat
63	NOARGS		{ int|sys||getpgrp(void); }
64	NOARGS		{ int|compat_43_sys||getpagesize(void); }
65	UNIMPL		mremap
66	NOARGS		{ int|sys||vfork(void); }
67	STD		{ int|osf1_sys||stat(const char *path, \
			    struct osf1_stat *ub); }
68	STD		{ int|osf1_sys||lstat(const char *path, \
			    struct osf1_stat *ub); }
69	UNIMPL		sbrk
70	UNIMPL		sstk
71	STD		{ void *|osf1_sys||mmap(void *addr, size_t len, \
			    int prot, int flags, int fd, off_t pos); }
72	UNIMPL		ovadvise
73	NOARGS		{ int|sys||munmap(void *addr, size_t len); }
74	STD		{ int|osf1_sys||mprotect(void *addr, size_t len, \
			    int prot); }
75	STD		{ int|osf1_sys||madvise(void *addr, size_t len, \
			    int behav); }
76	UNIMPL		old vhangup
77	UNIMPL		kmodcall
78	UNIMPL		mincore
79	NOARGS		{ int|sys||getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int|sys||setgroups(u_int gidsetsize, gid_t *gidset); }
81	UNIMPL		old getpgrp
; OSF/1 setpgrp(); identical in function to setpgid().  XXX
82	NOARGS		{ int|sys||setpgid(int pid, int pgid); } setpgrp
83	STD		{ int|osf1_sys||setitimer(u_int which, \
			    struct osf1_itimerval *itv, \
			    struct osf1_itimerval *oitv); }
84	UNIMPL		old wait
85	UNIMPL		table
86	STD		{ int|osf1_sys||getitimer(u_int which, struct osf1_itimerval *itv); }
87	NOARGS		{ int|compat_43_sys||gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int|compat_43_sys||sethostname(const char *hostname, \
			    u_int len); }
89	NOARGS		{ int|compat_43_sys||getdtablesize(void); }
90	NOARGS		{ int|sys||dup2(int from, int to); }
91	STD		{ int|osf1_sys||fstat(int fd, void *sb); }
92	STD		{ int|osf1_sys||fcntl(int fd, int cmd, void *arg); }
93	STD		{ int|osf1_sys||select(u_int nd, fd_set *in, \
			    fd_set *ou, fd_set *ex, struct osf1_timeval *tv); }
; maybe XXX
94	NOARGS		{ int|sys||poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
95	NOARGS		{ int|sys||fsync(int fd); }
96	NOARGS		{ int|sys||setpriority(int which, int who, int prio); }
97	STD		{ int|osf1_sys||socket(int domain, int type, \
			    int protocol); }
98	NOARGS		{ int|sys||connect(int s, void *name, int namelen); }
99	NOARGS		{ int|compat_43_sys||accept(int s, void *name, \
			    int *anamelen); }
100	NOARGS		{ int|sys||getpriority(int which, int who); }
101	NOARGS		{ int|compat_43_sys||send(int s, void *buf, int len, \
			    int flags); }
102	NOARGS		{ int|compat_43_sys||recv(int s, void *buf, int len, \
			    int flags); }
103	NOARGS		{ int|compat_13_sys||sigreturn(\
			    struct sigcontext13 *sigcntxp); }
104	NOARGS		{ int|sys||bind(int s, void *name, int namelen); }
105	NOARGS		{ int|sys||setsockopt(int s, int level, int name, \
			    void *val, int valsize); }
106	NOARGS		{ int|sys||listen(int s, int backlog); }
107	UNIMPL		plock
108	UNIMPL		old sigvec
109	UNIMPL		old sigblock
110	UNIMPL		old sigsetmask
111	NOARGS		{ int|compat_13_sys||sigsuspend(int mask); }
112	NOARGS		{ int|compat_43_sys||sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	UNIMPL		old recvmsg
114	UNIMPL		old sendmsg
115	OBSOL		vtrace
116	STD		{ int|osf1_sys||gettimeofday(struct osf1_timeval *tp, \
			    struct osf1_timezone *tzp); }
117	STD		{ int|osf1_sys||getrusage(int who, \
			    struct osf1_rusage *rusage); }
; XXX
118	NOARGS		{ int|sys||getsockopt(int s, int level, int name, \
			    void *val, int *avalsize); }
119	UNIMPL
120	STD		{ int|osf1_sys||readv(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
121	STD		{ int|osf1_sys||writev(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
122	STD		{ int|osf1_sys||settimeofday(struct osf1_timeval *tv, \
			    struct osf1_timezone *tzp); }
123	NOARGS		{ int|sys||__posix_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int|sys||fchmod(int fd, int mode); }
125	NOARGS		{ int|compat_43_sys||recvfrom(int s, void *buf, \
			    size_t len, int flags, void *from, \
			    int *fromlenaddr); }
126	NOARGS		{ int|sys||setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int|sys||setregid(gid_t rgid, gid_t egid); }
128	NOARGS		{ int|sys||__posix_rename(const char *from, \
			    const char *to); }
129	STD		{ int|osf1_sys||truncate(const char *path, \
			    off_t length); }
130	STD		{ int|osf1_sys||ftruncate(int fd, off_t length); }
131	NOARGS		{ int|sys||flock(int fd, int operation); }
132	STD		{ int|osf1_sys||setgid(gid_t gid); }
133	STD		{ int|osf1_sys||sendto(int s, void *buf, size_t len, \
			    int flags, struct sockaddr *to, int tolen); }
134	NOARGS		{ int|sys||shutdown(int s, int how); }
135	STD		{ int|osf1_sys||socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int|sys||mkdir(const char *path, int mode); }
137	NOARGS		{ int|sys||rmdir(const char *path); }
138	STD		{ int|osf1_sys||utimes(const char *path, \
			    const struct osf1_timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	UNIMPL		adjtime
141	NOARGS		{ int|compat_43_sys||getpeername(int fdes, \
			    void *asa, int *alen); }
142	NOARGS		{ int32_t|compat_43_sys||gethostid(void); }
143	NOARGS		{ int|compat_43_sys||sethostid(int32_t hostid); }
; XXX
144	STD		{ int|osf1_sys||getrlimit(u_int which, \
			    struct rlimit *rlp); }
; XXX
145	STD		{ int|osf1_sys||setrlimit(u_int which, \
			    struct rlimit *rlp); }
146	UNIMPL		old killpg
147	NOARGS		{ int|sys||setsid(void); }
148	UNIMPL		quotactl
149	NOARGS		{ int|compat_43_sys||quota(void); }
150	NOARGS		{ int|compat_43_sys||getsockname(int fdec, \
			    void *asa, int *alen); }
151	UNIMPL		pread
152	UNIMPL		pwrite
153	UNIMPL		pid_block
154	UNIMPL		pid_unblock
155	UNIMPL		signal_urti
156	STD		{ int|osf1_sys||sigaction(int signum, \
			    struct osf1_sigaction *nsa, \
			    struct osf1_sigaction *osa); }
157	UNIMPL		sigwaitprim
158	UNIMPL		nfssvc
159	STD		{ int|osf1_sys||getdirentries(int fd, char *buf, \
			    int nbytes, long *basep); }
160	STD		{ int|osf1_sys||statfs(const char *path, \
			    struct osf1_statfs *buf, int len); }
161	STD		{ int|osf1_sys||fstatfs(int fd, \
			    struct osf1_statfs *buf, int len); }
162	UNIMPL
163	UNIMPL		async_daemon
164	UNIMPL		getfh
165	NOARGS		{ int|compat_09_sys||getdomainname(char *domainname, \
			    int len); }
166	NOARGS		{ int|compat_09_sys||setdomainname(char *domainname, \
			    int len); }
167	UNIMPL
168	UNIMPL
169	UNIMPL		exportfs
170	UNIMPL
171	UNIMPL
172	UNIMPL		alt msgctl
173	UNIMPL		alt msgget
174	UNIMPL		alt msgrcv
175	UNIMPL		alt msgsnd
176	UNIMPL		alt semctl
177	UNIMPL		alt semget
178	UNIMPL		alt semop
179	UNIMPL		alt uname
180	UNIMPL
181	UNIMPL		alt plock
182	UNIMPL		lockf
183	UNIMPL
184	UNIMPL		getmnt
185	UNIMPL
186	UNIMPL		unmount
187	UNIMPL		alt sigpending
188	UNIMPL		alt setsid
189	UNIMPL
190	UNIMPL
191	UNIMPL
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
197	UNIMPL
198	UNIMPL
199	UNIMPL		swapon
200	UNIMPL		msgctl
201	UNIMPL		msgget
202	UNIMPL		msgrcv
203	UNIMPL		msgsnd
204	UNIMPL		semctl
205	UNIMPL		semget
206	UNIMPL		semop
207	STD		{ int|osf1_sys||uname(struct osf1_uname *name); }
208	NOARGS		{ int|sys||__posix_lchown(const char *path, int uid, \
			    int gid); }
209	STD		{ void *|osf1_sys||shmat(int shmid, \
			    const void *shmaddr, int shmflg); }
210	STD		{ int|osf1_sys||shmctl(int shmid, int cmd, \
			    struct osf1_shmid_ds *buf); }
211	STD		{ int|osf1_sys||shmdt(const void *shmaddr); }
212	STD		{ int|osf1_sys||shmget(osf1_key_t key, size_t size, \
			    int flags); }
213	UNIMPL		mvalid
214	UNIMPL		getaddressconf
215	UNIMPL		msleep
216	UNIMPL		mwakeup
217	UNIMPL		msync
218	UNIMPL		signal
219	UNIMPL		utc gettime
220	UNIMPL		utc adjtime
221	UNIMPL
222	UNIMPL		security
223	UNIMPL		kloadcall
224	STD		{ int|osf1_sys||stat2(const char *path, \
			    struct osf1_stat2 *ub); }
225	STD		{ int|osf1_sys||lstat2(const char *path, \
			    struct osf1_stat2 *ub); }
226	STD		{ int|osf1_sys||fstat2(int fd, \
			    struct osf1_stat2 *sb); }
227	UNIMPL		statfs2
228	UNIMPL		fstatfs2
229	UNIMPL		getfsstat2
230	UNIMPL
231	UNIMPL
232	UNIMPL
233	NOARGS		{ pid_t|sys||getpgid(pid_t pid); }
234	NOARGS		{ pid_t|sys||getsid(pid_t pid); }
235	STD		{ int|osf1_sys||sigaltstack( \
			    struct osf1_sigaltstack *nss, \
			    struct osf1_sigaltstack *oss); }
236	UNIMPL		waitid
237	UNIMPL		priocntlset
238	UNIMPL		sigsendset
239	UNIMPL		set_speculative
240	UNIMPL		msfs_syscall
241	STD		{ int|osf1_sys||sysinfo(int cmd, char *buf, long len); }
242	UNIMPL		uadmin
243	UNIMPL		fuser
244	UNIMPL		proplist_syscall
245	UNIMPL		ntp_adjtime
246	UNIMPL		ntp_gettime
247	STD		{ long|osf1_sys||pathconf(const char *path, int name); }
248	STD		{ long|osf1_sys||fpathconf(int fd, int name); }
249	UNIMPL
250	UNIMPL		uswitch
251	STD		{ int|osf1_sys||usleep_thread( \
			    struct osf1_timeval *sleep, \
			    struct osf1_timeval *slept); }
252	UNIMPL		audcntl
253	UNIMPL		audgen
254	UNIMPL		sysfs
255	UNIMPL		subsys_info
256	STD		{ int|osf1_sys||getsysinfo(u_long op, void *buffer, \
			    u_long nbytes, void *arg, u_long flag); }
257	STD		{ int|osf1_sys||setsysinfo(u_long op, void *buffer, \
			    u_long nbytes, void *arg, u_long flag); }
258	UNIMPL		afs_syscall
259	UNIMPL		swapctl
260	UNIMPL		memcntl
261	UNIMPL		fdatasync
262	UNIMPL		oflock
263	UNIMPL		_F64_readv
264	UNIMPL		_F64_writev
265	UNIMPL		cdslxlate
266	UNIMPL		sendfile
