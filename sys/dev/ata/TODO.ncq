Bugs
----

siisata - fix all new XXX and unmergable bits

test wd* at umass?, confirm the ata_channel kludge works

test non-NCQ device error handling
- test retry code paths, locking
- channel reset on fatal errors

do proper NCQ error recovery (currently not even really attempted)
- if fatal error, do channel reset
- if tranfer error (both TFD.STS.BSY and DRQ is 0), need READ LOG EXT log
  page 10h to read tag which caused the error, and reset the device to idle
- need to cancel and restart the other active transfers in a way to not
  increase retry count, and not trigger drive reset

maybe do device error handling in not-interrupt-context (maybe this should be
done on a mpata branch?)

in atastart(), restrict NCQ commands to commands for the same drive? it's
fine for fis-based switching to have outstanding for several drives, but
not non-FIS

Other random notes (do outside the NCQ branch):
-----------------------------------------------------
queue is allocated regardless if there are any drives, fix? 

change wd(4) to use dksubr

dump to unopened disk fails (e.g. dump do wd1b when wd1a not mounted), due
to the open path executing ata_get_params(), which eventually tsleeps()
while waiting for the command to finish; specifically, if WDF_LOADED is not
set 
- happens due to wd_get_params() with just AT_WAIT in wdopen()
- not easy to fix, open needs to read disklabel and all this mechanics
  is too much for emergency crash dump code path
- old bug - kern/16789

add nibble to control number of tags (1==disable NCQ)?

add support for the NCQ TRIM if supported by device?

protect more of wddone() with mutex?

implement DIOCGCACHE/DIOCCACHESYNC for ld@ataraid? just passthrough, like ccd

MSI/MSI-X support for AHCI and mvsata(4)

mvsata - constify mvsata_pci_products and move pci-specific code to
the pci attach code

mvsata(4) 64-bit DMA
- at least with AHA1430SA does not really work, crash in mvsata_intr() on boot

malloc(M_CANFAIL) actually doesn't do anything
