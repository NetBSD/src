/*	$NetBSD: kern.ldscript,v 1.30.2.1 2020/01/17 21:47:23 ad Exp $	*/

#include "assym.h"

/*
 * PAE is enabled by default on amd64, the large page size is therefore
 * 2MB (and not 4MB!).
 */

__PAGE_SIZE = 0x1000 ;
__LARGE_PAGE_SIZE = 0x200000 ;

ENTRY(_start)
SECTIONS
{
	.text : AT (ADDR(.text) & 0x0fffffff)
	{
		. = ALIGN(__PAGE_SIZE);
		__text_user_start = . ;
		*(.text.user)
		. = ALIGN(__PAGE_SIZE);
		__text_user_end = . ;

		*(.text)
		*(.text.*)
		*(.stub)
		. = ALIGN(__LARGE_PAGE_SIZE);
	} =0xCC
	_etext = . ;
	PROVIDE (etext = .) ;

	/*
	 * Push the rodata segment up to the next large page boundary so that we
	 * can map the text segment with large pages.
	 */
	. = ALIGN(__LARGE_PAGE_SIZE);

	__rodata_start = . ;

	.rodata.hotpatch :
	{
		__rodata_hotpatch_start = . ;
		*(.rodata.hotpatch)
		__rodata_hotpatch_end = . ;
	}

	.rodata :
	{
		*(.rodata)
		*(.rodata.*)
		. = ALIGN(COHERENCY_UNIT);
		__CTOR_LIST__ = .;
		*(.ctors)
		__CTOR_END__ = .;
	}

	. = ALIGN(__LARGE_PAGE_SIZE);

	__data_start = . ;
	.data :
	{
		*(.data)
	}

	. = ALIGN(COHERENCY_UNIT);
	.data.cacheline_aligned :
	{
		*(.data.cacheline_aligned)
	}
	. = ALIGN(COHERENCY_UNIT);
	.data.read_mostly :
	{
		*(.data.read_mostly)
	}
	. = ALIGN(COHERENCY_UNIT);

	_edata = . ;
	PROVIDE (edata = .) ;
	__bss_start = . ;
	.bss :
	{
		*(.bss)
		*(.bss.*)
		*(COMMON)
		. = ALIGN(__LARGE_PAGE_SIZE);
	}

	. = ALIGN(__PAGE_SIZE);

	/* End of the kernel image */
	__kernel_end = . ;

	_end = . ;
	PROVIDE (end = .) ;
	.note.netbsd.ident :
	{
		KEEP(*(.note.netbsd.ident));
	}
}

