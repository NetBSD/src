.\"	$NetBSD: readpassphrase.3,v 1.5 2017/04/18 18:41:46 christos Exp $
.\"	$OpenBSD: readpassphrase.3,v 1.3 2001/08/06 10:42:25 mpech Exp $
.\"
.\" Copyright (c) 2000 Todd C. Miller <Todd.Miller@courtesan.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd November 20, 2000
.Dt READPASSPHRASE 3
.Os
.Sh NAME
.Nm readpassphrase
.Nd get a passphrase from the user
.Sh SYNOPSIS
.In readpassphrase.h
.Ft char *
.Fn readpassphrase "const char *prompt" "char *buf" "size_t bufsiz" "int flags"
.Sh DESCRIPTION
The
.Fn readpassphrase
function displays a prompt to, and reads in a passphrase from,
.Pa /dev/tty .
If this file is inaccessible
and the
.Dv RPP_REQUIRE_TTY
flag is not set,
.Fn readpassphrase
displays the prompt on the standard error output and reads from the standard
input.
In this case it is generally not possible to turn off echo.
.Pp
Up to
.Fa bufsiz
- 1 characters (one is for the NUL) are read into the provided buffer
.Fa buf .
Any additional
characters and the terminating newline (or return) character are discarded.
.Pp
.Fn readpassphrase
takes the following optional
.Fa flags :
.Pp
.Bd -literal -offset indent -compact
RPP_ECHO_OFF		turn off echo (default behavior)
RPP_ECHO_ON		leave echo on
RPP_REQUIRE_TTY		fail if there is no tty
RPP_FORCELOWER		force input to lower case
RPP_FORCEUPPER		force input to upper case
RPP_SEVENBIT		strip the high bit from input
.Ed
.Pp
The calling process should zero the passphrase as soon as possible to
avoid leaving the cleartext passphrase visible in the process's address
space.
.Sh RETURN VALUES
On success,
.Fn readpassphrase
returns a pointer to the null-terminated passphrase.
If the
.Dv RPP_REQUIRE_TTY
flag is set and
.Pa /dev/tty
is inaccessible,
.Fn readpassphrase
returns a null pointer.
.Sh FILES
.Bl -tag -width /dev/tty -compact
.It Pa /dev/tty
.El
.Sh EXAMPLES
The following code fragment will read a passphrase from
.Pa /dev/tty
into the buffer
.Fa passbuf .
.Bd -literal -offset indent
char passbuf[1024];

\&...

if (readpassphrase("Response: ", passbuf, sizeof(passbuf),
    RPP_REQUIRE_TTY) == NULL)
	errx(1, "unable to read passphrase");

if (compare(transform(passbuf), epass) != 0)
	errx(1, "bad passphrase");

\&...

memset(passbuf, 0, sizeof(passbuf));
.Ed
.Sh SEE ALSO
.Xr getpass 3
.Sh HISTORY
The
.Fn readpassphrase
function first appeared in
.Ox 2.9 .
