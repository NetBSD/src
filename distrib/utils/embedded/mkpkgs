#! /bin/sh

# $NetBSD: mkpkgs,v 1.1.4.2 2012/04/17 00:02:49 yamt Exp $

# Copyright (c) 2012 Alistair Crooks <agc@NetBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# find next available vnd device, from kre
next_avail ()
{
	local dev="$1"
	local N=$(( ${#dev} + 1 ))
	local unit units

	units=$(
		sysctl -n hw.disknames		|
			tr ' ' '\012'		|
			grep '^'"${dev}"'[0-9]'	|
			sort -n -k 1.$N			)

	test -z "${units}" && {
		test -e "/dev/${dev}0a" || {
			echo >&2 "No ${dev}s available!"
			return 1
		}
		echo "${dev}0"
		return
	}

	N=0
	for unit in ${units}
	do
		if [ "${unit}" = "${dev}${N}" ]
		then
			N=$(( N + 1 ))
		else
			echo "${dev}${N}"
			return
		fi
	done

	test -e /dev/"${dev}${N}a" || {
		echo >&2 "All ${dev}s in use"
		return 1
	}

	echo "${dev}${N}"
}

# find the size of the gzipped files in a .tgz archive
sizeone() {
        case "$1" in
        *.tgz|*.tar.gz)
                tar tvzf "$1" | awk '{ tot += $5 } END { print tot }'
                ;;
        *.tbz|*.tar.bz2)
                tar tvjf "$1" | awk '{ tot += $5 } END { print tot }'
                ;;
        *)
                echo 0
                ;;
        esac
}

pkgdir=/usr/pkgsrc/packages/All
size=0	# in MB
image=pkgs.img
pkgs="digest screen sudo"
bar="==="

while [ $# -gt 0 ]; do
	case "$1" in
	-S)	pkgdir=$2; shift ;;
	-o)	image=$2; shift ;;
	-s)	size=$2; shift ;;
	-x)	set -x ;;
	*)	break ;;
	esac
	shift
done

while [ $# -gt 0 ]; do
	# take the next argument as being the image name
	pkgs="${pkgs} $1"
	shift
done

# find the size of the fs needed
total=0
for p in ${pkgs}; do
	total=$(expr $total + $(sizeone ${pkgdir}/${p}-*.tgz))
done
total=$(expr \( $total / 1000000 \) + 2)
if [ $size -eq 0 ]; then
	# auto-size the pkgs fs
	size=${total}
else
	# check that we've been given enough space
	if [ ${total} -gt ${size} ]; then
		echo "File system size given as ${size} MB, but it needs ${total} MB" >&2
		exit 1
	fi
fi

echo "${bar} making a new ${size} MB image in ${image} ${bar}"
dd if=/dev/zero of=${image} bs=1m count=${size}

vnddev=$(next_avail vnd)
echo "${bar} mounting image via vnd ${vnddev} ${bar}"
sudo vnconfig ${vnddev} ${image}
sudo newfs /dev/r${vnddev}a
sudo mount /dev/${vnddev}a /mnt

echo "${bar} installing packages ${bar}"
sudo mkdir -p /mnt/usr/pkg/.dbdir
for p in ${pkgs}; do
	echo "${bar} Installing ${p} ${bar}"
	sudo pkg_add -K /usr/pkg/.dbdir -P /mnt -v ${pkgdir}/${p}-*.tgz
done

df /mnt

sudo umount /mnt
sudo vnconfig -u ${vnddev}

exit 0
