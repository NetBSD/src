# frv testcase for mmulxhs $GRi,$GRj,$ACCk
# mach: all

	.include "testutils.inc"

	start

	.global mmulxhs
mmulxhs:
	; Positive operands
	set_fr_iimmed  	2,3,fr7		; multiply small numbers
	set_fr_iimmed  	3,2,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	4,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	9,acc1

	set_fr_iimmed  	0,1,fr7		; multiply by 0
	set_fr_iimmed  	0,2,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	0,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0,acc1

	set_fr_iimmed  	2,1,fr7		; multiply by 1
	set_fr_iimmed  	2,1,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	2,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	2,acc1

	set_fr_iimmed	0x3fff,2,fr7	; 15 bit result
	set_fr_iimmed  	0x3fff,2,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_limmed	0,0x7ffe,acc0
	test_accg_immed 	0,accg1
	test_acc_limmed	0,0x7ffe,acc1

	set_fr_iimmed	0x4000,2,fr7	; 16 bit result
	set_fr_iimmed  	0x4000,2,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_limmed	0x0000,0x8000,acc0
	test_accg_immed 	0,accg1
	test_acc_limmed	0x0000,0x8000,acc1

	set_fr_iimmed	0x7fff,0x7fff,fr7	; max positive result
	set_fr_iimmed	0x7fff,0x7fff,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_limmed 0x3fff,0x0001,acc0
	test_accg_immed 	0,accg1
	test_acc_limmed 0x3fff,0x0001,acc1

	; Mixed operands
	set_fr_iimmed  	2,0xfffd,fr7		; multiply small numbers
	set_fr_iimmed  	2,0xfffd,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0xff,accg0
	test_acc_immed 	-6,acc0
	test_accg_immed 	0xff,accg1
	test_acc_immed 	-6,acc1

	set_fr_iimmed  	0xfffe,1,fr7		; multiply by 1
	set_fr_iimmed  	0xfffe,1,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0xff,accg0
	test_acc_immed 	-2,acc0
	test_accg_immed 	0xff,accg1
	test_acc_immed 	-2,acc1

	set_fr_iimmed  	0xfffe,0,fr7		; multiply by 0
	set_fr_iimmed  	0xfffe,0,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	0,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0,acc1

	set_fr_iimmed  	0x2001,0xfffe,fr7	; 15 bit result
	set_fr_iimmed  	0x2001,0xfffe,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0xff,accg0
	test_acc_limmed	0xffff,0xbffe,acc0
	test_accg_immed 	0xff,accg1
	test_acc_limmed	0xffff,0xbffe,acc1

	set_fr_iimmed	0x4000,0xfffe,fr7	; 16 bit result
	set_fr_iimmed  	0x4000,0xfffe,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0xff,accg0
	test_acc_limmed	0xffff,0x8000,acc0
	test_accg_immed 	0xff,accg1
	test_acc_limmed	0xffff,0x8000,acc1

	set_fr_iimmed	0x7fff,0x8000,fr7	; max negative result
	set_fr_iimmed	0x7fff,0x8000,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0xff,accg0
	test_acc_limmed	0xc000,0x8000,acc0
	test_accg_immed 	0xff,accg1
	test_acc_limmed	0xc000,0x8000,acc1

	; Negative operands
	set_fr_iimmed  	0xfffe,0xfffd,fr7		; multiply small numbers
	set_fr_iimmed  	0xfffe,0xfffd,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	6,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	6,acc1

	set_fr_iimmed  	0xffff,0xfffe,fr7		; multiply by -1
	set_fr_iimmed  	0xffff,0xfffe,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	2,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	2,acc1

	set_fr_iimmed	0x8001,0x8001,fr7	; almost max positive result
	set_fr_iimmed	0x8001,0x8001,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	0x3fff0001,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0x3fff0001,acc1

	set_fr_iimmed	0x8000,0x8000,fr7	; max positive result
	set_fr_iimmed	0x8000,0x8000,fr8
	mmulxhs      	fr7,fr8,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	0x40000000,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0x40000000,acc1

	pass
