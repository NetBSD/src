# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test doing an -exec-run while there are two MI UIs.

load_lib mi-support.exp

standard_testfile

if {[build_executable $testfile.exp $testfile ${srcfile} "debug"] == -1} {
    untested "failed to compile"
    return
}

# Run one configuration of the test.
#
# UI_TO_RUN is the UI that should issue the run command.

proc do_test { ui_to_run } {
    if {[mi_clean_restart $::binfile "separate-mi-tty"] != 0} {
	fail "could not start gdb"
	return
    }

    with_spawn_id $::gdb_main_spawn_id {
	lassign [create_mi_ui] second_mi_spawn_id second_mi_tty_name
    }

    with_spawn_id $second_mi_spawn_id {
	gdb_expect {
	    -re "=thread-group-added,id=\"i1\"\r\n$::mi_gdb_prompt$" {
		pass "consume"
	    }
	}
    }

    if { $ui_to_run == "first" } {
	set spawn_id_to_run $::mi_spawn_id
    } elseif { $ui_to_run == "second" } {
	set spawn_id_to_run $second_mi_spawn_id
    } else {
	error "invalid ui_to_run value"
    }

    with_spawn_id $spawn_id_to_run {
	# mi_runto_main implicitly verifies that the UI doing the -exec-run gets
	# the expected ^running record.
	mi_runto_main
    }
}

foreach_with_prefix ui_to_run {first second} {
    do_test $ui_to_run
}

