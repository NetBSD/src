# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that thread creation and thread exit events are correctly
# announced when a thread starts, or exits, as a result of an inferior
# function call from GDB.

standard_testfile

if {[prepare_for_testing "failed to prepare" $testfile $srcfile {debug pthreads}] == -1} {
    return -1
}

if ![runto_main] {
    return -1
}

gdb_breakpoint breakpt
gdb_continue_to_breakpoint "first breakpt call"

set thr_count 1

proc check_thread_count { adjustment } {
    incr ::thr_count $adjustment

    gdb_test "p \$_inferior_thread_count" \
	"^\\\$$::decimal = $::thr_count"
}

with_test_prefix "starting threads" {
    gdb_test "call (void) start_thread()" \
	"\\\[New Thread \[^\r\n\]+\\\]" \
	"start a new thread, return value discarded"
    check_thread_count +1

    foreach_with_prefix call_type { print call } {
	gdb_test "$call_type start_thread()" \
	    "\\\[New Thread \[^\r\n\]+\\\]\r\n\\\$$decimal = 1" \
	    "start another new thread"
	check_thread_count +1
    }
}

with_test_prefix "stopping threads" {
    gdb_test "call (void) stop_thread()" \
	"\\\[Thread \[^\r\n\]+ exited\\\]" \
	"stop a thread, return value discarded"
    check_thread_count -1

    foreach_with_prefix call_type { print call } {
	gdb_test "$call_type stop_thread()" \
	    "\\\[Thread \[^\r\n\]+ exited\\\]\r\n\\\$$decimal = 1" \
	    "stop another thread"
	check_thread_count -1
    }
}

gdb_continue_to_breakpoint "second breakpt call"
gdb_continue_to_end
