# Copyright (C) 2014-2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that when a step-over trips on a watchpoint, that watchpoint is
# reported.

standard_testfile
set executable ${testfile}

# This test verifies that a watchpoint is detected in a multithreaded
# program so the test is only meaningful on a system with hardware
# watchpoints.
if {[skip_hw_watchpoint_tests]} {
    return 0
}

if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	 executable [list debug "incdir=${objdir}"]] != "" } {
    return -1
}

proc do_test { with_bp } {
    global executable

    if ${with_bp} {
	set prefix "with thread-specific bp"
    } else {
	set prefix "no thread-specific bp"
    }
    with_test_prefix $prefix {
	# Cover both stepping and non-stepping execution commands.
	foreach command {"step" "next" "continue" } {
	    with_test_prefix $command {
		clean_restart $executable

		if ![runto_main] {
		    continue
		}

		gdb_breakpoint [gdb_get_line_number "set wait-thread breakpoint here"]
		gdb_continue_to_breakpoint "run to wait-thread breakpoint"
		gdb_test "info threads" "2 .*\\\* 1.*" "info threads shows all threads"

		gdb_test_no_output "set scheduler-locking on"

		delete_breakpoints

		gdb_breakpoint [gdb_get_line_number "set breakpoint child here"]
		gdb_test "thread 2" "Switching to .*"
		gdb_continue_to_breakpoint "run to breakpoint in thread 2"
		gdb_test "p counter = 0" " = 0" "unbreak loop in thread 2"
		gdb_test "p watch_me = 0" " = 0" "clear watch_me"
		gdb_test "watch watch_me" "Hardware watchpoint .*"

		if ${with_bp} {
		    # Set a thread-specific breakpoint (for the wrong
		    # thread) right after instruction that triggers
		    # the watchpoint.
		    set linenum [gdb_get_line_number "set thread-specific breakpoint here"]
		    gdb_test "b $linenum thread 1"
		}

		# Switch back to thread 1 and disable scheduler locking.
		gdb_test "thread 1" "Switching to .*"
		gdb_test_no_output "set scheduler-locking off"

		# Thread 2 is still stopped at a breakpoint that needs to be
		# stepped over before proceeding thread 1.  However, right
		# where the step-over lands there's another breakpoint
		# installed, which should trap and be reported to the user.
		gdb_test "$command" "Hardware watchpoint.*: watch_me.*New value = 1.*"
	    }
	}
    }
}

do_test 0
do_test 1
