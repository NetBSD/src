# Copyright (C) 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Regression test for the situation where aranges covers an address
# but the CU does not.

load_lib "dwarf.exp"

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile main.c cu-no-addrs.S

lassign [function_range main ${srcdir}/${subdir}/${srcfile}] \
    main_start main_length

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global main_start main_length

    cu {label cu_start} {
	# The PC range here is intentionally empty -- this was the
	# trigger for the bug.
	compile_unit {
	    {language @DW_LANG_C}
	    {DW_AT_low_pc $main_start DW_FORM_addr}
	    {DW_AT_high_pc $main_start DW_FORM_addr}
	} {
	    DW_TAG_subprogram {
		{DW_AT_name "main"}
		{DW_AT_low_pc $main_start DW_FORM_addr}
	    }
	}
    }

    aranges {} cu_start {
	arange {} $main_start $main_length
    }
}

if {[prepare_for_testing "failed to prepare" ${testfile} \
	 [list $srcfile $asm_file] {nodebug}]} {
    return -1
}

gdb_test "break *$main_start" ".*Breakpoint $decimal at $hex" \
    "set breakpoint at main address"
