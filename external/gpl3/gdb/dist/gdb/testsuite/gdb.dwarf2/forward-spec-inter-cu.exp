# Copyright 2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that the DWARF reader works with a a DW_AT_specification that
# refers to a later DIE.  Inter-cu variant of forward-spec.exp.

load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
require dwarf2_support

standard_testfile main.c -debug.S

# Set up the DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global srcfile

    declare_labels spec

    cu {} {
	DW_TAG_compile_unit {
	    {DW_AT_language @DW_LANG_C_plus_plus}
	} {
	    # The new indexer has special code to compute the full
	    # name of an object that uses a specification that appears
	    # later in the DWARF.
	    DW_TAG_variable {
		{DW_AT_specification %$spec}
		{DW_AT_location {
		    DW_OP_const1u 23
		    DW_OP_stack_value
		} SPECIAL_expr}
	    }
	}
    }

    cu {} {
	DW_TAG_compile_unit {
	    {DW_AT_language @DW_LANG_C_plus_plus}
	} {
	    declare_labels myint

	    myint: DW_TAG_base_type {
		{DW_AT_byte_size 4 DW_FORM_sdata}
		{DW_AT_encoding  @DW_ATE_signed}
		{DW_AT_name      myint}
	    }

	    DW_TAG_namespace {
		{DW_AT_name ns}
	    } {
		spec: DW_TAG_variable {
		    {DW_AT_name v}
		    {DW_AT_type :$myint}
		    {DW_AT_declaration 1 DW_FORM_flag_present}
		}
	    }
	}
    }
}

if {[build_executable "failed to build executable" ${testfile} \
	 [list $srcfile $asm_file] {nodebug}]} {
    return -1
}

set eol "\r\n"
set ws "\[ \t\]"

set worker_threads_list {}

# Exercises the intra-shard case.
lappend worker_threads_list 0

# Might exercise the inter-shard case.
lappend worker_threads_list default

foreach_with_prefix worker_threads $worker_threads_list {

    clean_restart

    if { $worker_threads != "default" } {
	gdb_test_no_output "maint set worker-threads $worker_threads"
    }

    gdb_load $binfile

    gdb_test "maint print objfiles" "$eol$ws+qualified:$ws+ns::v$eol.*" \
	"v has parent ns"
}
