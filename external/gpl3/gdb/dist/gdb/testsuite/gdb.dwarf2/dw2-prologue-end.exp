# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that GDB can honor the prologue_end flag the compiler can place
# in the line-table data.

load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile .c .S

set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global srcdir subdir srcfile srcfile2
    declare_labels lines_label

    get_func_info main

    cu {} {
	compile_unit {
	    {language @DW_LANG_C}
	    {name dw2-prologue-end.c}
	    {stmt_list ${lines_label} DW_FORM_sec_offset}
	} {
	    subprogram {
		{external 1 flag}
		{name main}
		{low_pc $main_start addr}
		{high_pc "$main_start + $main_len" addr}
	    }
	}
    }

    lines {version 5} lines_label {
	set diridx [include_dir "${srcdir}/${subdir}"]
	file_name "$srcfile" $diridx

	program {
	    DW_LNS_set_file $diridx
	    DW_LNE_set_address $main_start
	    line [gdb_get_line_number "main prologue"]
	    DW_LNS_copy

	    DW_LNE_set_address main_label
	    line [gdb_get_line_number "main assign m"]
	    DW_LNS_copy

	    DW_LNE_set_address main_assign_n
	    line [gdb_get_line_number "main assign n"]
	    DW_LNS_copy

	    DW_LNE_set_address main_end_prologue
	    line [gdb_get_line_number "main assign o"]
	    DW_LNS_set_prologue_end
	    DW_LNS_copy

	    DW_LNE_set_address main_end
	    line [gdb_get_line_number "main end"]
	    DW_LNS_copy

	    DW_LNE_end_sequence
	}
    }
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

if ![runto_main] {
    return -1
}

set prologue_end_line [gdb_get_line_number "main assign o"]
gdb_test "frame" ".*main \\\(\\\) at \[^\r\n\]*:$prologue_end_line\r\n.*"

with_test_prefix "ignore-prologue-end" {
    clean_restart $binfile
    gdb_test_no_output "maintenance set ignore-prologue-end-flag on"

    if ![runto_main] {
	return -1
    }

    # If we ignore the prologue-end flag, we should stop at the first statement
    # of main which assigns m.
    set prologue_end_line [gdb_get_line_number "main assign m"]
    gdb_test "frame" ".*main \\\(\\\) at \[^\r\n\]*:$prologue_end_line\r\n.*"
}
