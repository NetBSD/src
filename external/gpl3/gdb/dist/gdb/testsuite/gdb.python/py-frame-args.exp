# Copyright (C) 2013-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile

require allow_python_tests

if { [prepare_for_testing "failed to prepare" ${testfile} ${srcfile}] } {
    return -1
}

if ![runto_main] {
    return -1
}

set remote_python_file [gdb_remote_download host \
			    ${srcdir}/${subdir}/${testfile}.py]

gdb_test_no_output "source ${remote_python_file}" "load python file"

gdb_breakpoint [gdb_get_line_number "break-here"]
gdb_continue_to_breakpoint "break-here" ".* break-here .*"

# Test raw-frame-arguments on backtrace with and without frame-filter
gdb_test "interpreter-exec mi \"-enable-frame-filters\"" \
    "done"
foreach_with_prefix filtered {enable disable} {
    gdb_test_no_output "$filtered frame-filter global BasicFrameFilter"

    gdb_test "bt 1" \
	".*foo \\(x=42, ss=super struct = {\[.\]{3}}\\).*" \
	"bt pretty"

    gdb_test "bt -raw-frame-arguments on 1" \
	".*foo \\(x=42, ss=\[.\]{3}\\).*" \
	"bt raw"

    gdb_test "interpreter-exec mi \"-stack-list-arguments 1\"" \
	".*name=\"ss\",value=\"super struct =.*" \
	"mi bt pretty"

    gdb_test_no_output "set print raw-frame-arguments on"
    gdb_test "interpreter-exec mi \"-stack-list-arguments 1\"" \
	".*name=\"ss\",value=\".a =.*" \
	"mi bt raw"
    gdb_test_no_output "set print raw-frame-arguments off"

    # "set print raw-values" should not affect frame arguments
    gdb_test_no_output "set print raw-values on"
    gdb_test "bt 1" \
	".*foo \\(x=42, ss=super struct = {\[.\]{3}}\\).*" \
	"bt pretty,raw-values"

    gdb_test "interpreter-exec mi \"-stack-list-arguments 1\"" \
	".*name=\"ss\",value=\"super struct =.*" \
	"mi bt pretty,raw-values"
    gdb_test_no_output "set print raw-values off"
}

# Test all combinations with raw off.

gdb_test_no_output "set print raw-frame-arguments off"

with_test_prefix "pretty frame args" {
    gdb_test_no_output "set print frame-arguments none"
    gdb_test "frame" ".*foo \\(x=\[.\]{3}, ss=\[.\]{3}\\).*" \
	"none"

    gdb_test_no_output "set print frame-arguments scalars"
    gdb_test "frame" ".*foo \\(x=42, ss=super struct = {\[.\]{3}}\\).*" \
	"scalars"

    gdb_test_no_output "set print frame-arguments all"
    gdb_test "frame" \
	".*foo \\(x=42, ss=super struct = {a = m=<1>, b = m=<2>}\\).*" \
	"all"
}

# Test all combinations with raw on.

gdb_test_no_output "set print raw-frame-arguments on"

with_test_prefix "raw frame args" {
    gdb_test_no_output "set print frame-arguments none"
    gdb_test "frame" ".*foo \\(x=\[.\]{3}, ss=\[.\]{3}\\).*" \
	"none"

    gdb_test_no_output "set print frame-arguments scalars"
    gdb_test "frame" ".*foo \\(x=42, ss=\[.\]{3}\\).*" \
	"scalars"

    gdb_test_no_output "set print frame-arguments all"
    gdb_test "frame" \
	".*foo \\(x=42, ss={a = {m = 1}, b = {m = 2}}\\).*" \
	"all"
}
