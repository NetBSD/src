# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that a very long file is ok.

load_lib gdb-python.exp
require allow_python_tests

standard_testfile .c

# Create a source file with many lines.
set c_file [standard_output_file $srcfile]

set chan [open $c_file w]
puts $chan "int callee (int x) { return x; }"
for {set i 2} {$i < 65538} {incr i} {
    puts $chan "int call$i () { return callee ($i); }"
}
puts $chan "int main() { return call65537(); }"
close $chan

if {[prepare_for_testing "failed to prepare" ${testfile} \
	 [list $c_file] {debug}]} {
    return
}

if {![runto callee]} {
    return
}

gdb_test "print x" " = 65537"

# This doesn't actually demonstrate the bug, because it takes a code
# path not checking symbol::line.
gdb_test "frame 1" "call65537.*lotsa-lines.c:65537.*"

# This is the simplest way to see the problem.
gdb_test "python print(gdb.selected_frame().function().line)" "65537" \
    "print function line number"
