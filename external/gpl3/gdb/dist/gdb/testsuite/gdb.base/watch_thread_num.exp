# This testcase is part of GDB, the GNU debugger.

# Copyright 2007-2014 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# watch-thread_num.exp   Test thread <thread_num> parameter for
#                        watch commands.
#

# This test verifies that a watchpoint is detected in the proper thread
# so the test is only meaningful on a system with hardware watchpoints.
if {[skip_hw_watchpoint_tests]} {
    return 0
}

standard_testfile .c

# What compiler are we using?
#
if [get_compiler_info] {
    return -1
}

if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    return -1
}

clean_restart ${binfile}

if { ![runto main] } then {
   fail "run to main"
   return
}

gdb_test "watch shared_var thread 0" "Unknown thread 0\." "Watchpoint on invalid thread"
gdb_test "watch shared_var thread" "A syntax error in expression, near `thread'\." "Invalid watch syntax"

gdb_test "Next 5" ".*"

gdb_test "break thread_function" "Breakpoint \[0-9\].*" \
  "Set breakpoint at thread_function"

gdb_test "continue" ".*Breakpoint 2.*" "Stopped in thread_function"

gdb_test_multiple "thread" "Thread command" {
    -re ".*Current thread is (\[0-9\]*).*$gdb_prompt $" {
	pass "Thread command" 
    }
}

set thread_num "$expect_out(1,string)"

gdb_test_no_output "disable 2" "Disable breakpoint 2"
gdb_test "watch shared_var thread $thread_num" "Hardware watchpoint 3: shared_var" "Watchpoint on shared variable"
gdb_test "info breakpoint 3" "stop only in thread $thread_num"

for {set i 1} {$i <= 10} {incr i 1} {
    set watchpoint "Watchpoint triggered iteration $i"
    set check "Check thread that triggered iteration $i"

    gdb_test "continue" "Hardware watchpoint 3: shared_var.*" $watchpoint
    gdb_test "thread" ".*Current thread is $thread_num .*" $check
}

