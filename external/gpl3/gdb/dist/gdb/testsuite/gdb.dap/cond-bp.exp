# Copyright 2023-2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test DAP breakpoint conditions.

require allow_dap_tests

load_lib dap-support.exp

standard_testfile

if {[build_executable ${testfile}.exp $testfile] == -1} {
    return
}

if {[dap_initialize] == ""} {
    return
}

set line [gdb_get_line_number "STOP"]

# Test some breakpoint-setting failure modes.
set obj [dap_check_request_and_response "set invalid breakpoints" \
	     setBreakpoints \
	     [format {o source [o path [%s]] \
			  breakpoints \
			  [a [o line [i %d] condition [s "DEI@@++"]] \
			       [o line [i %d] hitCondition [s "DEI@@++"]]]} \
		  [list s $srcfile] $line $line]]

set i 1
foreach bp [dict get [lindex $obj 0] body breakpoints] {
    gdb_assert {[dict get $bp verified] == "false"} \
	"breakpoint $i invalid"
    if {$i == 1} {
	gdb_assert {[dict get $bp reason] == "pending"} \
	    "breakpoint $i pending"
    } else {
	gdb_assert {[dict get $bp message] != ""} \
	    "breakpoint $i has message"
    }
    incr i
}

set obj [dap_check_request_and_response "set conditional breakpoint" \
	     setBreakpoints \
	     [format {o source [o path [%s]] \
			  breakpoints [a [o line [i %d] \
					      condition [s "i == 3"] \
					      hitCondition [s 3]]]} \
		  [list s $srcfile] $line]]
set fn_bpno [dap_get_breakpoint_number $obj]

dap_check_request_and_response "configurationDone" configurationDone

if {[dap_launch $testfile] == ""} {
    return
}
dap_wait_for_event_and_check "stopped at function breakpoint" stopped \
    "body reason" breakpoint \
    "body hitBreakpointIds" $fn_bpno

set bt [lindex [dap_check_request_and_response "backtrace" stackTrace \
		    {o threadId [i 1]}] \
	    0]
set frame_id [dict get [lindex [dict get $bt body stackFrames] 0] id]

set obj [dap_check_request_and_response "evaluate i" \
	     evaluate \
	     [format {o expression [s i] frameId [i %s]} $frame_id]]
dap_match_values "value of i" [lindex $obj 0] \
    "body result" 3

set obj [dap_check_request_and_response "evaluate j" \
	     evaluate \
	     [format {o expression [s j] frameId [i %s]} $frame_id]]
dap_match_values "value of j" [lindex $obj 0] \
    "body result" 3

dap_shutdown
