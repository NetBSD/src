# Copyright 2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that stepOut puts the return value in scope.

require allow_dap_tests

load_lib dap-support.exp

standard_testfile

if {[build_executable ${testfile}.exp $testfile] == -1} {
    return
}

if {[dap_initialize] == ""} {
    return
}

set obj [dap_check_request_and_response "set breakpoint on function" \
	     setFunctionBreakpoints \
	     {o breakpoints [a [o name [s function_breakpoint_here]]]}]
set fn_bpno [dap_get_breakpoint_number $obj]

dap_check_request_and_response "configurationDone" configurationDone

if {[dap_launch $testfile] == ""} {
    return
}
dap_wait_for_event_and_check "inferior started" thread "body reason" started

dap_wait_for_event_and_check "stopped at function breakpoint" stopped \
    "body reason" breakpoint \
    "body hitBreakpointIds" $fn_bpno

dap_check_request_and_response "return from function" stepOut \
    {o threadId [i 1]}
dap_wait_for_event_and_check "stopped after return" stopped \
    "body reason" step

set bt [lindex [dap_check_request_and_response "backtrace" stackTrace \
		    {o threadId [i 1]}] \
	    0]
set frame_id [dict get [lindex [dict get $bt body stackFrames] 0] id]

set scopes [dap_check_request_and_response "get scopes" scopes \
		[format {o frameId [i %d]} $frame_id]]
set scopes [dict get [lindex $scopes 0] body scopes]

gdb_assert {[llength $scopes] == 2} "two scopes"

lassign $scopes scope reg_scope
gdb_assert {[dict get $scope name] == "Locals"} "scope is locals"
gdb_assert {[dict get $scope presentationHint] == "locals"} \
    "locals presentation hint"
gdb_assert {[dict get $scope namedVariables] == 2} "two vars in scope"

set num [dict get $scope variablesReference]
set refs [lindex [dap_check_request_and_response "fetch arguments" \
		      "variables" \
		      [format {o variablesReference [i %d]} $num]] \
	      0]
set varlist [lindex [dict get $refs body variables] 0]

gdb_assert {[dict get $varlist variablesReference] > 0} \
    "variable has children"
gdb_assert {[dict get $varlist name] == "(return)"} \
    "variable is return value"

dap_shutdown
