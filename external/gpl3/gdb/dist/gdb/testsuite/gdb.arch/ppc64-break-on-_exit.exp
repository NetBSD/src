# Copyright 2021-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set a breakpoint on a local copy of glibc's _exit, and verify that it
# triggers.  The function does a syscall immediately after the prologue, and
# if the breakpoint is set past the syscall due to faulty prologue skipping,
# the breakpoint will not trigger.
#
# In particular, we're trying to excercise the instruction analysis
# functionality of prologue skipping.  If non-minimal symbols are
# read, then that functionality might not be used because f.i.
# line-info is used instead.  So, we use nodebug.

if {![istarget "powerpc*"] || ![is_lp64_target]} {
    unsupported "Not powerpc64"
    return
}

set flags { nodebug }
if [info exists COMPILE] {
    standard_testfile .c -main.c
    lappend flags optimize=-O2
    lappend flags additional_flags=-fno-stack-protector
    lappend flags additional_flags=-mlong-double-128
    lappend flags additional_flags=-fpic
    lappend flags additional_flags=-ftls-model=initial-exec
} else {
    standard_testfile .s -main.c
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $srcfile2] $flags] } {
    return -1
}

if {![runto_main]} {
    return 0
}

gdb_breakpoint "_exit"

# If the skip_prologue analysis of _exit is too eager, we may not hit the
# breakpoint.
gdb_continue_to_breakpoint "_exit" "_exit \\(\\).*"
