This is gdb.info, produced by makeinfo version 6.8 from gdb.texinfo.

Copyright (C) 1988-2023 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Free Software" and "Free Software Needs Free
Documentation", with the Front-Cover Texts being "A GNU Manual," and
with the Back-Cover Texts as in (a) below.

   (a) The FSF's Back-Cover Text is: "You are free to copy and modify
this GNU Manual.  Buying copies from GNU Press supports the FSF in
developing GNU and promoting software freedom."
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Gdb: (gdb).                     The GNU debugger.
* gdbserver: (gdb) Server.        The GNU debugging server.
END-INFO-DIR-ENTRY

   This file documents the GNU debugger GDB.

   This is the Tenth Edition, of 'Debugging with GDB: the GNU
Source-Level Debugger' for GDB (GDB) Version 13.2.

   Copyright (C) 1988-2023 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "Free Software" and "Free Software Needs Free
Documentation", with the Front-Cover Texts being "A GNU Manual," and
with the Back-Cover Texts as in (a) below.

   (a) The FSF's Back-Cover Text is: "You are free to copy and modify
this GNU Manual.  Buying copies from GNU Press supports the FSF in
developing GNU and promoting software freedom."


File: gdb.info,  Node: Target Descriptions,  Next: Operating System Information,  Prev: Agent Expressions,  Up: Top

Appendix G Target Descriptions
******************************

One of the challenges of using GDB to debug embedded systems is that
there are so many minor variants of each processor architecture in use.
It is common practice for vendors to start with a standard processor
core -- ARM, PowerPC, or MIPS, for example -- and then make changes to
adapt it to a particular market niche.  Some architectures have hundreds
of variants, available from dozens of vendors.  This leads to a number
of problems:

   * With so many different customized processors, it is difficult for
     the GDB maintainers to keep up with the changes.
   * Since individual variants may have short lifetimes or limited
     audiences, it may not be worthwhile to carry information about
     every variant in the GDB source tree.
   * When GDB does support the architecture of the embedded system at
     hand, the task of finding the correct architecture name to give the
     'set architecture' command can be error-prone.

   To address these problems, the GDB remote protocol allows a target
system to not only identify itself to GDB, but to actually describe its
own features.  This lets GDB support processor variants it has never
seen before -- to the extent that the descriptions are accurate, and
that GDB understands them.

   GDB must be linked with the Expat library to support XML target
descriptions.  *Note Expat::.

* Menu:

* Retrieving Descriptions::         How descriptions are fetched from a target.
* Target Description Format::       The contents of a target description.
* Predefined Target Types::         Standard types available for target
                                    descriptions.
* Enum Target Types::               How to define enum target types.
* Standard Target Features::        Features GDB knows about.


File: gdb.info,  Node: Retrieving Descriptions,  Next: Target Description Format,  Up: Target Descriptions

G.1 Retrieving Descriptions
===========================

Target descriptions can be read from the target automatically, or
specified by the user manually.  The default behavior is to read the
description from the target.  GDB retrieves it via the remote protocol
using 'qXfer' requests (*note qXfer: General Query Packets.).  The ANNEX
in the 'qXfer' packet will be 'target.xml'.  The contents of the
'target.xml' annex are an XML document, of the form described in *note
Target Description Format::.

   Alternatively, you can specify a file to read for the target
description.  If a file is set, the target will not be queried.  The
commands to specify a file are:

'set tdesc filename PATH'
     Read the target description from PATH.

'unset tdesc filename'
     Do not read the XML target description from a file.  GDB will use
     the description supplied by the current target.

'show tdesc filename'
     Show the filename to read for a target description, if any.


File: gdb.info,  Node: Target Description Format,  Next: Predefined Target Types,  Prev: Retrieving Descriptions,  Up: Target Descriptions

G.2 Target Description Format
=============================

A target description annex is an XML (http://www.w3.org/XML/) document
which complies with the Document Type Definition provided in the GDB
sources in 'gdb/features/gdb-target.dtd'.  This means you can use
generally available tools like 'xmllint' to check that your feature
descriptions are well-formed and valid.  However, to help people
unfamiliar with XML write descriptions for their targets, we also
describe the grammar here.

   Target descriptions can identify the architecture of the remote
target and (for some architectures) provide information about custom
register sets.  They can also identify the OS ABI of the remote target.
GDB can use this information to autoconfigure for your target, or to
warn you if you connect to an unsupported target.

   Here is a simple target description:

     <target version="1.0">
       <architecture>i386:x86-64</architecture>
     </target>

This minimal description only says that the target uses the x86-64
architecture.

   A target description has the following overall form, with [ ] marking
optional elements and ... marking repeatable elements.  The elements are
explained further below.

     <?xml version="1.0"?>
     <!DOCTYPE target SYSTEM "gdb-target.dtd">
     <target version="1.0">
       [ARCHITECTURE]
       [OSABI]
       [COMPATIBLE]
       [FEATURE...]
     </target>

The description is generally insensitive to whitespace and line breaks,
under the usual common-sense rules.  The XML version declaration and
document type declaration can generally be omitted (GDB does not require
them), but specifying them may be useful for XML validation tools.  The
'version' attribute for '<target>' may also be omitted, but we recommend
including it; if future versions of GDB use an incompatible revision of
'gdb-target.dtd', they will detect and report the version mismatch.

G.2.1 Inclusion
---------------

It can sometimes be valuable to split a target description up into
several different annexes, either for organizational purposes, or to
share files between different possible target descriptions.  You can
divide a description into multiple files by replacing any element of the
target description with an inclusion directive of the form:

     <xi:include href="DOCUMENT"/>

When GDB encounters an element of this form, it will retrieve the named
XML DOCUMENT, and replace the inclusion directive with the contents of
that document.  If the current description was read using 'qXfer', then
so will be the included document; DOCUMENT will be interpreted as the
name of an annex.  If the current description was read from a file, GDB
will look for DOCUMENT as a file in the same directory where it found
the original description.

G.2.2 Architecture
------------------

An '<architecture>' element has this form:

       <architecture>ARCH</architecture>

   ARCH is one of the architectures from the set accepted by 'set
architecture' (*note Specifying a Debugging Target: Targets.).

G.2.3 OS ABI
------------

This optional field was introduced in GDB version 7.0.  Previous
versions of GDB ignore it.

   An '<osabi>' element has this form:

       <osabi>ABI-NAME</osabi>

   ABI-NAME is an OS ABI name from the same selection accepted by
'set osabi' (*note Configuring the Current ABI: ABI.).

G.2.4 Compatible Architecture
-----------------------------

This optional field was introduced in GDB version 7.0.  Previous
versions of GDB ignore it.

   A '<compatible>' element has this form:

       <compatible>ARCH</compatible>

   ARCH is one of the architectures from the set accepted by 'set
architecture' (*note Specifying a Debugging Target: Targets.).

   A '<compatible>' element is used to specify that the target is able
to run binaries in some other than the main target architecture given by
the '<architecture>' element.  For example, on the Cell Broadband
Engine, the main architecture is 'powerpc:common' or 'powerpc:common64',
but the system is able to run binaries in the 'spu' architecture as
well.  The way to describe this capability with '<compatible>' is as
follows:

       <architecture>powerpc:common</architecture>
       <compatible>spu</compatible>

G.2.5 Features
--------------

Each '<feature>' describes some logical portion of the target system.
Features are currently used to describe available CPU registers and the
types of their contents.  A '<feature>' element has this form:

     <feature name="NAME">
       [TYPE...]
       REG...
     </feature>

Each feature's name should be unique within the description.  The name
of a feature does not matter unless GDB has some special knowledge of
the contents of that feature; if it does, the feature should have its
standard name.  *Note Standard Target Features::.

G.2.6 Types
-----------

Any register's value is a collection of bits which GDB must interpret.
The default interpretation is a two's complement integer, but other
types can be requested by name in the register description.  Some
predefined types are provided by GDB (*note Predefined Target Types::),
and the description can define additional composite and enum types.

   Each type element must have an 'id' attribute, which gives a unique
(within the containing '<feature>') name to the type.  Types must be
defined before they are used.

   Some targets offer vector registers, which can be treated as arrays
of scalar elements.  These types are written as '<vector>' elements,
specifying the array element type, TYPE, and the number of elements,
COUNT:

     <vector id="ID" type="TYPE" count="COUNT"/>

   If a register's value is usefully viewed in multiple ways, define it
with a union type containing the useful representations.  The '<union>'
element contains one or more '<field>' elements, each of which has a
NAME and a TYPE:

     <union id="ID">
       <field name="NAME" type="TYPE"/>
       ...
     </union>

   If a register's value is composed from several separate values,
define it with either a structure type or a flags type.  A flags type
may only contain bitfields.  A structure type may either contain only
bitfields or contain no bitfields.  If the value contains only
bitfields, its total size in bytes must be specified.

   Non-bitfield values have a NAME and TYPE.

     <struct id="ID">
       <field name="NAME" type="TYPE"/>
       ...
     </struct>

   Both NAME and TYPE values are required.  No implicit padding is
added.

   Bitfield values have a NAME, START, END and TYPE.

     <struct id="ID" size="SIZE">
       <field name="NAME" start="START" end="END" type="TYPE"/>
       ...
     </struct>

     <flags id="ID" size="SIZE">
       <field name="NAME" start="START" end="END" type="TYPE"/>
       ...
     </flags>

   The NAME value is required.  Bitfield values may be named with the
empty string, '""', in which case the field is "filler" and its value is
not printed.  Not all bits need to be specified, so "filler" fields are
optional.

   The START and END values are required, and TYPE is optional.  The
field's START must be less than or equal to its END, and zero represents
the least significant bit.

   The default value of TYPE is 'bool' for single bit fields, and an
unsigned integer otherwise.

   Which to choose?  Structures or flags?

   Registers defined with 'flags' have these advantages over defining
them with 'struct':

   * Arithmetic may be performed on them as if they were integers.
   * They are printed in a more readable fashion.

   Registers defined with 'struct' have one advantage over defining them
with 'flags':

   * One can fetch individual fields like in 'C'.

          (gdb) print $my_struct_reg.field3
          $1 = 42

G.2.7 Registers
---------------

Each register is represented as an element with this form:

     <reg name="NAME"
          bitsize="SIZE"
          [regnum="NUM"]
          [save-restore="SAVE-RESTORE"]
          [type="TYPE"]
          [group="GROUP"]/>

The components are as follows:

NAME
     The register's name; it must be unique within the target
     description.

BITSIZE
     The register's size, in bits.

REGNUM
     The register's number.  If omitted, a register's number is one
     greater than that of the previous register (either in the current
     feature or in a preceding feature); the first register in the
     target description defaults to zero.  This register number is used
     to read or write the register; e.g. it is used in the remote 'p'
     and 'P' packets, and registers appear in the 'g' and 'G' packets in
     order of increasing register number.

SAVE-RESTORE
     Whether the register should be preserved across inferior function
     calls; this must be either 'yes' or 'no'.  The default is 'yes',
     which is appropriate for most registers except for some system
     control registers; this is not related to the target's ABI.

TYPE
     The type of the register.  It may be a predefined type, a type
     defined in the current feature, or one of the special types 'int'
     and 'float'.  'int' is an integer type of the correct size for
     BITSIZE, and 'float' is a floating point type (in the
     architecture's normal floating point format) of the correct size
     for BITSIZE.  The default is 'int'.

GROUP
     The register group to which this register belongs.  It can be one
     of the standard register groups 'general', 'float', 'vector' or an
     arbitrary string.  Group names should be limited to alphanumeric
     characters.  If a group name is made up of multiple words the words
     may be separated by hyphens; e.g. 'special-group' or
     'ultra-special-group'.  If no GROUP is specified, GDB will not
     display the register in 'info registers'.


File: gdb.info,  Node: Predefined Target Types,  Next: Enum Target Types,  Prev: Target Description Format,  Up: Target Descriptions

G.3 Predefined Target Types
===========================

Type definitions in the self-description can build up composite types
from basic building blocks, but can not define fundamental types.
Instead, standard identifiers are provided by GDB for the fundamental
types.  The currently supported types are:

'bool'
     Boolean type, occupying a single bit.

'int8'
'int16'
'int24'
'int32'
'int64'
'int128'
     Signed integer types holding the specified number of bits.

'uint8'
'uint16'
'uint24'
'uint32'
'uint64'
'uint128'
     Unsigned integer types holding the specified number of bits.

'code_ptr'
'data_ptr'
     Pointers to unspecified code and data.  The program counter and any
     dedicated return address register may be marked as code pointers;
     printing a code pointer converts it into a symbolic address.  The
     stack pointer and any dedicated address registers may be marked as
     data pointers.

'ieee_half'
     Half precision IEEE floating point.

'ieee_single'
     Single precision IEEE floating point.

'ieee_double'
     Double precision IEEE floating point.

'bfloat16'
     The 16-bit "brain floating point" format used e.g. by x86 and ARM.

'arm_fpa_ext'
     The 12-byte extended precision format used by ARM FPA registers.

'i387_ext'
     The 10-byte extended precision format used by x87 registers.

'i386_eflags'
     32bit EFLAGS register used by x86.

'i386_mxcsr'
     32bit MXCSR register used by x86.


File: gdb.info,  Node: Enum Target Types,  Next: Standard Target Features,  Prev: Predefined Target Types,  Up: Target Descriptions

G.4 Enum Target Types
=====================

Enum target types are useful in 'struct' and 'flags' register
descriptions.  *Note Target Description Format::.

   Enum types have a name, size and a list of name/value pairs.

     <enum id="ID" size="SIZE">
       <evalue name="NAME" value="VALUE"/>
       ...
     </enum>

   Enums must be defined before they are used.

     <enum id="levels_type" size="4">
       <evalue name="low" value="0"/>
       <evalue name="high" value="1"/>
     </enum>
     <flags id="flags_type" size="4">
       <field name="X" start="0"/>
       <field name="LEVEL" start="1" end="1" type="levels_type"/>
     </flags>
     <reg name="flags" bitsize="32" type="flags_type"/>

   Given that description, a value of 3 for the 'flags' register would
be printed as:

     (gdb) info register flags
     flags 0x3 [ X LEVEL=high ]


File: gdb.info,  Node: Standard Target Features,  Prev: Enum Target Types,  Up: Target Descriptions

G.5 Standard Target Features
============================

A target description must contain either no registers or all the
target's registers.  If the description contains no registers, then GDB
will assume a default register layout, selected based on the
architecture.  If the description contains any registers, the default
layout will not be used; the standard registers must be described in the
target description, in such a way that GDB can recognize them.

   This is accomplished by giving specific names to feature elements
which contain standard registers.  GDB will look for features with those
names and verify that they contain the expected registers; if any known
feature is missing required registers, or if any required feature is
missing, GDB will reject the target description.  You can add additional
registers to any of the standard features -- GDB will display them just
as if they were added to an unrecognized feature.

   This section lists the known features and their expected contents.
Sample XML documents for these features are included in the GDB source
tree, in the directory 'gdb/features'.

   Names recognized by GDB should include the name of the company or
organization which selected the name, and the overall architecture to
which the feature applies; so e.g. the feature containing ARM core
registers is named 'org.gnu.gdb.arm.core'.

   The names of registers are not case sensitive for the purpose of
recognizing standard features, but GDB will only display registers using
the capitalization used in the description.

* Menu:

* AArch64 Features::
* ARC Features::
* ARM Features::
* i386 Features::
* LoongArch Features::
* MicroBlaze Features::
* MIPS Features::
* M68K Features::
* NDS32 Features::
* Nios II Features::
* OpenRISC 1000 Features::
* PowerPC Features::
* RISC-V Features::
* RX Features::
* S/390 and System z Features::
* Sparc Features::
* TIC6x Features::


File: gdb.info,  Node: AArch64 Features,  Next: ARC Features,  Up: Standard Target Features

G.5.1 AArch64 Features
----------------------

The 'org.gnu.gdb.aarch64.core' feature is required for AArch64 targets.
It should contain registers 'x0' through 'x30', 'sp', 'pc', and 'cpsr'.

   The 'org.gnu.gdb.aarch64.fpu' feature is optional.  If present, it
should contain registers 'v0' through 'v31', 'fpsr', and 'fpcr'.

   The 'org.gnu.gdb.aarch64.sve' feature is optional.  If present, it
should contain registers 'z0' through 'z31', 'p0' through 'p15', 'ffr'
and 'vg'.

   The 'org.gnu.gdb.aarch64.pauth' feature is optional.  If present, it
should contain registers 'pauth_dmask' and 'pauth_cmask'.


File: gdb.info,  Node: ARC Features,  Next: ARM Features,  Prev: AArch64 Features,  Up: Standard Target Features

G.5.2 ARC Features
------------------

ARC processors are so configurable that even core registers and their
numbers are not predetermined completely.  Moreover, _flags_ and _PC_
registers, which are important to GDB, are not "core" registers in ARC.
Therefore, there are two features that their presence is mandatory:
'org.gnu.gdb.arc.core' and 'org.gnu.gdb.arc.aux'.

   The 'org.gnu.gdb.arc.core' feature is required for all targets.  It
must contain registers:

   - 'r0' through 'r25' for normal register file targets.
   - 'r0' through 'r3', and 'r10' through 'r15' for reduced register
     file targets.
   - 'gp', 'fp', 'sp', 'r30'(1), 'blink', 'lp_count', 'pcl'.

   In case of an ARCompact target (ARCv1 ISA), the
'org.gnu.gdb.arc.core' feature may contain registers 'ilink1' and
'ilink2'.  While in case of ARC EM and ARC HS targets (ARCv2 ISA),
register 'ilink' may be present.  The difference between ARCv1 and ARCv2
is the naming of registers _29th_ and _30th_.  They are called 'ilink1'
and 'ilink2' for ARCv1 and are optional.  For ARCv2, they are called
'ilink' and 'r30' and only 'ilink' is optional.  The optionality of
'ilink*' registers is because of their inaccessibility during user space
debugging sessions.

   Extension core registers 'r32' through 'r59' are optional and their
existence depends on the configuration.  When debugging GNU/Linux
applications, i.e. user space debugging, these core registers are not
available.

   The 'org.gnu.gdb.arc.aux' feature is required for all ARC targets.
Here is the list of registers pertinent to this feature:

   - mandatory: 'pc' and 'status32'.
   - optional: 'lp_start', 'lp_end', and 'bta'.

   ---------- Footnotes ----------

   (1) Not necessary for ARCv1.


File: gdb.info,  Node: ARM Features,  Next: i386 Features,  Prev: ARC Features,  Up: Standard Target Features

G.5.3 ARM Features
------------------

The 'org.gnu.gdb.arm.core' feature is required for non-M-profile ARM
targets.  It should contain registers 'r0' through 'r13', 'sp', 'lr',
'pc', and 'cpsr'.

   For M-profile targets (e.g. Cortex-M3), the 'org.gnu.gdb.arm.core'
feature is replaced by 'org.gnu.gdb.arm.m-profile'.  It should contain
registers 'r0' through 'r13', 'sp', 'lr', 'pc', and 'xpsr'.

   The 'org.gnu.gdb.arm.fpa' feature is optional.  If present, it should
contain registers 'f0' through 'f7' and 'fps'.

   The 'org.gnu.gdb.arm.m-profile-mve' feature is optional.  If present,
it must contain register 'vpr'.

   If the 'org.gnu.gdb.arm.m-profile-mve' feature is available, GDB will
synthesize the 'p0' pseudo register from 'vpr' contents.

   If the 'org.gnu.gdb.arm.vfp' feature is available alongside the
'org.gnu.gdb.arm.m-profile-mve' feature, GDB will synthesize the 'q'
pseudo registers from 'd' register contents.

   The 'org.gnu.gdb.xscale.iwmmxt' feature is optional.  If present, it
should contain at least registers 'wR0' through 'wR15' and 'wCGR0'
through 'wCGR3'.  The 'wCID', 'wCon', 'wCSSF', and 'wCASF' registers are
optional.

   The 'org.gnu.gdb.arm.vfp' feature is optional.  If present, it should
contain at least registers 'd0' through 'd15'.  If they are present,
'd16' through 'd31' should also be included.  GDB will synthesize the
single-precision registers from halves of the double-precision
registers.

   The 'org.gnu.gdb.arm.neon' feature is optional.  It does not need to
contain registers; it instructs GDB to display the VFP double-precision
registers as vectors and to synthesize the quad-precision registers from
pairs of double-precision registers.  If this feature is present,
'org.gnu.gdb.arm.vfp' must also be present and include 32
double-precision registers.

   The 'org.gnu.gdb.arm.m-profile-pacbti' feature is optional, and
acknowledges support for the ARMv8.1-m PACBTI extensions.  GDB will
track return address signing states and will decorate backtraces using
the [PAC] marker, similar to AArch64's PAC extension.  *Note AArch64
PAC::.


File: gdb.info,  Node: i386 Features,  Next: LoongArch Features,  Prev: ARM Features,  Up: Standard Target Features

G.5.4 i386 Features
-------------------

The 'org.gnu.gdb.i386.core' feature is required for i386/amd64 targets.
It should describe the following registers:

   - 'eax' through 'edi' plus 'eip' for i386
   - 'rax' through 'r15' plus 'rip' for amd64
   - 'eflags', 'cs', 'ss', 'ds', 'es', 'fs', 'gs'
   - 'st0' through 'st7'
   - 'fctrl', 'fstat', 'ftag', 'fiseg', 'fioff', 'foseg', 'fooff' and
     'fop'

   The register sets may be different, depending on the target.

   The 'org.gnu.gdb.i386.sse' feature is optional.  It should describe
registers:

   - 'xmm0' through 'xmm7' for i386
   - 'xmm0' through 'xmm15' for amd64
   - 'mxcsr'

   The 'org.gnu.gdb.i386.avx' feature is optional and requires the
'org.gnu.gdb.i386.sse' feature.  It should describe the upper 128 bits
of YMM registers:

   - 'ymm0h' through 'ymm7h' for i386
   - 'ymm0h' through 'ymm15h' for amd64

   The 'org.gnu.gdb.i386.mpx' is an optional feature representing Intel
Memory Protection Extension (MPX). It should describe the following
registers:

   - 'bnd0raw' through 'bnd3raw' for i386 and amd64.
   - 'bndcfgu' and 'bndstatus' for i386 and amd64.

   The 'org.gnu.gdb.i386.linux' feature is optional.  It should describe
a single register, 'orig_eax'.

   The 'org.gnu.gdb.i386.segments' feature is optional.  It should
describe two system registers: 'fs_base' and 'gs_base'.

   The 'org.gnu.gdb.i386.avx512' feature is optional and requires the
'org.gnu.gdb.i386.avx' feature.  It should describe additional XMM
registers:

   - 'xmm16h' through 'xmm31h', only valid for amd64.

   It should describe the upper 128 bits of additional YMM registers:

   - 'ymm16h' through 'ymm31h', only valid for amd64.

   It should describe the upper 256 bits of ZMM registers:

   - 'zmm0h' through 'zmm7h' for i386.
   - 'zmm0h' through 'zmm15h' for amd64.

   It should describe the additional ZMM registers:

   - 'zmm16h' through 'zmm31h', only valid for amd64.

   The 'org.gnu.gdb.i386.pkeys' feature is optional.  It should describe
a single register, 'pkru'.  It is a 32-bit register valid for i386 and
amd64.


File: gdb.info,  Node: LoongArch Features,  Next: MicroBlaze Features,  Prev: i386 Features,  Up: Standard Target Features

G.5.5 LoongArch Features
------------------------

The 'org.gnu.gdb.loongarch.base' feature is required for LoongArch
targets.  It should contain the registers 'r0' through 'r31', 'pc', and
'badv'.  Either the architectural names ('r0', 'r1', etc) can be used,
or the ABI names ('zero', 'ra', etc).

   The 'org.gnu.gdb.loongarch.fpu' feature is optional.  If present, it
should contain registers 'f0' through 'f31', 'fcc', and 'fcsr'.


File: gdb.info,  Node: MicroBlaze Features,  Next: MIPS Features,  Prev: LoongArch Features,  Up: Standard Target Features

G.5.6 MicroBlaze Features
-------------------------

The 'org.gnu.gdb.microblaze.core' feature is required for MicroBlaze
targets.  It should contain registers 'r0' through 'r31', 'rpc', 'rmsr',
'rear', 'resr', 'rfsr', 'rbtr', 'rpvr', 'rpvr1' through 'rpvr11',
'redr', 'rpid', 'rzpr', 'rtlbx', 'rtlbsx', 'rtlblo', and 'rtlbhi'.

   The 'org.gnu.gdb.microblaze.stack-protect' feature is optional.  If
present, it should contain registers 'rshr' and 'rslr'


File: gdb.info,  Node: MIPS Features,  Next: M68K Features,  Prev: MicroBlaze Features,  Up: Standard Target Features

G.5.7 MIPS Features
-------------------

The 'org.gnu.gdb.mips.cpu' feature is required for MIPS targets.  It
should contain registers 'r0' through 'r31', 'lo', 'hi', and 'pc'.  They
may be 32-bit or 64-bit depending on the target.

   The 'org.gnu.gdb.mips.cp0' feature is also required.  It should
contain at least the 'status', 'badvaddr', and 'cause' registers.  They
may be 32-bit or 64-bit depending on the target.

   The 'org.gnu.gdb.mips.fpu' feature is currently required, though it
may be optional in a future version of GDB.  It should contain registers
'f0' through 'f31', 'fcsr', and 'fir'.  They may be 32-bit or 64-bit
depending on the target.

   The 'org.gnu.gdb.mips.dsp' feature is optional.  It should contain
registers 'hi1' through 'hi3', 'lo1' through 'lo3', and 'dspctl'.  The
'dspctl' register should be 32-bit and the rest may be 32-bit or 64-bit
depending on the target.

   The 'org.gnu.gdb.mips.linux' feature is optional.  It should contain
a single register, 'restart', which is used by the Linux kernel to
control restartable syscalls.


File: gdb.info,  Node: M68K Features,  Next: NDS32 Features,  Prev: MIPS Features,  Up: Standard Target Features

G.5.8 M68K Features
-------------------

''org.gnu.gdb.m68k.core''
''org.gnu.gdb.coldfire.core''
''org.gnu.gdb.fido.core''
     One of those features must be always present.  The feature that is
     present determines which flavor of m68k is used.  The feature that
     is present should contain registers 'd0' through 'd7', 'a0' through
     'a5', 'fp', 'sp', 'ps' and 'pc'.

''org.gnu.gdb.coldfire.fp''
     This feature is optional.  If present, it should contain registers
     'fp0' through 'fp7', 'fpcontrol', 'fpstatus' and 'fpiaddr'.

     Note that, despite the fact that this feature's name says
     'coldfire', it is used to describe any floating point registers.
     The size of the registers must match the main m68k flavor; so, for
     example, if the primary feature is reported as 'coldfire', then
     64-bit floating point registers are required.


File: gdb.info,  Node: NDS32 Features,  Next: Nios II Features,  Prev: M68K Features,  Up: Standard Target Features

G.5.9 NDS32 Features
--------------------

The 'org.gnu.gdb.nds32.core' feature is required for NDS32 targets.  It
should contain at least registers 'r0' through 'r10', 'r15', 'fp', 'gp',
'lp', 'sp', and 'pc'.

   The 'org.gnu.gdb.nds32.fpu' feature is optional.  If present, it
should contain 64-bit double-precision floating-point registers 'fd0'
through _fdN_, which should be 'fd3', 'fd7', 'fd15', or 'fd31' based on
the FPU configuration implemented.

   _Note:_ The first sixteen 64-bit double-precision floating-point
registers are overlapped with the thirty-two 32-bit single-precision
floating-point registers.  The 32-bit single-precision registers, if not
being listed explicitly, will be synthesized from halves of the
overlapping 64-bit double-precision registers.  Listing 32-bit
single-precision registers explicitly is deprecated, and the support to
it could be totally removed some day.


File: gdb.info,  Node: Nios II Features,  Next: OpenRISC 1000 Features,  Prev: NDS32 Features,  Up: Standard Target Features

G.5.10 Nios II Features
-----------------------

The 'org.gnu.gdb.nios2.cpu' feature is required for Nios II targets.  It
should contain the 32 core registers ('zero', 'at', 'r2' through 'r23',
'et' through 'ra'), 'pc', and the 16 control registers ('status' through
'mpuacc').


File: gdb.info,  Node: OpenRISC 1000 Features,  Next: PowerPC Features,  Prev: Nios II Features,  Up: Standard Target Features

G.5.11 Openrisc 1000 Features
-----------------------------

The 'org.gnu.gdb.or1k.group0' feature is required for OpenRISC 1000
targets.  It should contain the 32 general purpose registers ('r0'
through 'r31'), 'ppc', 'npc' and 'sr'.


File: gdb.info,  Node: PowerPC Features,  Next: RISC-V Features,  Prev: OpenRISC 1000 Features,  Up: Standard Target Features

G.5.12 PowerPC Features
-----------------------

The 'org.gnu.gdb.power.core' feature is required for PowerPC targets.
It should contain registers 'r0' through 'r31', 'pc', 'msr', 'cr', 'lr',
'ctr', and 'xer'.  They may be 32-bit or 64-bit depending on the target.

   The 'org.gnu.gdb.power.fpu' feature is optional.  It should contain
registers 'f0' through 'f31' and 'fpscr'.

   The 'org.gnu.gdb.power.altivec' feature is optional.  It should
contain registers 'vr0' through 'vr31', 'vscr', and 'vrsave'.  GDB will
define pseudo-registers 'v0' through 'v31' as aliases for the
corresponding 'vrX' registers.

   The 'org.gnu.gdb.power.vsx' feature is optional.  It should contain
registers 'vs0h' through 'vs31h'.  GDB will combine these registers with
the floating point registers ('f0' through 'f31') and the altivec
registers ('vr0' through 'vr31') to present the 128-bit wide registers
'vs0' through 'vs63', the set of vector-scalar registers for POWER7.
Therefore, this feature requires both 'org.gnu.gdb.power.fpu' and
'org.gnu.gdb.power.altivec'.

   The 'org.gnu.gdb.power.spe' feature is optional.  It should contain
registers 'ev0h' through 'ev31h', 'acc', and 'spefscr'.  SPE targets
should provide 32-bit registers in 'org.gnu.gdb.power.core' and provide
the upper halves in 'ev0h' through 'ev31h'.  GDB will combine these to
present registers 'ev0' through 'ev31' to the user.

   The 'org.gnu.gdb.power.ppr' feature is optional.  It should contain
the 64-bit register 'ppr'.

   The 'org.gnu.gdb.power.dscr' feature is optional.  It should contain
the 64-bit register 'dscr'.

   The 'org.gnu.gdb.power.tar' feature is optional.  It should contain
the 64-bit register 'tar'.

   The 'org.gnu.gdb.power.ebb' feature is optional.  It should contain
registers 'bescr', 'ebbhr' and 'ebbrr', all 64-bit wide.

   The 'org.gnu.gdb.power.linux.pmu' feature is optional.  It should
contain registers 'mmcr0', 'mmcr2', 'siar', 'sdar' and 'sier', all
64-bit wide.  This is the subset of the isa 2.07 server PMU registers
provided by GNU/Linux.

   The 'org.gnu.gdb.power.htm.spr' feature is optional.  It should
contain registers 'tfhar', 'texasr' and 'tfiar', all 64-bit wide.

   The 'org.gnu.gdb.power.htm.core' feature is optional.  It should
contain the checkpointed general-purpose registers 'cr0' through 'cr31',
as well as the checkpointed registers 'clr' and 'cctr'.  These registers
may all be either 32-bit or 64-bit depending on the target.  It should
also contain the checkpointed registers 'ccr' and 'cxer', which should
both be 32-bit wide.

   The 'org.gnu.gdb.power.htm.fpu' feature is optional.  It should
contain the checkpointed 64-bit floating-point registers 'cf0' through
'cf31', as well as the checkpointed 64-bit register 'cfpscr'.

   The 'org.gnu.gdb.power.htm.altivec' feature is optional.  It should
contain the checkpointed altivec registers 'cvr0' through 'cvr31', all
128-bit wide.  It should also contain the checkpointed registers 'cvscr'
and 'cvrsave', both 32-bit wide.

   The 'org.gnu.gdb.power.htm.vsx' feature is optional.  It should
contain registers 'cvs0h' through 'cvs31h'.  GDB will combine these
registers with the checkpointed floating point registers ('cf0' through
'cf31') and the checkpointed altivec registers ('cvr0' through 'cvr31')
to present the 128-bit wide checkpointed vector-scalar registers 'cvs0'
through 'cvs63'.  Therefore, this feature requires both
'org.gnu.gdb.power.htm.altivec' and 'org.gnu.gdb.power.htm.fpu'.

   The 'org.gnu.gdb.power.htm.ppr' feature is optional.  It should
contain the 64-bit checkpointed register 'cppr'.

   The 'org.gnu.gdb.power.htm.dscr' feature is optional.  It should
contain the 64-bit checkpointed register 'cdscr'.

   The 'org.gnu.gdb.power.htm.tar' feature is optional.  It should
contain the 64-bit checkpointed register 'ctar'.


File: gdb.info,  Node: RISC-V Features,  Next: RX Features,  Prev: PowerPC Features,  Up: Standard Target Features

G.5.13 RISC-V Features
----------------------

The 'org.gnu.gdb.riscv.cpu' feature is required for RISC-V targets.  It
should contain the registers 'x0' through 'x31', and 'pc'.  Either the
architectural names ('x0', 'x1', etc) can be used, or the ABI names
('zero', 'ra', etc).

   The 'org.gnu.gdb.riscv.fpu' feature is optional.  If present, it
should contain registers 'f0' through 'f31', 'fflags', 'frm', and
'fcsr'.  As with the cpu feature, either the architectural register
names, or the ABI names can be used.

   The 'org.gnu.gdb.riscv.virtual' feature is optional.  If present, it
should contain registers that are not backed by real registers on the
target, but are instead virtual, where the register value is derived
from other target state.  In many ways these are like GDBs
pseudo-registers, except implemented by the target.  Currently the only
register expected in this set is the one byte 'priv' register that
contains the target's privilege level in the least significant two bits.

   The 'org.gnu.gdb.riscv.csr' feature is optional.  If present, it
should contain all of the target's standard CSRs.  Standard CSRs are
those defined in the RISC-V specification documents.  There is some
overlap between this feature and the fpu feature; the 'fflags', 'frm',
and 'fcsr' registers could be in either feature.  The expectation is
that these registers will be in the fpu feature if the target has
floating point hardware, but can be moved into the csr feature if the
target has the floating point control registers, but no other floating
point hardware.

   The 'org.gnu.gdb.riscv.vector' feature is optional.  If present, it
should contain registers 'v0' through 'v31', all of which must be the
same size.  These requirements are based on the v0.10 draft vector
extension, as the vector extension is not yet final.  In the event that
the register set of the vector extension changes for the final
specification, the requirements given here could change for future
releases of GDB.


File: gdb.info,  Node: RX Features,  Next: S/390 and System z Features,  Prev: RISC-V Features,  Up: Standard Target Features

G.5.14 RX Features
------------------

The 'org.gnu.gdb.rx.core' feature is required for RX targets.  It should
contain the registers 'r0' through 'r15', 'usp', 'isp', 'psw', 'pc',
'intb', 'bpsw', 'bpc', 'fintv', 'fpsw', and 'acc'.


File: gdb.info,  Node: S/390 and System z Features,  Next: Sparc Features,  Prev: RX Features,  Up: Standard Target Features

G.5.15 S/390 and System z Features
----------------------------------

The 'org.gnu.gdb.s390.core' feature is required for S/390 and System z
targets.  It should contain the PSW and the 16 general registers.  In
particular, System z targets should provide the 64-bit registers 'pswm',
'pswa', and 'r0' through 'r15'.  S/390 targets should provide the 32-bit
versions of these registers.  A System z target that runs in 31-bit
addressing mode should provide 32-bit versions of 'pswm' and 'pswa', as
well as the general register's upper halves 'r0h' through 'r15h', and
their lower halves 'r0l' through 'r15l'.

   The 'org.gnu.gdb.s390.fpr' feature is required.  It should contain
the 64-bit registers 'f0' through 'f15', and 'fpc'.

   The 'org.gnu.gdb.s390.acr' feature is required.  It should contain
the 32-bit registers 'acr0' through 'acr15'.

   The 'org.gnu.gdb.s390.linux' feature is optional.  It should contain
the register 'orig_r2', which is 64-bit wide on System z targets and
32-bit otherwise.  In addition, the feature may contain the 'last_break'
register, whose width depends on the addressing mode, as well as the
'system_call' register, which is always 32-bit wide.

   The 'org.gnu.gdb.s390.tdb' feature is optional.  It should contain
the 64-bit registers 'tdb0', 'tac', 'tct', 'atia', and 'tr0' through
'tr15'.

   The 'org.gnu.gdb.s390.vx' feature is optional.  It should contain
64-bit wide registers 'v0l' through 'v15l', which will be combined by
GDB with the floating point registers 'f0' through 'f15' to present the
128-bit wide vector registers 'v0' through 'v15'.  In addition, this
feature should contain the 128-bit wide vector registers 'v16' through
'v31'.

   The 'org.gnu.gdb.s390.gs' feature is optional.  It should contain the
64-bit wide guarded-storage-control registers 'gsd', 'gssm', and
'gsepla'.

   The 'org.gnu.gdb.s390.gsbc' feature is optional.  It should contain
the 64-bit wide guarded-storage broadcast control registers 'bc_gsd',
'bc_gssm', and 'bc_gsepla'.


File: gdb.info,  Node: Sparc Features,  Next: TIC6x Features,  Prev: S/390 and System z Features,  Up: Standard Target Features

G.5.16 Sparc Features
---------------------

The 'org.gnu.gdb.sparc.cpu' feature is required for sparc32/sparc64
targets.  It should describe the following registers:

   - 'g0' through 'g7'
   - 'o0' through 'o7'
   - 'l0' through 'l7'
   - 'i0' through 'i7'

   They may be 32-bit or 64-bit depending on the target.

   Also the 'org.gnu.gdb.sparc.fpu' feature is required for
sparc32/sparc64 targets.  It should describe the following registers:

   - 'f0' through 'f31'
   - 'f32' through 'f62' for sparc64

   The 'org.gnu.gdb.sparc.cp0' feature is required for sparc32/sparc64
targets.  It should describe the following registers:

   - 'y', 'psr', 'wim', 'tbr', 'pc', 'npc', 'fsr', and 'csr' for sparc32
   - 'pc', 'npc', 'state', 'fsr', 'fprs', and 'y' for sparc64


File: gdb.info,  Node: TIC6x Features,  Prev: Sparc Features,  Up: Standard Target Features

G.5.17 TMS320C6x Features
-------------------------

The 'org.gnu.gdb.tic6x.core' feature is required for TMS320C6x targets.
It should contain registers 'A0' through 'A15', registers 'B0' through
'B15', 'CSR' and 'PC'.

   The 'org.gnu.gdb.tic6x.gp' feature is optional.  It should contain
registers 'A16' through 'A31' and 'B16' through 'B31'.

   The 'org.gnu.gdb.tic6x.c6xp' feature is optional.  It should contain
registers 'TSR', 'ILC' and 'RILC'.


File: gdb.info,  Node: Operating System Information,  Next: Trace File Format,  Prev: Target Descriptions,  Up: Top

Appendix H Operating System Information
***************************************

Users of GDB often wish to obtain information about the state of the
operating system running on the target--for example the list of
processes, or the list of open files.  This section describes the
mechanism that makes it possible.  This mechanism is similar to the
target features mechanism (*note Target Descriptions::), but focuses on
a different aspect of target.

   Operating system information is retrieved from the target via the
remote protocol, using 'qXfer' requests (*note qXfer osdata read::).
The object name in the request should be 'osdata', and the ANNEX
identifies the data to be fetched.

* Menu:

* Process list::


File: gdb.info,  Node: Process list,  Up: Operating System Information

H.1 Process list
================

When requesting the process list, the ANNEX field in the 'qXfer' request
should be 'processes'.  The returned data is an XML document.  The
formal syntax of this document is defined in 'gdb/features/osdata.dtd'.

   An example document is:

     <?xml version="1.0"?>
     <!DOCTYPE target SYSTEM "osdata.dtd">
     <osdata type="processes">
       <item>
         <column name="pid">1</column>
         <column name="user">root</column>
         <column name="command">/sbin/init</column>
         <column name="cores">1,2,3</column>
       </item>
     </osdata>

   Each item should include a column whose name is 'pid'.  The value of
that column should identify the process on the target.  The 'user' and
'command' columns are optional, and will be displayed by GDB.  The
'cores' column, if present, should contain a comma-separated list of
cores that this process is running on.  Target may provide additional
columns, which GDB currently ignores.


File: gdb.info,  Node: Trace File Format,  Next: Index Section Format,  Prev: Operating System Information,  Up: Top

Appendix I Trace File Format
****************************

The trace file comes in three parts: a header, a textual description
section, and a trace frame section with binary data.

   The header has the form '\x7fTRACE0\n'.  The first byte is '0x7f' so
as to indicate that the file contains binary data, while the '0' is a
version number that may have different values in the future.

   The description section consists of multiple lines of ASCII text
separated by newline characters ('0xa').  The lines may include a
variety of optional descriptive or context-setting information, such as
tracepoint definitions or register set size.  GDB will ignore any line
that it does not recognize.  An empty line marks the end of this
section.

'R SIZE'
     Specifies the size of a register block in bytes.  This is equal to
     the size of a 'g' packet payload in the remote protocol.  SIZE is
     an ascii decimal number.  There should be only one such line in a
     single trace file.

'status STATUS'
     Trace status.  STATUS has the same format as a 'qTStatus' remote
     packet reply.  There should be only one such line in a single trace
     file.

'tp PAYLOAD'
     Tracepoint definition.  The PAYLOAD has the same format as
     'qTfP'/'qTsP' remote packet reply payload.  A single tracepoint may
     take multiple lines of definition, corresponding to the multiple
     reply packets.

'tsv PAYLOAD'
     Trace state variable definition.  The PAYLOAD has the same format
     as 'qTfV'/'qTsV' remote packet reply payload.  A single variable
     may take multiple lines of definition, corresponding to the
     multiple reply packets.

'tdesc PAYLOAD'
     Target description in XML format.  The PAYLOAD is a single line of
     the XML file.  All such lines should be concatenated together to
     get the original XML file.  This file is in the same format as
     'qXfer' 'features' payload, and corresponds to the main
     'target.xml' file.  Includes are not allowed.

   The trace frame section consists of a number of consecutive frames.
Each frame begins with a two-byte tracepoint number, followed by a
four-byte size giving the amount of data in the frame.  The data in the
frame consists of a number of blocks, each introduced by a character
indicating its type (at least register, memory, and trace state
variable).  The data in this section is raw binary, not a hexadecimal or
other encoding; its endianness matches the target's endianness.

'R BYTES'
     Register block.  The number and ordering of bytes matches that of a
     'g' packet in the remote protocol.  Note that these are the actual
     bytes, in target order, not a hexadecimal encoding.

'M ADDRESS LENGTH BYTES...'
     Memory block.  This is a contiguous block of memory, at the 8-byte
     address ADDRESS, with a 2-byte length LENGTH, followed by LENGTH
     bytes.

'V NUMBER VALUE'
     Trace state variable block.  This records the 8-byte signed value
     VALUE of trace state variable numbered NUMBER.

   Future enhancements of the trace file format may include additional
types of blocks.


File: gdb.info,  Node: Index Section Format,  Next: Debuginfod,  Prev: Trace File Format,  Up: Top

Appendix J '.gdb_index' section format
**************************************

This section documents the index section that is created by 'save
gdb-index' (*note Index Files::).  The index section is DWARF-specific;
some knowledge of DWARF is assumed in this description.

   The mapped index file format is designed to be directly 'mmap'able on
any architecture.  In most cases, a datum is represented using a
little-endian 32-bit integer value, called an 'offset_type'.  Big endian
machines must byte-swap the values before using them.  Exceptions to
this rule are noted.  The data is laid out such that alignment is always
respected.

   A mapped index consists of several areas, laid out in order.

  1. The file header.  This is a sequence of values, of 'offset_type'
     unless otherwise noted:

       1. The version number, currently 8.  Versions 1, 2 and 3 are
          obsolete.  Version 4 uses a different hashing function from
          versions 5 and 6.  Version 6 includes symbols for inlined
          functions, whereas versions 4 and 5 do not.  Version 7 adds
          attributes to the CU indices in the symbol table.  Version 8
          specifies that symbols from DWARF type units
          ('DW_TAG_type_unit') refer to the type unit's symbol table and
          not the compilation unit ('DW_TAG_comp_unit') using the type.

          GDB will only read version 4, 5, or 6 indices by specifying
          'set use-deprecated-index-sections on'.  GDB has a workaround
          for potentially broken version 7 indices so it is currently
          not flagged as deprecated.

       2. The offset, from the start of the file, of the CU list.

       3. The offset, from the start of the file, of the types CU list.
          Note that this area can be empty, in which case this offset
          will be equal to the next offset.

       4. The offset, from the start of the file, of the address area.

       5. The offset, from the start of the file, of the symbol table.

       6. The offset, from the start of the file, of the constant pool.

  2. The CU list.  This is a sequence of pairs of 64-bit little-endian
     values, sorted by the CU offset.  The first element in each pair is
     the offset of a CU in the '.debug_info' section.  The second
     element in each pair is the length of that CU. References to a CU
     elsewhere in the map are done using a CU index, which is just the
     0-based index into this table.  Note that if there are type CUs,
     then conceptually CUs and type CUs form a single list for the
     purposes of CU indices.

  3. The types CU list.  This is a sequence of triplets of 64-bit
     little-endian values.  In a triplet, the first value is the CU
     offset, the second value is the type offset in the CU, and the
     third value is the type signature.  The types CU list is not
     sorted.

  4. The address area.  The address area consists of a sequence of
     address entries.  Each address entry has three elements:

       1. The low address.  This is a 64-bit little-endian value.

       2. The high address.  This is a 64-bit little-endian value.  Like
          'DW_AT_high_pc', the value is one byte beyond the end.

       3. The CU index.  This is an 'offset_type' value.

  5. The symbol table.  This is an open-addressed hash table.  The size
     of the hash table is always a power of 2.

     Each slot in the hash table consists of a pair of 'offset_type'
     values.  The first value is the offset of the symbol's name in the
     constant pool.  The second value is the offset of the CU vector in
     the constant pool.

     If both values are 0, then this slot in the hash table is empty.
     This is ok because while 0 is a valid constant pool index, it
     cannot be a valid index for both a string and a CU vector.

     The hash value for a table entry is computed by applying an
     iterative hash function to the symbol's name.  Starting with an
     initial value of 'r = 0', each (unsigned) character 'c' in the
     string is incorporated into the hash using the formula depending on
     the index version:

     Version 4
          The formula is 'r = r * 67 + c - 113'.

     Versions 5 to 7
          The formula is 'r = r * 67 + tolower (c) - 113'.

     The terminating '\0' is not incorporated into the hash.

     The step size used in the hash table is computed via '((hash * 17)
     & (size - 1)) | 1', where 'hash' is the hash value, and 'size' is
     the size of the hash table.  The step size is used to find the next
     candidate slot when handling a hash collision.

     The names of C++ symbols in the hash table are canonicalized.  We
     don't currently have a simple description of the canonicalization
     algorithm; if you intend to create new index sections, you must
     read the code.

  6. The constant pool.  This is simply a bunch of bytes.  It is
     organized so that alignment is correct: CU vectors are stored
     first, followed by strings.

     A CU vector in the constant pool is a sequence of 'offset_type'
     values.  The first value is the number of CU indices in the vector.
     Each subsequent value is the index and symbol attributes of a CU in
     the CU list.  This element in the hash table is used to indicate
     which CUs define the symbol and how the symbol is used.  See below
     for the format of each CU index+attributes entry.

     A string in the constant pool is zero-terminated.

   Attributes were added to CU index values in '.gdb_index' version 7.
If a symbol has multiple uses within a CU then there is one CU
index+attributes value for each use.

   The format of each CU index+attributes entry is as follows (bit 0 =
LSB):

Bits 0-23
     This is the index of the CU in the CU list.
Bits 24-27
     These bits are reserved for future purposes and must be zero.
Bits 28-30
     The kind of the symbol in the CU.

     0
          This value is reserved and should not be used.  By reserving
          zero the full 'offset_type' value is backwards compatible with
          previous versions of the index.
     1
          The symbol is a type.
     2
          The symbol is a variable or an enum value.
     3
          The symbol is a function.
     4
          Any other kind of symbol.
     5,6,7
          These values are reserved.

Bit 31
     This bit is zero if the value is global and one if it is static.

     The determination of whether a symbol is global or static is
     complicated.  The authorative reference is the file 'dwarf2read.c'
     in GDB sources.

   This pseudo-code describes the computation of a symbol's kind and
global/static attributes in the index.

     is_external = get_attribute (die, DW_AT_external);
     language = get_attribute (cu_die, DW_AT_language);
     switch (die->tag)
       {
       case DW_TAG_typedef:
       case DW_TAG_base_type:
       case DW_TAG_subrange_type:
         kind = TYPE;
         is_static = 1;
         break;
       case DW_TAG_enumerator:
         kind = VARIABLE;
         is_static = language != CPLUS;
         break;
       case DW_TAG_subprogram:
         kind = FUNCTION;
         is_static = ! (is_external || language == ADA);
         break;
       case DW_TAG_constant:
         kind = VARIABLE;
         is_static = ! is_external;
         break;
       case DW_TAG_variable:
         kind = VARIABLE;
         is_static = ! is_external;
         break;
       case DW_TAG_namespace:
         kind = TYPE;
         is_static = 0;
         break;
       case DW_TAG_class_type:
       case DW_TAG_interface_type:
       case DW_TAG_structure_type:
       case DW_TAG_union_type:
       case DW_TAG_enumeration_type:
         kind = TYPE;
         is_static = language != CPLUS;
         break;
       default:
         assert (0);
       }


File: gdb.info,  Node: Debuginfod,  Next: Man Pages,  Prev: Index Section Format,  Up: Top

Appendix K Download debugging resources with Debuginfod
*******************************************************

'debuginfod' is an HTTP server for distributing ELF, DWARF and source
files.

   With the 'debuginfod' client library, 'libdebuginfod', GDB can query
servers using the build IDs associated with missing debug info,
executables and source files in order to download them on demand.

   For instructions on building GDB with 'libdebuginfod', *note
-with-debuginfod: Configure Options.  'debuginfod' is packaged with
'elfutils', starting with version 0.178.  See
<https://sourceware.org/elfutils/Debuginfod.html> for more information
regarding 'debuginfod'.

* Menu:

* Debuginfod Settings::		Configuring debuginfod with GDB


File: gdb.info,  Node: Debuginfod Settings,  Up: Debuginfod

K.1 Debuginfod Settings
=======================

GDB provides the following commands for configuring 'debuginfod'.

'set debuginfod enabled'
'set debuginfod enabled on'
     GDB will attempt to query 'debuginfod' servers when missing debug
     info or source files.

'set debuginfod enabled off'
     GDB will not attempt to query 'debuginfod' servers when missing
     debug info or source files.  By default, 'debuginfod enabled' is
     set to 'off' for non-interactive sessions.

'set debuginfod enabled ask'
     GDB will prompt the user to enable or disable 'debuginfod' before
     attempting to perform the next query.  By default, 'debuginfod
     enabled' is set to 'ask' for interactive sessions.

'show debuginfod enabled'
     Display whether 'debuginfod enabled' is set to 'on', 'off' or
     'ask'.

'set debuginfod urls'
'set debuginfod urls URLS'
     Set the space-separated list of URLs that 'debuginfod' will attempt
     to query.  Only 'http://', 'https://' and 'file://' protocols
     should be used.  The default value of 'debuginfod urls' is copied
     from the DEBUGINFOD_URLS environment variable.

'show debuginfod urls'
     Display the list of URLs that 'debuginfod' will attempt to query.

'set debuginfod verbose'
'set debuginfod verbose N'
     Enable or disable 'debuginfod'-related output.  Use a non-zero
     value to enable and '0' to disable.  'debuginfod' output is shown
     by default.

'show debuginfod verbose'
     Show the current verbosity setting.


File: gdb.info,  Node: Man Pages,  Next: Copying,  Prev: Debuginfod,  Up: Top

Appendix L Manual pages
***********************

* Menu:

* gdb man::                     The GNU Debugger man page
* gdbserver man::               Remote Server for the GNU Debugger man page
* gcore man::                   Generate a core file of a running program
* gdbinit man::                 gdbinit scripts
* gdb-add-index man::           Add index files to speed up GDB


File: gdb.info,  Node: gdb man,  Next: gdbserver man,  Up: Man Pages

gdb man
=======

gdb [OPTIONS] [PROG|PROG PROCID|PROG CORE]

   The purpose of a debugger such as GDB is to allow you to see what is
going on "inside" another program while it executes - or what another
program was doing at the moment it crashed.

   GDB can do four main kinds of things (plus other things in support of
these) to help you catch bugs in the act:

   * Start your program, specifying anything that might affect its
     behavior.

   * Make your program stop on specified conditions.

   * Examine what has happened, when your program has stopped.

   * Change things in your program, so you can experiment with
     correcting the effects of one bug and go on to learn about another.

   You can use GDB to debug programs written in C, C++, Fortran and
Modula-2.

   GDB is invoked with the shell command 'gdb'.  Once started, it reads
commands from the terminal until you tell it to exit with the GDB
command 'quit' or 'exit'.  You can get online help from GDB itself by
using the command 'help'.

   You can run 'gdb' with no arguments or options; but the most usual
way to start GDB is with one argument or two, specifying an executable
program as the argument:

     gdb program

   You can also start with both an executable program and a core file
specified:

     gdb program core

   You can, instead, specify a process ID as a second argument or use
option '-p', if you want to debug a running process:

     gdb program 1234
     gdb -p 1234

would attach GDB to process '1234'.  With option '-p' you can omit the
PROGRAM filename.

   Here are some of the most frequently needed GDB commands:

'break [FILE:][FUNCTION|LINE]'
     Set a breakpoint at FUNCTION or LINE (in FILE).

'run [ARGLIST]'
     Start your program (with ARGLIST, if specified).

'bt'
     Backtrace: display the program stack.

'print EXPR'
     Display the value of an expression.

'c'
     Continue running your program (after stopping, e.g. at a
     breakpoint).

'next'
     Execute next program line (after stopping); step _over_ any
     function calls in the line.

'edit [FILE:]FUNCTION'
     look at the program line where it is presently stopped.

'list [FILE:]FUNCTION'
     type the text of the program in the vicinity of where it is
     presently stopped.

'step'
     Execute next program line (after stopping); step _into_ any
     function calls in the line.

'help [NAME]'
     Show information about GDB command NAME, or general information
     about using GDB.

'quit'
'exit'
     Exit from GDB.

   Any arguments other than options specify an executable file and core
file (or process ID); that is, the first argument encountered with no
associated option flag is equivalent to a '--se' option, and the second,
if any, is equivalent to a '-c' option if it's the name of a file.  Many
options have both long and abbreviated forms; both are shown here.  The
long forms are also recognized if you truncate them, so long as enough
of the option is present to be unambiguous.

   The abbreviated forms are shown here with '-' and long forms are
shown with '--' to reflect how they are shown in '--help'.  However, GDB
recognizes all of the following conventions for most options:

'--option=VALUE'
'--option VALUE'
'-option=VALUE'
'-option VALUE'
'--o=VALUE'
'--o VALUE'
'-o=VALUE'
'-o VALUE'

   All the options and command line arguments you give are processed in
sequential order.  The order makes a difference when the '-x' option is
used.

'--help'
'-h'
     List all options, with brief explanations.

'--symbols=FILE'
'-s FILE'
     Read symbol table from FILE.

'--write'
     Enable writing into executable and core files.

'--exec=FILE'
'-e FILE'
     Use FILE as the executable file to execute when appropriate, and
     for examining pure data in conjunction with a core dump.

'--se=FILE'
     Read symbol table from FILE and use it as the executable file.

'--core=FILE'
'-c FILE'
     Use FILE as a core dump to examine.

'--command=FILE'
'-x FILE'
     Execute GDB commands from FILE.

'--eval-command=COMMAND'
'-ex COMMAND'
     Execute given GDB COMMAND.

'--init-eval-command=COMMAND'
'-iex'
     Execute GDB COMMAND before loading the inferior.

'--directory=DIRECTORY'
'-d DIRECTORY'
     Add DIRECTORY to the path to search for source files.

'--nh'
     Do not execute commands from '~/.config/gdb/gdbinit', '~/.gdbinit',
     '~/.config/gdb/gdbearlyinit', or '~/.gdbearlyinit'

'--nx'
'-n'
     Do not execute commands from any '.gdbinit' or '.gdbearlyinit'
     initialization files.

'--quiet'
'--silent'
'-q'
     "Quiet".  Do not print the introductory and copyright messages.
     These messages are also suppressed in batch mode.

'--batch'
     Run in batch mode.  Exit with status '0' after processing all the
     command files specified with '-x' (and '.gdbinit', if not
     inhibited).  Exit with nonzero status if an error occurs in
     executing the GDB commands in the command files.

     Batch mode may be useful for running GDB as a filter, for example
     to download and run a program on another computer; in order to make
     this more useful, the message

          Program exited normally.

     (which is ordinarily issued whenever a program running under GDB
     control terminates) is not issued when running in batch mode.

'--batch-silent'
     Run in batch mode, just like '--batch', but totally silent.  All
     GDB output is supressed (stderr is unaffected).  This is much
     quieter than '--silent' and would be useless for an interactive
     session.

     This is particularly useful when using targets that give 'Loading
     section' messages, for example.

     Note that targets that give their output via GDB, as opposed to
     writing directly to 'stdout', will also be made silent.

'--args PROG [ARGLIST]'
     Change interpretation of command line so that arguments following
     this option are passed as arguments to the inferior.  As an
     example, take the following command:

          gdb ./a.out -q

     It would start GDB with '-q', not printing the introductory
     message.  On the other hand, using:

          gdb --args ./a.out -q

     starts GDB with the introductory message, and passes the option to
     the inferior.

'--pid=PID'
     Attach GDB to an already running program, with the PID PID.

'--tui'
     Open the terminal user interface.

'--readnow'
     Read all symbols from the given symfile on the first access.

'--readnever'
     Do not read symbol files.

'--return-child-result'
     GDB's exit code will be the same as the child's exit code.

'--configuration'
     Print details about GDB configuration and then exit.

'--version'
     Print version information and then exit.

'--cd=DIRECTORY'
     Run GDB using DIRECTORY as its working directory, instead of the
     current directory.

'--data-directory=DIRECTORY'
'-D'
     Run GDB using DIRECTORY as its data directory.  The data directory
     is where GDB searches for its auxiliary files.

'--fullname'
'-f'
     Emacs sets this option when it runs GDB as a subprocess.  It tells
     GDB to output the full file name and line number in a standard,
     recognizable fashion each time a stack frame is displayed (which
     includes each time the program stops).  This recognizable format
     looks like two '\032' characters, followed by the file name, line
     number and character position separated by colons, and a newline.
     The Emacs-to-GDB interface program uses the two '\032' characters
     as a signal to display the source code for the frame.

'-b BAUDRATE'
     Set the line speed (baud rate or bits per second) of any serial
     interface used by GDB for remote debugging.

'-l TIMEOUT'
     Set timeout, in seconds, for remote debugging.

'--tty=DEVICE'
     Run using DEVICE for your program's standard input and output.


File: gdb.info,  Node: gdbserver man,  Next: gcore man,  Prev: gdb man,  Up: Man Pages

gdbserver man
=============

gdbserver COMM PROG [ARGS...]

gdbserver -attach COMM PID

gdbserver -multi COMM

   'gdbserver' is a program that allows you to run GDB on a different
machine than the one which is running the program being debugged.

Usage (server (target) side)
----------------------------

First, you need to have a copy of the program you want to debug put onto
the target system.  The program can be stripped to save space if needed,
as 'gdbserver' doesn't care about symbols.  All symbol handling is taken
care of by the GDB running on the host system.

   To use the server, you log on to the target system, and run the
'gdbserver' program.  You must tell it (a) how to communicate with GDB,
(b) the name of your program, and (c) its arguments.  The general syntax
is:

     target> gdbserver COMM PROGRAM [ARGS ...]

   For example, using a serial port, you might say:

     target> gdbserver /dev/com1 emacs foo.txt

   This tells 'gdbserver' to debug emacs with an argument of foo.txt,
and to communicate with GDB via '/dev/com1'.  'gdbserver' now waits
patiently for the host GDB to communicate with it.

   To use a TCP connection, you could say:

     target> gdbserver host:2345 emacs foo.txt

   This says pretty much the same thing as the last example, except that
we are going to communicate with the 'host' GDB via TCP. The 'host:2345'
argument means that we are expecting to see a TCP connection from 'host'
to local TCP port 2345.  (Currently, the 'host' part is ignored.)  You
can choose any number you want for the port number as long as it does
not conflict with any existing TCP ports on the target system.  This
same port number must be used in the host GDBs 'target remote' command,
which will be described shortly.  Note that if you chose a port number
that conflicts with another service, 'gdbserver' will print an error
message and exit.

   'gdbserver' can also attach to running programs.  This is
accomplished via the '--attach' argument.  The syntax is:

     target> gdbserver --attach COMM PID

   PID is the process ID of a currently running process.  It isn't
necessary to point 'gdbserver' at a binary for the running process.

   To start 'gdbserver' without supplying an initial command to run or
process ID to attach, use the '--multi' command line option.  In such
case you should connect using 'target extended-remote' to start the
program you want to debug.

     target> gdbserver --multi COMM

Usage (host side)
-----------------

You need an unstripped copy of the target program on your host system,
since GDB needs to examine its symbol tables and such.  Start up GDB as
you normally would, with the target program as the first argument.  (You
may need to use the '--baud' option if the serial line is running at
anything except 9600 baud.)  That is 'gdb TARGET-PROG', or 'gdb --baud
BAUD TARGET-PROG'.  After that, the only new command you need to know
about is 'target remote' (or 'target extended-remote').  Its argument is
either a device name (usually a serial device, like '/dev/ttyb'), or a
'HOST:PORT' descriptor.  For example:

     (gdb) target remote /dev/ttyb

communicates with the server via serial line '/dev/ttyb', and:

     (gdb) target remote the-target:2345

communicates via a TCP connection to port 2345 on host 'the-target',
where you previously started up 'gdbserver' with the same port number.
Note that for TCP connections, you must start up 'gdbserver' prior to
using the 'target remote' command, otherwise you may get an error that
looks something like 'Connection refused'.

   'gdbserver' can also debug multiple inferiors at once, described in
*note Inferiors Connections and Programs::.  In such case use the
'extended-remote' GDB command variant:

     (gdb) target extended-remote the-target:2345

   The 'gdbserver' option '--multi' may or may not be used in such case.

   There are three different modes for invoking 'gdbserver':

   * Debug a specific program specified by its program name:

          gdbserver COMM PROG [ARGS...]

     The COMM parameter specifies how should the server communicate with
     GDB; it is either a device name (to use a serial line), a TCP port
     number (':1234'), or '-' or 'stdio' to use stdin/stdout of
     'gdbserver'.  Specify the name of the program to debug in PROG.
     Any remaining arguments will be passed to the program verbatim.
     When the program exits, GDB will close the connection, and
     'gdbserver' will exit.

   * Debug a specific program by specifying the process ID of a running
     program:

          gdbserver --attach COMM PID

     The COMM parameter is as described above.  Supply the process ID of
     a running program in PID; GDB will do everything else.  Like with
     the previous mode, when the process PID exits, GDB will close the
     connection, and 'gdbserver' will exit.

   * Multi-process mode - debug more than one program/process:

          gdbserver --multi COMM

     In this mode, GDB can instruct 'gdbserver' which command(s) to run.
     Unlike the other 2 modes, GDB will not close the connection when a
     process being debugged exits, so you can debug several processes in
     the same session.

   In each of the modes you may specify these options:

'--help'
     List all options, with brief explanations.

'--version'
     This option causes 'gdbserver' to print its version number and
     exit.

'--attach'
     'gdbserver' will attach to a running program.  The syntax is:

          target> gdbserver --attach COMM PID

     PID is the process ID of a currently running process.  It isn't
     necessary to point 'gdbserver' at a binary for the running process.

'--multi'
     To start 'gdbserver' without supplying an initial command to run or
     process ID to attach, use this command line option.  Then you can
     connect using 'target extended-remote' and start the program you
     want to debug.  The syntax is:

          target> gdbserver --multi COMM

'--debug'
     Instruct 'gdbserver' to display extra status information about the
     debugging process.  This option is intended for 'gdbserver'
     development and for bug reports to the developers.

'--remote-debug'
     Instruct 'gdbserver' to display remote protocol debug output.  This
     option is intended for 'gdbserver' development and for bug reports
     to the developers.

'--debug-file=FILENAME'
     Instruct 'gdbserver' to send any debug output to the given
     FILENAME.  This option is intended for 'gdbserver' development and
     for bug reports to the developers.

'--debug-format=option1[,option2,...]'
     Instruct 'gdbserver' to include extra information in each line of
     debugging output.  *Note Other Command-Line Arguments for
     gdbserver::.

'--wrapper'
     Specify a wrapper to launch programs for debugging.  The option
     should be followed by the name of the wrapper, then any
     command-line arguments to pass to the wrapper, then '--' indicating
     the end of the wrapper arguments.

'--once'
     By default, 'gdbserver' keeps the listening TCP port open, so that
     additional connections are possible.  However, if you start
     'gdbserver' with the '--once' option, it will stop listening for
     any further connection attempts after connecting to the first GDB
     session.


File: gdb.info,  Node: gcore man,  Next: gdbinit man,  Prev: gdbserver man,  Up: Man Pages

gcore
=====

gcore [-a] [-o PREFIX] PID1 [PID2...PIDN]

   Generate core dumps of one or more running programs with process IDs
PID1, PID2, etc.  A core file produced by 'gcore' is equivalent to one
produced by the kernel when the process crashes (and when 'ulimit -c'
was used to set up an appropriate core dump limit).  However, unlike
after a crash, after 'gcore' finishes its job the program remains
running without any change.

'-a'
     Dump all memory mappings.  The actual effect of this option depends
     on the Operating System.  On GNU/Linux, it will disable
     'use-coredump-filter' (*note set use-coredump-filter::) and enable
     'dump-excluded-mappings' (*note set dump-excluded-mappings::).

'-o PREFIX'
     The optional argument PREFIX specifies the prefix to be used when
     composing the file names of the core dumps.  The file name is
     composed as 'PREFIX.PID', where PID is the process ID of the
     running program being analyzed by 'gcore'.  If not specified,
     PREFIX defaults to GCORE.


File: gdb.info,  Node: gdbinit man,  Next: gdb-add-index man,  Prev: gcore man,  Up: Man Pages

gdbinit
=======



~/.config/gdb/gdbinit

~/.gdbinit

./.gdbinit

   These files contain GDB commands to automatically execute during GDB
startup.  The lines of contents are canned sequences of commands,
described in *note Sequences::.

   Please read more in *note Startup::.

'(not enabled with --with-system-gdbinit during compilation)'
     System-wide initialization file.  It is executed unless user
     specified GDB option '-nx' or '-n'.  See more in
'(not enabled with --with-system-gdbinit-dir during compilation)'
     System-wide initialization directory.  All files in this directory
     are executed on startup unless user specified GDB option '-nx' or
     '-n', as long as they have a recognized file extension.  See more
     in *note System-wide configuration::.

'~/.config/gdb/gdbinit or ~/.gdbinit'
     User initialization file.  It is executed unless user specified GDB
     options '-nx', '-n' or '-nh'.

'.gdbinit'
     Initialization file for current directory.  It may need to be
     enabled with GDB security command 'set auto-load local-gdbinit'.
     See more in *note Init File in the Current Directory::.


File: gdb.info,  Node: gdb-add-index man,  Prev: gdbinit man,  Up: Man Pages

gdb-add-index
=============

gdb-add-index FILENAME

   When GDB finds a symbol file, it scans the symbols in the file in
order to construct an internal symbol table.  This lets most GDB
operations work quickly-at the cost of a delay early on.  For large
programs, this delay can be quite lengthy, so GDB provides a way to
build an index, which speeds up startup.

   To determine whether a file contains such an index, use the command
'readelf -S filename': the index is stored in a section named
'.gdb_index'.  The index file can only be produced on systems which use
ELF binaries and DWARF debug information (i.e., sections named
'.debug_*').

   'gdb-add-index' uses GDB and 'objdump' found in the 'PATH'
environment variable.  If you want to use different versions of these
programs, you can specify them through the 'GDB' and 'OBJDUMP'
environment variables.

   See more in *note Index Files::.


File: gdb.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: Man Pages,  Up: Top

Appendix M GNU GENERAL PUBLIC LICENSE
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: gdb.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: Copying,  Up: Top

Appendix N GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gdb.info,  Node: Concept Index,  Next: Command and Variable Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* ! packet:                              Packets.            (line   49)
* "No symbol "foo" in current context":  Variables.          (line  122)
* # in Modula-2:                         GDB/M2.             (line   18)
* $:                                     Value History.      (line   13)
* $$:                                    Value History.      (line   13)
* $_ and info breakpoints:               Set Breaks.         (line  243)
* $_ and info line:                      Machine Code.       (line   35)
* $_, $__, and value history:            Memory.             (line  136)
* &, background execution of commands:   Background Execution.
                                                             (line   16)
* --annotate:                            Mode Options.       (line  110)
* --args:                                Mode Options.       (line  123)
* --attach, gdbserver option:            Server.             (line   86)
* --batch:                               Mode Options.       (line   33)
* --batch-silent:                        Mode Options.       (line   51)
* --baud:                                Mode Options.       (line  129)
* --cd:                                  Mode Options.       (line   90)
* --command:                             File Options.       (line   56)
* --configuration:                       Mode Options.       (line  173)
* --core:                                File Options.       (line   48)
* --data-directory:                      Mode Options.       (line   95)
* --debug, gdbserver option:             Server.             (line  146)
* --debug-file, gdbserver option:        Server.             (line  148)
* --debug-format, gdbserver option:      Server.             (line  153)
* --directory:                           File Options.       (line   92)
* --early-init-command:                  File Options.       (line   82)
* --early-init-eval-command:             File Options.       (line   87)
* --eval-command:                        File Options.       (line   62)
* --exec:                                File Options.       (line   40)
* --fullname:                            Mode Options.       (line  100)
* --init-command:                        File Options.       (line   72)
* --init-eval-command:                   File Options.       (line   77)
* --interpreter:                         Mode Options.       (line  148)
* --multi, gdbserver option:             Connecting.         (line   45)
* --nh:                                  Mode Options.       (line   15)
* --nowindows:                           Mode Options.       (line   80)
* --nx:                                  Mode Options.       (line   11)
* --once, gdbserver option:              Server.             (line  126)
* --pid:                                 File Options.       (line   52)
* --quiet:                               Mode Options.       (line   23)
* --readnever, command-line option:      File Options.       (line  102)
* --readnow:                             File Options.       (line   96)
* --remote-debug, gdbserver option:      Server.             (line  147)
* --return-child-result:                 Mode Options.       (line   63)
* --se:                                  File Options.       (line   44)
* --selftest:                            Server.             (line  187)
* --silent:                              Mode Options.       (line   23)
* --statistics:                          Mode Options.       (line  165)
* --symbols:                             File Options.       (line   36)
* --tty:                                 Mode Options.       (line  138)
* --tui:                                 Mode Options.       (line  141)
* --version:                             Mode Options.       (line  169)
* --windows:                             Mode Options.       (line   86)
* --with-gdb-datadir:                    Data Files.         (line   19)
* --with-relocated-sources:              Source Path.        (line  149)
* --with-sysroot:                        Files.              (line  463)
* --wrapper, gdbserver option:           Server.             (line  166)
* --write:                               Mode Options.       (line  160)
* -b:                                    Mode Options.       (line  129)
* -c:                                    File Options.       (line   48)
* -d:                                    File Options.       (line   92)
* -D:                                    Mode Options.       (line   95)
* -e:                                    File Options.       (line   40)
* -eiex:                                 File Options.       (line   87)
* -eix:                                  File Options.       (line   82)
* -ex:                                   File Options.       (line   62)
* -f:                                    Mode Options.       (line  100)
* -iex:                                  File Options.       (line   77)
* -info-gdb-mi-command:                  GDB/MI Support Commands.
                                                             (line   14)
* -ix:                                   File Options.       (line   72)
* -l:                                    Mode Options.       (line  133)
* -n:                                    Mode Options.       (line   11)
* -nw:                                   Mode Options.       (line   80)
* -p:                                    File Options.       (line   52)
* -q:                                    Mode Options.       (line   23)
* -r:                                    File Options.       (line   96)
* -readnever, option for symbol-file command: Files.         (line  101)
* -s:                                    File Options.       (line   36)
* -t:                                    Mode Options.       (line  138)
* -w:                                    Mode Options.       (line   86)
* -x:                                    File Options.       (line   56)
* ., Modula-2 scope operator:            M2 Scope.           (line    6)
* .build-id directory:                   Separate Debug Files.
                                                             (line    6)
* .debug subdirectories:                 Separate Debug Files.
                                                             (line    6)
* .debug_gdb_scripts section:            dotdebug_gdb_scripts section.
                                                             (line    6)
* .gdbinit:                              Initialization Files.
                                                             (line  107)
* .gdb_index section:                    Index Files.        (line    6)
* .gdb_index section format:             Index Section Format.
                                                             (line    6)
* .gnu_debugdata section:                MiniDebugInfo.      (line    6)
* .gnu_debuglink sections:               Separate Debug Files.
                                                             (line   85)
* .note.gnu.build-id sections:           Separate Debug Files.
                                                             (line  101)
* .o files, reading symbols from:        Files.              (line  146)
* /proc:                                 Process Information.
                                                             (line    6)
* <architecture>:                        Target Description Format.
                                                             (line   72)
* <compatible>:                          Target Description Format.
                                                             (line   95)
* <feature>:                             Target Description Format.
                                                             (line  119)
* <flags>:                               Target Description Format.
                                                             (line  163)
* <not saved> values:                    Registers.          (line  106)
* <osabi>:                               Target Description Format.
                                                             (line   82)
* <reg>:                                 Target Description Format.
                                                             (line  222)
* <struct>:                              Target Description Format.
                                                             (line  163)
* <union>:                               Target Description Format.
                                                             (line  153)
* <vector>:                              Target Description Format.
                                                             (line  146)
* ? packet:                              Packets.            (line   58)
* _NSPrintForDebugger, and printing Objective-C objects: The Print Command with Objective-C.
                                                             (line   11)
* {TYPE}:                                Expressions.        (line   41)
* A packet:                              Packets.            (line   66)
* AArch64 Memory Tagging Extension.:     AArch64.            (line   44)
* AArch64 Pointer Authentication.:       AArch64.            (line   34)
* AArch64 support:                       AArch64.            (line    6)
* AArch64 SVE.:                          AArch64.            (line   19)
* abbreviation:                          Command Syntax.     (line   13)
* acknowledgment, for GDB remote:        Packet Acknowledgment.
                                                             (line    6)
* active targets:                        Active Targets.     (line    6)
* Ada:                                   Ada.                (line    6)
* Ada exception catching:                Set Catchpoints.    (line   66)
* Ada exception handlers catching:       Set Catchpoints.    (line   92)
* Ada mode, general:                     Ada Mode Intro.     (line    6)
* Ada task switching:                    Ada Tasks.          (line  129)
* Ada tasking and core file debugging:   Ada Tasks and Core Files.
                                                             (line    6)
* Ada, deviations from:                  Additions to Ada.   (line    6)
* Ada, omissions from:                   Omissions from Ada. (line    6)
* Ada, problems:                         Ada Glitches.       (line    6)
* Ada, source character set:             Ada Source Character Set.
                                                             (line    6)
* Ada, tasking:                          Ada Tasks.          (line    6)
* add new commands for external monitor: Connecting.         (line  279)
* address locations:                     Address Locations.  (line    6)
* address of a symbol:                   Symbols.            (line   98)
* address size for remote targets:       Remote Configuration.
                                                             (line   12)
* addressable memory unit:               Memory.             (line  150)
* aggregates (Ada):                      Omissions from Ada. (line   42)
* AIX threads:                           Debugging Output.   (line   33)
* aliases for commands:                  Aliases.            (line    6)
* aliases for commands, default arguments: Command aliases default args.
                                                             (line    6)
* alignment of remote memory accesses:   Packets.            (line  248)
* all-stop mode:                         All-Stop Mode.      (line    6)
* Alpha stack:                           MIPS.               (line    6)
* ambiguous expressions:                 Ambiguous Expressions.
                                                             (line    6)
* annotations:                           Annotations Overview.
                                                             (line    6)
* annotations for errors, warnings and interrupts: Errors.   (line    6)
* annotations for invalidation messages: Invalidation.       (line    6)
* annotations for prompts:               Prompting.          (line    6)
* annotations for running programs:      Annotations for Running.
                                                             (line    6)
* annotations for source display:        Source Annotations. (line    6)
* append data to a file:                 Dump/Restore Files. (line    6)
* Application Data Integrity:            Sparc64.            (line    5)
* apply a command to all frames (ignoring errors and empty output): Frame Apply.
                                                             (line   96)
* apply a command to all frames of all threads (ignoring errors and empty output): Threads.
                                                             (line  236)
* apply command to all threads (ignoring errors and empty output): Threads.
                                                             (line  229)
* apply command to several frames:       Frame Apply.        (line    6)
* apply command to several threads:      Threads.            (line  194)
* ARC EM:                                ARC.                (line    6)
* ARC HS:                                ARC.                (line    6)
* ARC specific commands:                 ARC.                (line    6)
* ARC600:                                ARC.                (line    6)
* ARC700:                                ARC.                (line    6)
* architecture debugging info:           Debugging Output.   (line   26)
* argument count in user-defined commands: Define.           (line   25)
* arguments (to your program):           Arguments.          (line    6)
* arguments, to gdbserver:               Server.             (line   34)
* arguments, to user-defined commands:   Define.             (line    6)
* ARM 32-bit mode:                       ARM.                (line   16)
* ARM AArch64:                           Debugging Output.   (line   19)
* array aggregates (Ada):                Omissions from Ada. (line   42)
* arrays:                                Arrays.             (line    6)
* arrays in expressions:                 Expressions.        (line   13)
* arrays slices (Fortran):               Special Fortran Commands.
                                                             (line   13)
* artificial array:                      Arrays.             (line    6)
* assembly instructions:                 Machine Code.       (line   44)
* assignment:                            Assignment.         (line    6)
* async output in GDB/MI:                GDB/MI Output Syntax.
                                                             (line   98)
* async records in GDB/MI:               GDB/MI Async Records.
                                                             (line    6)
* asynchronous execution:                Background Execution.
                                                             (line    6)
* asynchronous execution <1>:            Asynchronous and non-stop modes.
                                                             (line   15)
* asynchronous execution, and process record and replay: Process Record and Replay.
                                                             (line  101)
* AT&T disassembly flavor:               Machine Code.       (line  266)
* attach:                                Attach.             (line    6)
* attach to a program, gdbserver:        Server.             (line   86)
* auto-loading:                          Auto-loading.       (line    6)
* auto-loading extensions:               Auto-loading extensions.
                                                             (line    6)
* auto-loading init file in the current directory: Init File in the Current Directory.
                                                             (line    6)
* auto-loading libthread_db.so.1:        libthread_db.so.1 file.
                                                             (line    6)
* auto-loading safe-path:                Auto-loading safe path.
                                                             (line    6)
* auto-loading verbose mode:             Auto-loading verbose mode.
                                                             (line    6)
* auto-retry, for remote TCP target:     Remote Configuration.
                                                             (line  131)
* automatic display:                     Auto Display.       (line    6)
* automatic hardware breakpoints:        Set Breaks.         (line  404)
* automatic overlay debugging:           Automatic Overlay Debugging.
                                                             (line    6)
* automatic symbol index cache:          Index Files.        (line   73)
* automatic thread selection:            All-Stop Mode.      (line   28)
* auxiliary vector:                      OS Information.     (line    9)
* AVR:                                   AVR.                (line    6)
* b packet:                              Packets.            (line   77)
* B packet:                              Packets.            (line   92)
* background execution:                  Background Execution.
                                                             (line    6)
* background execution <1>:              Asynchronous and non-stop modes.
                                                             (line   15)
* backtrace beyond main function:        Backtrace.          (line  155)
* backtrace limit:                       Backtrace.          (line  192)
* base name differences:                 Files.              (line  530)
* baud rate for remote targets:          Remote Configuration.
                                                             (line   21)
* bc packet:                             Packets.            (line   97)
* bcache statistics:                     Maintenance Commands.
                                                             (line  427)
* bits in remote address:                Remote Configuration.
                                                             (line   12)
* blocks in guile:                       Blocks In Guile.    (line    6)
* blocks in python:                      Blocks In Python.   (line    6)
* bookmark:                              Checkpoint/Restart. (line    6)
* boundary violations, Intel MPX:        Signals.            (line  197)
* branch trace configuration format:     Branch Trace Configuration Format.
                                                             (line    6)
* branch trace format:                   Branch Trace Format.
                                                             (line    6)
* branch trace store:                    Process Record and Replay.
                                                             (line   70)
* break in overloaded functions:         Debugging C Plus Plus.
                                                             (line    9)
* break on a system call.:               Set Catchpoints.    (line  120)
* break on fork/exec:                    Set Catchpoints.    (line  116)
* BREAK signal instead of Ctrl-C:        Remote Configuration.
                                                             (line   36)
* breakpoint address adjusted:           Breakpoint-related Warnings.
                                                             (line    6)
* breakpoint at static probe point:      Linespec Locations. (line   65)
* breakpoint commands:                   Break Commands.     (line    6)
* breakpoint commands for GDB/MI:        GDB/MI Breakpoint Commands.
                                                             (line    6)
* breakpoint commands, in remote protocol: General Query Packets.
                                                             (line 1059)
* breakpoint conditions:                 Conditions.         (line    6)
* breakpoint kinds, ARM:                 ARM Breakpoint Kinds.
                                                             (line    6)
* breakpoint kinds, MIPS:                MIPS Breakpoint Kinds.
                                                             (line    6)
* breakpoint lists:                      Breakpoints.        (line   45)
* breakpoint numbers:                    Breakpoints.        (line   38)
* breakpoint on events:                  Breakpoints.        (line   30)
* breakpoint on memory address:          Breakpoints.        (line   17)
* breakpoint on variable modification:   Breakpoints.        (line   17)
* breakpoint ranges:                     Breakpoints.        (line   45)
* breakpoint subroutine, remote:         Stub Contents.      (line   31)
* breakpointing Ada elaboration code:    Stopping Before Main Program.
                                                             (line    6)
* breakpoints:                           Breakpoints.        (line    6)
* breakpoints and tasks, in Ada:         Ada Tasks.          (line  181)
* breakpoints and threads:               Thread-Specific Breakpoints.
                                                             (line   10)
* breakpoints at functions matching a regexp: Set Breaks.    (line  200)
* breakpoints in guile:                  Breakpoints In Guile.
                                                             (line    6)
* breakpoints in overlays:               Overlay Commands.   (line   91)
* breakpoints in python:                 Breakpoints In Python.
                                                             (line    6)
* breakpoints, multiple locations:       Set Breaks.         (line  310)
* bs packet:                             Packets.            (line  103)
* bug criteria:                          Bug Criteria.       (line    6)
* bug reports:                           Bug Reporting.      (line    6)
* bugs in GDB:                           GDB Bugs.           (line    6)
* build ID sections:                     Separate Debug Files.
                                                             (line  101)
* build ID, and separate debugging files: Separate Debug Files.
                                                             (line    6)
* building GDB, requirements for:        Requirements.       (line    6)
* built-in simulator target:             Target Commands.    (line   73)
* builtin Go functions:                  Go.                 (line   31)
* builtin Go types:                      Go.                 (line   28)
* C and C++:                             C.                  (line    6)
* C and C++ checks:                      C Checks.           (line    6)
* C and C++ constants:                   C Constants.        (line    6)
* C and C++ defaults:                    C Defaults.         (line    6)
* C and C++ operators:                   C Operators.        (line    6)
* c packet:                              Packets.            (line  110)
* C packet:                              Packets.            (line  119)
* C++:                                   C.                  (line   10)
* C++ compilers:                         C Plus Plus Expressions.
                                                             (line    8)
* C++ demangling:                        Debugging C Plus Plus.
                                                             (line   36)
* C++ exception handling:                Debugging C Plus Plus.
                                                             (line   20)
* C++ overload debugging info:           Debugging Output.   (line  188)
* C++ scope resolution:                  Variables.          (line   90)
* C++ symbol decoding style:             Print Settings.     (line  558)
* C++ symbol display:                    Debugging C Plus Plus.
                                                             (line   40)
* caching data of targets:               Caching Target Data.
                                                             (line    6)
* caching of bfd objects:                File Caching.       (line    6)
* caching of opened files:               File Caching.       (line    6)
* call dummy stack unwinding:            Calling.            (line   36)
* call dummy stack unwinding on unhandled exception.: Calling.
                                                             (line   47)
* call overloaded functions:             C Plus Plus Expressions.
                                                             (line   26)
* call stack:                            Stack.              (line    9)
* call stack traces:                     Backtrace.          (line    6)
* call-clobbered registers:              Registers.          (line  106)
* caller-saved registers:                Registers.          (line  106)
* calling functions:                     Calling.            (line    6)
* calling functions in the program, disabling: Calling.      (line   59)
* calling make:                          Shell Commands.     (line   22)
* case sensitivity in symbol names:      Symbols.            (line   27)
* case-insensitive symbol names:         Symbols.            (line   27)
* casts, in expressions:                 Expressions.        (line   26)
* casts, to view memory:                 Expressions.        (line   41)
* catch Ada exceptions:                  Set Catchpoints.    (line   66)
* catch Ada exceptions when handled:     Set Catchpoints.    (line   92)
* catch syscalls from inferior, remote request: General Query Packets.
                                                             (line  474)
* catchpoints:                           Breakpoints.        (line   30)
* catchpoints, setting:                  Set Catchpoints.    (line    6)
* change GDB's working directory:        Working Directory.  (line   32)
* change inferior's working directory:   Working Directory.  (line   13)
* character sets:                        Character Sets.     (line    6)
* charset:                               Character Sets.     (line    6)
* checkpoint:                            Checkpoint/Restart. (line    6)
* checkpoints and process id:            Checkpoint/Restart. (line   76)
* checks, range:                         Type Checking.      (line   44)
* checks, type:                          Checks.             (line   23)
* checksum, for GDB remote:              Overview.           (line   21)
* choosing target byte order:            Byte Order.         (line    6)
* circular trace buffer:                 Starting and Stopping Trace Experiments.
                                                             (line   80)
* clearing breakpoints, watchpoints, catchpoints: Delete Breaks.
                                                             (line    6)
* CLI commands in python:                CLI Commands In Python.
                                                             (line    6)
* close, file-i/o system call:           close.              (line    6)
* closest symbol and offset for an address: Symbols.         (line  108)
* code address and its source line:      Machine Code.       (line   29)
* code compression, MIPS:                MIPS.               (line   49)
* code location:                         Location Specifications.
                                                             (line    6)
* COFF/PE exported symbols:              Debugging Output.   (line   49)
* collected data discarded:              Starting and Stopping Trace Experiments.
                                                             (line    6)
* colon, doubled as scope operator:      M2 Scope.           (line    6)
* colon-colon, context for variables/functions: Variables.   (line   44)
* colors:                                Output Styling.     (line    6)
* command editing:                       Readline Bare Essentials.
                                                             (line    6)
* command files:                         Command Files.      (line    6)
* command history:                       Command History.    (line    6)
* command hooks:                         Hooks.              (line    6)
* command interpreters:                  Interpreters.       (line    6)
* command line editing:                  Editing.            (line    6)
* command options:                       Command Options.    (line    6)
* command options, boolean:              Command Options.    (line   21)
* command options, raw input:            Command Options.    (line   13)
* command scripts, debugging:            Messages/Warnings.  (line   65)
* command tracing:                       Messages/Warnings.  (line   60)
* commands for C++:                      Debugging C Plus Plus.
                                                             (line    6)
* commands in guile:                     Commands In Guile.  (line    6)
* commands in python, CLI:               CLI Commands In Python.
                                                             (line    6)
* commands in python, GDB/MI:            GDB/MI Commands In Python.
                                                             (line    6)
* commands to access guile:              Guile Commands.     (line    6)
* commands to access python:             Python Commands.    (line    6)
* comment:                               Command Syntax.     (line   37)
* COMMON blocks, Fortran:                Special Fortran Commands.
                                                             (line    9)
* common targets:                        Target Commands.    (line   46)
* compatibility, GDB/MI and CLI:         GDB/MI Compatibility with CLI.
                                                             (line    6)
* compilation directory:                 Source Path.        (line   40)
* compile C++ type conversion:           Compiling and Injecting Code.
                                                             (line   90)
* compile command debugging info:        Compiling and Injecting Code.
                                                             (line   82)
* compile command driver filename override: Compiling and Injecting Code.
                                                             (line  300)
* compile command options override:      Compiling and Injecting Code.
                                                             (line  125)
* compiling code:                        Compiling and Injecting Code.
                                                             (line    6)
* completion:                            Completion.         (line    6)
* completion of Guile commands:          Commands In Guile.  (line  100)
* completion of Python commands:         CLI Commands In Python.
                                                             (line   72)
* completion of quoted strings:          Completion.         (line   94)
* completion of structure field names:   Completion.         (line  146)
* completion of union field names:       Completion.         (line  146)
* compressed debug sections:             Requirements.       (line  117)
* conditional breakpoints:               Conditions.         (line    6)
* conditional tracepoints:               Tracepoint Conditions.
                                                             (line    6)
* configure debuginfod URLs:             Debuginfod Settings.
                                                             (line   27)
* configuring GDB:                       Running Configure.  (line    6)
* confirmation:                          Messages/Warnings.  (line   49)
* connection timeout, for remote TCP target: Remote Configuration.
                                                             (line  147)
* connections in python:                 Connections In Python.
                                                             (line    6)
* console i/o as part of file-i/o:       Console I/O.        (line    6)
* console interpreter:                   Interpreters.       (line   21)
* console output in GDB/MI:              GDB/MI Output Syntax.
                                                             (line  106)
* constants, in file-i/o protocol:       Constants.          (line    6)
* continuing:                            Continuing and Stepping.
                                                             (line    6)
* continuing threads:                    Thread Stops.       (line    6)
* control C, and remote debugging:       Bootstrapping.      (line   25)
* controlling terminal:                  Input/Output.       (line   23)
* convenience functions:                 Convenience Funs.   (line    6)
* convenience functions in python:       Functions In Python.
                                                             (line    6)
* convenience variables:                 Convenience Vars.   (line    6)
* convenience variables for tracepoints: Tracepoint Variables.
                                                             (line    6)
* convenience variables, and trace state variables: Trace State Variables.
                                                             (line   17)
* convenience variables, initializing:   Convenience Vars.   (line   42)
* core dump file:                        Files.              (line    6)
* core dump file target:                 Target Commands.    (line   54)
* crash of debugger:                     Bug Criteria.       (line    9)
* CRC algorithm definition:              Separate Debug Files.
                                                             (line  146)
* CRC of memory block, remote request:   General Query Packets.
                                                             (line   65)
* CRIS:                                  CRIS.               (line    6)
* CRIS mode:                             CRIS.               (line   26)
* CRIS version:                          CRIS.               (line   10)
* Ctrl-BREAK, MS-Windows:                Cygwin Native.      (line    9)
* ctrl-c message, in file-i/o protocol:  The Ctrl-C Message. (line    6)
* current Ada task ID:                   Ada Tasks.          (line  119)
* current directory:                     Source Path.        (line   40)
* current Go package:                    Go.                 (line   11)
* current thread:                        Threads.            (line   29)
* current thread, remote request:        General Query Packets.
                                                             (line   55)
* custom JIT debug info:                 Custom Debug Info.  (line    6)
* Cygwin DLL, debugging:                 Cygwin Native.      (line   60)
* Cygwin-specific commands:              Cygwin Native.      (line    6)
* D:                                     D.                  (line    6)
* d packet:                              Packets.            (line  128)
* D packet:                              Packets.            (line  135)
* Darwin:                                Darwin.             (line    6)
* data breakpoints:                      Breakpoints.        (line   17)
* data manipulation, in GDB/MI:          GDB/MI Data Manipulation.
                                                             (line    6)
* dcache line-size:                      Caching Target Data.
                                                             (line   60)
* dcache size:                           Caching Target Data.
                                                             (line   57)
* dcache, flushing:                      Caching Target Data.
                                                             (line   71)
* dead names, GNU Hurd:                  Hurd Native.        (line   84)
* debug expression parser:               Debugging Output.   (line  195)
* debug formats and C++:                 C Plus Plus Expressions.
                                                             (line    8)
* debug link sections:                   Separate Debug Files.
                                                             (line   85)
* debug remote protocol:                 Debugging Output.   (line  203)
* debugger crash:                        Bug Criteria.       (line    9)
* debugging agent:                       In-Process Agent.   (line    6)
* debugging C++ programs:                C Plus Plus Expressions.
                                                             (line    8)
* debugging information directory, global: Separate Debug Files.
                                                             (line    6)
* debugging information in separate files: Separate Debug Files.
                                                             (line    6)
* debugging libthread_db:                Threads.            (line  338)
* debugging multiple processes:          Forks.              (line   55)
* debugging optimized code:              Optimized Code.     (line    6)
* debugging stub, example:               Remote Stub.        (line    6)
* debugging target:                      Targets.            (line    6)
* debugging the Cygwin DLL:              Cygwin Native.      (line   60)
* debugging threads:                     Threads.            (line  343)
* debuginfod:                            Debuginfod.         (line    6)
* debuginfod verbosity:                  Debuginfod Settings.
                                                             (line   37)
* decimal floating point format:         Decimal Floating Point.
                                                             (line    6)
* default behavior of commands, changing: Command Settings.  (line    6)
* default collection action:             Tracepoint Actions. (line  142)
* default data directory:                Data Files.         (line   19)
* default settings, changing:            Command Settings.   (line    6)
* default source path substitution:      Source Path.        (line  149)
* default system root:                   Files.              (line  463)
* define trace state variable, remote request: Tracepoint Packets.
                                                             (line  121)
* defining macros interactively:         Macros.             (line   60)
* definition of a macro, showing:        Macros.             (line   47)
* delete breakpoints:                    Delete Breaks.      (line   56)
* deleting breakpoints, watchpoints, catchpoints: Delete Breaks.
                                                             (line    6)
* deliver a signal to a program:         Signaling.          (line    6)
* demangle:                              Symbols.            (line  127)
* demangler crashes:                     Maintenance Commands.
                                                             (line  186)
* demangler crashes <1>:                 Maintenance Commands.
                                                             (line  213)
* demangler crashes <2>:                 Maintenance Commands.
                                                             (line  237)
* demangling C++ names:                  Print Settings.     (line  539)
* deprecated commands:                   Maintenance Commands.
                                                             (line  200)
* derived type of an object, printing:   Print Settings.     (line  570)
* descriptor tables display:             DJGPP Native.       (line   24)
* detach from task, GNU Hurd:            Hurd Native.        (line   59)
* detach from thread, GNU Hurd:          Hurd Native.        (line  109)
* direct memory access (DMA) on MS-DOS:  DJGPP Native.       (line   74)
* directories for source files:          Source Path.        (line    6)
* directory, compilation:                Source Path.        (line   40)
* directory, current:                    Source Path.        (line   40)
* disable address space randomization, remote request: General Query Packets.
                                                             (line   84)
* disabling calling functions in the program: Calling.       (line   59)
* disassembler in Python, global vs. specific: Disassembly In Python.
                                                             (line  192)
* disassembler options:                  Machine Code.       (line  251)
* disconnected tracing:                  Starting and Stopping Trace Experiments.
                                                             (line   45)
* displaced stepping debugging info:     Debugging Output.   (line   78)
* displaced stepping support:            Maintenance Commands.
                                                             (line  152)
* displaced stepping, and process record and replay: Process Record and Replay.
                                                             (line   96)
* display command history:               Command History.    (line  110)
* display derived types:                 Print Settings.     (line  570)
* display disabled out of scope:         Auto Display.       (line   86)
* display GDB copyright:                 Help.               (line  174)
* display of expressions:                Auto Display.       (line    6)
* display remote monitor communications: Target Commands.    (line  107)
* display remote packets:                Debugging Output.   (line  203)
* DJGPP debugging:                       DJGPP Native.       (line    6)
* DLLs with no debugging symbols:        Non-debug DLL Symbols.
                                                             (line    6)
* do not print frame arguments:          Print Settings.     (line  171)
* documentation:                         Formatting Documentation.
                                                             (line   22)
* don't repeat command:                  Define.             (line  118)
* don't repeat Guile command:            Commands In Guile.  (line   67)
* don't repeat Python command:           CLI Commands In Python.
                                                             (line   42)
* DOS file-name semantics of file names.: Files.             (line  486)
* DOS serial data link, remote debugging: DJGPP Native.      (line  118)
* DOS serial port status:                DJGPP Native.       (line  139)
* DPMI:                                  DJGPP Native.       (line    6)
* dprintf:                               Dynamic Printf.     (line    6)
* dump all data collected at tracepoint: tdump.              (line    6)
* dump core from inferior:               Core File Generation.
                                                             (line    6)
* dump data to a file:                   Dump/Restore Files. (line    6)
* dump/restore files:                    Dump/Restore Files. (line    6)
* DVC register:                          PowerPC Embedded.   (line    6)
* DWARF compilation units cache:         Maintenance Commands.
                                                             (line  497)
* DWARF DIEs:                            Debugging Output.   (line   56)
* DWARF frame unwinders:                 Maintenance Commands.
                                                             (line  511)
* DWARF Line Tables:                     Debugging Output.   (line   62)
* DWARF Reading:                         Debugging Output.   (line   70)
* DWARF-2 CFI and CRIS:                  CRIS.               (line   18)
* dynamic linking:                       Files.              (line  123)
* dynamic printf:                        Dynamic Printf.     (line    6)
* dynamic varobj:                        GDB/MI Variable Objects.
                                                             (line  163)
* early initialization:                  Initialization Files.
                                                             (line   14)
* early initialization file:             Startup.            (line   10)
* editing:                               Editing.            (line   15)
* editing command lines:                 Readline Bare Essentials.
                                                             (line    6)
* editing source files:                  Edit.               (line    6)
* eight-bit characters in strings:       Print Settings.     (line  484)
* elaboration phase:                     Starting.           (line   92)
* ELinOS system-wide configuration script: System-wide Configuration Scripts.
                                                             (line   15)
* Emacs:                                 Emacs.              (line    6)
* empty response, for unsupported packets: Overview.         (line   97)
* enable debuginfod:                     Debuginfod Settings.
                                                             (line   10)
* enable/disable a breakpoint:           Disabling.          (line    6)
* enabling and disabling probes:         Static Probe Points.
                                                             (line   52)
* entering numbers:                      Numbers.            (line    6)
* environment (of your program):         Environment.        (line    6)
* errno values, in file-i/o protocol:    Errno Values.       (line    6)
* error on valid input:                  Bug Criteria.       (line   12)
* event debugging info:                  Debugging Output.   (line   85)
* event designators:                     Event Designators.  (line    6)
* event handling:                        Set Catchpoints.    (line    6)
* event-loop debugging:                  Debugging Output.   (line   91)
* examine process image:                 Process Information.
                                                             (line    6)
* examining data:                        Data.               (line    6)
* examining memory:                      Memory.             (line    9)
* exception handlers:                    Set Catchpoints.    (line    6)
* exceptions, guile:                     Guile Exception Handling.
                                                             (line    6)
* exceptions, python:                    Exception Handling. (line    6)
* exec events, remote reply:             Stop Reply Packets. (line  141)
* executable file:                       Files.              (line   16)
* executable file target:                Target Commands.    (line   50)
* executable file, for remote target:    Remote Configuration.
                                                             (line  102)
* execute commands from a file:          Command Files.      (line   17)
* execute forward or backward in time:   Reverse Execution.  (line   92)
* execute remote command, remote request: General Query Packets.
                                                             (line  609)
* execution, foreground, background and asynchronous: Background Execution.
                                                             (line    6)
* execution, foreground, background and asynchronous <1>: Asynchronous and non-stop modes.
                                                             (line   15)
* exit status of shell commands:         Convenience Vars.   (line  192)
* exiting GDB:                           Quitting GDB.       (line    6)
* expand macro once:                     Macros.             (line   38)
* expanding preprocessor macros:         Macros.             (line   29)
* explicit locations:                    Explicit Locations. (line    6)
* explore type:                          Data.               (line  246)
* explore value:                         Data.               (line  239)
* exploring hierarchical data structures: Data.              (line  137)
* expression debugging info:             Debugging Output.   (line  100)
* expression parser, debugging info:     Debugging Output.   (line  195)
* expressions:                           Expressions.        (line    6)
* expressions in Ada:                    Ada.                (line   11)
* expressions in C or C++:               C.                  (line    6)
* expressions in C++:                    C Plus Plus Expressions.
                                                             (line    6)
* expressions in Modula-2:               Modula-2.           (line   12)
* extend GDB for remote targets:         Connecting.         (line  279)
* extending GDB:                         Extending GDB.      (line    6)
* extra signal information:              Signals.            (line  156)
* F packet:                              Packets.            (line  151)
* F reply packet:                        The F Reply Packet. (line    6)
* F request packet:                      The F Request Packet.
                                                             (line    6)
* fast tracepoints:                      Set Tracepoints.    (line   24)
* fast tracepoints, setting:             Create and Delete Tracepoints.
                                                             (line   50)
* fatal signal:                          Bug Criteria.       (line    9)
* fatal signals:                         Signals.            (line   15)
* features of the remote protocol:       General Query Packets.
                                                             (line  663)
* fetch memory tags:                     General Query Packets.
                                                             (line  342)
* file name canonicalization:            Files.              (line  530)
* file transfer:                         File Transfer.      (line    6)
* file transfer, remote protocol:        Host I/O Packets.   (line    6)
* file-i/o examples:                     File-I/O Examples.  (line    6)
* file-i/o overview:                     File-I/O Overview.  (line    6)
* File-I/O remote protocol extension:    File-I/O Remote Protocol Extension.
                                                             (line    6)
* file-i/o reply packet:                 The F Reply Packet. (line    6)
* file-i/o request packet:               The F Request Packet.
                                                             (line    6)
* filename-display:                      Backtrace.          (line  202)
* find trace snapshot:                   tfind.              (line    6)
* flinching:                             Messages/Warnings.  (line   49)
* float promotion:                       ABI.                (line   34)
* floating point:                        Floating Point Hardware.
                                                             (line    6)
* floating point registers:              Registers.          (line   15)
* floating point, MIPS remote:           MIPS Embedded.      (line   13)
* focus of debugging:                    Threads.            (line   29)
* foo:                                   Symbol Errors.      (line   54)
* foreground execution:                  Background Execution.
                                                             (line    6)
* foreground execution <1>:              Asynchronous and non-stop modes.
                                                             (line   15)
* fork events, remote reply:             Stop Reply Packets. (line  104)
* fork, debugging programs which call:   Forks.              (line    6)
* format options:                        Print Settings.     (line    6)
* formatted output:                      Output Formats.     (line    6)
* Fortran:                               Summary.            (line   40)
* fortran array slicing debugging info:  Debugging Output.   (line  118)
* Fortran Defaults:                      Fortran.            (line   14)
* Fortran Intrinsics:                    Fortran Intrinsics. (line    6)
* Fortran modules, information about:    Symbols.            (line  589)
* Fortran operators and expressions:     Fortran Operators.  (line    6)
* Fortran Types:                         Fortran Types.      (line    6)
* Fortran-specific support in GDB:       Fortran.            (line    6)
* frame debugging info:                  Debugging Output.   (line  126)
* frame decorator api:                   Frame Decorator API.
                                                             (line    6)
* frame filters api:                     Frame Filter API.   (line    6)
* frame information, printing:           Print Settings.     (line  331)
* frame level:                           Frames.             (line   28)
* frame number:                          Frames.             (line   28)
* frame pointer:                         Frames.             (line   21)
* frame pointer register:                Registers.          (line   31)
* frame, definition:                     Frames.             (line    6)
* frameless execution:                   Frames.             (line   34)
* frames in guile:                       Frames In Guile.    (line    6)
* frames in python:                      Frames In Python.   (line    6)
* free memory information (MS-DOS):      DJGPP Native.       (line   19)
* FreeBSD:                               FreeBSD.            (line    6)
* FreeBSD LWP debug messages:            Debugging Output.   (line  107)
* FreeBSD native target debug messages:  Debugging Output.   (line  113)
* fstat, file-i/o system call:           stat/fstat.         (line    6)
* Fujitsu:                               Remote Stub.        (line   68)
* full symbol tables, listing GDB's internal: Symbols.       (line  679)
* function call arguments, optimized out: Backtrace.         (line  133)
* function entry/exit, wrong values of variables: Variables. (line  106)
* functions and variables by Fortran module: Symbols.        (line  589)
* functions without line info, and stepping: Continuing and Stepping.
                                                             (line   92)
* g packet:                              Packets.            (line  156)
* G packet:                              Packets.            (line  184)
* g++, GNU C++ compiler:                 C.                  (line   10)
* garbled pointers:                      DJGPP Native.       (line   42)
* GCC and C++:                           C Plus Plus Expressions.
                                                             (line    8)
* GDB bugs, reporting:                   Bug Reporting.      (line    6)
* GDB internal error:                    Maintenance Commands.
                                                             (line  237)
* gdb module:                            Basic Python.       (line   28)
* gdb objects:                           GDB Scheme Data Types.
                                                             (line    6)
* GDB reference card:                    Formatting Documentation.
                                                             (line    6)
* GDB startup:                           Startup.            (line    6)
* GDB version number:                    Help.               (line  164)
* gdb.ini:                               Initialization Files.
                                                             (line  107)
* gdb.printing:                          gdb.printing.       (line    6)
* gdb.prompt:                            gdb.prompt.         (line    6)
* gdb.types:                             gdb.types.          (line    6)
* gdb.Value:                             Values From Inferior.
                                                             (line    6)
* GDB/MI development:                    GDB/MI Development and Front Ends.
                                                             (line    6)
* GDB/MI General Design:                 GDB/MI General Design.
                                                             (line    6)
* GDB/MI, async records:                 GDB/MI Async Records.
                                                             (line    6)
* GDB/MI, breakpoint commands:           GDB/MI Breakpoint Commands.
                                                             (line    6)
* GDB/MI, compatibility with CLI:        GDB/MI Compatibility with CLI.
                                                             (line    6)
* GDB/MI, data manipulation:             GDB/MI Data Manipulation.
                                                             (line    6)
* GDB/MI, input syntax:                  GDB/MI Input Syntax.
                                                             (line    6)
* GDB/MI, its purpose:                   GDB/MI.             (line   36)
* GDB/MI, output syntax:                 GDB/MI Output Syntax.
                                                             (line    6)
* GDB/MI, result records:                GDB/MI Result Records.
                                                             (line    6)
* GDB/MI, simple examples:               GDB/MI Simple Examples.
                                                             (line    6)
* GDB/MI, stream records:                GDB/MI Stream Records.
                                                             (line    6)
* gdbarch debugging info:                Debugging Output.   (line   26)
* GDBHISTFILE, environment variable:     Command History.    (line   26)
* GDBHISTSIZE, environment variable:     Command History.    (line   56)
* gdbinit:                               Initialization Files.
                                                             (line  107)
* gdbserver, command-line arguments:     Server.             (line   34)
* gdbserver, connecting:                 Connecting.         (line    6)
* gdbserver, search path for libthread_db: Server.           (line  254)
* gdbserver, send all debug output to a single file: Server. (line  148)
* gdbserver, target extended-remote mode: Connecting.        (line    6)
* gdbserver, target remote mode:         Connecting.         (line    6)
* gdbserver, types of connections:       Connecting.         (line    6)
* GDT:                                   DJGPP Native.       (line   24)
* general initialization:                Initialization Files.
                                                             (line   30)
* get thread information block address:  General Query Packets.
                                                             (line  303)
* get thread-local storage address, remote request: General Query Packets.
                                                             (line  271)
* gettimeofday, file-i/o system call:    gettimeofday.       (line    6)
* getting structure elements using gdb.Field objects as subscripts: Values From Inferior.
                                                             (line   40)
* global debugging information directories: Separate Debug Files.
                                                             (line    6)
* global thread identifier (GDB):        Threads.            (line   88)
* global thread number:                  Threads.            (line   88)
* GNAT descriptive types:                Ada Glitches.       (line   57)
* GNAT encoding:                         Ada Glitches.       (line   57)
* GNU C++:                               C.                  (line   10)
* GNU Emacs:                             Emacs.              (line    6)
* GNU Hurd debugging:                    Hurd Native.        (line    6)
* GNU/Hurd debug messages:               Debugging Output.   (line  132)
* GNU/Linux namespaces debug messages:   Debugging Output.   (line  162)
* GNU/Linux native target debug messages: Debugging Output.  (line  156)
* Go (programming language):             Go.                 (line    6)
* guile api:                             Guile API.          (line    6)
* guile architectures:                   Architectures In Guile.
                                                             (line    6)
* guile auto-loading:                    Guile Auto-loading. (line    6)
* guile commands:                        Guile Commands.     (line    6)
* guile commands <1>:                    Commands In Guile.  (line    6)
* guile configuration:                   Guile Configuration.
                                                             (line    6)
* guile exceptions:                      Guile Exception Handling.
                                                             (line    6)
* guile gdb module:                      Basic Guile.        (line   37)
* guile iterators:                       Iterators In Guile. (line    6)
* guile modules:                         Guile Modules.      (line    6)
* guile pagination:                      Basic Guile.        (line    6)
* guile parameters:                      Parameters In Guile.
                                                             (line    6)
* guile pretty printing api:             Guile Pretty Printing API.
                                                             (line    6)
* guile scripting:                       Guile.              (line    6)
* guile scripts directory:               Guile Introduction. (line   15)
* guile stdout:                          Basic Guile.        (line    6)
* guile, working with types:             Types In Guile.     (line    6)
* guile, working with values from inferior: Values From Inferior In Guile.
                                                             (line    6)
* H packet:                              Packets.            (line  194)
* handling signals:                      Signals.            (line   27)
* hardware breakpoints:                  Set Breaks.         (line  171)
* hardware debug registers:              Maintenance Commands.
                                                             (line  557)
* hardware watchpoints:                  Set Watchpoints.    (line   31)
* hash mark while downloading:           Target Commands.    (line   98)
* heuristic-fence-post (Alpha, MIPS):    MIPS.               (line   14)
* history events:                        Event Designators.  (line    8)
* history expansion:                     History Interaction.
                                                             (line    6)
* history expansion, turn on/off:        Command History.    (line   85)
* history file:                          Command History.    (line   26)
* history number:                        Value History.      (line   13)
* history of values printed by GDB:      Value History.      (line    6)
* history size:                          Command History.    (line   56)
* history substitution:                  Command History.    (line   26)
* hooks, for commands:                   Hooks.              (line    6)
* hooks, post-command:                   Hooks.              (line   11)
* hooks, pre-command:                    Hooks.              (line    6)
* host character set:                    Character Sets.     (line    6)
* Host I/O, remote protocol:             Host I/O Packets.   (line    6)
* how many arguments (user-defined commands): Define.        (line   25)
* HPPA support:                          HPPA.               (line    6)
* i packet:                              Packets.            (line  208)
* I packet:                              Packets.            (line  213)
* i/o:                                   Input/Output.       (line    6)
* I/O registers (Atmel AVR):             AVR.                (line   10)
* i386:                                  Remote Stub.        (line   56)
* i386-stub.c:                           Remote Stub.        (line   56)
* IDT:                                   DJGPP Native.       (line   24)
* ignore count (of breakpoint):          Conditions.         (line   85)
* in-process agent protocol:             In-Process Agent Protocol.
                                                             (line    6)
* incomplete type:                       Symbols.            (line  367)
* indentation in structure display:      Print Settings.     (line  446)
* index files:                           Index Files.        (line    6)
* index section format:                  Index Section Format.
                                                             (line    6)
* inferior:                              Inferiors Connections and Programs.
                                                             (line   15)
* inferior debugging info:               Debugging Output.   (line  137)
* inferior events in Python:             Events In Python.   (line    6)
* inferior function call debugging info: Debugging Output.   (line  145)
* inferior functions, calling:           Calling.            (line    6)
* inferior tty:                          Input/Output.       (line   44)
* inferiors in Python:                   Inferiors In Python.
                                                             (line    6)
* infinite recursion in user-defined commands: Define.       (line  135)
* info for known .debug_gdb_scripts-loaded scripts: Maintenance Commands.
                                                             (line  420)
* info for known object files:           Maintenance Commands.
                                                             (line  405)
* info line, repeated calls:             Machine Code.       (line   41)
* info proc cmdline:                     Process Information.
                                                             (line   41)
* info proc cwd:                         Process Information.
                                                             (line   45)
* info proc exe:                         Process Information.
                                                             (line   49)
* info proc files:                       Process Information.
                                                             (line   53)
* information about static tracepoint markers: Listing Static Tracepoint Markers.
                                                             (line    6)
* information about tracepoints:         Listing Tracepoints.
                                                             (line    6)
* inheritance:                           Debugging C Plus Plus.
                                                             (line   26)
* init file:                             Startup.            (line   23)
* init file name:                        Initialization Files.
                                                             (line    6)
* initial frame:                         Frames.             (line   12)
* initialization file:                   Initialization Files.
                                                             (line   34)
* initialization file, readline:         Readline Init File. (line    6)
* injecting code:                        Compiling and Injecting Code.
                                                             (line    6)
* inline functions, debugging:           Inline Functions.   (line    6)
* innermost frame:                       Frames.             (line   12)
* input syntax for GDB/MI:               GDB/MI Input Syntax.
                                                             (line    6)
* installation:                          Installing GDB.     (line    6)
* instructions, assembly:                Machine Code.       (line   44)
* integral datatypes, in file-i/o protocol: Integral Datatypes.
                                                             (line    6)
* Intel:                                 Remote Stub.        (line   56)
* Intel disassembly flavor:              Machine Code.       (line  266)
* Intel Memory Protection Extensions (MPX).: i386.           (line   21)
* Intel MPX boundary violations:         Signals.            (line  197)
* Intel Processor Trace:                 Process Record and Replay.
                                                             (line   75)
* interaction, readline:                 Readline Interaction.
                                                             (line    6)
* internal commands:                     Maintenance Commands.
                                                             (line    6)
* internal errors, control of GDB behavior: Maintenance Commands.
                                                             (line  237)
* internal GDB breakpoints:              Set Breaks.         (line  482)
* interrupt:                             Quitting GDB.       (line   15)
* interrupt debuggee on MS-Windows:      Cygwin Native.      (line    9)
* interrupt remote programs:             Remote Configuration.
                                                             (line   36)
* interrupt remote programs <1>:         Remote Configuration.
                                                             (line  108)
* interrupting remote programs:          Connecting.         (line  246)
* interrupting remote targets:           Bootstrapping.      (line   25)
* interrupts (remote protocol):          Interrupts.         (line    6)
* invalid input:                         Bug Criteria.       (line   16)
* invoke another interpreter:            Interpreters.       (line   39)
* ipa protocol commands:                 IPA Protocol Commands.
                                                             (line    6)
* ipa protocol objects:                  IPA Protocol Objects.
                                                             (line    6)
* isatty, file-i/o system call:          isatty.             (line    6)
* JIT compilation interface:             JIT Interface.      (line    6)
* JIT debug info reader:                 Custom Debug Info.  (line    6)
* just-in-time compilation:              JIT Interface.      (line    6)
* just-in-time compilation, debugging messages: Debugging Output.
                                                             (line  151)
* k packet:                              Packets.            (line  217)
* kernel crash dump:                     BSD libkvm Interface.
                                                             (line    6)
* kernel memory image:                   BSD libkvm Interface.
                                                             (line    6)
* kill ring:                             Readline Killing Commands.
                                                             (line   18)
* killing text:                          Readline Killing Commands.
                                                             (line    6)
* languages:                             Languages.          (line    6)
* last tracepoint number:                Create and Delete Tracepoints.
                                                             (line  124)
* latest breakpoint:                     Set Breaks.         (line    6)
* lazy strings in guile:                 Lazy Strings In Guile.
                                                             (line    6)
* lazy strings in python:                Lazy Strings In Python.
                                                             (line    6)
* LDT:                                   DJGPP Native.       (line   24)
* leaving GDB:                           Quitting GDB.       (line    6)
* libkvm:                                BSD libkvm Interface.
                                                             (line    6)
* library list format, remote protocol:  Library List Format.
                                                             (line    6)
* library list format, remote protocol <1>: Library List Format for SVR4 Targets.
                                                             (line    6)
* limit hardware breakpoints and watchpoints: Remote Configuration.
                                                             (line   79)
* limit hardware watchpoints length:     Remote Configuration.
                                                             (line   91)
* limit on number of printed array elements: Print Settings. (line  158)
* limits, in file-i/o protocol:          Limits.             (line    6)
* line tables in python:                 Line Tables In Python.
                                                             (line    6)
* line tables, listing GDB's internal:   Symbols.            (line  726)
* linespec locations:                    Linespec Locations. (line    6)
* Linux native targets:                  Debugging Output.   (line  156)
* list active threads, remote request:   General Query Packets.
                                                             (line  238)
* list of supported file-i/o calls:      List of Supported Calls.
                                                             (line    6)
* list output in GDB/MI:                 GDB/MI Output Syntax.
                                                             (line  117)
* list, how many lines to display:       List.               (line   30)
* listing GDB's internal line tables:    Symbols.            (line  726)
* listing GDB's internal symbol tables:  Symbols.            (line  679)
* listing machine instructions:          Machine Code.       (line   44)
* listing mapped overlays:               Overlay Commands.   (line   60)
* lists of breakpoints:                  Breakpoints.        (line   45)
* load address, overlay's:               How Overlays Work.  (line    6)
* load shared library:                   Files.              (line  337)
* load symbols from memory:              Files.              (line  193)
* local socket, target remote:           Connecting.         (line  147)
* local variables:                       Symbols.            (line  436)
* locate address:                        Output Formats.     (line   36)
* location resolution:                   Location Specifications.
                                                             (line   14)
* location spec:                         Location Specifications.
                                                             (line    6)
* lock scheduler:                        All-Stop Mode.      (line   37)
* locspec:                               Location Specifications.
                                                             (line    6)
* log output in GDB/MI:                  GDB/MI Output Syntax.
                                                             (line  113)
* logging file name:                     Logging Output.     (line   10)
* logging GDB output:                    Logging Output.     (line    6)
* look up of disassembler in Python:     Disassembly In Python.
                                                             (line  192)
* lseek flags, in file-i/o protocol:     Lseek Flags.        (line    6)
* lseek, file-i/o system call:           lseek.              (line    6)
* m packet:                              Packets.            (line  240)
* M packet:                              Packets.            (line  260)
* m680x0:                                Remote Stub.        (line   59)
* m68k-stub.c:                           Remote Stub.        (line   59)
* Mach-O symbols processing:             Debugging Output.   (line  168)
* machine instructions:                  Machine Code.       (line   44)
* macro definition, showing:             Macros.             (line   47)
* macro expansion, showing the results of preprocessor: Macros.
                                                             (line   29)
* macros, example of debugging with:     Macros.             (line   84)
* macros, from debug info:               Macros.             (line   47)
* macros, user-defined:                  Macros.             (line   60)
* mailing lists:                         GDB/MI Development and Front Ends.
                                                             (line   93)
* maintenance commands:                  Maintenance Commands.
                                                             (line    6)
* Man pages:                             Man Pages.          (line    6)
* managing frame filters:                Frame Filter Management.
                                                             (line    6)
* manual overlay debugging:              Overlay Commands.   (line   23)
* map an overlay:                        Overlay Commands.   (line   30)
* mapinfo list, QNX Neutrino:            Process Information.
                                                             (line  131)
* mapped address:                        How Overlays Work.  (line    6)
* mapped overlays:                       How Overlays Work.  (line    6)
* markers, static tracepoints:           Set Tracepoints.    (line   28)
* maximum value for offset of closest symbol: Print Settings.
                                                             (line   70)
* member functions:                      C Plus Plus Expressions.
                                                             (line   16)
* memory address space mappings:         Process Information.
                                                             (line   80)
* memory address space mappings <1>:     Maintenance Commands.
                                                             (line  317)
* memory map format:                     Memory Map Format.  (line    6)
* memory region attributes:              Memory Region Attributes.
                                                             (line    6)
* memory tag types, ARM:                 ARM Memory Tag Types.
                                                             (line    6)
* memory tracing:                        Breakpoints.        (line   17)
* memory transfer, in file-i/o protocol: Memory Transfer.    (line    6)
* memory used by commands:               Maintenance Commands.
                                                             (line  694)
* memory used for symbol tables:         Files.              (line  325)
* memory, alignment and size of remote accesses: Packets.    (line  248)
* memory, viewing as typed object:       Expressions.        (line   41)
* MI commands in python:                 GDB/MI Commands In Python.
                                                             (line    6)
* mi interpreter:                        Interpreters.       (line   26)
* mi1 interpreter:                       Interpreters.       (line   37)
* mi2 interpreter:                       Interpreters.       (line   34)
* mi3 interpreter:                       Interpreters.       (line   31)
* minimal language:                      Unsupported Languages.
                                                             (line    6)
* minimal symbol dump:                   Symbols.            (line  653)
* Minimal symbols and DLLs:              Non-debug DLL Symbols.
                                                             (line    6)
* MIPS addresses, masking:               MIPS.               (line   80)
* MIPS remote floating point:            MIPS Embedded.      (line   13)
* MIPS stack:                            MIPS.               (line    6)
* miscellaneous settings:                Other Misc Settings.
                                                             (line    6)
* MMX registers (x86):                   Registers.          (line   76)
* mode_t values, in file-i/o protocol:   mode_t Values.      (line    6)
* Modula-2:                              Summary.            (line   29)
* Modula-2 built-ins:                    Built-In Func/Proc. (line    6)
* Modula-2 checks:                       M2 Checks.          (line    6)
* Modula-2 constants:                    Built-In Func/Proc. (line  114)
* Modula-2 defaults:                     M2 Defaults.        (line    6)
* Modula-2 operators:                    M2 Operators.       (line    6)
* Modula-2 types:                        M2 Types.           (line    6)
* Modula-2, deviations from:             Deviations.         (line    6)
* Modula-2, GDB support:                 Modula-2.           (line    6)
* module functions and variables:        Symbols.            (line  589)
* modules:                               Symbols.            (line  581)
* monitor commands, for gdbserver:       Server.             (line  218)
* Motorola 680x0:                        Remote Stub.        (line   59)
* MS Windows debugging:                  Cygwin Native.      (line    6)
* MS-DOS system info:                    DJGPP Native.       (line   19)
* MS-DOS-specific commands:              DJGPP Native.       (line    6)
* multiple locations, breakpoints:       Set Breaks.         (line  310)
* multiple processes:                    Forks.              (line    6)
* multiple targets:                      Active Targets.     (line    6)
* multiple threads:                      Threads.            (line    6)
* multiple threads, backtrace:           Backtrace.          (line   97)
* multiple-symbols menu:                 Ambiguous Expressions.
                                                             (line   51)
* multiprocess extensions, in remote protocol: General Query Packets.
                                                             (line  989)
* name a thread:                         Threads.            (line  254)
* names of symbols:                      Symbols.            (line   14)
* namespace in C++:                      C Plus Plus Expressions.
                                                             (line   20)
* native Cygwin debugging:               Cygwin Native.      (line    6)
* native DJGPP debugging:                DJGPP Native.       (line    6)
* native script auto-loading:            Auto-loading sequences.
                                                             (line    6)
* native target:                         Target Commands.    (line   85)
* negative breakpoint numbers:           Set Breaks.         (line  482)
* never read symbols:                    Files.              (line  101)
* New SYSTAG message:                    Threads.            (line   35)
* new user interface:                    Interpreters.       (line   68)
* Newlib OS ABI and its influence on the longjmp handling: ABI.
                                                             (line   11)
* Nios II architecture:                  Nios II.            (line    6)
* no debug info functions:               Calling.            (line   78)
* no debug info variables:               Variables.          (line  142)
* non-member C++ functions, set breakpoint in: Set Breaks.   (line  223)
* non-stop mode:                         Non-Stop Mode.      (line    6)
* non-stop mode, and process record and replay: Process Record and Replay.
                                                             (line  101)
* non-stop mode, and set displaced-stepping: Maintenance Commands.
                                                             (line  169)
* non-stop mode, remote request:         General Query Packets.
                                                             (line  452)
* noninvasive task options:              Hurd Native.        (line   72)
* notation, readline:                    Readline Bare Essentials.
                                                             (line    6)
* notational conventions, for GDB/MI:    GDB/MI.             (line   52)
* notification packets:                  Notification Packets.
                                                             (line    6)
* notify output in GDB/MI:               GDB/MI Output Syntax.
                                                             (line  102)
* NULL elements in arrays:               Print Settings.     (line  437)
* number of array elements to print:     Print Settings.     (line  158)
* number representation:                 Numbers.            (line    6)
* numbers for breakpoints:               Breakpoints.        (line   38)
* object files, relocatable, reading symbols from: Files.    (line  146)
* Objective-C:                           Objective-C.        (line    6)
* Objective-C, classes and selectors:    Symbols.            (line  604)
* Objective-C, print objects:            The Print Command with Objective-C.
                                                             (line    6)
* OBJFILE-gdb.gdb:                       objfile-gdbdotext file.
                                                             (line    6)
* OBJFILE-gdb.py:                        objfile-gdbdotext file.
                                                             (line    6)
* OBJFILE-gdb.scm:                       objfile-gdbdotext file.
                                                             (line    6)
* objfiles in guile:                     Objfiles In Guile.  (line    6)
* objfiles in python:                    Objfiles In Python. (line    6)
* observer debugging info:               Debugging Output.   (line  182)
* octal escapes in strings:              Print Settings.     (line  484)
* online documentation:                  Help.               (line    6)
* opaque data types:                     Symbols.            (line  616)
* open flags, in file-i/o protocol:      Open Flags.         (line    6)
* open, file-i/o system call:            open.               (line    6)
* OpenCL C:                              OpenCL C.           (line    6)
* OpenCL C Datatypes:                    OpenCL C Datatypes. (line    6)
* OpenCL C Expressions:                  OpenCL C Expressions.
                                                             (line    6)
* OpenCL C Operators:                    OpenCL C Operators. (line    6)
* OpenRISC 1000:                         OpenRISC 1000.      (line    6)
* operate-and-get-next:                  Editing.            (line   32)
* operating system information:          Operating System Information.
                                                             (line    6)
* operating system information, process list: Process list.  (line    6)
* optimized code, debugging:             Optimized Code.     (line    6)
* optimized code, wrong values of variables: Variables.      (line  106)
* optimized out value in guile:          Values From Inferior In Guile.
                                                             (line  102)
* optimized out value in Python:         Values From Inferior.
                                                             (line   70)
* optimized out, in backtrace:           Backtrace.          (line  133)
* optional debugging messages:           Debugging Output.   (line    6)
* optional warnings:                     Messages/Warnings.  (line    6)
* OS ABI:                                ABI.                (line   11)
* OS information:                        OS Information.     (line    6)
* out-of-line single-stepping:           Maintenance Commands.
                                                             (line  152)
* outermost frame:                       Frames.             (line   12)
* output formats:                        Output Formats.     (line    6)
* output syntax of GDB/MI:               GDB/MI Output Syntax.
                                                             (line    6)
* overlay area:                          How Overlays Work.  (line    6)
* overlay example program:               Overlay Sample Program.
                                                             (line    6)
* overlays:                              Overlays.           (line    6)
* overlays, setting breakpoints in:      Overlay Commands.   (line   91)
* overloaded functions, calling:         C Plus Plus Expressions.
                                                             (line   26)
* overloaded functions, overload resolution: Debugging C Plus Plus.
                                                             (line   59)
* overloading in C++:                    Debugging C Plus Plus.
                                                             (line   15)
* overloading, Ada:                      Overloading support for Ada.
                                                             (line    6)
* p packet:                              Packets.            (line  272)
* P packet:                              Packets.            (line  285)
* packet acknowledgment, for GDB remote: Packet Acknowledgment.
                                                             (line    6)
* packet size, remote protocol:          General Query Packets.
                                                             (line  895)
* packets, notification:                 Notification Packets.
                                                             (line    6)
* packets, reporting on stdout:          Debugging Output.   (line  203)
* packets, tracepoint:                   Tracepoint Packets. (line    6)
* page size:                             Screen Size.        (line    6)
* page tables display (MS-DOS):          DJGPP Native.       (line   55)
* pagination:                            Screen Size.        (line    6)
* parameters in guile:                   Parameters In Guile.
                                                             (line    6)
* parameters in python:                  Parameters In Python.
                                                             (line    6)
* partial symbol dump:                   Symbols.            (line  653)
* partial symbol tables, listing GDB's internal: Symbols.    (line  679)
* Pascal:                                Summary.            (line   35)
* Pascal objects, static members display: Print Settings.    (line  599)
* Pascal support in GDB, limitations:    Pascal.             (line    6)
* pass signals to inferior, remote request: General Query Packets.
                                                             (line  513)
* patching binaries:                     Patching.           (line    6)
* patching object files:                 Files.              (line   26)
* pause current task (GNU Hurd):         Hurd Native.        (line   48)
* pause current thread (GNU Hurd):       Hurd Native.        (line   90)
* pauses in output:                      Screen Size.        (line    6)
* pending breakpoints:                   Set Breaks.         (line  352)
* physical address from linear address:  DJGPP Native.       (line   80)
* physname:                              Debugging Output.   (line   39)
* pipe, target remote to:                Connecting.         (line  234)
* pipes:                                 Starting.           (line   64)
* pointer values, in file-i/o protocol:  Pointer Values.     (line    6)
* pointer, finding referent:             Print Settings.     (line   80)
* port rights, GNU Hurd:                 Hurd Native.        (line   84)
* port sets, GNU Hurd:                   Hurd Native.        (line   84)
* PowerPC architecture:                  PowerPC.            (line    6)
* prefix for data files:                 Data Files.         (line    6)
* prefix for executable and shared library file names: Files.
                                                             (line  396)
* premature return from system calls:    Interrupted System Calls.
                                                             (line    6)
* preprocessor macro expansion, showing the results of: Macros.
                                                             (line   29)
* pretty print arrays:                   Print Settings.     (line  115)
* pretty print C++ virtual function tables: Print Settings.  (line  610)
* pretty-printer commands:               Pretty-Printer Commands.
                                                             (line    6)
* print all frame argument values:       Print Settings.     (line  171)
* print an Objective-C object description: The Print Command with Objective-C.
                                                             (line   11)
* print array indexes:                   Print Settings.     (line  125)
* print binary values in groups of four bits: Print Settings.
                                                             (line  141)
* print frame argument values for scalars only: Print Settings.
                                                             (line  171)
* print list of auto-loaded canned sequences of commands scripts: Auto-loading sequences.
                                                             (line   21)
* print list of auto-loaded Guile scripts: Guile Auto-loading.
                                                             (line   23)
* print list of auto-loaded Python scripts: Python Auto-loading.
                                                             (line   23)
* print messages on inferior start and exit: Inferiors Connections and Programs.
                                                             (line  181)
* print messages on thread start and exit: Threads.          (line  279)
* print messages when symbols are loaded: Symbols.           (line  634)
* print settings:                        Print Settings.     (line    6)
* print structures in indented form:     Print Settings.     (line  446)
* print/don't print memory addresses:    Print Settings.     (line   13)
* printing byte arrays:                  Output Formats.     (line   62)
* printing data:                         Data.               (line    6)
* printing frame argument values:        Print Settings.     (line  171)
* printing frame information:            Print Settings.     (line  331)
* printing memory tag violation information: Print Settings. (line  424)
* printing nested structures:            Print Settings.     (line  379)
* printing strings:                      Output Formats.     (line   62)
* probe static tracepoint marker:        Create and Delete Tracepoints.
                                                             (line   75)
* probing markers, static tracepoints:   Set Tracepoints.    (line   28)
* process detailed status information:   Process Information.
                                                             (line   89)
* process ID:                            Process Information.
                                                             (line   25)
* process info via /proc:                Process Information.
                                                             (line    6)
* process list, QNX Neutrino:            Process Information.
                                                             (line  127)
* process record and replay:             Process Record and Replay.
                                                             (line    6)
* process status register:               Registers.          (line   31)
* processes, multiple:                   Forks.              (line    6)
* procfs API calls:                      Process Information.
                                                             (line  106)
* profiling GDB:                         Maintenance Commands.
                                                             (line  541)
* program counter register:              Registers.          (line   31)
* program entry point:                   Backtrace.          (line  155)
* programming in guile:                  Guile API.          (line    6)
* programming in python:                 Python API.         (line    6)
* progspaces in guile:                   Progspaces In Guile.
                                                             (line    6)
* progspaces in python:                  Progspaces In Python.
                                                             (line    6)
* prologue-end:                          Symbols.            (line  780)
* prompt:                                Prompt.             (line    6)
* protocol basics, file-i/o:             Protocol Basics.    (line    6)
* protocol, GDB remote serial:           Overview.           (line   14)
* protocol-specific representation of datatypes, in file-i/o protocol: Protocol-specific Representation of Datatypes.
                                                             (line    6)
* python api:                            Python API.         (line    6)
* Python architectures:                  Architectures In Python.
                                                             (line    6)
* Python auto-loading:                   Python Auto-loading.
                                                             (line    6)
* python commands:                       Python Commands.    (line    6)
* python commands, CLI:                  CLI Commands In Python.
                                                             (line    6)
* python commands, GDB/MI:               GDB/MI Commands In Python.
                                                             (line    6)
* python convenience functions:          Functions In Python.
                                                             (line    6)
* python directory:                      Python.             (line   10)
* python exceptions:                     Exception Handling. (line    6)
* python finish breakpoints:             Finish Breakpoints in Python.
                                                             (line    6)
* python functions:                      Basic Python.       (line   28)
* python instruction disassembly:        Disassembly In Python.
                                                             (line    6)
* python module:                         Basic Python.       (line   28)
* python modules:                        Python modules.     (line    6)
* python pagination:                     Basic Python.       (line    6)
* python parameters:                     Parameters In Python.
                                                             (line    6)
* python pretty printing api:            Pretty Printing API.
                                                             (line    6)
* python scripting:                      Python.             (line    6)
* python stdout:                         Basic Python.       (line    6)
* Python TUI Windows:                    TUI Windows In Python.
                                                             (line    6)
* Python, working with types:            Types In Python.    (line    6)
* python, working with values from inferior: Values From Inferior.
                                                             (line    6)
* q packet:                              Packets.            (line  297)
* Q packet:                              Packets.            (line  297)
* QAllow packet:                         General Query Packets.
                                                             (line   44)
* qAttached packet:                      General Query Packets.
                                                             (line 1475)
* qC packet:                             General Query Packets.
                                                             (line   55)
* QCatchSyscalls packet:                 General Query Packets.
                                                             (line  474)
* qCRC packet:                           General Query Packets.
                                                             (line   65)
* QDisableRandomization packet:          General Query Packets.
                                                             (line   84)
* QEnvironmentHexEncoded packet:         General Query Packets.
                                                             (line  144)
* QEnvironmentReset packet:              General Query Packets.
                                                             (line  197)
* QEnvironmentUnset packet:              General Query Packets.
                                                             (line  173)
* qfThreadInfo packet:                   General Query Packets.
                                                             (line  238)
* qGetTIBAddr packet:                    General Query Packets.
                                                             (line  303)
* qGetTLSAddr packet:                    General Query Packets.
                                                             (line  271)
* qMemTags packet:                       General Query Packets.
                                                             (line  342)
* QMemTags packet:                       General Query Packets.
                                                             (line  370)
* QNonStop packet:                       General Query Packets.
                                                             (line  452)
* qOffsets packet:                       General Query Packets.
                                                             (line  415)
* qP packet:                             General Query Packets.
                                                             (line  442)
* QPassSignals packet:                   General Query Packets.
                                                             (line  513)
* QProgramSignals packet:                General Query Packets.
                                                             (line  542)
* qRcmd packet:                          General Query Packets.
                                                             (line  609)
* qSearch memory packet:                 General Query Packets.
                                                             (line  632)
* QSetWorkingDir packet:                 General Query Packets.
                                                             (line  219)
* QStartNoAckMode packet:                General Query Packets.
                                                             (line  649)
* QStartupWithShell packet:              General Query Packets.
                                                             (line  114)
* qsThreadInfo packet:                   General Query Packets.
                                                             (line  238)
* qSupported packet:                     General Query Packets.
                                                             (line  663)
* qSymbol packet:                        General Query Packets.
                                                             (line 1119)
* qTBuffer packet:                       Tracepoint Packets. (line  393)
* QTBuffer size packet:                  Tracepoint Packets. (line  406)
* QTDisable packet:                      Tracepoint Packets. (line  209)
* QTDisconnected packet:                 Tracepoint Packets. (line  228)
* QTDP packet:                           Tracepoint Packets. (line   10)
* QTDPsrc packet:                        Tracepoint Packets. (line   90)
* QTDV packet:                           Tracepoint Packets. (line  121)
* QTEnable packet:                       Tracepoint Packets. (line  204)
* qTfP packet:                           Tracepoint Packets. (line  335)
* QTFrame packet:                        Tracepoint Packets. (line  133)
* qTfSTM packet:                         Tracepoint Packets. (line  352)
* qTfV packet:                           Tracepoint Packets. (line  343)
* QThreadEvents packet:                  General Query Packets.
                                                             (line  582)
* qThreadExtraInfo packet:               General Query Packets.
                                                             (line 1162)
* QTinit packet:                         Tracepoint Packets. (line  214)
* qTMinFTPILen packet:                   Tracepoint Packets. (line  171)
* QTNotes packet:                        Tracepoint Packets. (line  411)
* qTP packet:                            Tracepoint Packets. (line  307)
* QTro packet:                           Tracepoint Packets. (line  217)
* QTSave packet:                         Tracepoint Packets. (line  387)
* qTsP packet:                           Tracepoint Packets. (line  336)
* qTsSTM packet:                         Tracepoint Packets. (line  352)
* QTStart packet:                        Tracepoint Packets. (line  195)
* qTStatus packet:                       Tracepoint Packets. (line  234)
* qTSTMat packet:                        Tracepoint Packets. (line  381)
* QTStop packet:                         Tracepoint Packets. (line  201)
* qTsV packet:                           Tracepoint Packets. (line  344)
* qTV packet:                            Tracepoint Packets. (line  318)
* qualified thread ID:                   Threads.            (line   52)
* query attached, remote request:        General Query Packets.
                                                             (line 1475)
* quotes in commands:                    Completion.         (line   94)
* quoting Ada internal identifiers:      Additions to Ada.   (line   86)
* quoting names:                         Symbols.            (line   14)
* qXfer packet:                          General Query Packets.
                                                             (line 1199)
* r packet:                              Packets.            (line  301)
* R packet:                              Packets.            (line  306)
* range checking:                        Type Checking.      (line   45)
* range stepping:                        Continuing and Stepping.
                                                             (line  217)
* ranged breakpoint:                     PowerPC Embedded.   (line   33)
* ranges of breakpoints:                 Breakpoints.        (line   45)
* Ravenscar Profile:                     Ravenscar Profile.  (line    6)
* Ravenscar thread:                      Ravenscar Profile.  (line   26)
* raw printing:                          Output Formats.     (line   77)
* read special object, remote request:   General Query Packets.
                                                             (line 1199)
* read, file-i/o system call:            read.               (line    6)
* read-only sections:                    Files.              (line  275)
* reading symbols from relocatable object files: Files.      (line  146)
* reading symbols immediately:           Files.              (line   94)
* readline:                              Editing.            (line    6)
* Readline application name:             Editing.            (line   29)
* receive rights, GNU Hurd:              Hurd Native.        (line   84)
* recent tracepoint number:              Create and Delete Tracepoints.
                                                             (line  124)
* record aggregates (Ada):               Omissions from Ada. (line   42)
* record mode:                           Process Record and Replay.
                                                             (line   19)
* record serial communications on file:  Remote Configuration.
                                                             (line   64)
* recording a session script:            Bug Reporting.      (line   93)
* recording inferior's execution and replaying it: Process Record and Replay.
                                                             (line    6)
* recordings in python:                  Recordings In Python.
                                                             (line    6)
* redirection:                           Input/Output.       (line    6)
* reference card:                        Formatting Documentation.
                                                             (line    6)
* reference declarations:                C Plus Plus Expressions.
                                                             (line   50)
* register cache, flushing:              Maintenance Commands.
                                                             (line  387)
* register packet format, MIPS:          MIPS Register packet Format.
                                                             (line    6)
* registers:                             Registers.          (line    6)
* Registers In Python:                   Registers In Python.
                                                             (line    6)
* regular expression:                    Set Breaks.         (line  200)
* reloading the overlay table:           Overlay Commands.   (line   52)
* relocatable object files, reading symbols from: Files.     (line  146)
* remote async notification debugging info: Debugging Output.
                                                             (line  175)
* remote connection commands:            Connecting.         (line  127)
* remote connection without stubs:       Server.             (line    6)
* remote debugging:                      Remote Debugging.   (line    6)
* remote debugging, connecting:          Connecting.         (line    6)
* remote debugging, detach and program exit: Connecting.     (line   19)
* remote debugging, symbol files:        Connecting.         (line   97)
* remote debugging, types of connections: Connecting.        (line    6)
* remote memory comparison:              Memory.             (line  159)
* remote packets, enabling and disabling: Remote Configuration.
                                                             (line  159)
* remote programs, interrupting:         Connecting.         (line  246)
* remote protocol debugging:             Debugging Output.   (line  203)
* remote protocol, binary data:          Overview.           (line   63)
* remote protocol, field separator:      Overview.           (line   55)
* remote query requests:                 General Query Packets.
                                                             (line    6)
* remote serial debugging summary:       Debug Session.      (line    6)
* remote serial debugging, overview:     Remote Stub.        (line   14)
* remote serial protocol:                Overview.           (line   14)
* remote serial stub:                    Stub Contents.      (line    6)
* remote serial stub list:               Remote Stub.        (line   53)
* remote serial stub, initialization:    Stub Contents.      (line   10)
* remote serial stub, main routine:      Stub Contents.      (line   15)
* remote stub, example:                  Remote Stub.        (line    6)
* remote stub, support routines:         Bootstrapping.      (line    6)
* remote target:                         Target Commands.    (line   58)
* remote target, file transfer:          File Transfer.      (line    6)
* remote target, limit break- and watchpoints: Remote Configuration.
                                                             (line   79)
* remote target, limit watchpoints length: Remote Configuration.
                                                             (line   91)
* remote timeout:                        Remote Configuration.
                                                             (line   72)
* remove actions from a tracepoint:      Tracepoint Actions. (line   21)
* remove duplicate history:              Command History.    (line   69)
* rename, file-i/o system call:          rename.             (line    6)
* Renesas:                               Remote Stub.        (line   62)
* repeated array elements:               Print Settings.     (line  365)
* repeating command sequences:           Command Syntax.     (line   41)
* repeating commands:                    Command Syntax.     (line   21)
* replay log events, remote reply:       Stop Reply Packets. (line   70)
* replay mode:                           Process Record and Replay.
                                                             (line   10)
* reporting bugs in GDB:                 GDB Bugs.           (line    6)
* reprint the last value:                Data.               (line  120)
* reprint the last value <1>:            Compiling and Injecting Code.
                                                             (line   74)
* reset environment, remote request:     General Query Packets.
                                                             (line  197)
* resolution of location spec:           Location Specifications.
                                                             (line   14)
* resources used by commands:            Maintenance Commands.
                                                             (line  612)
* response time, MIPS debugging:         MIPS.               (line   10)
* restart:                               Checkpoint/Restart. (line    6)
* restore data from a file:              Dump/Restore Files. (line    6)
* restrictions on Go expressions:        Go.                 (line   35)
* result records in GDB/MI:              GDB/MI Result Records.
                                                             (line    6)
* resume threads of multiple processes simultaneously: All-Stop Mode.
                                                             (line   66)
* resuming execution:                    Continuing and Stepping.
                                                             (line    6)
* returning from a function:             Returning.          (line    6)
* reverse execution:                     Reverse Execution.  (line    6)
* rewind program state:                  Checkpoint/Restart. (line    6)
* run to first instruction:              Starting.           (line  114)
* run to main procedure:                 Starting.           (line   81)
* run until specified location:          Continuing and Stepping.
                                                             (line  124)
* running:                               Starting.           (line    6)
* running programs backward:             Reverse Execution.  (line    6)
* s packet:                              Packets.            (line  313)
* S packet:                              Packets.            (line  322)
* S12Z support:                          S12Z.               (line    6)
* save breakpoints to a file for future sessions: Save Breakpoints.
                                                             (line    9)
* save command history:                  Command History.    (line   44)
* save GDB output to a file:             Logging Output.     (line    6)
* save tracepoints for future sessions:  save tracepoints.   (line    6)
* scheduler locking mode:                All-Stop Mode.      (line   37)
* scope:                                 M2 Scope.           (line    6)
* screen size:                           Screen Size.        (line    6)
* scripting commands:                    Command Files.      (line    6)
* scripting with guile:                  Guile.              (line    6)
* scripting with python:                 Python.             (line    6)
* search for a thread:                   Threads.            (line  265)
* search order for disassembler in Python: Disassembly In Python.
                                                             (line  192)
* search path for libthread_db:          Threads.            (line  300)
* searching memory:                      Searching Memory.   (line    6)
* searching memory, in remote debugging: General Query Packets.
                                                             (line  632)
* searching source files:                Search.             (line    6)
* section offsets, remote request:       General Query Packets.
                                                             (line  415)
* segment descriptor tables:             DJGPP Native.       (line   24)
* select Ctrl-C, BREAK or BREAK-g:       Remote Configuration.
                                                             (line  108)
* select trace snapshot:                 tfind.              (line    6)
* selected frame:                        Stack.              (line   19)
* selecting guile pretty-printers:       Selecting Guile Pretty-Printers.
                                                             (line    6)
* selecting python pretty-printers:      Selecting Pretty-Printers.
                                                             (line    6)
* self tests:                            Maintenance Commands.
                                                             (line  459)
* self tests <1>:                        Maintenance Commands.
                                                             (line  465)
* self tests <2>:                        Maintenance Commands.
                                                             (line  469)
* semaphores on static probe points:     Static Probe Points.
                                                             (line   20)
* send command to remote monitor:        Connecting.         (line  279)
* send command to simulator:             Embedded Processors.
                                                             (line    9)
* send interrupt-sequence on start:      Remote Configuration.
                                                             (line  121)
* send rights, GNU Hurd:                 Hurd Native.        (line   84)
* send the output of a gdb command to a shell command: Shell Commands.
                                                             (line   26)
* sending files to remote systems:       File Transfer.      (line    6)
* separate debug sections:               MiniDebugInfo.      (line    6)
* separate debugging information files:  Separate Debug Files.
                                                             (line    6)
* sequence-id, for GDB remote:           Overview.           (line   30)
* serial connections, debugging:         Debugging Output.   (line  203)
* serial line, target remote:            Connecting.         (line  136)
* serial protocol, GDB remote:           Overview.           (line   14)
* server prefix:                         Server Prefix.      (line    6)
* server, command prefix:                Command History.    (line   20)
* set ABI for MIPS:                      MIPS.               (line   32)
* set breakpoints in many functions:     Set Breaks.         (line  200)
* set breakpoints on all functions:      Set Breaks.         (line  227)
* set environment variable, remote request: General Query Packets.
                                                             (line  144)
* set exec-file-mismatch:                Attach.             (line   34)
* set fast tracepoint:                   Create and Delete Tracepoints.
                                                             (line   50)
* set inferior controlling terminal:     Input/Output.       (line   44)
* set static tracepoint:                 Create and Delete Tracepoints.
                                                             (line   75)
* set tdesc filename:                    Retrieving Descriptions.
                                                             (line   18)
* set tracepoint:                        Create and Delete Tracepoints.
                                                             (line    6)
* set working directory, remote request: General Query Packets.
                                                             (line  219)
* setting variables:                     Assignment.         (line    6)
* setting watchpoints:                   Set Watchpoints.    (line    6)
* settings:                              Command Settings.   (line   39)
* SH:                                    Remote Stub.        (line   62)
* sh-stub.c:                             Remote Stub.        (line   62)
* shared libraries:                      Files.              (line  297)
* shared library events, remote reply:   Stop Reply Packets. (line   65)
* shell command, exit code:              Convenience Vars.   (line  192)
* shell command, exit signal:            Convenience Vars.   (line  192)
* shell escape:                          Shell Commands.     (line   10)
* show all convenience functions:        Convenience Funs.   (line  228)
* show all user variables and functions: Convenience Vars.   (line   37)
* show exec-file-mismatch:               Attach.             (line   44)
* show inferior's working directory:     Working Directory.  (line   27)
* show last commands:                    Command History.    (line  110)
* show tdesc filename:                   Retrieving Descriptions.
                                                             (line   25)
* signals:                               Signals.            (line    6)
* signals the inferior may see, remote request: General Query Packets.
                                                             (line  542)
* SIGQUIT signal, dump core of GDB:      Maintenance Commands.
                                                             (line  209)
* SingleKey keymap name:                 TUI Single Key Mode.
                                                             (line   53)
* size of remote memory accesses:        Packets.            (line  248)
* size of screen:                        Screen Size.        (line    6)
* skipping over files via glob-style patterns: Skipping Over Functions and Files.
                                                             (line   55)
* skipping over functions and files:     Skipping Over Functions and Files.
                                                             (line    6)
* skipping over functions via regular expressions: Skipping Over Functions and Files.
                                                             (line   68)
* snapshot of a process:                 Checkpoint/Restart. (line    6)
* software watchpoints:                  Set Watchpoints.    (line   31)
* source code, caching:                  Maintenance Commands.
                                                             (line  394)
* source code, disable access:           Disable Reading Source.
                                                             (line    6)
* source file and line of a symbol:      Print Settings.     (line   50)
* source line and its code address:      Machine Code.       (line    6)
* source location:                       Location Specifications.
                                                             (line    6)
* source path:                           Source Path.        (line    6)
* Sparc:                                 Remote Stub.        (line   65)
* sparc-stub.c:                          Remote Stub.        (line   65)
* Sparc64 support:                       Sparc64.            (line    6)
* sparcl-stub.c:                         Remote Stub.        (line   68)
* SparcLite:                             Remote Stub.        (line   68)
* Special Fortran commands:              Special Fortran Commands.
                                                             (line    6)
* specifying location:                   Location Specifications.
                                                             (line    6)
* SSE registers (x86):                   Registers.          (line   76)
* stack frame:                           Frames.             (line    6)
* stack on Alpha:                        MIPS.               (line    6)
* stack on MIPS:                         MIPS.               (line    6)
* stack pointer register:                Registers.          (line   31)
* stacking targets:                      Active Targets.     (line    6)
* standard registers:                    Registers.          (line   31)
* start a new independent interpreter:   Interpreters.       (line   52)
* start a new trace experiment:          Starting and Stopping Trace Experiments.
                                                             (line    6)
* starting:                              Starting.           (line    6)
* startup code, and backtrace:           Backtrace.          (line  155)
* startup with shell, remote request:    General Query Packets.
                                                             (line  114)
* stat, file-i/o system call:            stat/fstat.         (line    6)
* static members of C++ objects:         Print Settings.     (line  588)
* static members of Pascal objects:      Print Settings.     (line  599)
* static probe point, DTrace:            Static Probe Points.
                                                             (line    6)
* static probe point, SystemTap:         Static Probe Points.
                                                             (line    6)
* static tracepoints:                    Set Tracepoints.    (line   28)
* static tracepoints, in remote protocol: General Query Packets.
                                                             (line 1037)
* static tracepoints, setting:           Create and Delete Tracepoints.
                                                             (line   75)
* status of trace data collection:       Starting and Stopping Trace Experiments.
                                                             (line   27)
* status output in GDB/MI:               GDB/MI Output Syntax.
                                                             (line   94)
* stepping:                              Continuing and Stepping.
                                                             (line    6)
* stepping and signal handlers:          Signals.            (line  106)
* stepping into functions with no line info: Continuing and Stepping.
                                                             (line   92)
* stop a running trace experiment:       Starting and Stopping Trace Experiments.
                                                             (line   16)
* stop on C++ exceptions:                Set Catchpoints.    (line   16)
* stop reply packets:                    Stop Reply Packets. (line    6)
* stopped threads:                       Thread Stops.       (line    6)
* store memory tags:                     General Query Packets.
                                                             (line  370)
* stream records in GDB/MI:              GDB/MI Stream Records.
                                                             (line    6)
* string tracing, in remote protocol:    General Query Packets.
                                                             (line 1054)
* struct gdb_reader_funcs:               Writing JIT Debug Info Readers.
                                                             (line   22)
* struct gdb_symbol_callbacks:           Writing JIT Debug Info Readers.
                                                             (line   43)
* struct gdb_unwind_callbacks:           Writing JIT Debug Info Readers.
                                                             (line   43)
* struct return convention:              i386.               (line    7)
* struct stat, in file-i/o protocol:     struct stat.        (line    6)
* struct timeval, in file-i/o protocol:  struct timeval.     (line    6)
* struct/union returned in registers:    i386.               (line    7)
* structure field name completion:       Completion.         (line  146)
* stub example, remote debugging:        Remote Stub.        (line    6)
* stupid questions:                      Messages/Warnings.  (line   49)
* styling:                               Output Styling.     (line    6)
* Super-H:                               Super-H.            (line    6)
* supported GDB/MI features, list:       GDB/MI Support Commands.
                                                             (line   57)
* supported packets, remote query:       General Query Packets.
                                                             (line  663)
* switching threads:                     Threads.            (line    6)
* switching threads automatically:       All-Stop Mode.      (line   28)
* symbol cache size:                     Symbols.            (line  756)
* symbol cache, flushing:                Symbols.            (line  772)
* symbol cache, printing its contents:   Symbols.            (line  764)
* symbol cache, printing usage statistics: Symbols.          (line  768)
* symbol decoding style, C++:            Print Settings.     (line  558)
* symbol dump:                           Symbols.            (line  653)
* symbol file functions:                 Debugging Output.   (line  251)
* symbol files, remote debugging:        Connecting.         (line   97)
* symbol from address:                   Symbols.            (line  108)
* symbol lookup:                         Debugging Output.   (line  243)
* symbol lookup, remote request:         General Query Packets.
                                                             (line 1119)
* symbol names:                          Symbols.            (line   14)
* symbol table:                          Files.              (line    6)
* symbol table creation:                 Debugging Output.   (line  257)
* symbol tables in guile:                Symbol Tables In Guile.
                                                             (line    6)
* symbol tables in python:               Symbol Tables In Python.
                                                             (line    6)
* symbol tables, listing GDB's internal: Symbols.            (line  679)
* symbol, source file and line:          Print Settings.     (line   50)
* symbols in guile:                      Symbols In Guile.   (line    6)
* symbols in python:                     Symbols In Python.  (line    6)
* symbols, never read:                   Files.              (line  101)
* symbols, reading from relocatable object files: Files.     (line  146)
* symbols, reading immediately:          Files.              (line   94)
* Synopsys ARC:                          ARC.                (line    6)
* syscall DSO:                           Files.              (line  193)
* system calls and thread breakpoints:   Interrupted System Calls.
                                                             (line    6)
* system root, alternate:                Files.              (line  396)
* system, file-i/o system call:          system.             (line    6)
* system-wide configuration scripts:     System-wide Configuration Scripts.
                                                             (line    6)
* system-wide init file:                 System-wide configuration.
                                                             (line    6)
* t packet:                              Packets.            (line  332)
* T packet:                              Packets.            (line  337)
* T packet reply:                        Stop Reply Packets. (line   26)
* tail call frames, debugging:           Tail Call Frames.   (line    6)
* target architecture:                   Targets.            (line   17)
* target byte order:                     Byte Order.         (line    6)
* target character set:                  Character Sets.     (line    6)
* target debugging info:                 Debugging Output.   (line  265)
* target descriptions:                   Target Descriptions.
                                                             (line    6)
* target descriptions, AArch64 features: AArch64 Features.   (line    6)
* target descriptions, ARC Features:     ARC Features.       (line    6)
* target descriptions, ARM features:     ARM Features.       (line    6)
* target descriptions, enum types:       Enum Target Types.  (line    6)
* target descriptions, i386 features:    i386 Features.      (line    6)
* target descriptions, inclusion:        Target Description Format.
                                                             (line   53)
* target descriptions, LoongArch Features: LoongArch Features.
                                                             (line    6)
* target descriptions, M68K features:    M68K Features.      (line    6)
* target descriptions, MicroBlaze features: MicroBlaze Features.
                                                             (line    6)
* target descriptions, MIPS features:    MIPS Features.      (line    6)
* target descriptions, NDS32 features:   NDS32 Features.     (line    6)
* target descriptions, Nios II features: Nios II Features.   (line    6)
* target descriptions, OpenRISC 1000 features: OpenRISC 1000 Features.
                                                             (line    6)
* target descriptions, PowerPC features: PowerPC Features.   (line    6)
* target descriptions, predefined types: Predefined Target Types.
                                                             (line    6)
* target descriptions, RISC-V Features:  RISC-V Features.    (line    6)
* target descriptions, RX Features:      RX Features.        (line    6)
* target descriptions, S/390 features:   S/390 and System z Features.
                                                             (line    6)
* target descriptions, sparc32 features: Sparc Features.     (line    6)
* target descriptions, sparc64 features: Sparc Features.     (line    6)
* target descriptions, standard features: Standard Target Features.
                                                             (line    6)
* target descriptions, System z features: S/390 and System z Features.
                                                             (line    6)
* target descriptions, TIC6x features:   TIC6x Features.     (line    6)
* target descriptions, TMS320C6x features: TIC6x Features.   (line    6)
* target descriptions, XML format:       Target Description Format.
                                                             (line    6)
* target memory comparison:              Memory.             (line  159)
* target output in GDB/MI:               GDB/MI Output Syntax.
                                                             (line  110)
* target stack description:              Maintenance Commands.
                                                             (line  440)
* target-assisted range stepping:        Continuing and Stepping.
                                                             (line  217)
* task attributes (GNU Hurd):            Hurd Native.        (line   48)
* task breakpoints, in Ada:              Ada Tasks.          (line  181)
* task exception port, GNU Hurd:         Hurd Native.        (line   67)
* task suspend count:                    Hurd Native.        (line   59)
* task switching with program using Ravenscar Profile: Ravenscar Profile.
                                                             (line   10)
* TCP port, target remote:               Connecting.         (line  173)
* temporarily change settings:           Command Settings.   (line   39)
* terminal:                              Input/Output.       (line    6)
* Text User Interface:                   TUI.                (line    6)
* thread attributes info, remote request: General Query Packets.
                                                             (line 1162)
* thread breakpoints:                    Thread-Specific Breakpoints.
                                                             (line   10)
* thread breakpoints and system calls:   Interrupted System Calls.
                                                             (line    6)
* thread create event, remote reply:     Stop Reply Packets. (line  152)
* thread create/exit events, remote request: General Query Packets.
                                                             (line  582)
* thread default settings, GNU Hurd:     Hurd Native.        (line  130)
* thread exit event, remote reply:       Stop Reply Packets. (line  181)
* thread ID lists:                       Threads.            (line   65)
* thread identifier (GDB):               Threads.            (line   47)
* thread identifier (system):            Threads.            (line   35)
* thread info (Solaris):                 Threads.            (line  174)
* thread information, remote request:    General Query Packets.
                                                             (line  442)
* thread list format:                    Thread List Format. (line    6)
* thread number, per inferior:           Threads.            (line   47)
* thread properties, GNU Hurd:           Hurd Native.        (line   90)
* thread suspend count, GNU Hurd:        Hurd Native.        (line  109)
* THREAD-ID, in remote protocol:         Packets.            (line   20)
* threads and watchpoints:               Set Watchpoints.    (line  182)
* threads in python:                     Threads In Python.  (line    6)
* threads of execution:                  Threads.            (line    6)
* threads, automatic switching:          All-Stop Mode.      (line   28)
* threads, continuing:                   Thread Stops.       (line    6)
* threads, stopped:                      Thread Stops.       (line    6)
* time of command execution:             Maintenance Commands.
                                                             (line  699)
* timeout for commands:                  Maintenance Commands.
                                                             (line  766)
* timeout for serial communications:     Remote Configuration.
                                                             (line   72)
* timeout, for remote target connection: Remote Configuration.
                                                             (line  147)
* timestamping debugging info:           Debugging Output.   (line  273)
* trace experiment, status of:           Starting and Stopping Trace Experiments.
                                                             (line   27)
* trace file format:                     Trace File Format.  (line    6)
* trace files:                           Trace Files.        (line    6)
* trace state variable value, remote request: Tracepoint Packets.
                                                             (line  318)
* trace state variables:                 Trace State Variables.
                                                             (line    6)
* traceback:                             Backtrace.          (line    6)
* traceframe info format:                Traceframe Info Format.
                                                             (line    6)
* tracepoint actions:                    Tracepoint Actions. (line    6)
* tracepoint conditions:                 Tracepoint Conditions.
                                                             (line    6)
* tracepoint data, display:              tdump.              (line    6)
* tracepoint deletion:                   Create and Delete Tracepoints.
                                                             (line  127)
* tracepoint number:                     Create and Delete Tracepoints.
                                                             (line  124)
* tracepoint packets:                    Tracepoint Packets. (line    6)
* tracepoint pass count:                 Tracepoint Passcounts.
                                                             (line    6)
* tracepoint restrictions:               Tracepoint Restrictions.
                                                             (line    6)
* tracepoint status, remote request:     Tracepoint Packets. (line  307)
* tracepoint variables:                  Tracepoint Variables.
                                                             (line    6)
* tracepoints:                           Tracepoints.        (line    6)
* tracepoints support in gdbserver:      Server.             (line  272)
* trailing underscore, in Fortran symbols: Fortran.          (line    9)
* translating between character sets:    Character Sets.     (line    6)
* TUI:                                   TUI.                (line    6)
* TUI commands:                          TUI Commands.       (line    6)
* TUI configuration variables:           TUI Configuration.  (line    6)
* TUI key bindings:                      TUI Keys.           (line    6)
* TUI mouse support:                     TUI Mouse Support.  (line    6)
* TUI single key mode:                   TUI Single Key Mode.
                                                             (line    6)
* type casting memory:                   Expressions.        (line   41)
* type chain of a data type:             Maintenance Commands.
                                                             (line  452)
* type checking:                         Checks.             (line   24)
* type conversions in C++:               C Plus Plus Expressions.
                                                             (line   26)
* type printer:                          Type Printing API.  (line    9)
* type printing API for Python:          Type Printing API.  (line    6)
* types in guile:                        Types In Guile.     (line    6)
* types in Python:                       Types In Python.    (line    6)
* UDP port, target remote:               Connecting.         (line  222)
* union field name completion:           Completion.         (line  146)
* unions in structures, printing:        Print Settings.     (line  498)
* Unix domain socket:                    Connecting.         (line  147)
* unknown address, locating:             Output Formats.     (line   36)
* unknown type:                          Symbols.            (line  384)
* unlink, file-i/o system call:          unlink.             (line    6)
* unlinked object files:                 Files.              (line   26)
* unload symbols from shared libraries:  Files.              (line  358)
* unmap an overlay:                      Overlay Commands.   (line   39)
* unmapped overlays:                     How Overlays Work.  (line    6)
* unset environment variable, remote request: General Query Packets.
                                                             (line  173)
* unset tdesc filename:                  Retrieving Descriptions.
                                                             (line   21)
* unsupported languages:                 Unsupported Languages.
                                                             (line    6)
* unwind stack in called functions:      Calling.            (line   36)
* unwind stack in called functions with unhandled exceptions: Calling.
                                                             (line   47)
* unwinding frames in Python:            Unwinding Frames in Python.
                                                             (line    6)
* use only software watchpoints:         Set Watchpoints.    (line  111)
* user registers:                        Maintenance Commands.
                                                             (line  411)
* user-defined command:                  Define.             (line    6)
* user-defined macros:                   Macros.             (line   60)
* user-defined variables:                Convenience Vars.   (line    6)
* value history:                         Value History.      (line    6)
* values from inferior, in guile:        Values From Inferior In Guile.
                                                             (line    6)
* values from inferior, with Python:     Values From Inferior.
                                                             (line    6)
* variable name conflict:                Variables.          (line   36)
* variable object debugging info:        Debugging Output.   (line  281)
* variable objects in GDB/MI:            GDB/MI Variable Objects.
                                                             (line    9)
* variable values, wrong:                Variables.          (line  106)
* variables, readline:                   Readline Init File Syntax.
                                                             (line   34)
* variables, setting:                    Assignment.         (line   16)
* vAttach packet:                        Packets.            (line  351)
* vCont packet:                          Packets.            (line  369)
* vCont? packet:                         Packets.            (line  436)
* vCtrlC packet:                         Packets.            (line  446)
* vector unit:                           Vector Unit.        (line    6)
* vector, auxiliary:                     OS Information.     (line    9)
* verbose operation:                     Messages/Warnings.  (line    6)
* verify remote memory image:            Memory.             (line  159)
* verify target memory image:            Memory.             (line  159)
* vFile packet:                          Packets.            (line  460)
* vFlashDone packet:                     Packets.            (line  499)
* vFlashErase packet:                    Packets.            (line  464)
* vFlashWrite packet:                    Packets.            (line  479)
* vfork events, remote reply:            Stop Reply Packets. (line  116)
* vforkdone events, remote reply:        Stop Reply Packets. (line  128)
* virtual functions (C++) display:       Print Settings.     (line  610)
* vKill packet:                          Packets.            (line  506)
* vMustReplyEmpty packet:                Packets.            (line  518)
* volatile registers:                    Registers.          (line  106)
* vRun packet:                           Packets.            (line  530)
* vStopped packet:                       Packets.            (line  545)
* VTBL display:                          Print Settings.     (line  610)
* watchdog timer:                        Maintenance Commands.
                                                             (line  766)
* watchpoints:                           Breakpoints.        (line   17)
* watchpoints and threads:               Set Watchpoints.    (line  182)
* where to look for shared libraries:    Files.              (line  391)
* wild pointer, interpreting:            Print Settings.     (line   80)
* Wind River Linux system-wide configuration script: System-wide Configuration Scripts.
                                                             (line   22)
* word completion:                       Completion.         (line    6)
* working directory:                     Source Path.        (line   40)
* working directory (of your program):   Working Directory.  (line    6)
* working language:                      Languages.          (line   13)
* write data into object, remote request: General Query Packets.
                                                             (line 1432)
* write, file-i/o system call:           write.              (line    6)
* writing a frame filter:                Writing a Frame Filter.
                                                             (line    6)
* writing a Guile pretty-printer:        Writing a Guile Pretty-Printer.
                                                             (line    6)
* writing a pretty-printer:              Writing a Pretty-Printer.
                                                             (line    6)
* writing convenience functions:         Functions In Python.
                                                             (line    6)
* writing into corefiles:                Patching.           (line    6)
* writing into executables:              Patching.           (line    6)
* writing into executables <1>:          Compiling and Injecting Code.
                                                             (line    6)
* writing JIT debug info readers:        Writing JIT Debug Info Readers.
                                                             (line    6)
* writing xmethods in Python:            Writing an Xmethod. (line    6)
* wrong values:                          Variables.          (line  106)
* x command, default address:            Machine Code.       (line   35)
* X packet:                              Packets.            (line  548)
* Xilinx MicroBlaze:                     MicroBlaze.         (line    6)
* XInclude:                              Target Description Format.
                                                             (line   53)
* XMD, Xilinx Microprocessor Debugger:   MicroBlaze.         (line    6)
* xmethod API:                           Xmethod API.        (line    6)
* xmethods in Python:                    Xmethods In Python. (line    6)
* XML parser debugging:                  Debugging Output.   (line  288)
* yanking text:                          Readline Killing Commands.
                                                             (line    6)
* z packet:                              Packets.            (line  561)
* Z packets:                             Packets.            (line  561)
* z0 packet:                             Packets.            (line  576)
* Z0 packet:                             Packets.            (line  576)
* z1 packet:                             Packets.            (line  631)
* Z1 packet:                             Packets.            (line  631)
* z2 packet:                             Packets.            (line  652)
* Z2 packet:                             Packets.            (line  652)
* z3 packet:                             Packets.            (line  665)
* Z3 packet:                             Packets.            (line  665)
* z4 packet:                             Packets.            (line  678)
* Z4 packet:                             Packets.            (line  678)


File: gdb.info,  Node: Command and Variable Index,  Prev: Concept Index,  Up: Top

Command, Variable, and Function Index
*************************************

 [index ]
* Menu:

* !:                                     Shell Commands.      (line  10)
* # (a comment):                         Command Syntax.      (line  37)
* $bpnum, convenience variable:          Set Breaks.          (line   6)
* $cdir, convenience variable:           Source Path.         (line  40)
* $cwd, convenience variable:            Source Path.         (line  40)
* $tpnum:                                Create and Delete Tracepoints.
                                                              (line 124)
* $tracepoint:                           Tracepoint Variables.
                                                              (line  10)
* $trace_file:                           Tracepoint Variables.
                                                              (line  16)
* $trace_frame:                          Tracepoint Variables.
                                                              (line   6)
* $trace_func:                           Tracepoint Variables.
                                                              (line  19)
* $trace_line:                           Tracepoint Variables.
                                                              (line  13)
* $_, convenience variable:              Convenience Vars.    (line  65)
* $_ada_exception, convenience variable: Set Catchpoints.     (line  82)
* $_any_caller_is, convenience function: Convenience Funs.    (line 182)
* $_any_caller_matches, convenience function: Convenience Funs.
                                                              (line 194)
* $_as_string, convenience function:     Convenience Funs.    (line 206)
* $_caller_is, convenience function:     Convenience Funs.    (line 152)
* $_caller_matches, convenience function: Convenience Funs.   (line 175)
* $_cimag, convenience function:         Convenience Funs.    (line 217)
* $_creal, convenience function:         Convenience Funs.    (line 217)
* $_exception, convenience variable:     Set Catchpoints.     (line  21)
* $_exitcode, convenience variable:      Convenience Vars.    (line  80)
* $_exitsignal, convenience variable:    Convenience Vars.    (line  85)
* $_gdb_maint_setting, convenience function: Convenience Funs.
                                                              (line 129)
* $_gdb_maint_setting_str, convenience function: Convenience Funs.
                                                              (line 125)
* $_gdb_major, convenience variable:     Convenience Vars.    (line 183)
* $_gdb_minor, convenience variable:     Convenience Vars.    (line 183)
* $_gdb_setting, convenience function:   Convenience Funs.    (line  76)
* $_gdb_setting_str, convenience function: Convenience Funs.  (line  63)
* $_gthread, convenience variable:       Threads.             (line  98)
* $_hit_bpnum, convenience variable:     Set Breaks.          (line  24)
* $_hit_locno, convenience variable:     Set Breaks.          (line  24)
* $_inferior, convenience variable:      Inferiors Connections and Programs.
                                                              (line 100)
* $_isvoid, convenience function:        Convenience Funs.    (line  15)
* $_memeq, convenience function:         Convenience Funs.    (line 136)
* $_probe_arg, convenience variable:     Static Probe Points. (line  77)
* $_regex, convenience function:         Convenience Funs.    (line 140)
* $_sdata, collect:                      Tracepoint Actions.  (line  86)
* $_sdata, inspect, convenience variable: Convenience Vars.   (line 147)
* $_shell_exitcode, convenience variable: Convenience Vars.   (line 192)
* $_shell_exitsignal, convenience variable: Convenience Vars. (line 192)
* $_siginfo, convenience variable:       Convenience Vars.    (line 153)
* $_streq, convenience function:         Convenience Funs.    (line 145)
* $_strlen, convenience function:        Convenience Funs.    (line 149)
* $_thread, convenience variable:        Threads.             (line  98)
* $_tlb, convenience variable:           Convenience Vars.    (line 159)
* $__, convenience variable:             Convenience Vars.    (line  74)
* -ada-task-info:                        GDB/MI Ada Tasking Commands.
                                                              (line   9)
* -add-inferior:                         GDB/MI Miscellaneous Commands.
                                                              (line 295)
* -break-after:                          GDB/MI Breakpoint Commands.
                                                              (line  11)
* -break-commands:                       GDB/MI Breakpoint Commands.
                                                              (line  56)
* -break-condition:                      GDB/MI Breakpoint Commands.
                                                              (line  90)
* -break-delete:                         GDB/MI Breakpoint Commands.
                                                              (line 130)
* -break-disable:                        GDB/MI Breakpoint Commands.
                                                              (line 164)
* -break-enable:                         GDB/MI Breakpoint Commands.
                                                              (line 200)
* -break-info:                           GDB/MI Breakpoint Commands.
                                                              (line 235)
* -break-insert:                         GDB/MI Breakpoint Commands.
                                                              (line 259)
* -break-list:                           GDB/MI Breakpoint Commands.
                                                              (line 439)
* -break-passcount:                      GDB/MI Breakpoint Commands.
                                                              (line 511)
* -break-watch:                          GDB/MI Breakpoint Commands.
                                                              (line 523)
* -catch-assert:                         Ada Exception GDB/MI Catchpoint Commands.
                                                              (line  12)
* -catch-catch:                          C++ Exception GDB/MI Catchpoint Commands.
                                                              (line  98)
* -catch-exception:                      Ada Exception GDB/MI Catchpoint Commands.
                                                              (line  46)
* -catch-handlers:                       Ada Exception GDB/MI Catchpoint Commands.
                                                              (line  91)
* -catch-load:                           Shared Library GDB/MI Catchpoint Commands.
                                                              (line   9)
* -catch-rethrow:                        C++ Exception GDB/MI Catchpoint Commands.
                                                              (line  56)
* -catch-throw:                          C++ Exception GDB/MI Catchpoint Commands.
                                                              (line  13)
* -catch-unload:                         Shared Library GDB/MI Catchpoint Commands.
                                                              (line  36)
* -complete:                             GDB/MI Miscellaneous Commands.
                                                              (line 463)
* -data-disassemble:                     GDB/MI Data Manipulation.
                                                              (line  15)
* -data-evaluate-expression:             GDB/MI Data Manipulation.
                                                              (line 247)
* -data-list-changed-registers:          GDB/MI Data Manipulation.
                                                              (line 285)
* -data-list-register-names:             GDB/MI Data Manipulation.
                                                              (line 321)
* -data-list-register-values:            GDB/MI Data Manipulation.
                                                              (line 361)
* -data-read-memory:                     GDB/MI Data Manipulation.
                                                              (line 448)
* -data-read-memory-bytes:               GDB/MI Data Manipulation.
                                                              (line 555)
* -data-write-memory-bytes:              GDB/MI Data Manipulation.
                                                              (line 630)
* -dprintf-insert:                       GDB/MI Breakpoint Commands.
                                                              (line 372)
* -enable-frame-filters:                 GDB/MI Stack Manipulation.
                                                              (line   9)
* -enable-pretty-printing:               GDB/MI Variable Objects.
                                                              (line 118)
* -enable-timings:                       GDB/MI Miscellaneous Commands.
                                                              (line 419)
* -environment-cd:                       GDB/MI Program Context.
                                                              (line  33)
* -environment-directory:                GDB/MI Program Context.
                                                              (line  56)
* -environment-path:                     GDB/MI Program Context.
                                                              (line 100)
* -environment-pwd:                      GDB/MI Program Context.
                                                              (line 141)
* -exec-arguments:                       GDB/MI Program Context.
                                                              (line   9)
* -exec-continue:                        GDB/MI Program Execution.
                                                              (line  13)
* -exec-finish:                          GDB/MI Program Execution.
                                                              (line  66)
* -exec-interrupt:                       GDB/MI Program Execution.
                                                              (line 110)
* -exec-jump:                            GDB/MI Program Execution.
                                                              (line 160)
* -exec-next:                            GDB/MI Program Execution.
                                                              (line 184)
* -exec-next-instruction:                GDB/MI Program Execution.
                                                              (line 215)
* -exec-return:                          GDB/MI Program Execution.
                                                              (line 251)
* -exec-run:                             GDB/MI Program Execution.
                                                              (line 296)
* -exec-step:                            GDB/MI Program Execution.
                                                              (line 366)
* -exec-step-instruction:                GDB/MI Program Execution.
                                                              (line 408)
* -exec-until:                           GDB/MI Program Execution.
                                                              (line 449)
* -file-exec-and-symbols:                GDB/MI File Commands.
                                                              (line  12)
* -file-exec-file:                       GDB/MI File Commands.
                                                              (line  40)
* -file-list-exec-source-file:           GDB/MI File Commands.
                                                              (line  67)
* -file-list-exec-source-files:          GDB/MI File Commands.
                                                              (line  93)
* -file-list-shared-libraries:           GDB/MI File Commands.
                                                              (line 225)
* -file-symbol-file:                     GDB/MI File Commands.
                                                              (line 259)
* -gdb-exit:                             GDB/MI Miscellaneous Commands.
                                                              (line   9)
* -gdb-set:                              GDB/MI Miscellaneous Commands.
                                                              (line  31)
* -gdb-show:                             GDB/MI Miscellaneous Commands.
                                                              (line  54)
* -gdb-version:                          GDB/MI Miscellaneous Commands.
                                                              (line  77)
* -inferior-tty-set:                     GDB/MI Miscellaneous Commands.
                                                              (line 370)
* -inferior-tty-show:                    GDB/MI Miscellaneous Commands.
                                                              (line 393)
* -info-ada-exceptions:                  GDB/MI Ada Exceptions Commands.
                                                              (line   9)
* -info-gdb-mi-command:                  GDB/MI Support Commands.
                                                              (line  14)
* -info-os:                              GDB/MI Miscellaneous Commands.
                                                              (line 221)
* -interpreter-exec:                     GDB/MI Miscellaneous Commands.
                                                              (line 344)
* -list-features:                        GDB/MI Support Commands.
                                                              (line  57)
* -list-target-features:                 GDB/MI Support Commands.
                                                              (line 115)
* -list-thread-groups:                   GDB/MI Miscellaneous Commands.
                                                              (line 111)
* -stack-info-depth:                     GDB/MI Stack Manipulation.
                                                              (line  51)
* -stack-info-frame:                     GDB/MI Stack Manipulation.
                                                              (line  24)
* -stack-list-arguments:                 GDB/MI Stack Manipulation.
                                                              (line  89)
* -stack-list-frames:                    GDB/MI Stack Manipulation.
                                                              (line 188)
* -stack-list-locals:                    GDB/MI Stack Manipulation.
                                                              (line 305)
* -stack-list-variables:                 GDB/MI Stack Manipulation.
                                                              (line 351)
* -stack-select-frame:                   GDB/MI Stack Manipulation.
                                                              (line 379)
* -symbol-info-functions:                GDB/MI Symbol Query. (line   9)
* -symbol-info-module-functions:         GDB/MI Symbol Query. (line 109)
* -symbol-info-module-variables:         GDB/MI Symbol Query. (line 170)
* -symbol-info-modules:                  GDB/MI Symbol Query. (line 241)
* -symbol-info-types:                    GDB/MI Symbol Query. (line 295)
* -symbol-info-variables:                GDB/MI Symbol Query. (line 352)
* -symbol-list-lines:                    GDB/MI Symbol Query. (line 457)
* -target-attach:                        GDB/MI Target Manipulation.
                                                              (line   9)
* -target-detach:                        GDB/MI Target Manipulation.
                                                              (line  36)
* -target-disconnect:                    GDB/MI Target Manipulation.
                                                              (line  61)
* -target-download:                      GDB/MI Target Manipulation.
                                                              (line  85)
* -target-file-delete:                   GDB/MI File Transfer Commands.
                                                              (line  57)
* -target-file-get:                      GDB/MI File Transfer Commands.
                                                              (line  33)
* -target-file-put:                      GDB/MI File Transfer Commands.
                                                              (line   9)
* -target-flash-erase:                   GDB/MI Target Manipulation.
                                                              (line 192)
* -target-select:                        GDB/MI Target Manipulation.
                                                              (line 212)
* -thread-info:                          GDB/MI Thread Commands.
                                                              (line   9)
* -thread-list-ids:                      GDB/MI Thread Commands.
                                                              (line  58)
* -thread-select:                        GDB/MI Thread Commands.
                                                              (line  86)
* -trace-define-variable:                GDB/MI Tracepoint Commands.
                                                              (line  80)
* -trace-find:                           GDB/MI Tracepoint Commands.
                                                              (line  12)
* -trace-frame-collected:                GDB/MI Tracepoint Commands.
                                                              (line  97)
* -trace-list-variables:                 GDB/MI Tracepoint Commands.
                                                              (line 204)
* -trace-save:                           GDB/MI Tracepoint Commands.
                                                              (line 246)
* -trace-start:                          GDB/MI Tracepoint Commands.
                                                              (line 267)
* -trace-status:                         GDB/MI Tracepoint Commands.
                                                              (line 283)
* -trace-stop:                           GDB/MI Tracepoint Commands.
                                                              (line 354)
* -var-assign:                           GDB/MI Variable Objects.
                                                              (line 494)
* -var-create:                           GDB/MI Variable Objects.
                                                              (line 133)
* -var-delete:                           GDB/MI Variable Objects.
                                                              (line 221)
* -var-evaluate-expression:              GDB/MI Variable Objects.
                                                              (line 473)
* -var-info-expression:                  GDB/MI Variable Objects.
                                                              (line 410)
* -var-info-num-children:                GDB/MI Variable Objects.
                                                              (line 275)
* -var-info-path-expression:             GDB/MI Variable Objects.
                                                              (line 435)
* -var-info-type:                        GDB/MI Variable Objects.
                                                              (line 397)
* -var-list-children:                    GDB/MI Variable Objects.
                                                              (line 291)
* -var-set-format:                       GDB/MI Variable Objects.
                                                              (line 234)
* -var-set-frozen:                       GDB/MI Variable Objects.
                                                              (line 638)
* -var-set-update-range:                 GDB/MI Variable Objects.
                                                              (line 664)
* -var-set-visualizer:                   GDB/MI Variable Objects.
                                                              (line 687)
* -var-show-attributes:                  GDB/MI Variable Objects.
                                                              (line 459)
* -var-show-format:                      GDB/MI Variable Objects.
                                                              (line 262)
* -var-update:                           GDB/MI Variable Objects.
                                                              (line 518)
* <gdb:arch>:                            Architectures In Guile.
                                                              (line   6)
* <gdb:block>:                           Blocks In Guile.     (line   6)
* <gdb:breakpoint>:                      Breakpoints In Guile.
                                                              (line   6)
* <gdb:iterator>:                        Iterators In Guile.  (line   6)
* <gdb:lazy-string>:                     Lazy Strings In Guile.
                                                              (line   6)
* <gdb:objfile>:                         Objfiles In Guile.   (line   6)
* <gdb:progspace>:                       Progspaces In Guile. (line   6)
* <gdb:sal>:                             Symbol Tables In Guile.
                                                              (line   6)
* <gdb:symbol>:                          Symbols In Guile.    (line   6)
* <gdb:symtab>:                          Symbol Tables In Guile.
                                                              (line   6)
* <gdb:type>:                            Types In Guile.      (line   6)
* <gdb:value>:                           Values From Inferior In Guile.
                                                              (line   6)
* @, referencing memory as an array:     Arrays.              (line   6)
* ^connected:                            GDB/MI Result Records.
                                                              (line  22)
* ^done:                                 GDB/MI Result Records.
                                                              (line   9)
* ^error:                                GDB/MI Result Records.
                                                              (line  25)
* ^exit:                                 GDB/MI Result Records.
                                                              (line  36)
* ^running:                              GDB/MI Result Records.
                                                              (line  14)
* __init__ on TypePrinter:               gdb.types.           (line  82)
* |:                                     Shell Commands.      (line  26)
* abort (C-g):                           Miscellaneous Commands.
                                                              (line  10)
* accept-line (Newline or Return):       Commands For History.
                                                              (line   6)
* actions:                               Tracepoint Actions.  (line   6)
* ada-task-info:                         GDB/MI Support Commands.
                                                              (line  94)
* add-auto-load-safe-path:               Auto-loading safe path.
                                                              (line  50)
* add-auto-load-scripts-directory:       objfile-gdbdotext file.
                                                              (line  68)
* add-inferior:                          Inferiors Connections and Programs.
                                                              (line 112)
* add-symbol-file:                       Files.               (line 123)
* add-symbol-file-from-memory:           Files.               (line 193)
* adi assign:                            Sparc64.             (line  45)
* adi examine:                           Sparc64.             (line  27)
* advance LOCSPEC:                       Continuing and Stepping.
                                                              (line 187)
* alias:                                 Aliases.             (line  21)
* append:                                Dump/Restore Files.  (line  34)
* append-pretty-printer!:                Guile Printing Module.
                                                              (line  18)
* apropos:                               Help.                (line  82)
* arch-bool-type:                        Architectures In Guile.
                                                              (line  84)
* arch-char-type:                        Architectures In Guile.
                                                              (line  36)
* arch-charset:                          Architectures In Guile.
                                                              (line  23)
* arch-disassemble:                      Disassembly In Guile.
                                                              (line  10)
* arch-double-type:                      Architectures In Guile.
                                                              (line  76)
* arch-float-type:                       Architectures In Guile.
                                                              (line  72)
* arch-int-type:                         Architectures In Guile.
                                                              (line  44)
* arch-int16-type:                       Architectures In Guile.
                                                              (line 104)
* arch-int32-type:                       Architectures In Guile.
                                                              (line 112)
* arch-int64-type:                       Architectures In Guile.
                                                              (line 120)
* arch-int8-type:                        Architectures In Guile.
                                                              (line  96)
* arch-long-type:                        Architectures In Guile.
                                                              (line  48)
* arch-longdouble-type:                  Architectures In Guile.
                                                              (line  80)
* arch-longlong-type:                    Architectures In Guile.
                                                              (line  88)
* arch-name:                             Architectures In Guile.
                                                              (line  20)
* arch-schar-type:                       Architectures In Guile.
                                                              (line  52)
* arch-short-type:                       Architectures In Guile.
                                                              (line  40)
* arch-uchar-type:                       Architectures In Guile.
                                                              (line  56)
* arch-uint-type:                        Architectures In Guile.
                                                              (line  64)
* arch-uint16-type:                      Architectures In Guile.
                                                              (line 108)
* arch-uint32-type:                      Architectures In Guile.
                                                              (line 116)
* arch-uint64-type:                      Architectures In Guile.
                                                              (line 124)
* arch-uint8-type:                       Architectures In Guile.
                                                              (line 100)
* arch-ulong-type:                       Architectures In Guile.
                                                              (line  68)
* arch-ulonglong-type:                   Architectures In Guile.
                                                              (line  92)
* arch-ushort-type:                      Architectures In Guile.
                                                              (line  60)
* arch-void-type:                        Architectures In Guile.
                                                              (line  32)
* arch-wide-charset:                     Architectures In Guile.
                                                              (line  26)
* arch?:                                 Architectures In Guile.
                                                              (line  13)
* Architecture.disassemble:              Architectures In Python.
                                                              (line  15)
* Architecture.integer_type:             Architectures In Python.
                                                              (line  47)
* Architecture.integer_type <1>:         Architectures In Python.
                                                              (line  47)
* Architecture.name:                     Architectures In Python.
                                                              (line  12)
* Architecture.registers:                Architectures In Python.
                                                              (line  61)
* Architecture.register_groups:          Architectures In Python.
                                                              (line  67)
* attach:                                Attach.              (line   6)
* attach&:                               Background Execution.
                                                              (line  25)
* awatch:                                Set Watchpoints.     (line  86)
* b (break):                             Set Breaks.          (line   6)
* backtrace:                             Backtrace.           (line  11)
* backward-char (C-b):                   Commands For Moving. (line  15)
* backward-delete-char (Rubout):         Commands For Text.   (line  17)
* backward-kill-line (C-x Rubout):       Commands For Killing.
                                                              (line  11)
* backward-kill-word (M-<DEL>):          Commands For Killing.
                                                              (line  28)
* backward-word (M-b):                   Commands For Moving. (line  22)
* beginning-of-history (M-<):            Commands For History.
                                                              (line  19)
* beginning-of-line (C-a):               Commands For Moving. (line   6)
* bell-style:                            Readline Init File Syntax.
                                                              (line  35)
* bfd caching:                           File Caching.        (line  14)
* bfd caching <1>:                       File Caching.        (line  24)
* bfd caching <2>:                       File Caching.        (line  27)
* bind-tty-special-chars:                Readline Init File Syntax.
                                                              (line  42)
* blink-matching-paren:                  Readline Init File Syntax.
                                                              (line  47)
* block-end:                             Blocks In Guile.     (line  70)
* block-function:                        Blocks In Guile.     (line  73)
* block-global-block:                    Blocks In Guile.     (line  87)
* block-global?:                         Blocks In Guile.     (line  93)
* block-start:                           Blocks In Guile.     (line  67)
* block-static-block:                    Blocks In Guile.     (line  90)
* block-static?:                         Blocks In Guile.     (line  97)
* block-superblock:                      Blocks In Guile.     (line  83)
* block-symbols:                         Blocks In Guile.     (line 101)
* block-symbols-progress?:               Blocks In Guile.     (line 112)
* block-valid?:                          Blocks In Guile.     (line  59)
* Block.end:                             Blocks In Python.    (line  86)
* Block.function:                        Blocks In Python.    (line  90)
* Block.global_block:                    Blocks In Python.    (line 105)
* Block.is_global:                       Blocks In Python.    (line 113)
* Block.is_static:                       Blocks In Python.    (line 117)
* Block.is_valid:                        Blocks In Python.    (line  73)
* Block.start:                           Blocks In Python.    (line  83)
* Block.static_block:                    Blocks In Python.    (line 109)
* Block.superblock:                      Blocks In Python.    (line 100)
* block?:                                Blocks In Guile.     (line  55)
* BP_ACCESS_WATCHPOINT:                  Breakpoints In Python.
                                                              (line  77)
* BP_ACCESS_WATCHPOINT <1>:              Breakpoints In Guile.
                                                              (line  77)
* BP_BREAKPOINT:                         Breakpoints In Python.
                                                              (line  62)
* BP_BREAKPOINT <1>:                     Breakpoints In Guile.
                                                              (line  63)
* BP_CATCHPOINT:                         Breakpoints In Python.
                                                              (line  80)
* BP_CATCHPOINT <1>:                     Breakpoints In Guile.
                                                              (line  81)
* BP_HARDWARE_BREAKPOINT:                Breakpoints In Python.
                                                              (line  65)
* BP_HARDWARE_WATCHPOINT:                Breakpoints In Python.
                                                              (line  71)
* BP_HARDWARE_WATCHPOINT <1>:            Breakpoints In Guile.
                                                              (line  69)
* BP_READ_WATCHPOINT:                    Breakpoints In Python.
                                                              (line  74)
* BP_READ_WATCHPOINT <1>:                Breakpoints In Guile.
                                                              (line  73)
* BP_WATCHPOINT:                         Breakpoints In Python.
                                                              (line  68)
* BP_WATCHPOINT <1>:                     Breakpoints In Guile.
                                                              (line  66)
* bracketed-paste-begin ():              Commands For Text.   (line  36)
* break:                                 Set Breaks.          (line   6)
* break ... task TASKNO (Ada):           Ada Tasks.           (line 181)
* break ... thread THREAD-ID:            Thread-Specific Breakpoints.
                                                              (line  10)
* break, and Objective-C:                Method Names in Commands.
                                                              (line   9)
* break-range:                           PowerPC Embedded.    (line  41)
* breakpoint annotation:                 Annotations for Running.
                                                              (line  47)
* breakpoint-commands:                   Breakpoints In Guile.
                                                              (line 254)
* breakpoint-condition:                  Breakpoints In Guile.
                                                              (line 212)
* breakpoint-enabled?:                   Breakpoints In Guile.
                                                              (line 162)
* breakpoint-expression:                 Breakpoints In Guile.
                                                              (line 157)
* breakpoint-hit-count:                  Breakpoints In Guile.
                                                              (line 187)
* breakpoint-ignore-count:               Breakpoints In Guile.
                                                              (line 181)
* breakpoint-location:                   Breakpoints In Guile.
                                                              (line 152)
* breakpoint-notifications:              GDB/MI Support Commands.
                                                              (line  91)
* breakpoint-number:                     Breakpoints In Guile.
                                                              (line 132)
* breakpoint-silent?:                    Breakpoints In Guile.
                                                              (line 169)
* breakpoint-stop:                       Breakpoints In Guile.
                                                              (line 220)
* breakpoint-task:                       Breakpoints In Guile.
                                                              (line 203)
* breakpoint-temporary?:                 Breakpoints In Guile.
                                                              (line 136)
* breakpoint-thread:                     Breakpoints In Guile.
                                                              (line 194)
* breakpoint-type:                       Breakpoints In Guile.
                                                              (line 144)
* breakpoint-valid?:                     Breakpoints In Guile.
                                                              (line 122)
* breakpoint-visible?:                   Breakpoints In Guile.
                                                              (line 148)
* Breakpoint.commands:                   Breakpoints In Python.
                                                              (line 229)
* Breakpoint.condition:                  Breakpoints In Python.
                                                              (line 224)
* Breakpoint.delete:                     Breakpoints In Python.
                                                              (line 137)
* Breakpoint.enabled:                    Breakpoints In Python.
                                                              (line 142)
* Breakpoint.expression:                 Breakpoints In Python.
                                                              (line 218)
* Breakpoint.hit_count:                  Breakpoints In Python.
                                                              (line 198)
* Breakpoint.ignore_count:               Breakpoints In Python.
                                                              (line 170)
* Breakpoint.is_valid:                   Breakpoints In Python.
                                                              (line 129)
* Breakpoint.location:                   Breakpoints In Python.
                                                              (line 203)
* Breakpoint.locations:                  Breakpoints In Python.
                                                              (line 209)
* Breakpoint.number:                     Breakpoints In Python.
                                                              (line 174)
* Breakpoint.pending:                    Breakpoints In Python.
                                                              (line 155)
* Breakpoint.silent:                     Breakpoints In Python.
                                                              (line 147)
* Breakpoint.stop:                       Breakpoints In Python.
                                                              (line  98)
* Breakpoint.task:                       Breakpoints In Python.
                                                              (line 164)
* Breakpoint.temporary:                  Breakpoints In Python.
                                                              (line 189)
* Breakpoint.thread:                     Breakpoints In Python.
                                                              (line 159)
* Breakpoint.type:                       Breakpoints In Python.
                                                              (line 179)
* Breakpoint.visible:                    Breakpoints In Python.
                                                              (line 184)
* Breakpoint.__init__:                   Breakpoints In Python.
                                                              (line  16)
* Breakpoint.__init__ <1>:               Breakpoints In Python.
                                                              (line  49)
* breakpoint?:                           Breakpoints In Guile.
                                                              (line 118)
* BreakpointEvent.breakpoint:            Events In Python.    (line 108)
* BreakpointEvent.breakpoints:           Events In Python.    (line 103)
* BreakpointLocation.address:            Breakpoints In Python.
                                                              (line 257)
* BreakpointLocation.enabled:            Breakpoints In Python.
                                                              (line 263)
* BreakpointLocation.fullname:           Breakpoints In Python.
                                                              (line 280)
* BreakpointLocation.function:           Breakpoints In Python.
                                                              (line 274)
* BreakpointLocation.owner:              Breakpoints In Python.
                                                              (line 268)
* BreakpointLocation.source:             Breakpoints In Python.
                                                              (line 249)
* BreakpointLocation.thread_groups:      Breakpoints In Python.
                                                              (line 286)
* breakpoints:                           Breakpoints In Guile.
                                                              (line 114)
* breakpoints-invalid annotation:        Invalidation.        (line  14)
* bt (backtrace):                        Backtrace.           (line  11)
* builtin_disassemble:                   Disassembly In Python.
                                                              (line 219)
* c (continue):                          Continuing and Stepping.
                                                              (line  16)
* c (SingleKey TUI key):                 TUI Single Key Mode. (line  10)
* C-L:                                   TUI Keys.            (line  79)
* C-x 1:                                 TUI Keys.            (line  22)
* C-x 2:                                 TUI Keys.            (line  32)
* C-x a:                                 TUI Keys.            (line  11)
* C-x A:                                 TUI Keys.            (line  12)
* C-x C-a:                               TUI Keys.            (line  10)
* C-x o:                                 TUI Keys.            (line  43)
* C-x s:                                 TUI Keys.            (line  53)
* call:                                  Calling.             (line  11)
* call-last-kbd-macro (C-x e):           Keyboard Macros.     (line  13)
* capitalize-word (M-c):                 Commands For Text.   (line  69)
* catch:                                 Set Catchpoints.     (line  10)
* catch assert:                          Set Catchpoints.     (line 112)
* catch catch:                           Set Catchpoints.     (line  16)
* catch exception:                       Set Catchpoints.     (line  66)
* catch exception unhandled:             Set Catchpoints.     (line  87)
* catch exec:                            Set Catchpoints.     (line 116)
* catch fork:                            Set Catchpoints.     (line 261)
* catch handlers:                        Set Catchpoints.     (line  92)
* catch load:                            Set Catchpoints.     (line 268)
* catch rethrow:                         Set Catchpoints.     (line  16)
* catch signal:                          Set Catchpoints.     (line 273)
* catch syscall:                         Set Catchpoints.     (line 120)
* catch throw:                           Set Catchpoints.     (line  16)
* catch unload:                          Set Catchpoints.     (line 268)
* catch vfork:                           Set Catchpoints.     (line 264)
* cd:                                    Working Directory.   (line  32)
* cdir:                                  Source Path.         (line  40)
* character-search (C-]):                Miscellaneous Commands.
                                                              (line  42)
* character-search-backward (M-C-]):     Miscellaneous Commands.
                                                              (line  47)
* checkpoint:                            Checkpoint/Restart.  (line  26)
* clear:                                 Delete Breaks.       (line  21)
* clear, and Objective-C:                Method Names in Commands.
                                                              (line   9)
* clear-display (M-C-l):                 Commands For Moving. (line  40)
* clear-screen (C-l):                    Commands For Moving. (line  45)
* ClearObjFilesEvent.progspace:          Events In Python.    (line 139)
* clone-inferior:                        Inferiors Connections and Programs.
                                                              (line 128)
* collect (tracepoints):                 Tracepoint Actions.  (line  49)
* colon-colon, in Modula-2:              M2 Scope.            (line   6)
* colored-completion-prefix:             Readline Init File Syntax.
                                                              (line  52)
* colored-stats:                         Readline Init File Syntax.
                                                              (line  59)
* Command.complete:                      CLI Commands In Python.
                                                              (line  72)
* Command.dont_repeat:                   CLI Commands In Python.
                                                              (line  42)
* Command.invoke:                        CLI Commands In Python.
                                                              (line  50)
* Command.__init__:                      CLI Commands In Python.
                                                              (line  10)
* command?:                              Commands In Guile.   (line  63)
* commands:                              Break Commands.      (line  11)
* commands annotation:                   Prompting.           (line  27)
* COMMAND_BREAKPOINTS:                   CLI Commands In Python.
                                                              (line 144)
* COMMAND_BREAKPOINTS <1>:               Commands In Guile.   (line 177)
* COMMAND_DATA:                          CLI Commands In Python.
                                                              (line 115)
* COMMAND_DATA <1>:                      Commands In Guile.   (line 148)
* COMMAND_FILES:                         CLI Commands In Python.
                                                              (line 126)
* COMMAND_FILES <1>:                     Commands In Guile.   (line 159)
* COMMAND_MAINTENANCE:                   CLI Commands In Python.
                                                              (line 173)
* COMMAND_MAINTENANCE <1>:               Commands In Guile.   (line 201)
* COMMAND_NONE:                          CLI Commands In Python.
                                                              (line 105)
* COMMAND_NONE <1>:                      Commands In Guile.   (line 137)
* COMMAND_OBSCURE:                       CLI Commands In Python.
                                                              (line 167)
* COMMAND_OBSCURE <1>:                   Commands In Guile.   (line 195)
* COMMAND_RUNNING:                       CLI Commands In Python.
                                                              (line 109)
* COMMAND_RUNNING <1>:                   Commands In Guile.   (line 142)
* COMMAND_STACK:                         CLI Commands In Python.
                                                              (line 120)
* COMMAND_STACK <1>:                     Commands In Guile.   (line 153)
* COMMAND_STATUS:                        CLI Commands In Python.
                                                              (line 138)
* COMMAND_STATUS <1>:                    Commands In Guile.   (line 171)
* COMMAND_SUPPORT:                       CLI Commands In Python.
                                                              (line 131)
* COMMAND_SUPPORT <1>:                   Commands In Guile.   (line 164)
* COMMAND_TRACEPOINTS:                   CLI Commands In Python.
                                                              (line 150)
* COMMAND_TRACEPOINTS <1>:               Commands In Guile.   (line 183)
* COMMAND_TUI:                           CLI Commands In Python.
                                                              (line 156)
* COMMAND_USER:                          CLI Commands In Python.
                                                              (line 161)
* COMMAND_USER <1>:                      Commands In Guile.   (line 189)
* comment-begin:                         Readline Init File Syntax.
                                                              (line  65)
* compare-sections:                      Memory.              (line 166)
* compile code:                          Compiling and Injecting Code.
                                                              (line  11)
* compile file:                          Compiling and Injecting Code.
                                                              (line  56)
* complete:                              Help.                (line 114)
* complete (<TAB>):                      Commands For Completion.
                                                              (line   6)
* COMPLETE_COMMAND:                      CLI Commands In Python.
                                                              (line 194)
* COMPLETE_COMMAND <1>:                  Commands In Guile.   (line 222)
* COMPLETE_EXPRESSION:                   CLI Commands In Python.
                                                              (line 202)
* COMPLETE_EXPRESSION <1>:               Commands In Guile.   (line 230)
* COMPLETE_FILENAME:                     CLI Commands In Python.
                                                              (line 187)
* COMPLETE_FILENAME <1>:                 Commands In Guile.   (line 215)
* COMPLETE_LOCATION:                     CLI Commands In Python.
                                                              (line 190)
* COMPLETE_LOCATION <1>:                 Commands In Guile.   (line 218)
* COMPLETE_NONE:                         CLI Commands In Python.
                                                              (line 184)
* COMPLETE_NONE <1>:                     Commands In Guile.   (line 212)
* COMPLETE_SYMBOL:                       CLI Commands In Python.
                                                              (line 198)
* COMPLETE_SYMBOL <1>:                   Commands In Guile.   (line 226)
* completion-display-width:              Readline Init File Syntax.
                                                              (line  70)
* completion-ignore-case:                Readline Init File Syntax.
                                                              (line  77)
* completion-map-case:                   Readline Init File Syntax.
                                                              (line  82)
* completion-prefix-display-length:      Readline Init File Syntax.
                                                              (line  88)
* completion-query-items:                Readline Init File Syntax.
                                                              (line  95)
* condition:                             Conditions.          (line  58)
* ConnectionEvent.connection:            Events In Python.    (line 253)
* continue:                              Continuing and Stepping.
                                                              (line  16)
* continue&:                             Background Execution.
                                                              (line  40)
* convert-meta:                          Readline Init File Syntax.
                                                              (line 105)
* copy-backward-word ():                 Commands For Killing.
                                                              (line  60)
* copy-forward-word ():                  Commands For Killing.
                                                              (line  65)
* copy-region-as-kill ():                Commands For Killing.
                                                              (line  56)
* core-file:                             Files.               (line 107)
* ctf:                                   Trace Files.         (line  28)
* Ctrl-o (operate-and-get-next):         Command Syntax.      (line  41)
* current-arch:                          Architectures In Guile.
                                                              (line  17)
* current-objfile:                       Objfiles In Guile.   (line  46)
* current-progspace:                     Progspaces In Guile. (line  26)
* cwd:                                   Source Path.         (line  40)
* d (delete):                            Delete Breaks.       (line  56)
* d (SingleKey TUI key):                 TUI Single Key Mode. (line  13)
* data-directory:                        Guile Configuration. (line   9)
* data-disassemble-a-option:             GDB/MI Support Commands.
                                                              (line 108)
* data-read-memory-bytes:                GDB/MI Support Commands.
                                                              (line  88)
* default-visualizer:                    Guile Pretty Printing API.
                                                              (line 129)
* define:                                Define.              (line  50)
* define-prefix:                         Define.              (line  82)
* delete:                                Delete Breaks.       (line  56)
* delete checkpoint CHECKPOINT-ID:       Checkpoint/Restart.  (line  53)
* delete display:                        Auto Display.        (line  45)
* delete mem:                            Memory Region Attributes.
                                                              (line  34)
* delete tracepoint:                     Create and Delete Tracepoints.
                                                              (line 127)
* delete tvariable:                      Trace State Variables.
                                                              (line  42)
* delete-breakpoint!:                    Breakpoints In Guile.
                                                              (line 105)
* delete-char (C-d):                     Commands For Text.   (line  12)
* delete-char-or-list ():                Commands For Completion.
                                                              (line  39)
* delete-horizontal-space ():            Commands For Killing.
                                                              (line  48)
* demangle:                              Symbols.             (line 127)
* detach:                                Attach.              (line  55)
* detach (remote):                       Connecting.          (line 263)
* detach inferiors INFNO...:             Inferiors Connections and Programs.
                                                              (line 161)
* digit-argument (M-0, M-1, ... M--):    Numeric Arguments.   (line   6)
* dir:                                   Source Path.         (line  99)
* directory:                             Source Path.         (line  99)
* dis (disable):                         Disabling.           (line  37)
* disable:                               Disabling.           (line  37)
* disable display:                       Auto Display.        (line  56)
* disable frame-filter:                  Frame Filter Management.
                                                              (line  16)
* disable mem:                           Memory Region Attributes.
                                                              (line  38)
* disable pretty-printer:                Pretty-Printer Commands.
                                                              (line  20)
* disable probes:                        Static Probe Points. (line  73)
* disable tracepoint:                    Enable and Disable Tracepoints.
                                                              (line   9)
* disable type-printer:                  Symbols.             (line 432)
* disable-completion:                    Readline Init File Syntax.
                                                              (line 113)
* disassemble:                           Machine Code.        (line  44)
* DisassembleInfo.address:               Disassembly In Python.
                                                              (line  23)
* DisassembleInfo.architecture:          Disassembly In Python.
                                                              (line  27)
* DisassembleInfo.is_valid:              Disassembly In Python.
                                                              (line  37)
* DisassembleInfo.progspace:             Disassembly In Python.
                                                              (line  32)
* DisassembleInfo.read_memory:           Disassembly In Python.
                                                              (line  59)
* DisassembleInfo.__init__:              Disassembly In Python.
                                                              (line  46)
* Disassembler:                          Disassembly In Python.
                                                              (line 107)
* Disassembler.__call__:                 Disassembly In Python.
                                                              (line 115)
* Disassembler.__init__:                 Disassembly In Python.
                                                              (line 111)
* DisassemblerResult:                    Disassembly In Python.
                                                              (line 155)
* DisassemblerResult.length:             Disassembly In Python.
                                                              (line 166)
* DisassemblerResult.string:             Disassembly In Python.
                                                              (line 170)
* DisassemblerResult.__init__:           Disassembly In Python.
                                                              (line 160)
* disconnect:                            Connecting.          (line 272)
* display:                               Auto Display.        (line  23)
* do (down):                             Selection.           (line  74)
* do-lowercase-version (M-A, M-B, M-X, ...): Miscellaneous Commands.
                                                              (line  14)
* document:                              Define.              (line  63)
* dont-repeat:                           Commands In Guile.   (line  67)
* dont-repeat <1>:                       Define.              (line 118)
* down:                                  Selection.           (line  74)
* Down:                                  TUI Keys.            (line  70)
* down-silently:                         Selection.           (line 106)
* downcase-word (M-l):                   Commands For Text.   (line  65)
* dprintf:                               Dynamic Printf.      (line  26)
* dprintf-style agent:                   Dynamic Printf.      (line  47)
* dprintf-style call:                    Dynamic Printf.      (line  43)
* dprintf-style gdb:                     Dynamic Printf.      (line  40)
* dump:                                  Dump/Restore Files.  (line  13)
* dump-functions ():                     Miscellaneous Commands.
                                                              (line  70)
* dump-macros ():                        Miscellaneous Commands.
                                                              (line  82)
* dump-variables ():                     Miscellaneous Commands.
                                                              (line  76)
* e (edit):                              Edit.                (line   6)
* echo:                                  Output.              (line  12)
* echo-control-characters:               Readline Init File Syntax.
                                                              (line 118)
* edit:                                  Edit.                (line   6)
* editing-mode:                          Readline Init File Syntax.
                                                              (line 123)
* else:                                  Command Files.       (line  74)
* emacs-editing-mode (C-e):              Miscellaneous Commands.
                                                              (line  88)
* emacs-mode-string:                     Readline Init File Syntax.
                                                              (line 129)
* enable:                                Disabling.           (line  44)
* enable display:                        Auto Display.        (line  65)
* enable frame-filter:                   Frame Filter Management.
                                                              (line  26)
* enable mem:                            Memory Region Attributes.
                                                              (line  42)
* enable pretty-printer:                 Pretty-Printer Commands.
                                                              (line  25)
* enable probes:                         Static Probe Points. (line  60)
* enable tracepoint:                     Enable and Disable Tracepoints.
                                                              (line  19)
* enable type-printer:                   Symbols.             (line 432)
* enable-bracketed-paste:                Readline Init File Syntax.
                                                              (line 139)
* enable-keypad:                         Readline Init File Syntax.
                                                              (line 147)
* enabled:                               Xmethod API.         (line  18)
* enabled of type_printer:               Type Printing API.   (line  13)
* end (breakpoint commands):             Break Commands.      (line  11)
* end (if/else/while commands):          Command Files.       (line 103)
* end (user-defined commands):           Define.              (line  63)
* end-kbd-macro (C-x )):                 Keyboard Macros.     (line   9)
* end-of-file (usually C-d):             Commands For Text.   (line   6)
* end-of-history (M->):                  Commands For History.
                                                              (line  22)
* end-of-iteration:                      Iterators In Guile.  (line  70)
* end-of-iteration?:                     Iterators In Guile.  (line  73)
* end-of-line (C-e):                     Commands For Moving. (line   9)
* error annotation:                      Errors.              (line  10)
* error-begin annotation:                Errors.              (line  22)
* error-port:                            I/O Ports in Guile.  (line  12)
* eval:                                  Output.              (line 117)
* EventRegistry.connect:                 Events In Python.    (line  19)
* EventRegistry.disconnect:              Events In Python.    (line  23)
* exception-args:                        Guile Exception Handling.
                                                              (line 103)
* exception-key:                         Guile Exception Handling.
                                                              (line 100)
* exception?:                            Guile Exception Handling.
                                                              (line  96)
* exceptionHandler:                      Bootstrapping.       (line  38)
* exchange-point-and-mark (C-x C-x):     Miscellaneous Commands.
                                                              (line  37)
* exec-file:                             Files.               (line  39)
* exec-file-mismatch:                    Attach.              (line  34)
* exec-run-start-option:                 GDB/MI Support Commands.
                                                              (line 105)
* execute:                               Basic Guile.         (line  68)
* exit [EXPRESSION]:                     Quitting GDB.        (line   6)
* exited annotation:                     Annotations for Running.
                                                              (line  18)
* ExitedEvent.exit_code:                 Events In Python.    (line  69)
* ExitedEvent.inferior:                  Events In Python.    (line  75)
* expand-tilde:                          Readline Init File Syntax.
                                                              (line 158)
* explore:                               Data.                (line 137)
* f (frame):                             Selection.           (line  11)
* f (SingleKey TUI key):                 TUI Single Key Mode. (line  16)
* faas:                                  Frame Apply.         (line  96)
* fg (resume foreground execution):      Continuing and Stepping.
                                                              (line  16)
* field-artificial?:                     Types In Guile.      (line 275)
* field-base-class?:                     Types In Guile.      (line 279)
* field-bitpos:                          Types In Guile.      (line 266)
* field-bitsize:                         Types In Guile.      (line 270)
* field-enumval:                         Types In Guile.      (line 263)
* field-name:                            Types In Guile.      (line 256)
* field-type:                            Types In Guile.      (line 259)
* field?:                                Types In Guile.      (line 252)
* file:                                  Files.               (line  16)
* fin (finish):                          Continuing and Stepping.
                                                              (line 109)
* find:                                  Searching Memory.    (line   9)
* find-pc-line:                          Symbol Tables In Guile.
                                                              (line  71)
* finish:                                Continuing and Stepping.
                                                              (line 109)
* finish&:                               Background Execution.
                                                              (line  43)
* FinishBreakpoint.out_of_scope:         Finish Breakpoints in Python.
                                                              (line  21)
* FinishBreakpoint.return_value:         Finish Breakpoints in Python.
                                                              (line  38)
* FinishBreakpoint.__init__:             Finish Breakpoints in Python.
                                                              (line  14)
* flash-erase:                           Target Commands.     (line 140)
* flushregs:                             Maintenance Commands.
                                                              (line 387)
* flush_i_cache:                         Bootstrapping.       (line  60)
* fo (forward-search):                   Search.              (line   9)
* focus:                                 TUI Commands.        (line 103)
* forward-backward-delete-char ():       Commands For Text.   (line  21)
* forward-char (C-f):                    Commands For Moving. (line  12)
* forward-search:                        Search.              (line   9)
* forward-search-history (C-s):          Commands For History.
                                                              (line  32)
* forward-word (M-f):                    Commands For Moving. (line  18)
* frame address:                         Selection.           (line  30)
* frame apply:                           Frame Apply.         (line   6)
* frame function:                        Selection.           (line  48)
* frame level:                           Selection.           (line  16)
* frame view:                            Selection.           (line  53)
* frame, selecting:                      Selection.           (line  11)
* frame-arch:                            Frames In Guile.     (line  35)
* frame-block:                           Frames In Guile.     (line 121)
* frame-function:                        Frames In Guile.     (line 125)
* frame-name:                            Frames In Guile.     (line  32)
* frame-newer:                           Frames In Guile.     (line 133)
* frame-older:                           Frames In Guile.     (line 130)
* frame-pc:                              Frames In Guile.     (line 118)
* frame-read-register:                   Frames In Guile.     (line 140)
* frame-read-var:                        Frames In Guile.     (line 144)
* frame-sal:                             Frames In Guile.     (line 136)
* frame-select:                          Frames In Guile.     (line 152)
* frame-type:                            Frames In Guile.     (line  39)
* frame-unwind-stop-reason:              Frames In Guile.     (line  67)
* frame-valid?:                          Frames In Guile.     (line  26)
* Frame.architecture:                    Frames In Python.    (line  53)
* Frame.block:                           Frames In Python.    (line 139)
* Frame.find_sal:                        Frames In Python.    (line 155)
* Frame.function:                        Frames In Python.    (line 145)
* Frame.is_valid:                        Frames In Python.    (line  43)
* Frame.language:                        Frames In Python.    (line 195)
* Frame.level:                           Frames In Python.    (line 191)
* Frame.name:                            Frames In Python.    (line  49)
* Frame.newer:                           Frames In Python.    (line 152)
* Frame.older:                           Frames In Python.    (line 149)
* Frame.pc:                              Frames In Python.    (line 136)
* Frame.read_register:                   Frames In Python.    (line 159)
* Frame.read_var:                        Frames In Python.    (line 179)
* Frame.select:                          Frames In Python.    (line 187)
* Frame.type:                            Frames In Python.    (line  57)
* Frame.unwind_stop_reason:              Frames In Python.    (line  84)
* frame?:                                Frames In Guile.     (line  22)
* FrameDecorator.address:                Frame Decorator API. (line  60)
* FrameDecorator.elided:                 Frame Decorator API. (line  29)
* FrameDecorator.filename:               Frame Decorator API. (line  70)
* FrameDecorator.frame_args:             Frame Decorator API. (line  91)
* FrameDecorator.frame_locals:           Frame Decorator API. (line 143)
* FrameDecorator.function:               Frame Decorator API. (line  49)
* FrameDecorator.inferior_frame:         Frame Decorator API. (line 176)
* FrameDecorator.line:                   Frame Decorator API. (line  81)
* FrameFilter.enabled:                   Frame Filter API.    (line 122)
* FrameFilter.filter:                    Frame Filter API.    (line  75)
* FrameFilter.name:                      Frame Filter API.    (line 115)
* FrameFilter.priority:                  Frame Filter API.    (line 131)
* frames-invalid annotation:             Invalidation.        (line   9)
* frozen-varobjs:                        GDB/MI Support Commands.
                                                              (line  75)
* ftrace:                                Create and Delete Tracepoints.
                                                              (line  50)
* Function:                              Functions In Python. (line   6)
* Function.invoke:                       Functions In Python. (line  19)
* Function.__init__:                     Functions In Python. (line  10)
* gcore:                                 Core File Generation.
                                                              (line  17)
* gdb-object-kind:                       GDB Scheme Data Types.
                                                              (line  10)
* gdb-version:                           Guile Configuration. (line  17)
* gdb.add_history:                       Basic Python.        (line 125)
* gdb.architecture_names:                Basic Python.        (line 295)
* gdb.Block:                             Blocks In Python.    (line   6)
* gdb.block_for_pc:                      Blocks In Python.    (line  64)
* gdb.block_for_pc <1>:                  Blocks In Python.    (line  64)
* gdb.BP_ACCESS_WATCHPOINT:              Breakpoints In Python.
                                                              (line  77)
* gdb.BP_BREAKPOINT:                     Breakpoints In Python.
                                                              (line  62)
* gdb.BP_CATCHPOINT:                     Breakpoints In Python.
                                                              (line  80)
* gdb.BP_HARDWARE_BREAKPOINT:            Breakpoints In Python.
                                                              (line  65)
* gdb.BP_HARDWARE_WATCHPOINT:            Breakpoints In Python.
                                                              (line  71)
* gdb.BP_READ_WATCHPOINT:                Breakpoints In Python.
                                                              (line  74)
* gdb.BP_WATCHPOINT:                     Breakpoints In Python.
                                                              (line  68)
* gdb.Breakpoint:                        Breakpoints In Python.
                                                              (line   6)
* gdb.breakpoints:                       Basic Python.        (line  59)
* gdb.breakpoints <1>:                   Basic Python.        (line  59)
* gdb.COMMAND_BREAKPOINTS:               CLI Commands In Python.
                                                              (line 144)
* gdb.COMMAND_DATA:                      CLI Commands In Python.
                                                              (line 115)
* gdb.COMMAND_FILES:                     CLI Commands In Python.
                                                              (line 126)
* gdb.COMMAND_MAINTENANCE:               CLI Commands In Python.
                                                              (line 173)
* gdb.COMMAND_NONE:                      CLI Commands In Python.
                                                              (line 105)
* gdb.COMMAND_OBSCURE:                   CLI Commands In Python.
                                                              (line 167)
* gdb.COMMAND_RUNNING:                   CLI Commands In Python.
                                                              (line 109)
* gdb.COMMAND_STACK:                     CLI Commands In Python.
                                                              (line 120)
* gdb.COMMAND_STATUS:                    CLI Commands In Python.
                                                              (line 138)
* gdb.COMMAND_SUPPORT:                   CLI Commands In Python.
                                                              (line 131)
* gdb.COMMAND_TRACEPOINTS:               CLI Commands In Python.
                                                              (line 150)
* gdb.COMMAND_TUI:                       CLI Commands In Python.
                                                              (line 156)
* gdb.COMMAND_USER:                      CLI Commands In Python.
                                                              (line 161)
* gdb.COMPLETE_COMMAND:                  CLI Commands In Python.
                                                              (line 194)
* gdb.COMPLETE_EXPRESSION:               CLI Commands In Python.
                                                              (line 202)
* gdb.COMPLETE_FILENAME:                 CLI Commands In Python.
                                                              (line 187)
* gdb.COMPLETE_LOCATION:                 CLI Commands In Python.
                                                              (line 190)
* gdb.COMPLETE_NONE:                     CLI Commands In Python.
                                                              (line 184)
* gdb.COMPLETE_SYMBOL:                   CLI Commands In Python.
                                                              (line 198)
* gdb.connections:                       Basic Python.        (line 302)
* gdb.convenience_variable:              Basic Python.        (line 141)
* gdb.convenience_variable <1>:          Basic Python.        (line 141)
* gdb.current_language:                  Basic Python.        (line 351)
* gdb.current_objfile:                   Objfiles In Python.  (line  15)
* gdb.current_objfile <1>:               Objfiles In Python.  (line  15)
* gdb.current_progspace:                 Progspaces In Python.
                                                              (line  14)
* gdb.current_progspace <1>:             Progspaces In Python.
                                                              (line  14)
* gdb.current_recording:                 Recordings In Python.
                                                              (line  21)
* gdb.decode_line:                       Basic Python.        (line 269)
* gdb.decode_line <1>:                   Basic Python.        (line 269)
* gdb.default_visualizer:                Pretty Printing API. (line  96)
* gdb.default_visualizer <1>:            Pretty Printing API. (line  96)
* gdb.disassembler.DisassembleInfo:      Disassembly In Python.
                                                              (line  10)
* gdb.error:                             Exception Handling.  (line  22)
* gdb.execute:                           Basic Python.        (line  40)
* gdb.execute <1>:                       Basic Python.        (line  40)
* gdb.find_pc_line:                      Basic Python.        (line 167)
* gdb.find_pc_line <1>:                  Basic Python.        (line 167)
* gdb.FinishBreakpoint:                  Finish Breakpoints in Python.
                                                              (line   6)
* gdb.flush:                             Basic Python.        (line 228)
* gdb.flush <1>:                         Basic Python.        (line 228)
* gdb.format_address:                    Basic Python.        (line 307)
* gdb.FrameDecorator:                    Frame Decorator API. (line  25)
* gdb.frame_stop_reason_string:          Frames In Python.    (line  29)
* gdb.Function:                          Functions In Python. (line   6)
* gdb.GdbError:                          Exception Handling.  (line  48)
* gdb.history:                           Basic Python.        (line 112)
* gdb.history <1>:                       Basic Python.        (line 112)
* gdb.history_count:                     Basic Python.        (line 137)
* gdb.host_charset:                      Basic Python.        (line 258)
* gdb.host_charset <1>:                  Basic Python.        (line 258)
* gdb.Inferior:                          Inferiors In Python. (line   6)
* gdb.InferiorCallPostEvent:             Events In Python.    (line 159)
* gdb.InferiorCallPreEvent:              Events In Python.    (line 149)
* gdb.inferiors:                         Inferiors In Python. (line  14)
* gdb.InferiorThread:                    Threads In Python.   (line   6)
* gdb.invalidate_cached_frames:          Frames In Python.    (line  34)
* gdb.invalidate_cached_frames <1>:      Frames In Python.    (line  34)
* gdb.LazyString:                        Lazy Strings In Python.
                                                              (line   6)
* gdb.LineTable:                         Line Tables In Python.
                                                              (line   6)
* gdb.lookup_global_symbol:              Symbols In Python.   (line  33)
* gdb.lookup_global_symbol <1>:          Symbols In Python.   (line  33)
* gdb.lookup_objfile:                    Objfiles In Python.  (line  28)
* gdb.lookup_objfile <1>:                Objfiles In Python.  (line  28)
* gdb.lookup_static_symbol:              Symbols In Python.   (line  45)
* gdb.lookup_static_symbol <1>:          Symbols In Python.   (line  45)
* gdb.lookup_static_symbols:             Symbols In Python.   (line  71)
* gdb.lookup_static_symbols <1>:         Symbols In Python.   (line  71)
* gdb.lookup_symbol:                     Symbols In Python.   (line  13)
* gdb.lookup_symbol <1>:                 Symbols In Python.   (line  13)
* gdb.lookup_type:                       Types In Python.     (line  11)
* gdb.lookup_type <1>:                   Types In Python.     (line  11)
* gdb.MemoryError:                       Exception Handling.  (line  30)
* gdb.newest_frame:                      Frames In Python.    (line  26)
* gdb.newest_frame <1>:                  Frames In Python.    (line  26)
* gdb.Objfile:                           Objfiles In Python.  (line   6)
* gdb.objfiles:                          Objfiles In Python.  (line  21)
* gdb.objfiles <1>:                      Objfiles In Python.  (line  21)
* gdb.Parameter:                         Parameters In Python.
                                                              (line   6)
* gdb.parameter:                         Basic Python.        (line  82)
* gdb.parameter <1>:                     Basic Python.        (line  82)
* gdb.PARAM_AUTO_BOOLEAN:                Parameters In Python.
                                                              (line 140)
* gdb.PARAM_BOOLEAN:                     Parameters In Python.
                                                              (line 136)
* gdb.PARAM_ENUM:                        Parameters In Python.
                                                              (line 184)
* gdb.PARAM_FILENAME:                    Parameters In Python.
                                                              (line 166)
* gdb.PARAM_INTEGER:                     Parameters In Python.
                                                              (line 149)
* gdb.PARAM_OPTIONAL_FILENAME:           Parameters In Python.
                                                              (line 163)
* gdb.PARAM_STRING:                      Parameters In Python.
                                                              (line 153)
* gdb.PARAM_STRING_NOESCAPE:             Parameters In Python.
                                                              (line 159)
* gdb.PARAM_UINTEGER:                    Parameters In Python.
                                                              (line 145)
* gdb.PARAM_ZINTEGER:                    Parameters In Python.
                                                              (line 170)
* gdb.PARAM_ZUINTEGER:                   Parameters In Python.
                                                              (line 174)
* gdb.PARAM_ZUINTEGER_UNLIMITED:         Parameters In Python.
                                                              (line 179)
* gdb.parse_and_eval:                    Basic Python.        (line 157)
* gdb.parse_and_eval <1>:                Basic Python.        (line 157)
* gdb.post_event:                        Basic Python.        (line 176)
* gdb.post_event <1>:                    Basic Python.        (line 176)
* gdb.pretty_printers:                   Selecting Pretty-Printers.
                                                              (line  12)
* gdb.pretty_printers <1>:               Selecting Pretty-Printers.
                                                              (line  12)
* gdb.print_options:                     Pretty Printing API. (line 106)
* gdb.print_options <1>:                 Pretty Printing API. (line 106)
* gdb.Progspace:                         Progspaces In Python.
                                                              (line   6)
* gdb.progspaces:                        Progspaces In Python.
                                                              (line  20)
* gdb.progspaces <1>:                    Progspaces In Python.
                                                              (line  20)
* gdb.prompt_hook:                       Basic Python.        (line 281)
* gdb.PYTHONDIR:                         Basic Python.        (line  37)
* gdb.PYTHONDIR <1>:                     Basic Python.        (line  37)
* gdb.rbreak:                            Basic Python.        (line  66)
* gdb.register_window_type:              TUI Windows In Python.
                                                              (line   8)
* gdb.register_window_type <1>:          TUI Windows In Python.
                                                              (line   8)
* gdb.search_memory:                     Inferiors In Python. (line  82)
* gdb.selected_frame:                    Frames In Python.    (line  22)
* gdb.selected_frame <1>:                Frames In Python.    (line  22)
* gdb.selected_inferior:                 Inferiors In Python. (line  17)
* gdb.selected_thread:                   Threads In Python.   (line  13)
* gdb.selected_thread <1>:               Threads In Python.   (line  13)
* gdb.set_convenience_variable:          Basic Python.        (line 148)
* gdb.set_convenience_variable <1>:      Basic Python.        (line 148)
* gdb.set_parameter:                     Basic Python.        (line  93)
* gdb.set_parameter <1>:                 Basic Python.        (line  93)
* gdb.solib_name:                        Basic Python.        (line 263)
* gdb.solib_name <1>:                    Basic Python.        (line 263)
* gdb.start_recording:                   Recordings In Python.
                                                              (line   9)
* gdb.STDERR:                            Basic Python.        (line 218)
* gdb.STDERR <1>:                        Basic Python.        (line 238)
* gdb.STDLOG:                            Basic Python.        (line 221)
* gdb.STDLOG <1>:                        Basic Python.        (line 241)
* gdb.STDOUT:                            Basic Python.        (line 215)
* gdb.STDOUT <1>:                        Basic Python.        (line 235)
* gdb.stop_recording:                    Recordings In Python.
                                                              (line  25)
* gdb.string_to_argv:                    CLI Commands In Python.
                                                              (line  63)
* gdb.Symbol:                            Symbols In Python.   (line   6)
* gdb.SYMBOL_COMMON_BLOCK_DOMAIN:        Symbols In Python.   (line 178)
* gdb.SYMBOL_LABEL_DOMAIN:               Symbols In Python.   (line 172)
* gdb.SYMBOL_LOC_ARG:                    Symbols In Python.   (line 197)
* gdb.SYMBOL_LOC_BLOCK:                  Symbols In Python.   (line 221)
* gdb.SYMBOL_LOC_COMMON_BLOCK:           Symbols In Python.   (line 238)
* gdb.SYMBOL_LOC_COMPUTED:               Symbols In Python.   (line 235)
* gdb.SYMBOL_LOC_CONST:                  Symbols In Python.   (line 188)
* gdb.SYMBOL_LOC_CONST_BYTES:            Symbols In Python.   (line 224)
* gdb.SYMBOL_LOC_LABEL:                  Symbols In Python.   (line 218)
* gdb.SYMBOL_LOC_LOCAL:                  Symbols In Python.   (line 211)
* gdb.SYMBOL_LOC_OPTIMIZED_OUT:          Symbols In Python.   (line 232)
* gdb.SYMBOL_LOC_REF_ARG:                Symbols In Python.   (line 201)
* gdb.SYMBOL_LOC_REGISTER:               Symbols In Python.   (line 194)
* gdb.SYMBOL_LOC_REGPARM_ADDR:           Symbols In Python.   (line 206)
* gdb.SYMBOL_LOC_STATIC:                 Symbols In Python.   (line 191)
* gdb.SYMBOL_LOC_TYPEDEF:                Symbols In Python.   (line 214)
* gdb.SYMBOL_LOC_UNDEF:                  Symbols In Python.   (line 184)
* gdb.SYMBOL_LOC_UNRESOLVED:             Symbols In Python.   (line 227)
* gdb.SYMBOL_MODULE_DOMAIN:              Symbols In Python.   (line 175)
* gdb.SYMBOL_STRUCT_DOMAIN:              Symbols In Python.   (line 169)
* gdb.SYMBOL_UNDEF_DOMAIN:               Symbols In Python.   (line 160)
* gdb.SYMBOL_VAR_DOMAIN:                 Symbols In Python.   (line 165)
* gdb.Symtab:                            Symbol Tables In Python.
                                                              (line   6)
* gdb.Symtab_and_line:                   Symbol Tables In Python.
                                                              (line   6)
* gdb.target_charset:                    Basic Python.        (line 247)
* gdb.target_charset <1>:                Basic Python.        (line 247)
* gdb.target_wide_charset:               Basic Python.        (line 252)
* gdb.target_wide_charset <1>:           Basic Python.        (line 252)
* gdb.Type:                              Types In Python.     (line   6)
* gdb.TYPE_CODE_ARRAY:                   Types In Python.     (line 254)
* gdb.TYPE_CODE_BITSTRING:               Types In Python.     (line 292)
* gdb.TYPE_CODE_BOOL:                    Types In Python.     (line 316)
* gdb.TYPE_CODE_CHAR:                    Types In Python.     (line 313)
* gdb.TYPE_CODE_COMPLEX:                 Types In Python.     (line 319)
* gdb.TYPE_CODE_DECFLOAT:                Types In Python.     (line 328)
* gdb.TYPE_CODE_ENUM:                    Types In Python.     (line 263)
* gdb.TYPE_CODE_ERROR:                   Types In Python.     (line 295)
* gdb.TYPE_CODE_FIXED_POINT:             Types In Python.     (line 339)
* gdb.TYPE_CODE_FIXED_POINT <1>:         Types In Guile.      (line 238)
* gdb.TYPE_CODE_FLAGS:                   Types In Python.     (line 266)
* gdb.TYPE_CODE_FLT:                     Types In Python.     (line 275)
* gdb.TYPE_CODE_FUNC:                    Types In Python.     (line 269)
* gdb.TYPE_CODE_INT:                     Types In Python.     (line 272)
* gdb.TYPE_CODE_INTERNAL_FUNCTION:       Types In Python.     (line 331)
* gdb.TYPE_CODE_MEMBERPTR:               Types In Python.     (line 304)
* gdb.TYPE_CODE_METHOD:                  Types In Python.     (line 298)
* gdb.TYPE_CODE_METHODPTR:               Types In Python.     (line 301)
* gdb.TYPE_CODE_NAMESPACE:               Types In Python.     (line 325)
* gdb.TYPE_CODE_NAMESPACE <1>:           Types In Python.     (line 342)
* gdb.TYPE_CODE_NAMESPACE <2>:           Types In Guile.      (line 241)
* gdb.TYPE_CODE_PTR:                     Types In Python.     (line 251)
* gdb.TYPE_CODE_RANGE:                   Types In Python.     (line 284)
* gdb.TYPE_CODE_REF:                     Types In Python.     (line 307)
* gdb.TYPE_CODE_RVALUE_REF:              Types In Python.     (line 310)
* gdb.TYPE_CODE_SET:                     Types In Python.     (line 281)
* gdb.TYPE_CODE_STRING:                  Types In Python.     (line 287)
* gdb.TYPE_CODE_STRUCT:                  Types In Python.     (line 257)
* gdb.TYPE_CODE_TYPEDEF:                 Types In Python.     (line 322)
* gdb.TYPE_CODE_UNION:                   Types In Python.     (line 260)
* gdb.TYPE_CODE_VOID:                    Types In Python.     (line 278)
* gdb.TYPE_CODE_XMETHOD:                 Types In Python.     (line 335)
* gdb.TYPE_CODE_XMETHOD <1>:             Types In Guile.      (line 234)
* gdb.unwinder.register_unwinder:        Unwinding Frames in Python.
                                                              (line 165)
* gdb.UnwindInfo.add_saved_register:     Unwinding Frames in Python.
                                                              (line 115)
* gdb.with_parameter:                    Basic Python.        (line  98)
* gdb.with_parameter <1>:                Basic Python.        (line  98)
* gdb.WP_ACCESS:                         Breakpoints In Python.
                                                              (line  95)
* gdb.WP_READ:                           Breakpoints In Python.
                                                              (line  89)
* gdb.WP_WRITE:                          Breakpoints In Python.
                                                              (line  92)
* gdb.write:                             Basic Python.        (line 210)
* gdb.write <1>:                         Basic Python.        (line 210)
* gdb:error:                             Guile Exception Handling.
                                                              (line  69)
* gdb:invalid-object:                    Guile Exception Handling.
                                                              (line  72)
* gdb:memory-error:                      Guile Exception Handling.
                                                              (line  80)
* gdb:pp-type-error:                     Guile Exception Handling.
                                                              (line  84)
* GdbExitingEvent.exit_code:             Events In Python.    (line 245)
* gdbserver:                             Server.              (line   6)
* gdb_init_reader:                       Writing JIT Debug Info Readers.
                                                              (line  20)
* generate-core-file:                    Core File Generation.
                                                              (line  17)
* get-basic-type:                        Guile Types Module.  (line  13)
* getDebugChar:                          Bootstrapping.       (line  14)
* gnu_debuglink_crc32:                   Separate Debug Files.
                                                              (line 169)
* gr:                                    Guile Commands.      (line   8)
* gu:                                    Guile Commands.      (line  15)
* guile:                                 Guile Commands.      (line  15)
* guile-data-directory:                  Guile Configuration. (line  13)
* guile-repl:                            Guile Commands.      (line   8)
* h (help):                              Help.                (line   9)
* handle:                                Signals.             (line  49)
* handle_exception:                      Stub Contents.       (line  15)
* hbreak:                                Set Breaks.          (line 171)
* help:                                  Help.                (line   6)
* help function:                         Convenience Funs.    (line 228)
* help target:                           Target Commands.     (line  19)
* help user-defined:                     Define.              (line 123)
* history-append!:                       Basic Guile.         (line 105)
* history-preserve-point:                Readline Init File Syntax.
                                                              (line 162)
* history-ref:                           Basic Guile.         (line  87)
* history-search-backward ():            Commands For History.
                                                              (line  56)
* history-search-forward ():             Commands For History.
                                                              (line  50)
* history-size:                          Readline Init File Syntax.
                                                              (line 168)
* history-substring-search-backward ():  Commands For History.
                                                              (line  68)
* history-substring-search-forward ():   Commands For History.
                                                              (line  62)
* hook:                                  Hooks.               (line   6)
* hookpost:                              Hooks.               (line  11)
* horizontal-scroll-mode:                Readline Init File Syntax.
                                                              (line 177)
* host-config:                           Guile Configuration. (line  20)
* i (info):                              Help.                (line 137)
* i (SingleKey TUI key):                 TUI Single Key Mode. (line  34)
* if:                                    Command Files.       (line  74)
* ignore:                                Conditions.          (line  96)
* inferior:                              Inferiors Connections and Programs.
                                                              (line  57)
* inferior INFNO:                        Inferiors Connections and Programs.
                                                              (line  95)
* Inferior.architecture:                 Inferiors In Python. (line  61)
* Inferior.connection:                   Inferiors In Python. (line  25)
* Inferior.connection_num:               Inferiors In Python. (line  29)
* Inferior.is_valid:                     Inferiors In Python. (line  49)
* Inferior.num:                          Inferiors In Python. (line  22)
* Inferior.pid:                          Inferiors In Python. (line  36)
* Inferior.progspace:                    Inferiors In Python. (line  44)
* Inferior.read_memory:                  Inferiors In Python. (line  68)
* Inferior.read_memory <1>:              Inferiors In Python. (line  68)
* Inferior.search_memory:                Inferiors In Python. (line  82)
* Inferior.threads:                      Inferiors In Python. (line  56)
* Inferior.thread_from_handle:           Inferiors In Python. (line  91)
* Inferior.thread_from_handle <1>:       Inferiors In Python. (line  91)
* Inferior.thread_from_thread_handle:    Inferiors In Python. (line  91)
* Inferior.was_attached:                 Inferiors In Python. (line  40)
* Inferior.write_memory:                 Inferiors In Python. (line  75)
* Inferior.write_memory <1>:             Inferiors In Python. (line  75)
* InferiorCallPostEvent.address:         Events In Python.    (line 166)
* InferiorCallPostEvent.ptid:            Events In Python.    (line 163)
* InferiorCallPreEvent.address:          Events In Python.    (line 156)
* InferiorCallPreEvent.ptid:             Events In Python.    (line 153)
* InferiorDeletedEvent.inferior:         Events In Python.    (line 228)
* InferiorThread.details:                Threads In Python.   (line  52)
* InferiorThread.global_num:             Threads In Python.   (line  35)
* InferiorThread.handle:                 Threads In Python.   (line  90)
* InferiorThread.inferior:               Threads In Python.   (line  48)
* InferiorThread.is_exited:              Threads In Python.   (line  87)
* InferiorThread.is_running:             Threads In Python.   (line  84)
* InferiorThread.is_stopped:             Threads In Python.   (line  81)
* InferiorThread.is_valid:               Threads In Python.   (line  70)
* InferiorThread.name:                   Threads In Python.   (line  22)
* InferiorThread.num:                    Threads In Python.   (line  32)
* InferiorThread.ptid:                   Threads In Python.   (line  40)
* InferiorThread.switch:                 Threads In Python.   (line  77)
* info:                                  Help.                (line 137)
* info address:                          Symbols.             (line  98)
* info all-registers:                    Registers.           (line  15)
* info args:                             Frame Info.          (line  43)
* info auto-load:                        Auto-loading.        (line  52)
* info auto-load gdb-scripts:            Auto-loading sequences.
                                                              (line  21)
* info auto-load guile-scripts:          Guile Auto-loading.  (line  23)
* info auto-load libthread-db:           libthread_db.so.1 file.
                                                              (line  29)
* info auto-load local-gdbinit:          Init File in the Current Directory.
                                                              (line  22)
* info auto-load python-scripts:         Python Auto-loading. (line  23)
* info auxv:                             OS Information.      (line  20)
* info breakpoints:                      Set Breaks.          (line 243)
* info checkpoints:                      Checkpoint/Restart.  (line  31)
* info classes:                          Symbols.             (line 604)
* info common:                           Special Fortran Commands.
                                                              (line   9)
* info connections [ ID... ]:            Inferiors Connections and Programs.
                                                              (line  68)
* info copying:                          Help.                (line 174)
* info dcache:                           Caching Target Data. (line  46)
* info display:                          Auto Display.        (line  78)
* info dll:                              Files.               (line 346)
* info dos:                              DJGPP Native.        (line  15)
* info exceptions:                       Ada Exceptions.      (line   8)
* info extensions:                       Show.                (line  34)
* info f (info frame):                   Frame Info.          (line  17)
* info files:                            Files.               (line 211)
* info float:                            Floating Point Hardware.
                                                              (line   9)
* info frame:                            Frame Info.          (line  17)
* info frame, show the source language:  Show.                (line  15)
* info frame-filter:                     Frame Filter Management.
                                                              (line  12)
* info functions:                        Symbols.             (line 501)
* info handle:                           Signals.             (line  33)
* info inferiors [ ID... ]:              Inferiors Connections and Programs.
                                                              (line  27)
* info io_registers, AVR:                AVR.                 (line  10)
* info line:                             Machine Code.        (line  14)
* info line, and Objective-C:            Method Names in Commands.
                                                              (line   9)
* info locals:                           Frame Info.          (line  67)
* info macro:                            Macros.              (line  47)
* info macros:                           Macros.              (line  54)
* info mem:                              Memory Region Attributes.
                                                              (line  45)
* info meminfo:                          Process Information. (line 131)
* info module:                           Symbols.             (line 589)
* info modules:                          Symbols.             (line 581)
* info os:                               OS Information.      (line  37)
* info os cpus:                          OS Information.      (line  43)
* info os files:                         OS Information.      (line  51)
* info os modules:                       OS Information.      (line  57)
* info os msg:                           OS Information.      (line  64)
* info os processes:                     OS Information.      (line  75)
* info os procgroups:                    OS Information.      (line  84)
* info os semaphores:                    OS Information.      (line  94)
* info os shm:                           OS Information.      (line 102)
* info os sockets:                       OS Information.      (line 112)
* info os threads:                       OS Information.      (line 119)
* info pidlist:                          Process Information. (line 127)
* info pretty-printer:                   Pretty-Printer Commands.
                                                              (line   6)
* info probes:                           Static Probe Points. (line  32)
* info proc:                             Process Information. (line  25)
* info program:                          Stopping.            (line  18)
* info record:                           Process Record and Replay.
                                                              (line 323)
* info registers:                        Registers.           (line  11)
* info scope:                            Symbols.             (line 436)
* info selectors:                        Symbols.             (line 610)
* info serial:                           DJGPP Native.        (line 139)
* info set:                              Help.                (line 157)
* info share:                            Files.               (line 340)
* info sharedlibrary:                    Files.               (line 340)
* info signals:                          Signals.             (line  33)
* info skip:                             Skipping Over Functions and Files.
                                                              (line 113)
* info source:                           Symbols.             (line 456)
* info source, show the source language: Show.                (line  21)
* info sources:                          Symbols.             (line 472)
* info sources <1>:                      GDB/MI File Commands.
                                                              (line  93)
* info stack:                            Backtrace.           (line  94)
* info static-tracepoint-markers:        Listing Static Tracepoint Markers.
                                                              (line   6)
* info symbol:                           Symbols.             (line 108)
* info target:                           Files.               (line 211)
* info task TASKNO:                      Ada Tasks.           (line 102)
* info tasks:                            Ada Tasks.           (line   9)
* info terminal:                         Input/Output.        (line  12)
* info threads:                          Threads.             (line 122)
* info tp [N...]:                        Listing Tracepoints. (line   6)
* info tracepoints [N...]:               Listing Tracepoints. (line   6)
* info tvariables:                       Trace State Variables.
                                                              (line  37)
* info type-printers:                    Symbols.             (line 424)
* info types:                            Symbols.             (line 399)
* info variables:                        Symbols.             (line 546)
* info vector:                           Vector Unit.         (line   9)
* info w32:                              Cygwin Native.       (line  19)
* info warranty:                         Help.                (line 178)
* info watchpoints [LIST...]:            Set Watchpoints.     (line  90)
* info win:                              TUI Commands.        (line  26)
* info-gdb-mi-command:                   GDB/MI Support Commands.
                                                              (line  99)
* init-if-undefined:                     Convenience Vars.    (line  42)
* input-meta:                            Readline Init File Syntax.
                                                              (line 186)
* input-port:                            I/O Ports in Guile.  (line   6)
* insert-comment (M-#):                  Miscellaneous Commands.
                                                              (line  61)
* insert-completions (M-*):              Commands For Completion.
                                                              (line  18)
* inspect:                               Data.                (line   6)
* instantiate on type_printer:           Type Printing API.   (line  22)
* Instruction.data:                      Recordings In Python.
                                                              (line  69)
* Instruction.decoded:                   Recordings In Python.
                                                              (line  73)
* Instruction.pc:                        Recordings In Python.
                                                              (line  66)
* Instruction.size:                      Recordings In Python.
                                                              (line  76)
* interpreter-exec:                      Interpreters.        (line  39)
* interrupt:                             Background Execution.
                                                              (line  59)
* isearch-terminators:                   Readline Init File Syntax.
                                                              (line 194)
* iterator->list:                        Iterators In Guile.  (line  83)
* iterator-filter:                       Iterators In Guile.  (line  94)
* iterator-for-each:                     Iterators In Guile.  (line  90)
* iterator-map:                          Iterators In Guile.  (line  86)
* iterator-next!:                        Iterators In Guile.  (line  63)
* iterator-object:                       Iterators In Guile.  (line  53)
* iterator-progress:                     Iterators In Guile.  (line  57)
* iterator-until:                        Iterators In Guile.  (line  98)
* iterator?:                             Iterators In Guile.  (line  49)
* j (jump):                              Jumping.             (line  10)
* jit-reader-load:                       Using JIT Debug Info Readers.
                                                              (line   6)
* jit-reader-unload:                     Using JIT Debug Info Readers.
                                                              (line   6)
* jump:                                  Jumping.             (line  10)
* jump, and Objective-C:                 Method Names in Commands.
                                                              (line   9)
* KeyboardInterrupt:                     Exception Handling.  (line  34)
* keymap:                                Readline Init File Syntax.
                                                              (line 201)
* kill:                                  Kill Process.        (line   6)
* kill inferiors INFNO...:               Inferiors Connections and Programs.
                                                              (line 167)
* kill-line (C-k):                       Commands For Killing.
                                                              (line   6)
* kill-region ():                        Commands For Killing.
                                                              (line  52)
* kill-whole-line ():                    Commands For Killing.
                                                              (line  19)
* kill-word (M-d):                       Commands For Killing.
                                                              (line  23)
* kvm:                                   BSD libkvm Interface.
                                                              (line  24)
* l (list):                              List.                (line   6)
* language-option:                       GDB/MI Support Commands.
                                                              (line  96)
* layout:                                TUI Commands.        (line  74)
* lazy-string->value:                    Lazy Strings In Guile.
                                                              (line  46)
* lazy-string-address:                   Lazy Strings In Guile.
                                                              (line  26)
* lazy-string-encoding:                  Lazy Strings In Guile.
                                                              (line  34)
* lazy-string-length:                    Lazy Strings In Guile.
                                                              (line  29)
* lazy-string-type:                      Lazy Strings In Guile.
                                                              (line  40)
* lazy-string?:                          Lazy Strings In Guile.
                                                              (line  22)
* LazyString.address:                    Lazy Strings In Python.
                                                              (line  26)
* LazyString.encoding:                   Lazy Strings In Python.
                                                              (line  36)
* LazyString.length:                     Lazy Strings In Python.
                                                              (line  30)
* LazyString.type:                       Lazy Strings In Python.
                                                              (line  43)
* LazyString.value:                      Lazy Strings In Python.
                                                              (line  20)
* Left:                                  TUI Keys.            (line  73)
* LineTable.has_line:                    Line Tables In Python.
                                                              (line  57)
* LineTable.line:                        Line Tables In Python.
                                                              (line  51)
* LineTable.source_lines:                Line Tables In Python.
                                                              (line  62)
* LineTableEntry.line:                   Line Tables In Python.
                                                              (line  16)
* LineTableEntry.pc:                     Line Tables In Python.
                                                              (line  21)
* list:                                  List.                (line   6)
* list, and Objective-C:                 Method Names in Commands.
                                                              (line   9)
* load FILENAME OFFSET:                  Target Commands.     (line 114)
* lookup-block:                          Blocks In Guile.     (line 117)
* lookup-global-symbol:                  Symbols In Guile.    (line  99)
* lookup-symbol:                         Symbols In Guile.    (line  79)
* lookup-type:                           Types In Guile.      (line  15)
* loop_break:                            Command Files.       (line  93)
* loop_continue:                         Command Files.       (line  97)
* macro define:                          Macros.              (line  60)
* macro exp1:                            Macros.              (line  36)
* macro expand:                          Macros.              (line  29)
* macro list:                            Macros.              (line  81)
* macro undef:                           Macros.              (line  75)
* maint ada set ignore-descriptive-types: Ada Glitches.       (line  73)
* maint ada show ignore-descriptive-types: Ada Glitches.      (line  77)
* maint agent:                           Maintenance Commands.
                                                              (line  11)
* maint agent-eval:                      Maintenance Commands.
                                                              (line  11)
* maint agent-printf:                    Maintenance Commands.
                                                              (line  27)
* maint btrace clear:                    Maintenance Commands.
                                                              (line 100)
* maint btrace clear-packet-history:     Maintenance Commands.
                                                              (line  95)
* maint btrace packet-history:           Maintenance Commands.
                                                              (line  66)
* maint check libthread-db:              Maintenance Commands.
                                                              (line 309)
* maint check xml-descriptions:          Maintenance Commands.
                                                              (line 305)
* maint check-psymtabs:                  Maintenance Commands.
                                                              (line 174)
* maint check-symtabs:                   Maintenance Commands.
                                                              (line 179)
* maint cplus first_component:           Maintenance Commands.
                                                              (line 194)
* maint cplus namespace:                 Maintenance Commands.
                                                              (line 197)
* maint demangler-warning:               Maintenance Commands.
                                                              (line 213)
* maint deprecate:                       Maintenance Commands.
                                                              (line 200)
* maint dump-me:                         Maintenance Commands.
                                                              (line 208)
* maint expand-symtabs:                  Maintenance Commands.
                                                              (line 182)
* maint flush dcache:                    Caching Target Data. (line  71)
* maint flush register-cache:            Maintenance Commands.
                                                              (line 387)
* maint flush source-cache:              Maintenance Commands.
                                                              (line 394)
* maint flush symbol-cache:              Symbols.             (line 772)
* maint flush-symbol-cache:              Symbols.             (line 772)
* maint info bdccsr, S12Z:               S12Z.                (line  10)
* maint info bfds:                       File Caching.        (line  10)
* maint info breakpoints:                Maintenance Commands.
                                                              (line  33)
* maint info btrace:                     Maintenance Commands.
                                                              (line  63)
* maint info jit:                        Maintenance Commands.
                                                              (line 113)
* maint info line-table:                 Symbols.             (line 726)
* maint info program-spaces:             Inferiors Connections and Programs.
                                                              (line 202)
* maint info psymtabs:                   Symbols.             (line 679)
* maint info python-disassemblers:       Maintenance Commands.
                                                              (line 117)
* maint info sections:                   Files.               (line 220)
* maint info selftests:                  Maintenance Commands.
                                                              (line 469)
* maint info sol-threads:                Threads.             (line 174)
* maint info symtabs:                    Symbols.             (line 679)
* maint info target-sections:            Files.               (line 269)
* maint internal-error:                  Maintenance Commands.
                                                              (line 213)
* maint internal-warning:                Maintenance Commands.
                                                              (line 213)
* maint packet:                          Connections In Python.
                                                              (line  84)
* maint packet <1>:                      Maintenance Commands.
                                                              (line 269)
* maint print arc arc-instruction:       ARC.                 (line  17)
* maint print architecture:              Maintenance Commands.
                                                              (line 278)
* maint print c-tdesc:                   Maintenance Commands.
                                                              (line 282)
* maint print cooked-registers:          Maintenance Commands.
                                                              (line 352)
* maint print core-file-backed-mappings: Maintenance Commands.
                                                              (line 317)
* maint print dummy-frames:              Maintenance Commands.
                                                              (line 323)
* maint print frame-id:                  Maintenance Commands.
                                                              (line 339)
* maint print msymbols:                  Symbols.             (line 653)
* maint print objfiles:                  Maintenance Commands.
                                                              (line 405)
* maint print psymbols:                  Symbols.             (line 653)
* maint print raw-registers:             Maintenance Commands.
                                                              (line 352)
* maint print reggroups:                 Maintenance Commands.
                                                              (line 371)
* maint print register-groups:           Maintenance Commands.
                                                              (line 352)
* maint print registers:                 Maintenance Commands.
                                                              (line 352)
* maint print remote-registers:          Maintenance Commands.
                                                              (line 352)
* maint print section-scripts:           Maintenance Commands.
                                                              (line 420)
* maint print statistics:                Maintenance Commands.
                                                              (line 427)
* maint print symbol-cache:              Symbols.             (line 764)
* maint print symbol-cache-statistics:   Symbols.             (line 768)
* maint print symbols:                   Symbols.             (line 653)
* maint print target-stack:              Maintenance Commands.
                                                              (line 440)
* maint print type:                      Maintenance Commands.
                                                              (line 452)
* maint print unwind, HPPA:              HPPA.                (line  17)
* maint print user-registers:            Maintenance Commands.
                                                              (line 411)
* maint print xml-tdesc:                 Maintenance Commands.
                                                              (line 297)
* maint selftest:                        Maintenance Commands.
                                                              (line 459)
* maint set backtrace-on-fatal-signal:   Maintenance Commands.
                                                              (line 741)
* maint set bfd-sharing:                 File Caching.        (line  14)
* maint set btrace pt skip-pad:          Maintenance Commands.
                                                              (line 108)
* maint set catch-demangler-crashes:     Maintenance Commands.
                                                              (line 186)
* maint set check-libthread-db:          Maintenance Commands.
                                                              (line 649)
* maint set demangler-warning:           Maintenance Commands.
                                                              (line 237)
* maint set dwarf always-disassemble:    Maintenance Commands.
                                                              (line 472)
* maint set dwarf max-cache-age:         Maintenance Commands.
                                                              (line 493)
* maint set dwarf unwinders:             Maintenance Commands.
                                                              (line 507)
* maint set gnu-source-highlight enabled: Maintenance Commands.
                                                              (line 658)
* maint set ignore-prologue-end-flag:    Symbols.             (line 780)
* maint set internal-error:              Maintenance Commands.
                                                              (line 237)
* maint set internal-error <1>:          Maintenance Commands.
                                                              (line 260)
* maint set internal-warning:            Maintenance Commands.
                                                              (line 237)
* maint set internal-warning <1>:        Maintenance Commands.
                                                              (line 260)
* maint set libopcodes-styling enabled:  Maintenance Commands.
                                                              (line 675)
* maint set per-command:                 Maintenance Commands.
                                                              (line 610)
* maint set profile:                     Maintenance Commands.
                                                              (line 541)
* maint set selftest verbose:            Maintenance Commands.
                                                              (line 465)
* maint set show-all-tib:                Maintenance Commands.
                                                              (line 565)
* maint set show-debug-regs:             Maintenance Commands.
                                                              (line 557)
* maint set symbol-cache-size:           Symbols.             (line 756)
* maint set target-async:                Maintenance Commands.
                                                              (line 571)
* maint set target-non-stop MODE [on|off|auto]: Maintenance Commands.
                                                              (line 579)
* maint set test-settings:               Maintenance Commands.
                                                              (line 735)
* maint set tui-resize-message:          Maintenance Commands.
                                                              (line 599)
* maint set worker-threads:              Maintenance Commands.
                                                              (line 530)
* maint show backtrace-on-fatal-signal:  Maintenance Commands.
                                                              (line 741)
* maint show bfd-sharing:                File Caching.        (line  14)
* maint show btrace pt skip-pad:         Maintenance Commands.
                                                              (line 109)
* maint show catch-demangler-crashes:    Maintenance Commands.
                                                              (line 186)
* maint show check-libthread-db:         Maintenance Commands.
                                                              (line 649)
* maint show demangler-warning:          Maintenance Commands.
                                                              (line 237)
* maint show dwarf always-disassemble:   Maintenance Commands.
                                                              (line 472)
* maint show dwarf max-cache-age:        Maintenance Commands.
                                                              (line 493)
* maint show dwarf unwinders:            Maintenance Commands.
                                                              (line 507)
* maint show gnu-source-highlight enabled: Maintenance Commands.
                                                              (line 658)
* maint show ignore-prologue-end-flag:   Symbols.             (line 787)
* maint show internal-error:             Maintenance Commands.
                                                              (line 237)
* maint show internal-error <1>:         Maintenance Commands.
                                                              (line 260)
* maint show internal-warning:           Maintenance Commands.
                                                              (line 237)
* maint show internal-warning <1>:       Maintenance Commands.
                                                              (line 260)
* maint show libopcodes-styling enabled: Maintenance Commands.
                                                              (line 675)
* maint show per-command:                Maintenance Commands.
                                                              (line 610)
* maint show profile:                    Maintenance Commands.
                                                              (line 541)
* maint show selftest verbose:           Maintenance Commands.
                                                              (line 465)
* maint show show-all-tib:               Maintenance Commands.
                                                              (line 565)
* maint show show-debug-regs:            Maintenance Commands.
                                                              (line 557)
* maint show symbol-cache-size:          Symbols.             (line 761)
* maint show target-async:               Maintenance Commands.
                                                              (line 571)
* maint show target-non-stop:            Maintenance Commands.
                                                              (line 579)
* maint show test-options-completion-result: Maintenance Commands.
                                                              (line 730)
* maint show test-settings:              Maintenance Commands.
                                                              (line 735)
* maint show tui-resize-message:         Maintenance Commands.
                                                              (line 599)
* maint show worker-threads:             Maintenance Commands.
                                                              (line 530)
* maint space:                           Maintenance Commands.
                                                              (line 694)
* maint test-options:                    Maintenance Commands.
                                                              (line 716)
* maint time:                            Maintenance Commands.
                                                              (line 699)
* maint translate-address:               Maintenance Commands.
                                                              (line 703)
* maint undeprecate:                     Maintenance Commands.
                                                              (line 200)
* maint with:                            Maintenance Commands.
                                                              (line 757)
* make:                                  Shell Commands.      (line  22)
* make-block-symbols-iterator:           Blocks In Guile.     (line 105)
* make-breakpoint:                       Breakpoints In Guile.
                                                              (line  19)
* make-command:                          Commands In Guile.   (line  15)
* make-enum-hashtable:                   Guile Types Module.  (line  37)
* make-exception:                        Guile Exception Handling.
                                                              (line  91)
* make-field-iterator:                   Types In Guile.      (line 125)
* make-iterator:                         Iterators In Guile.  (line  11)
* make-lazy-value:                       Values From Inferior In Guile.
                                                              (line 339)
* make-list-iterator:                    Iterators In Guile.  (line  80)
* make-parameter:                        Parameters In Guile. (line  22)
* make-pretty-printer:                   Guile Pretty Printing API.
                                                              (line  15)
* make-pretty-printer-worker:            Guile Pretty Printing API.
                                                              (line  42)
* make-value:                            Values From Inferior In Guile.
                                                              (line  45)
* mark-modified-lines:                   Readline Init File Syntax.
                                                              (line 231)
* mark-symlinked-directories:            Readline Init File Syntax.
                                                              (line 236)
* match-hidden-files:                    Readline Init File Syntax.
                                                              (line 241)
* may-insert-breakpoints:                Observer Mode.       (line  50)
* may-insert-fast-tracepoints:           Observer Mode.       (line  69)
* may-insert-tracepoints:                Observer Mode.       (line  59)
* may-interrupt:                         Observer Mode.       (line  79)
* may-write-memory:                      Observer Mode.       (line  41)
* may-write-registers:                   Observer Mode.       (line  32)
* mem:                                   Memory Region Attributes.
                                                              (line  22)
* memory-port-range:                     Memory Ports in Guile.
                                                              (line  33)
* memory-port-read-buffer-size:          Memory Ports in Guile.
                                                              (line  37)
* memory-port-write-buffer-size:         Memory Ports in Guile.
                                                              (line  52)
* memory-port?:                          Memory Ports in Guile.
                                                              (line  29)
* memory-tag check:                      Memory Tagging.      (line  45)
* memory-tag print-allocation-tag:       Memory Tagging.      (line  39)
* memory-tag print-logical-tag:          Memory Tagging.      (line  35)
* memory-tag setatag:                    Memory Tagging.      (line  42)
* memory-tag with-logical-tag:           Memory Tagging.      (line  36)
* MemoryChangedEvent.address:            Events In Python.    (line 175)
* MemoryChangedEvent.length:             Events In Python.    (line 178)
* memset:                                Bootstrapping.       (line  70)
* menu-complete ():                      Commands For Completion.
                                                              (line  22)
* menu-complete-backward ():             Commands For Completion.
                                                              (line  34)
* menu-complete-display-prefix:          Readline Init File Syntax.
                                                              (line 248)
* meta-flag:                             Readline Init File Syntax.
                                                              (line 186)
* methods:                               Xmethod API.         (line  22)
* MICommand.installed:                   GDB/MI Commands In Python.
                                                              (line  70)
* MICommand.invoke:                      GDB/MI Commands In Python.
                                                              (line  22)
* MICommand.name:                        GDB/MI Commands In Python.
                                                              (line  66)
* MICommand.__init__:                    GDB/MI Commands In Python.
                                                              (line  10)
* monitor:                               Connecting.          (line 279)
* n (next):                              Continuing and Stepping.
                                                              (line  77)
* n (SingleKey TUI key):                 TUI Single Key Mode. (line  19)
* name:                                  Xmethod API.         (line  15)
* name of type_printer:                  Type Printing API.   (line  18)
* new-ui:                                Interpreters.        (line  68)
* newest-frame:                          Frames In Guile.     (line 160)
* NewInferiorEvent.inferior:             Events In Python.    (line 217)
* NewObjFileEvent.new_objfile:           Events In Python.    (line 118)
* NewObjFileEvent.objfile:               Events In Python.    (line 129)
* NewThreadEvent.inferior_thread:        Events In Python.    (line 236)
* next:                                  Continuing and Stepping.
                                                              (line  77)
* next&:                                 Background Execution.
                                                              (line  34)
* next-history (C-n):                    Commands For History.
                                                              (line  16)
* next-screen-line ():                   Commands For Moving. (line  33)
* nexti:                                 Continuing and Stepping.
                                                              (line 209)
* nexti&:                                Background Execution.
                                                              (line  37)
* ni (nexti):                            Continuing and Stepping.
                                                              (line 209)
* non-incremental-forward-search-history (M-n): Commands For History.
                                                              (line  44)
* non-incremental-reverse-search-history (M-p): Commands For History.
                                                              (line  38)
* nosharedlibrary:                       Files.               (line 358)
* o (SingleKey TUI key):                 TUI Single Key Mode. (line  22)
* Objfile:                               Objfiles In Python.  (line   6)
* objfile-filename:                      Objfiles In Guile.   (line  28)
* objfile-pretty-printers:               Objfiles In Guile.   (line  36)
* objfile-progspace:                     Objfiles In Guile.   (line  32)
* objfile-valid?:                        Objfiles In Guile.   (line  21)
* Objfile.add_separate_debug_file:       Objfiles In Python.  (line 132)
* Objfile.build_id:                      Objfiles In Python.  (line  74)
* Objfile.filename:                      Objfiles In Python.  (line  49)
* Objfile.frame_filters:                 Objfiles In Python.  (line 100)
* Objfile.is_file:                       Objfiles In Python.  (line  62)
* Objfile.is_valid:                      Objfiles In Python.  (line 125)
* Objfile.lookup_global_symbol:          Objfiles In Python.  (line 141)
* Objfile.lookup_static_symbol:          Objfiles In Python.  (line 152)
* Objfile.owner:                         Objfiles In Python.  (line  67)
* Objfile.pretty_printers:               Objfiles In Python.  (line  88)
* Objfile.progspace:                     Objfiles In Python.  (line  84)
* Objfile.type_printers:                 Objfiles In Python.  (line  96)
* Objfile.username:                      Objfiles In Python.  (line  56)
* objfile?:                              Objfiles In Guile.   (line  17)
* objfiles:                              Objfiles In Guile.   (line  52)
* observer:                              Observer Mode.       (line  22)
* open-memory:                           Memory Ports in Guile.
                                                              (line  11)
* operate-and-get-next (C-o):            Commands For History.
                                                              (line  95)
* output:                                Output.              (line  35)
* output-meta:                           Readline Init File Syntax.
                                                              (line 253)
* output-port:                           I/O Ports in Guile.  (line   9)
* overlay:                               Overlay Commands.    (line  17)
* overload-choice annotation:            Prompting.           (line  32)
* overwrite-mode ():                     Commands For Text.   (line  73)
* page-completions:                      Readline Init File Syntax.
                                                              (line 259)
* Parameter:                             Parameters In Python.
                                                              (line   6)
* Parameter <1>:                         Parameters In Guile. (line   6)
* parameter-value:                       Parameters In Guile. (line 104)
* Parameter.get_set_string:              Parameters In Python.
                                                              (line  96)
* Parameter.get_show_string:             Parameters In Python.
                                                              (line 126)
* Parameter.set_doc:                     Parameters In Python.
                                                              (line  56)
* Parameter.show_doc:                    Parameters In Python.
                                                              (line  72)
* Parameter.value:                       Parameters In Python.
                                                              (line  88)
* Parameter.__init__:                    Parameters In Python.
                                                              (line  18)
* parameter?:                            Parameters In Guile. (line 100)
* PARAM_AUTO_BOOLEAN:                    Parameters In Python.
                                                              (line 140)
* PARAM_AUTO_BOOLEAN <1>:                Parameters In Guile. (line 121)
* PARAM_BOOLEAN:                         Parameters In Python.
                                                              (line 136)
* PARAM_BOOLEAN <1>:                     Parameters In Guile. (line 117)
* PARAM_ENUM:                            Parameters In Python.
                                                              (line 184)
* PARAM_ENUM <1>:                        Parameters In Guile. (line 159)
* PARAM_FILENAME:                        Parameters In Python.
                                                              (line 166)
* PARAM_FILENAME <1>:                    Parameters In Guile. (line 155)
* PARAM_INTEGER:                         Parameters In Python.
                                                              (line 149)
* PARAM_OPTIONAL_FILENAME:               Parameters In Python.
                                                              (line 163)
* PARAM_OPTIONAL_FILENAME <1>:           Parameters In Guile. (line 152)
* PARAM_STRING:                          Parameters In Python.
                                                              (line 153)
* PARAM_STRING <1>:                      Parameters In Guile. (line 142)
* PARAM_STRING_NOESCAPE:                 Parameters In Python.
                                                              (line 159)
* PARAM_STRING_NOESCAPE <1>:             Parameters In Guile. (line 148)
* PARAM_UINTEGER:                        Parameters In Python.
                                                              (line 145)
* PARAM_UINTEGER <1>:                    Parameters In Guile. (line 126)
* PARAM_ZINTEGER:                        Parameters In Python.
                                                              (line 170)
* PARAM_ZINTEGER <1>:                    Parameters In Guile. (line 131)
* PARAM_ZUINTEGER:                       Parameters In Python.
                                                              (line 174)
* PARAM_ZUINTEGER <1>:                   Parameters In Guile. (line 134)
* PARAM_ZUINTEGER_UNLIMITED:             Parameters In Python.
                                                              (line 179)
* PARAM_ZUINTEGER_UNLIMITED <1>:         Parameters In Guile. (line 137)
* parse-and-eval:                        Basic Guile.         (line 113)
* passcount:                             Tracepoint Passcounts.
                                                              (line   6)
* path:                                  Environment.         (line  14)
* pending-breakpoints:                   GDB/MI Support Commands.
                                                              (line  79)
* PendingFrame.architecture:             Unwinding Frames in Python.
                                                              (line  99)
* PendingFrame.create_unwind_info:       Unwinding Frames in Python.
                                                              (line  66)
* PendingFrame.level:                    Unwinding Frames in Python.
                                                              (line 104)
* PendingFrame.read_register:            Unwinding Frames in Python.
                                                              (line  42)
* PgDn:                                  TUI Keys.            (line  64)
* PgUp:                                  TUI Keys.            (line  61)
* pi:                                    Python Commands.     (line   9)
* pipe:                                  Shell Commands.      (line  26)
* po (print-object):                     The Print Command with Objective-C.
                                                              (line   6)
* possible-completions (M-?):            Commands For Completion.
                                                              (line  11)
* post-commands annotation:              Prompting.           (line  27)
* post-overload-choice annotation:       Prompting.           (line  32)
* post-prompt annotation:                Prompting.           (line  24)
* post-prompt-for-continue annotation:   Prompting.           (line  40)
* post-query annotation:                 Prompting.           (line  36)
* pre-commands annotation:               Prompting.           (line  27)
* pre-overload-choice annotation:        Prompting.           (line  32)
* pre-prompt annotation:                 Prompting.           (line  24)
* pre-prompt-for-continue annotation:    Prompting.           (line  40)
* pre-query annotation:                  Prompting.           (line  36)
* prefix-meta (<ESC>):                   Miscellaneous Commands.
                                                              (line  19)
* prepend-pretty-printer!:               Guile Printing Module.
                                                              (line  13)
* pretty-printer-enabled?:               Guile Pretty Printing API.
                                                              (line  28)
* pretty-printer?:                       Guile Pretty Printing API.
                                                              (line  24)
* pretty-printers:                       Guile Pretty Printing API.
                                                              (line  35)
* pretty_printer.children:               Pretty Printing API. (line  10)
* pretty_printer.display_hint:           Pretty Printing API. (line  32)
* pretty_printer.to_string:              Pretty Printing API. (line  64)
* previous-history (C-p):                Commands For History.
                                                              (line  12)
* previous-screen-line ():               Commands For Moving. (line  26)
* print:                                 Data.                (line   6)
* print-last-kbd-macro ():               Keyboard Macros.     (line  17)
* print-object:                          The Print Command with Objective-C.
                                                              (line   6)
* printf:                                Output.              (line  46)
* proc-trace-entry:                      Process Information. (line 123)
* proc-trace-exit:                       Process Information. (line 123)
* proc-untrace-entry:                    Process Information. (line 123)
* proc-untrace-exit:                     Process Information. (line 123)
* Progspace:                             Progspaces In Python.
                                                              (line   6)
* progspace-filename:                    Progspaces In Guile. (line  34)
* progspace-objfiles:                    Progspaces In Guile. (line  44)
* progspace-pretty-printers:             Progspaces In Guile. (line  52)
* progspace-valid?:                      Progspaces In Guile. (line  21)
* Progspace.block_for_pc:                Progspaces In Python.
                                                              (line  47)
* Progspace.block_for_pc <1>:            Progspaces In Python.
                                                              (line  47)
* Progspace.filename:                    Progspaces In Python.
                                                              (line  26)
* Progspace.find_pc_line:                Progspaces In Python.
                                                              (line  52)
* Progspace.find_pc_line <1>:            Progspaces In Python.
                                                              (line  52)
* Progspace.frame_filters:               Progspaces In Python.
                                                              (line  41)
* Progspace.is_valid:                    Progspaces In Python.
                                                              (line  59)
* Progspace.is_valid <1>:                Progspaces In Python.
                                                              (line  59)
* Progspace.objfiles:                    Progspaces In Python.
                                                              (line  66)
* Progspace.objfiles <1>:                Progspaces In Python.
                                                              (line  66)
* Progspace.pretty_printers:             Progspaces In Python.
                                                              (line  29)
* Progspace.solib_name:                  Progspaces In Python.
                                                              (line  70)
* Progspace.solib_name <1>:              Progspaces In Python.
                                                              (line  70)
* Progspace.type_printers:               Progspaces In Python.
                                                              (line  37)
* progspace?:                            Progspaces In Guile. (line  17)
* progspaces:                            Progspaces In Guile. (line  31)
* prompt annotation:                     Prompting.           (line  24)
* prompt-for-continue annotation:        Prompting.           (line  40)
* ptype:                                 Symbols.             (line 319)
* putDebugChar:                          Bootstrapping.       (line  20)
* pwd:                                   Working Directory.   (line  40)
* py:                                    Python Commands.     (line  23)
* python:                                GDB/MI Support Commands.
                                                              (line  82)
* python <1>:                            Python Commands.     (line  23)
* python-interactive:                    Python Commands.     (line   9)
* q (quit):                              Quitting GDB.        (line   6)
* q (SingleKey TUI key):                 TUI Single Key Mode. (line  25)
* query annotation:                      Prompting.           (line  36)
* queue-signal:                          Signaling.           (line  36)
* quit annotation:                       Errors.              (line   6)
* quit [EXPRESSION]:                     Quitting GDB.        (line   6)
* quoted-insert (C-q or C-v):            Commands For Text.   (line  26)
* r (run):                               Starting.            (line   6)
* r (SingleKey TUI key):                 TUI Single Key Mode. (line  28)
* rbreak:                                Set Breaks.          (line 200)
* rc (reverse-continue):                 Reverse Execution.   (line  36)
* re-read-init-file (C-x C-r):           Miscellaneous Commands.
                                                              (line   6)
* readnow:                               Files.               (line  94)
* rec:                                   Process Record and Replay.
                                                              (line  43)
* rec btrace:                            Process Record and Replay.
                                                              (line  43)
* rec btrace bts:                        Process Record and Replay.
                                                              (line  43)
* rec btrace pt:                         Process Record and Replay.
                                                              (line  43)
* rec bts:                               Process Record and Replay.
                                                              (line  43)
* rec del:                               Process Record and Replay.
                                                              (line 357)
* rec full:                              Process Record and Replay.
                                                              (line  43)
* rec function-call-history:             Process Record and Replay.
                                                              (line 426)
* rec instruction-history:               Process Record and Replay.
                                                              (line 363)
* rec pt:                                Process Record and Replay.
                                                              (line  43)
* rec s:                                 Process Record and Replay.
                                                              (line 106)
* recognize on type_recognizer:          Type Printing API.   (line  42)
* record:                                Process Record and Replay.
                                                              (line  43)
* record btrace:                         Process Record and Replay.
                                                              (line  43)
* record btrace bts:                     Process Record and Replay.
                                                              (line  43)
* record btrace pt:                      Process Record and Replay.
                                                              (line  43)
* record bts:                            Process Record and Replay.
                                                              (line  43)
* record delete:                         Process Record and Replay.
                                                              (line 357)
* record full:                           Process Record and Replay.
                                                              (line  43)
* record function-call-history:          Process Record and Replay.
                                                              (line 426)
* record goto:                           Process Record and Replay.
                                                              (line 129)
* record instruction-history:            Process Record and Replay.
                                                              (line 363)
* record pt:                             Process Record and Replay.
                                                              (line  43)
* record restore:                        Process Record and Replay.
                                                              (line 150)
* record save:                           Process Record and Replay.
                                                              (line 143)
* record stop:                           Process Record and Replay.
                                                              (line 106)
* Record.begin:                          Recordings In Python.
                                                              (line  40)
* Record.end:                            Recordings In Python.
                                                              (line  44)
* Record.format:                         Recordings In Python.
                                                              (line  36)
* Record.function_call_history:          Recordings In Python.
                                                              (line  55)
* Record.goto:                           Recordings In Python.
                                                              (line  60)
* Record.instruction_history:            Recordings In Python.
                                                              (line  52)
* Record.method:                         Recordings In Python.
                                                              (line  32)
* Record.replay_position:                Recordings In Python.
                                                              (line  48)
* RecordFunctionSegment.instructions:    Recordings In Python.
                                                              (line 126)
* RecordFunctionSegment.level:           Recordings In Python.
                                                              (line 122)
* RecordFunctionSegment.next:            Recordings In Python.
                                                              (line 140)
* RecordFunctionSegment.number:          Recordings In Python.
                                                              (line 113)
* RecordFunctionSegment.prev:            Recordings In Python.
                                                              (line 136)
* RecordFunctionSegment.symbol:          Recordings In Python.
                                                              (line 118)
* RecordFunctionSegment.up:              Recordings In Python.
                                                              (line 130)
* RecordGap.error_code:                  Recordings In Python.
                                                              (line 104)
* RecordGap.error_string:                Recordings In Python.
                                                              (line 108)
* RecordGap.number:                      Recordings In Python.
                                                              (line  99)
* RecordInstruction.is_speculative:      Recordings In Python.
                                                              (line  91)
* RecordInstruction.number:              Recordings In Python.
                                                              (line  81)
* RecordInstruction.sal:                 Recordings In Python.
                                                              (line  86)
* redraw-current-line ():                Commands For Moving. (line  49)
* refresh:                               TUI Commands.        (line 126)
* register-breakpoint!:                  Breakpoints In Guile.
                                                              (line  97)
* register-command!:                     Commands In Guile.   (line  58)
* register-parameter!:                   Parameters In Guile. (line  95)
* RegisterChangedEvent.frame:            Events In Python.    (line 185)
* RegisterChangedEvent.regnum:           Events In Python.    (line 188)
* RegisterDescriptor.name:               Registers In Python. (line  19)
* RegisterDescriptorIterator.find:       Registers In Python. (line  25)
* RegisterGroup.name:                    Registers In Python. (line  48)
* register_disassembler:                 Disassembly In Python.
                                                              (line 177)
* register_xmethod_matcher:              Xmethod API.         (line  82)
* remote delete:                         File Transfer.       (line  23)
* remote get:                            File Transfer.       (line  19)
* remote put:                            File Transfer.       (line  15)
* RemoteTargetConnection.send_packet:    Connections In Python.
                                                              (line  84)
* remove-inferiors:                      Inferiors Connections and Programs.
                                                              (line 151)
* remove-symbol-file:                    Files.               (line 174)
* restart CHECKPOINT-ID:                 Checkpoint/Restart.  (line  41)
* restore:                               Dump/Restore Files.  (line  40)
* RET (repeat last command):             Command Syntax.      (line  21)
* return:                                Returning.           (line   6)
* reverse-continue:                      Reverse Execution.   (line  36)
* reverse-finish:                        Reverse Execution.   (line  83)
* reverse-next:                          Reverse Execution.   (line  66)
* reverse-nexti:                         Reverse Execution.   (line  75)
* reverse-search:                        Search.              (line  16)
* reverse-search-history (C-r):          Commands For History.
                                                              (line  26)
* reverse-step:                          Reverse Execution.   (line  43)
* reverse-stepi:                         Reverse Execution.   (line  58)
* revert-all-at-newline:                 Readline Init File Syntax.
                                                              (line 269)
* revert-line (M-r):                     Miscellaneous Commands.
                                                              (line  26)
* Right:                                 TUI Keys.            (line  76)
* rn (reverse-next):                     Reverse Execution.   (line  66)
* rni (reverse-nexti):                   Reverse Execution.   (line  75)
* rs (step):                             Reverse Execution.   (line  43)
* rsi (reverse-stepi):                   Reverse Execution.   (line  58)
* run:                                   Starting.            (line   6)
* run&:                                  Background Execution.
                                                              (line  21)
* rwatch:                                Set Watchpoints.     (line  82)
* s (SingleKey TUI key):                 TUI Single Key Mode. (line  31)
* s (step):                              Continuing and Stepping.
                                                              (line  45)
* sal-last:                              Symbol Tables In Guile.
                                                              (line  68)
* sal-line:                              Symbol Tables In Guile.
                                                              (line  62)
* sal-pc:                                Symbol Tables In Guile.
                                                              (line  65)
* sal-symtab:                            Symbol Tables In Guile.
                                                              (line  59)
* sal-valid?:                            Symbol Tables In Guile.
                                                              (line  53)
* sal?:                                  Symbol Tables In Guile.
                                                              (line  49)
* save breakpoints:                      Save Breakpoints.    (line   9)
* save gdb-index:                        Index Files.         (line  30)
* save tracepoints:                      save tracepoints.    (line   6)
* save-tracepoints:                      save tracepoints.    (line   6)
* search:                                Search.              (line   9)
* section:                               Files.               (line 203)
* select-frame:                          Selection.           (line  98)
* selected-frame:                        Frames In Guile.     (line 156)
* self:                                  Commands In Guile.   (line 100)
* self-insert (a, b, A, 1, !, ...):      Commands For Text.   (line  33)
* set:                                   Help.                (line 145)
* set ada print-signatures:              Overloading support for Ada.
                                                              (line  31)
* set ada source-charset:                Ada Source Character Set.
                                                              (line  11)
* set ada trust-PAD-over-XVS:            Ada Glitches.        (line  42)
* set agent off:                         In-Process Agent.    (line  47)
* set agent on:                          In-Process Agent.    (line  38)
* set annotate:                          Annotations Overview.
                                                              (line  29)
* set architecture:                      Targets.             (line  21)
* set args:                              Arguments.           (line  21)
* set arm:                               ARM.                 (line   9)
* set auto-connect-native-target:        Starting.            (line 168)
* set auto-load gdb-scripts:             Auto-loading sequences.
                                                              (line  13)
* set auto-load guile-scripts:           Guile Auto-loading.  (line  17)
* set auto-load libthread-db:            libthread_db.so.1 file.
                                                              (line  21)
* set auto-load local-gdbinit:           Init File in the Current Directory.
                                                              (line  14)
* set auto-load off:                     Auto-loading.        (line  24)
* set auto-load python-scripts:          Python Auto-loading. (line  17)
* set auto-load safe-path:               Auto-loading safe path.
                                                              (line  32)
* set auto-load scripts-directory:       objfile-gdbdotext file.
                                                              (line  41)
* set auto-solib-add:                    Files.               (line 317)
* set backtrace:                         Backtrace.           (line 166)
* set basenames-may-differ:              Files.               (line 546)
* set breakpoint always-inserted:        Set Breaks.          (line 433)
* set breakpoint auto-hw:                Set Breaks.          (line 413)
* set breakpoint condition-evaluation:   Set Breaks.          (line 454)
* set breakpoint pending:                Set Breaks.          (line 382)
* set can-use-hw-watchpoints:            Set Watchpoints.     (line 119)
* set case-sensitive:                    Symbols.             (line  27)
* set charset:                           Character Sets.      (line  46)
* set check range:                       Range Checking.      (line  34)
* set check type:                        Type Checking.       (line  35)
* set circular-trace-buffer:             Starting and Stopping Trace Experiments.
                                                              (line  93)
* set code-cache:                        Caching Target Data. (line  36)
* set coerce-float-to-double:            ABI.                 (line  45)
* set com1base:                          DJGPP Native.        (line 122)
* set com1irq:                           DJGPP Native.        (line 122)
* set com2base:                          DJGPP Native.        (line 122)
* set com2irq:                           DJGPP Native.        (line 122)
* set com3base:                          DJGPP Native.        (line 122)
* set com3irq:                           DJGPP Native.        (line 122)
* set com4base:                          DJGPP Native.        (line 122)
* set com4irq:                           DJGPP Native.        (line 122)
* set complaints:                        Messages/Warnings.   (line  29)
* set confirm:                           Messages/Warnings.   (line  49)
* set cp-abi:                            ABI.                 (line  57)
* set cwd:                               Working Directory.   (line  13)
* set cygwin-exceptions:                 Cygwin Native.       (line  60)
* set data-directory:                    Data Files.          (line  12)
* set dcache line-size:                  Caching Target Data. (line  60)
* set dcache size:                       Caching Target Data. (line  57)
* set debug:                             Debugging Output.    (line  19)
* set debug aarch64:                     AArch64.             (line  10)
* set debug arc:                         ARC.                 (line   9)
* set debug auto-load:                   Auto-loading verbose mode.
                                                              (line  27)
* set debug bfd-cache LEVEL:             File Caching.        (line  24)
* set debug darwin:                      Darwin.              (line   9)
* set debug entry-values:                Tail Call Frames.    (line  47)
* set debug hppa:                        HPPA.                (line  10)
* set debug libthread-db:                Threads.             (line 338)
* set debug mach-o:                      Darwin.              (line  16)
* set debug mips:                        MIPS.                (line 100)
* set debug monitor:                     Target Commands.     (line 107)
* set debug nios2:                       Nios II.             (line  10)
* set debug py-breakpoint:               Python Commands.     (line 101)
* set debug py-unwind:                   Python Commands.     (line 106)
* set debug skip:                        Skipping Over Functions and Files.
                                                              (line 149)
* set debug threads:                     Threads.             (line 343)
* set debug tui:                         TUI Configuration.   (line  61)
* set debug-file-directory:              Separate Debug Files.
                                                              (line  76)
* set debugevents:                       Cygwin Native.       (line  89)
* set debugexceptions:                   Cygwin Native.       (line 100)
* set debugexec:                         Cygwin Native.       (line  96)
* set debuginfod enabled:                Debuginfod Settings. (line   8)
* set debuginfod urls:                   Debuginfod Settings. (line  27)
* set debuginfod verbose:                Debuginfod Settings. (line  37)
* set debugmemory:                       Cygwin Native.       (line 104)
* set default-collect:                   Tracepoint Actions.  (line 142)
* set demangle-style:                    Print Settings.      (line 558)
* set detach-on-fork:                    Forks.               (line  58)
* set directories:                       Source Path.         (line 178)
* set disable-randomization:             Starting.            (line 212)
* set disassemble-next-line:             Machine Code.        (line 278)
* set disassembler-options:              Machine Code.        (line 251)
* set disassembly-flavor:                Machine Code.        (line 266)
* set disconnected-dprintf:              Dynamic Printf.      (line  84)
* set disconnected-tracing:              Starting and Stopping Trace Experiments.
                                                              (line  55)
* set displaced-stepping:                Maintenance Commands.
                                                              (line 152)
* set dump-excluded-mappings:            Core File Generation.
                                                              (line  60)
* set editing:                           Editing.             (line  15)
* set endian:                            Byte Order.          (line  13)
* set environment:                       Environment.         (line  39)
* set exceptions, Hurd command:          Hurd Native.         (line  39)
* set exec-direction:                    Reverse Execution.   (line  89)
* set exec-done-display:                 Debugging Output.    (line  11)
* set exec-wrapper:                      Starting.            (line 120)
* set extended-prompt:                   Prompt.              (line  25)
* set extension-language:                Show.                (line  30)
* set follow-exec-mode:                  Forks.               (line 104)
* set follow-fork-mode:                  Forks.               (line  39)
* set fortran repack-array-slices:       Special Fortran Commands.
                                                              (line  13)
* set frame-filter priority:             Frame Filter Management.
                                                              (line  84)
* set gnutarget:                         Target Commands.     (line  28)
* set guile print-stack:                 Guile Exception Handling.
                                                              (line   6)
* set hash, for remote monitors:         Target Commands.     (line  98)
* set height:                            Screen Size.         (line  22)
* set history expansion:                 Command History.     (line  97)
* set history filename:                  Command History.     (line  26)
* set history remove-duplicates:         Command History.     (line  69)
* set history save:                      Command History.     (line  44)
* set history size:                      Command History.     (line  56)
* set host-charset:                      Character Sets.      (line  33)
* set index-cache:                       Index Files.         (line  79)
* set inferior-tty:                      Input/Output.        (line  49)
* set input-radix:                       Numbers.             (line  14)
* set interactive-mode:                  Other Misc Settings. (line   6)
* set language:                          Manually.            (line   9)
* set libthread-db-search-path:          Threads.             (line 300)
* set listsize:                          List.                (line  33)
* set logging enabled:                   Logging Output.      (line   9)
* set mach-exceptions:                   Darwin.              (line  27)
* set max-completions:                   Completion.          (line  81)
* set max-user-call-depth:               Define.              (line 135)
* set max-value-size:                    Value Sizes.         (line  12)
* set may-call-functions:                Calling.             (line  59)
* set mem inaccessible-by-default:       Memory Region Attributes.
                                                              (line 123)
* set mi-async:                          Asynchronous and non-stop modes.
                                                              (line  15)
* set mips abi:                          MIPS.                (line  32)
* set mips compression:                  MIPS.                (line  49)
* set mips mask-address:                 MIPS.                (line  80)
* set mipsfpu:                           MIPS Embedded.       (line  13)
* set mpx bound:                         i386.                (line  60)
* set multiple-symbols:                  Ambiguous Expressions.
                                                              (line  50)
* set new-console:                       Cygwin Native.       (line  72)
* set new-group:                         Cygwin Native.       (line  81)
* set non-stop:                          Non-Stop Mode.       (line  35)
* set opaque-type-resolution:            Symbols.             (line 616)
* set osabi:                             ABI.                 (line  11)
* set output-radix:                      Numbers.             (line  30)
* set overload-resolution:               Debugging C Plus Plus.
                                                              (line  59)
* set pagination:                        Screen Size.         (line  41)
* set powerpc:                           PowerPC Embedded.    (line  54)
* set print:                             Print Settings.      (line  11)
* set print entry-values:                Print Settings.      (line 231)
* set print finish:                      Continuing and Stepping.
                                                              (line 117)
* set print frame-arguments:             Print Settings.      (line 171)
* set print frame-info:                  Print Settings.      (line 331)
* set print inferior-events:             Inferiors Connections and Programs.
                                                              (line 181)
* set print symbol-loading:              Symbols.             (line 634)
* set print thread-events:               Threads.             (line 279)
* set print type hex:                    Symbols.             (line  85)
* set print type methods:                Symbols.             (line  44)
* set print type nested-type-limit:      Symbols.             (line  57)
* set print type typedefs:               Symbols.             (line  68)
* set processor:                         Targets.             (line  31)
* set procfs-file:                       Process Information. (line 112)
* set procfs-trace:                      Process Information. (line 106)
* set prompt:                            Prompt.              (line  16)
* set python dont-write-bytecode:        Python Commands.     (line  67)
* set python ignore-environment:         Python Commands.     (line  52)
* set python print-stack:                Python Commands.     (line  44)
* set radix:                             Numbers.             (line  43)
* set range-stepping:                    Continuing and Stepping.
                                                              (line 228)
* set ravenscar task-switching off:      Ravenscar Profile.   (line  14)
* set ravenscar task-switching on:       Ravenscar Profile.   (line  10)
* set record:                            Process Record and Replay.
                                                              (line 416)
* set record btrace:                     Process Record and Replay.
                                                              (line 204)
* set record btrace bts:                 Process Record and Replay.
                                                              (line 277)
* set record btrace pt:                  Process Record and Replay.
                                                              (line 300)
* set record full:                       Process Record and Replay.
                                                              (line 154)
* set remote:                            Remote Configuration.
                                                              (line   6)
* set remote system-call-allowed:        system.              (line  37)
* set remote-mips64-transfers-32bit-regs: MIPS.               (line  90)
* set remotecache:                       Caching Target Data. (line  20)
* set remoteflow:                        Remote Configuration.
                                                              (line  48)
* set schedule-multiple:                 All-Stop Mode.       (line  79)
* set script-extension:                  Extending GDB.       (line  20)
* set sh calling-convention:             Super-H.             (line   9)
* set shell:                             Cygwin Native.       (line 108)
* set signal-thread:                     Hurd Native.         (line  21)
* set signals, Hurd command:             Hurd Native.         (line  11)
* set sigs, Hurd command:                Hurd Native.         (line  11)
* set sigthread:                         Hurd Native.         (line  21)
* set solib-absolute-prefix:             Files.               (line 396)
* set solib-search-path:                 Files.               (line 472)
* set source open:                       Disable Reading Source.
                                                              (line  13)
* set stack-cache:                       Caching Target Data. (line  28)
* set startup-quietly:                   Mode Options.        (line  26)
* set startup-with-shell:                Starting.            (line 145)
* set step-mode:                         Continuing and Stepping.
                                                              (line  91)
* set stop-on-solib-events:              Files.               (line 373)
* set stopped, Hurd command:             Hurd Native.         (line  31)
* set struct-convention:                 i386.                (line   7)
* set style:                             Output Styling.      (line   6)
* set substitute-path:                   Source Path.         (line 185)
* set suppress-cli-notifications:        Other Misc Settings. (line  24)
* set sysroot:                           Files.               (line 396)
* set target-charset:                    Character Sets.      (line  28)
* set target-file-system-kind (unix|dos-based|auto): Files.   (line 486)
* set target-wide-charset:               Character Sets.      (line  61)
* set task, Hurd commands:               Hurd Native.         (line  48)
* set tcp:                               Remote Configuration.
                                                              (line 130)
* set thread, Hurd command:              Hurd Native.         (line  90)
* set trace-buffer-size:                 Starting and Stopping Trace Experiments.
                                                              (line 107)
* set trace-commands:                    Messages/Warnings.   (line  65)
* set trace-notes:                       Starting and Stopping Trace Experiments.
                                                              (line 126)
* set trace-stop-notes:                  Starting and Stopping Trace Experiments.
                                                              (line 132)
* set trace-user:                        Starting and Stopping Trace Experiments.
                                                              (line 122)
* set trust-readonly-sections:           Files.               (line 275)
* set tui active-border-mode:            TUI Configuration.   (line  24)
* set tui border-kind:                   TUI Configuration.   (line   9)
* set tui border-mode:                   TUI Configuration.   (line  23)
* set tui compact-source:                TUI Configuration.   (line  54)
* set tui tab-width:                     TUI Configuration.   (line  49)
* set unwind-on-terminating-exception:   Calling.             (line  47)
* set unwindonsignal:                    Calling.             (line  36)
* set use-coredump-filter:               Core File Generation.
                                                              (line  33)
* set variable:                          Assignment.          (line  16)
* set verbose:                           Messages/Warnings.   (line  15)
* set watchdog:                          Maintenance Commands.
                                                              (line 766)
* set width:                             Screen Size.         (line  22)
* set write:                             Patching.            (line  15)
* set-breakpoint-condition!:             Breakpoints In Guile.
                                                              (line 216)
* set-breakpoint-enabled!:               Breakpoints In Guile.
                                                              (line 165)
* set-breakpoint-hit-count!:             Breakpoints In Guile.
                                                              (line 190)
* set-breakpoint-ignore-count!:          Breakpoints In Guile.
                                                              (line 184)
* set-breakpoint-silent!:                Breakpoints In Guile.
                                                              (line 176)
* set-breakpoint-stop!:                  Breakpoints In Guile.
                                                              (line 224)
* set-breakpoint-task!:                  Breakpoints In Guile.
                                                              (line 208)
* set-breakpoint-thread!:                Breakpoints In Guile.
                                                              (line 198)
* set-iterator-progress!:                Iterators In Guile.  (line  60)
* set-mark (C-@):                        Miscellaneous Commands.
                                                              (line  33)
* set-memory-port-read-buffer-size!:     Memory Ports in Guile.
                                                              (line  44)
* set-memory-port-write-buffer-size!:    Memory Ports in Guile.
                                                              (line  59)
* set-objfile-pretty-printers!:          Objfiles In Guile.   (line  40)
* set-parameter-value!:                  Parameters In Guile. (line 108)
* set-pretty-printer-enabled!:           Guile Pretty Printing API.
                                                              (line  31)
* set-pretty-printers!:                  Guile Pretty Printing API.
                                                              (line  38)
* set-progspace-pretty-printers!:        Progspaces In Guile. (line  57)
* set_debug_traps:                       Stub Contents.       (line  10)
* share:                                 Files.               (line 349)
* sharedlibrary:                         Files.               (line 349)
* shell:                                 Shell Commands.      (line  10)
* shell-transpose-words (M-C-t):         Commands For Killing.
                                                              (line  32)
* show:                                  Help.                (line 150)
* show ada print-signatures:             Overloading support for Ada.
                                                              (line  36)
* show ada source-charset:               Ada Source Character Set.
                                                              (line  18)
* show ada trust-PAD-over-XVS:           Ada Glitches.        (line  42)
* show agent:                            In-Process Agent.    (line  51)
* show annotate:                         Annotations Overview.
                                                              (line  34)
* show architecture:                     Targets.             (line  21)
* show args:                             Arguments.           (line  28)
* show arm:                              ARM.                 (line  13)
* show auto-load:                        Auto-loading.        (line  37)
* show auto-load gdb-scripts:            Auto-loading sequences.
                                                              (line  17)
* show auto-load guile-scripts:          Guile Auto-loading.  (line  20)
* show auto-load libthread-db:           libthread_db.so.1 file.
                                                              (line  25)
* show auto-load local-gdbinit:          Init File in the Current Directory.
                                                              (line  18)
* show auto-load python-scripts:         Python Auto-loading. (line  20)
* show auto-load safe-path:              Auto-loading safe path.
                                                              (line  46)
* show auto-load scripts-directory:      objfile-gdbdotext file.
                                                              (line  65)
* show auto-solib-add:                   Files.               (line 334)
* show backtrace:                        Backtrace.           (line 173)
* show basenames-may-differ:             Files.               (line 549)
* show breakpoint always-inserted:       Set Breaks.          (line 433)
* show breakpoint auto-hw:               Set Breaks.          (line 413)
* show breakpoint condition-evaluation:  Set Breaks.          (line 454)
* show breakpoint pending:               Set Breaks.          (line 382)
* show can-use-hw-watchpoints:           Set Watchpoints.     (line 122)
* show case-sensitive:                   Symbols.             (line  40)
* show charset:                          Character Sets.      (line  52)
* show check range:                      Range Checking.      (line  34)
* show check type:                       Type Checking.       (line  35)
* show circular-trace-buffer:            Starting and Stopping Trace Experiments.
                                                              (line 100)
* show code-cache:                       Caching Target Data. (line  42)
* show coerce-float-to-double:           ABI.                 (line  54)
* show com1base:                         DJGPP Native.        (line 134)
* show com1irq:                          DJGPP Native.        (line 134)
* show com2base:                         DJGPP Native.        (line 134)
* show com2irq:                          DJGPP Native.        (line 134)
* show com3base:                         DJGPP Native.        (line 134)
* show com3irq:                          DJGPP Native.        (line 134)
* show com4base:                         DJGPP Native.        (line 134)
* show com4irq:                          DJGPP Native.        (line 134)
* show commands:                         Command History.     (line 110)
* show complaints:                       Messages/Warnings.   (line  35)
* show configuration:                    Help.                (line 183)
* show confirm:                          Messages/Warnings.   (line  57)
* show convenience:                      Convenience Vars.    (line  37)
* show copying:                          Help.                (line 174)
* show cp-abi:                           ABI.                 (line  57)
* show cwd:                              Working Directory.   (line  27)
* show cygwin-exceptions:                Cygwin Native.       (line  68)
* show data-directory:                   Data Files.          (line  16)
* show dcache line-size:                 Caching Target Data. (line  68)
* show dcache size:                      Caching Target Data. (line  64)
* show debug:                            Debugging Output.    (line  21)
* show debug arc:                        ARC.                 (line  14)
* show debug auto-load:                  Auto-loading verbose mode.
                                                              (line  30)
* show debug bfd-cache:                  File Caching.        (line  27)
* show debug darwin:                     Darwin.              (line  13)
* show debug entry-values:               Tail Call Frames.    (line  55)
* show debug libthread-db:               Threads.             (line 338)
* show debug mach-o:                     Darwin.              (line  23)
* show debug mips:                       MIPS.                (line 104)
* show debug monitor:                    Target Commands.     (line 111)
* show debug nios2:                      Nios II.             (line  14)
* show debug py-breakpoint:              Python Commands.     (line 101)
* show debug py-unwind:                  Python Commands.     (line 106)
* show debug skip:                       Skipping Over Functions and Files.
                                                              (line 153)
* show debug threads:                    Threads.             (line 343)
* show debug tui:                        TUI Configuration.   (line  65)
* show debug-file-directory:             Separate Debug Files.
                                                              (line  81)
* show debuginfod enabled:               Debuginfod Settings. (line  23)
* show debuginfod urls:                  Debuginfod Settings. (line  34)
* show debuginfod verbose:               Debuginfod Settings. (line  43)
* show default-collect:                  Tracepoint Actions.  (line 150)
* show detach-on-fork:                   Forks.               (line  73)
* show directories:                      Source Path.         (line 182)
* show disassemble-next-line:            Machine Code.        (line 278)
* show disassembler-options:             Machine Code.        (line 263)
* show disassembly-flavor:               Machine Code.        (line 275)
* show disconnected-dprintf:             Dynamic Printf.      (line  89)
* show disconnected-tracing:             Starting and Stopping Trace Experiments.
                                                              (line  62)
* show displaced-stepping:               Maintenance Commands.
                                                              (line 152)
* show editing:                          Editing.             (line  22)
* show environment:                      Environment.         (line  33)
* show exceptions, Hurd command:         Hurd Native.         (line  45)
* show exec-done-display:                Debugging Output.    (line  14)
* show extended-prompt:                  Prompt.              (line  39)
* show follow-fork-mode:                 Forks.               (line  52)
* show fortran repack-array-slices:      Special Fortran Commands.
                                                              (line  13)
* show frame-filter priority:            Frame Filter Management.
                                                              (line  91)
* show gnutarget:                        Target Commands.     (line  40)
* show hash, for remote monitors:        Target Commands.     (line 104)
* show height:                           Screen Size.         (line  22)
* show history:                          Command History.     (line 102)
* show host-charset:                     Character Sets.      (line  55)
* show index-cache:                      Index Files.         (line  84)
* show inferior-tty:                     Input/Output.        (line  54)
* show input-radix:                      Numbers.             (line  35)
* show interactive-mode:                 Other Misc Settings. (line  20)
* show language:                         Show.                (line  10)
* show libthread-db-search-path:         Threads.             (line 335)
* show listsize:                         List.                (line  39)
* show logging:                          Logging Output.      (line  24)
* show mach-exceptions:                  Darwin.              (line  34)
* show max-completions:                  Completion.          (line  89)
* show max-user-call-depth:              Define.              (line 135)
* show max-value-size:                   Value Sizes.         (line  36)
* show may-call-functions:               Calling.             (line  73)
* show mem inaccessible-by-default:      Memory Region Attributes.
                                                              (line 129)
* show mi-async:                         Asynchronous and non-stop modes.
                                                              (line  27)
* show mips abi:                         MIPS.                (line  46)
* show mips compression:                 MIPS.                (line  72)
* show mips mask-address:                MIPS.                (line  86)
* show mipsfpu:                          MIPS Embedded.       (line  13)
* show mpx bound:                        i386.                (line  57)
* show multiple-symbols:                 Ambiguous Expressions.
                                                              (line  70)
* show new-console:                      Cygwin Native.       (line  77)
* show new-group:                        Cygwin Native.       (line  86)
* show non-stop:                         Non-Stop Mode.       (line  38)
* show opaque-type-resolution:           Symbols.             (line 631)
* show osabi:                            ABI.                 (line  11)
* show output-radix:                     Numbers.             (line  38)
* show overload-resolution:              Debugging C Plus Plus.
                                                              (line  76)
* show pagination:                       Screen Size.         (line  47)
* show paths:                            Environment.         (line  29)
* show print:                            Print Settings.      (line  39)
* show print finish:                     Continuing and Stepping.
                                                              (line 117)
* show print inferior-events:            Inferiors Connections and Programs.
                                                              (line 189)
* show print symbol-loading:             Symbols.             (line 649)
* show print thread-events:              Threads.             (line 289)
* show print type hex:                   Symbols.             (line  94)
* show print type methods:               Symbols.             (line  53)
* show print type nested-type-limit:     Symbols.             (line  64)
* show print type typedefs:              Symbols.             (line  81)
* show processor:                        Targets.             (line  31)
* show procfs-file:                      Process Information. (line 117)
* show procfs-trace:                     Process Information. (line 109)
* show prompt:                           Prompt.              (line  19)
* show radix:                            Numbers.             (line  43)
* show range-stepping:                   Continuing and Stepping.
                                                              (line 228)
* show ravenscar task-switching:         Ravenscar Profile.   (line  22)
* show record:                           Process Record and Replay.
                                                              (line 422)
* show record btrace:                    Process Record and Replay.
                                                              (line 270)
* show record full:                      Process Record and Replay.
                                                              (line 172)
* show remote:                           Remote Configuration.
                                                              (line   6)
* show remote system-call-allowed:       system.              (line  41)
* show remote-mips64-transfers-32bit-regs: MIPS.              (line  96)
* show remotecache:                      Caching Target Data. (line  25)
* show remoteflow:                       Remote Configuration.
                                                              (line  52)
* show script-extension:                 Extending GDB.       (line  20)
* show sh calling-convention:            Super-H.             (line  22)
* show shell:                            Cygwin Native.       (line 112)
* show signal-thread:                    Hurd Native.         (line  27)
* show signals, Hurd command:            Hurd Native.         (line  17)
* show sigs, Hurd command:               Hurd Native.         (line  17)
* show sigthread:                        Hurd Native.         (line  27)
* show solib-search-path:                Files.               (line 483)
* show source open:                      Disable Reading Source.
                                                              (line  13)
* show stack-cache:                      Caching Target Data. (line  33)
* show startup-quietly:                  Mode Options.        (line  26)
* show stop-on-solib-events:             Files.               (line 379)
* show stopped, Hurd command:            Hurd Native.         (line  36)
* show struct-convention:                i386.                (line  15)
* show style:                            Output Styling.      (line   6)
* show substitute-path:                  Source Path.         (line 222)
* show suppress-cli-notifications:       Other Misc Settings. (line  78)
* show sysroot:                          Files.               (line 469)
* show target-charset:                   Character Sets.      (line  58)
* show target-file-system-kind:          Files.               (line 486)
* show target-wide-charset:              Character Sets.      (line  67)
* show task, Hurd commands:              Hurd Native.         (line  56)
* show tcp:                              Remote Configuration.
                                                              (line 130)
* show thread, Hurd command:             Hurd Native.         (line 100)
* show trace-buffer-size:                Starting and Stopping Trace Experiments.
                                                              (line 114)
* show trace-notes:                      Starting and Stopping Trace Experiments.
                                                              (line 129)
* show trace-stop-notes:                 Starting and Stopping Trace Experiments.
                                                              (line 137)
* show trace-user:                       Starting and Stopping Trace Experiments.
                                                              (line 124)
* show unwind-on-terminating-exception:  Calling.             (line  55)
* show unwindonsignal:                   Calling.             (line  43)
* show user:                             Define.              (line 128)
* show values:                           Value History.       (line  47)
* show verbose:                          Messages/Warnings.   (line  21)
* show version:                          Help.                (line 164)
* show warranty:                         Help.                (line 178)
* show width:                            Screen Size.         (line  22)
* show write:                            Patching.            (line  26)
* show-all-if-ambiguous:                 Readline Init File Syntax.
                                                              (line 275)
* show-all-if-unmodified:                Readline Init File Syntax.
                                                              (line 281)
* show-mode-in-prompt:                   Readline Init File Syntax.
                                                              (line 290)
* si (stepi):                            Continuing and Stepping.
                                                              (line 196)
* signal:                                Signaling.           (line   6)
* signal annotation:                     Annotations for Running.
                                                              (line  42)
* signal-event:                          Cygwin Native.       (line  35)
* signal-name annotation:                Annotations for Running.
                                                              (line  22)
* signal-name-end annotation:            Annotations for Running.
                                                              (line  22)
* signal-string annotation:              Annotations for Running.
                                                              (line  22)
* signal-string-end annotation:          Annotations for Running.
                                                              (line  22)
* SignalEvent.stop_signal:               Events In Python.    (line  93)
* signalled annotation:                  Annotations for Running.
                                                              (line  22)
* silent:                                Break Commands.      (line  51)
* sim, a command:                        Embedded Processors. (line  13)
* skip:                                  Skipping Over Functions and Files.
                                                              (line  44)
* skip delete:                           Skipping Over Functions and Files.
                                                              (line 137)
* skip disable:                          Skipping Over Functions and Files.
                                                              (line 145)
* skip enable:                           Skipping Over Functions and Files.
                                                              (line 141)
* skip file:                             Skipping Over Functions and Files.
                                                              (line 100)
* skip function:                         Skipping Over Functions and Files.
                                                              (line  89)
* skip-completed-text:                   Readline Init File Syntax.
                                                              (line 296)
* skip-csi-sequence ():                  Miscellaneous Commands.
                                                              (line  52)
* source:                                Command Files.       (line  17)
* source annotation:                     Source Annotations.  (line   6)
* start:                                 Starting.            (line  80)
* start-kbd-macro (C-x ():               Keyboard Macros.     (line   6)
* starti:                                Starting.            (line 113)
* starting annotation:                   Annotations for Running.
                                                              (line   6)
* STDERR:                                Basic Python.        (line 218)
* STDERR <1>:                            Basic Python.        (line 238)
* stdio-port?:                           I/O Ports in Guile.  (line  15)
* STDLOG:                                Basic Python.        (line 221)
* STDLOG <1>:                            Basic Python.        (line 241)
* STDOUT:                                Basic Python.        (line 215)
* STDOUT <1>:                            Basic Python.        (line 235)
* step:                                  Continuing and Stepping.
                                                              (line  45)
* step&:                                 Background Execution.
                                                              (line  28)
* stepi:                                 Continuing and Stepping.
                                                              (line 196)
* stepi&:                                Background Execution.
                                                              (line  31)
* stop, a pseudo-command:                Hooks.               (line  21)
* stopping annotation:                   Annotations for Running.
                                                              (line   6)
* strace:                                Create and Delete Tracepoints.
                                                              (line  75)
* string->argv:                          Commands In Guile.   (line  73)
* symbol-addr-class:                     Symbols In Guile.    (line  48)
* symbol-argument?:                      Symbols In Guile.    (line  58)
* symbol-constant?:                      Symbols In Guile.    (line  62)
* symbol-file:                           Files.               (line  45)
* symbol-function?:                      Symbols In Guile.    (line  65)
* symbol-line:                           Symbols In Guile.    (line  32)
* symbol-linkage-name:                   Symbols In Guile.    (line  39)
* symbol-name:                           Symbols In Guile.    (line  36)
* symbol-needs-frame?:                   Symbols In Guile.    (line  53)
* symbol-print-name:                     Symbols In Guile.    (line  43)
* symbol-symtab:                         Symbols In Guile.    (line  28)
* symbol-type:                           Symbols In Guile.    (line  24)
* symbol-valid?:                         Symbols In Guile.    (line  17)
* symbol-value:                          Symbols In Guile.    (line  72)
* symbol-variable?:                      Symbols In Guile.    (line  69)
* Symbol.addr_class:                     Symbols In Python.   (line 119)
* Symbol.is_argument:                    Symbols In Python.   (line 129)
* Symbol.is_constant:                    Symbols In Python.   (line 132)
* Symbol.is_function:                    Symbols In Python.   (line 135)
* Symbol.is_valid:                       Symbols In Python.   (line 143)
* Symbol.is_variable:                    Symbols In Python.   (line 138)
* Symbol.line:                           Symbols In Python.   (line 102)
* Symbol.linkage_name:                   Symbols In Python.   (line 110)
* Symbol.name:                           Symbols In Python.   (line 106)
* Symbol.needs_frame:                    Symbols In Python.   (line 124)
* Symbol.print_name:                     Symbols In Python.   (line 114)
* Symbol.symtab:                         Symbols In Python.   (line  97)
* Symbol.type:                           Symbols In Python.   (line  92)
* Symbol.value:                          Symbols In Python.   (line 150)
* symbol?:                               Symbols In Guile.    (line  13)
* SYMBOL_COMMON_BLOCK_DOMAIN:            Symbols In Python.   (line 178)
* SYMBOL_FUNCTIONS_DOMAIN:               Symbols In Guile.    (line 133)
* SYMBOL_LABEL_DOMAIN:                   Symbols In Python.   (line 172)
* SYMBOL_LABEL_DOMAIN <1>:               Symbols In Guile.    (line 126)
* SYMBOL_LOC_ARG:                        Symbols In Python.   (line 197)
* SYMBOL_LOC_ARG <1>:                    Symbols In Guile.    (line 155)
* SYMBOL_LOC_BLOCK:                      Symbols In Python.   (line 221)
* SYMBOL_LOC_BLOCK <1>:                  Symbols In Guile.    (line 176)
* SYMBOL_LOC_COMMON_BLOCK:               Symbols In Python.   (line 238)
* SYMBOL_LOC_COMPUTED:                   Symbols In Python.   (line 235)
* SYMBOL_LOC_COMPUTED <1>:               Symbols In Guile.    (line 190)
* SYMBOL_LOC_CONST:                      Symbols In Python.   (line 188)
* SYMBOL_LOC_CONST <1>:                  Symbols In Guile.    (line 146)
* SYMBOL_LOC_CONST_BYTES:                Symbols In Python.   (line 224)
* SYMBOL_LOC_CONST_BYTES <1>:            Symbols In Guile.    (line 179)
* SYMBOL_LOC_LABEL:                      Symbols In Python.   (line 218)
* SYMBOL_LOC_LOCAL:                      Symbols In Python.   (line 211)
* SYMBOL_LOC_LOCAL <1>:                  Symbols In Guile.    (line 169)
* SYMBOL_LOC_OPTIMIZED_OUT:              Symbols In Python.   (line 232)
* SYMBOL_LOC_OPTIMIZED_OUT <1>:          Symbols In Guile.    (line 187)
* SYMBOL_LOC_REF_ARG:                    Symbols In Python.   (line 201)
* SYMBOL_LOC_REF_ARG <1>:                Symbols In Guile.    (line 159)
* SYMBOL_LOC_REGISTER:                   Symbols In Python.   (line 194)
* SYMBOL_LOC_REGISTER <1>:               Symbols In Guile.    (line 152)
* SYMBOL_LOC_REGPARM_ADDR:               Symbols In Python.   (line 206)
* SYMBOL_LOC_REGPARM_ADDR <1>:           Symbols In Guile.    (line 164)
* SYMBOL_LOC_STATIC:                     Symbols In Python.   (line 191)
* SYMBOL_LOC_STATIC <1>:                 Symbols In Guile.    (line 149)
* SYMBOL_LOC_TYPEDEF:                    Symbols In Python.   (line 214)
* SYMBOL_LOC_TYPEDEF <1>:                Symbols In Guile.    (line 172)
* SYMBOL_LOC_UNDEF:                      Symbols In Python.   (line 184)
* SYMBOL_LOC_UNDEF <1>:                  Symbols In Guile.    (line 142)
* SYMBOL_LOC_UNRESOLVED:                 Symbols In Python.   (line 227)
* SYMBOL_LOC_UNRESOLVED <1>:             Symbols In Guile.    (line 182)
* SYMBOL_MODULE_DOMAIN:                  Symbols In Python.   (line 175)
* SYMBOL_STRUCT_DOMAIN:                  Symbols In Python.   (line 169)
* SYMBOL_STRUCT_DOMAIN <1>:              Symbols In Guile.    (line 123)
* SYMBOL_TYPES_DOMAIN:                   Symbols In Guile.    (line 136)
* SYMBOL_UNDEF_DOMAIN:                   Symbols In Python.   (line 160)
* SYMBOL_UNDEF_DOMAIN <1>:               Symbols In Guile.    (line 114)
* SYMBOL_VARIABLES_DOMAIN:               Symbols In Guile.    (line 129)
* SYMBOL_VAR_DOMAIN:                     Symbols In Python.   (line 165)
* SYMBOL_VAR_DOMAIN <1>:                 Symbols In Guile.    (line 119)
* symtab-filename:                       Symbol Tables In Guile.
                                                              (line  28)
* symtab-fullname:                       Symbol Tables In Guile.
                                                              (line  31)
* symtab-global-block:                   Symbol Tables In Guile.
                                                              (line  38)
* symtab-objfile:                        Symbol Tables In Guile.
                                                              (line  34)
* symtab-static-block:                   Symbol Tables In Guile.
                                                              (line  42)
* symtab-valid?:                         Symbol Tables In Guile.
                                                              (line  21)
* Symtab.filename:                       Symbol Tables In Python.
                                                              (line  43)
* Symtab.fullname:                       Symbol Tables In Python.
                                                              (line  66)
* Symtab.global_block:                   Symbol Tables In Python.
                                                              (line  69)
* Symtab.is_valid:                       Symbol Tables In Python.
                                                              (line  59)
* Symtab.linetable:                      Symbol Tables In Python.
                                                              (line  77)
* Symtab.objfile:                        Symbol Tables In Python.
                                                              (line  47)
* Symtab.producer:                       Symbol Tables In Python.
                                                              (line  51)
* Symtab.static_block:                   Symbol Tables In Python.
                                                              (line  73)
* symtab?:                               Symbol Tables In Guile.
                                                              (line  17)
* Symtab_and_line.is_valid:              Symbol Tables In Python.
                                                              (line  34)
* Symtab_and_line.last:                  Symbol Tables In Python.
                                                              (line  24)
* Symtab_and_line.line:                  Symbol Tables In Python.
                                                              (line  28)
* Symtab_and_line.pc:                    Symbol Tables In Python.
                                                              (line  20)
* Symtab_and_line.symtab:                Symbol Tables In Python.
                                                              (line  16)
* sysinfo:                               DJGPP Native.        (line  19)
* taas:                                  Threads.             (line 229)
* tab-insert (M-<TAB>):                  Commands For Text.   (line  30)
* tabset:                                TUI Configuration.   (line  49)
* target:                                Target Commands.     (line  49)
* target ctf:                            Trace Files.         (line  28)
* target record:                         Process Record and Replay.
                                                              (line  43)
* target record-btrace:                  Process Record and Replay.
                                                              (line  43)
* target record-full:                    Process Record and Replay.
                                                              (line  43)
* target sim:                            OpenRISC 1000.       (line  13)
* target tfile:                          Trace Files.         (line  28)
* target-config:                         Guile Configuration. (line  24)
* TargetConnection.description:          Connections In Python.
                                                              (line  62)
* TargetConnection.details:              Connections In Python.
                                                              (line  68)
* TargetConnection.is_valid:             Connections In Python.
                                                              (line  39)
* TargetConnection.num:                  Connections In Python.
                                                              (line  51)
* TargetConnection.type:                 Connections In Python.
                                                              (line  57)
* task (Ada):                            Ada Tasks.           (line 119)
* tbreak:                                Set Breaks.          (line 164)
* tcatch:                                Set Catchpoints.     (line 298)
* tdump:                                 tdump.               (line   6)
* teval (tracepoints):                   Tracepoint Actions.  (line 118)
* tfaas:                                 Threads.             (line 236)
* tfile:                                 Trace Files.         (line  28)
* tfind:                                 tfind.               (line   6)
* thbreak:                               Set Breaks.          (line 190)
* this, inside C++ member functions:     C Plus Plus Expressions.
                                                              (line  20)
* thread apply:                          Threads.             (line 194)
* thread find:                           Threads.             (line 265)
* thread name:                           Threads.             (line 254)
* thread THREAD-ID:                      Threads.             (line 176)
* thread-info:                           GDB/MI Support Commands.
                                                              (line  86)
* ThreadEvent.inferior_thread:           Events In Python.    (line  52)
* throw-user-error:                      Commands In Guile.   (line  81)
* tilde-expand (M-~):                    Miscellaneous Commands.
                                                              (line  30)
* trace:                                 Create and Delete Tracepoints.
                                                              (line   6)
* transpose-chars (C-t):                 Commands For Text.   (line  50)
* transpose-words (M-t):                 Commands For Text.   (line  56)
* tsave:                                 Trace Files.         (line  12)
* tstart [ NOTES ]:                      Starting and Stopping Trace Experiments.
                                                              (line   6)
* tstatus:                               Starting and Stopping Trace Experiments.
                                                              (line  27)
* tstop [ NOTES ]:                       Starting and Stopping Trace Experiments.
                                                              (line  16)
* tty:                                   Input/Output.        (line  23)
* tui disable:                           TUI Commands.        (line  23)
* tui enable:                            TUI Commands.        (line  18)
* tui layout:                            TUI Commands.        (line  74)
* tui new-layout:                        TUI Commands.        (line  29)
* tui refresh:                           TUI Commands.        (line 126)
* tui reg:                               TUI Commands.        (line 131)
* tui window height:                     TUI Commands.        (line 159)
* tui window width:                      TUI Commands.        (line 174)
* TuiWindow.erase:                       TUI Windows In Python.
                                                              (line  51)
* TuiWindow.height:                      TUI Windows In Python.
                                                              (line  43)
* TuiWindow.is_valid:                    TUI Windows In Python.
                                                              (line  28)
* TuiWindow.title:                       TUI Windows In Python.
                                                              (line  46)
* TuiWindow.width:                       TUI Windows In Python.
                                                              (line  40)
* TuiWindow.write:                       TUI Windows In Python.
                                                              (line  54)
* tvariable:                             Trace State Variables.
                                                              (line  26)
* type-array:                            Types In Guile.      (line  52)
* type-code:                             Types In Guile.      (line  25)
* type-const:                            Types In Guile.      (line  99)
* type-field:                            Types In Guile.      (line 129)
* type-fields:                           Types In Guile.      (line 115)
* type-has-field-deep?:                  Guile Types Module.  (line  32)
* type-has-field?:                       Types In Guile.      (line 142)
* type-name:                             Types In Guile.      (line  34)
* type-num-fields:                       Types In Guile.      (line 112)
* type-pointer:                          Types In Guile.      (line  73)
* type-print-name:                       Types In Guile.      (line  38)
* type-range:                            Types In Guile.      (line  77)
* type-reference:                        Types In Guile.      (line  81)
* type-sizeof:                           Types In Guile.      (line  43)
* type-strip-typedefs:                   Types In Guile.      (line  48)
* type-tag:                              Types In Guile.      (line  29)
* type-target:                           Types In Guile.      (line  85)
* type-unqualified:                      Types In Guile.      (line 107)
* type-vector:                           Types In Guile.      (line  60)
* type-volatile:                         Types In Guile.      (line 103)
* Type.alignof:                          Types In Python.     (line  35)
* Type.array:                            Types In Python.     (line 164)
* Type.code:                             Types In Python.     (line  41)
* Type.const:                            Types In Python.     (line 185)
* Type.dynamic:                          Types In Python.     (line  45)
* Type.fields:                           Types In Python.     (line 101)
* Type.is_scalar:                        Types In Python.     (line  86)
* Type.is_signed:                        Types In Python.     (line  91)
* Type.name:                             Types In Python.     (line  65)
* Type.objfile:                          Types In Python.     (line  82)
* Type.optimized_out:                    Types In Python.     (line 242)
* Type.pointer:                          Types In Python.     (line 208)
* Type.range:                            Types In Python.     (line 198)
* Type.reference:                        Types In Python.     (line 204)
* Type.sizeof:                           Types In Python.     (line  69)
* Type.strip_typedefs:                   Types In Python.     (line 212)
* Type.tag:                              Types In Python.     (line  76)
* Type.target:                           Types In Python.     (line 216)
* Type.template_argument:                Types In Python.     (line 230)
* Type.unqualified:                      Types In Python.     (line 193)
* Type.vector:                           Types In Python.     (line 172)
* Type.volatile:                         Types In Python.     (line 189)
* type?:                                 Types In Guile.      (line  11)
* TYPE_CODE_ARRAY:                       Types In Python.     (line 254)
* TYPE_CODE_ARRAY <1>:                   Types In Guile.      (line 153)
* TYPE_CODE_BITSTRING:                   Types In Python.     (line 292)
* TYPE_CODE_BITSTRING <1>:               Types In Guile.      (line 191)
* TYPE_CODE_BOOL:                        Types In Python.     (line 316)
* TYPE_CODE_BOOL <1>:                    Types In Guile.      (line 215)
* TYPE_CODE_CHAR:                        Types In Python.     (line 313)
* TYPE_CODE_CHAR <1>:                    Types In Guile.      (line 212)
* TYPE_CODE_COMPLEX:                     Types In Python.     (line 319)
* TYPE_CODE_COMPLEX <1>:                 Types In Guile.      (line 218)
* TYPE_CODE_DECFLOAT:                    Types In Python.     (line 328)
* TYPE_CODE_DECFLOAT <1>:                Types In Guile.      (line 227)
* TYPE_CODE_ENUM:                        Types In Python.     (line 263)
* TYPE_CODE_ENUM <1>:                    Types In Guile.      (line 162)
* TYPE_CODE_ERROR:                       Types In Python.     (line 295)
* TYPE_CODE_ERROR <1>:                   Types In Guile.      (line 194)
* TYPE_CODE_FIXED_POINT:                 Types In Python.     (line 339)
* TYPE_CODE_FIXED_POINT <1>:             Types In Guile.      (line 238)
* TYPE_CODE_FLAGS:                       Types In Python.     (line 266)
* TYPE_CODE_FLAGS <1>:                   Types In Guile.      (line 165)
* TYPE_CODE_FLT:                         Types In Python.     (line 275)
* TYPE_CODE_FLT <1>:                     Types In Guile.      (line 174)
* TYPE_CODE_FUNC:                        Types In Python.     (line 269)
* TYPE_CODE_FUNC <1>:                    Types In Guile.      (line 168)
* TYPE_CODE_INT:                         Types In Python.     (line 272)
* TYPE_CODE_INT <1>:                     Types In Guile.      (line 171)
* TYPE_CODE_INTERNAL_FUNCTION:           Types In Python.     (line 331)
* TYPE_CODE_INTERNAL_FUNCTION <1>:       Types In Guile.      (line 230)
* TYPE_CODE_MEMBERPTR:                   Types In Python.     (line 304)
* TYPE_CODE_MEMBERPTR <1>:               Types In Guile.      (line 203)
* TYPE_CODE_METHOD:                      Types In Python.     (line 298)
* TYPE_CODE_METHOD <1>:                  Types In Guile.      (line 197)
* TYPE_CODE_METHODPTR:                   Types In Python.     (line 301)
* TYPE_CODE_METHODPTR <1>:               Types In Guile.      (line 200)
* TYPE_CODE_NAMESPACE:                   Types In Python.     (line 325)
* TYPE_CODE_NAMESPACE <1>:               Types In Python.     (line 342)
* TYPE_CODE_NAMESPACE <2>:               Types In Guile.      (line 224)
* TYPE_CODE_NAMESPACE <3>:               Types In Guile.      (line 241)
* TYPE_CODE_PTR:                         Types In Python.     (line 251)
* TYPE_CODE_PTR <1>:                     Types In Guile.      (line 150)
* TYPE_CODE_RANGE:                       Types In Python.     (line 284)
* TYPE_CODE_RANGE <1>:                   Types In Guile.      (line 183)
* TYPE_CODE_REF:                         Types In Python.     (line 307)
* TYPE_CODE_REF <1>:                     Types In Guile.      (line 206)
* TYPE_CODE_RVALUE_REF:                  Types In Python.     (line 310)
* TYPE_CODE_RVALUE_REF <1>:              Types In Guile.      (line 209)
* TYPE_CODE_SET:                         Types In Python.     (line 281)
* TYPE_CODE_SET <1>:                     Types In Guile.      (line 180)
* TYPE_CODE_STRING:                      Types In Python.     (line 287)
* TYPE_CODE_STRING <1>:                  Types In Guile.      (line 186)
* TYPE_CODE_STRUCT:                      Types In Python.     (line 257)
* TYPE_CODE_STRUCT <1>:                  Types In Guile.      (line 156)
* TYPE_CODE_TYPEDEF:                     Types In Python.     (line 322)
* TYPE_CODE_TYPEDEF <1>:                 Types In Guile.      (line 221)
* TYPE_CODE_UNION:                       Types In Python.     (line 260)
* TYPE_CODE_UNION <1>:                   Types In Guile.      (line 159)
* TYPE_CODE_VOID:                        Types In Python.     (line 278)
* TYPE_CODE_VOID <1>:                    Types In Guile.      (line 177)
* TYPE_CODE_XMETHOD:                     Types In Python.     (line 335)
* TYPE_CODE_XMETHOD <1>:                 Types In Guile.      (line 234)
* u (SingleKey TUI key):                 TUI Single Key Mode. (line  37)
* u (until):                             Continuing and Stepping.
                                                              (line 124)
* undefined-command-error-code:          GDB/MI Support Commands.
                                                              (line 101)
* undisplay:                             Auto Display.        (line  45)
* undo (C-_ or C-x C-u):                 Miscellaneous Commands.
                                                              (line  23)
* universal-argument ():                 Numeric Arguments.   (line  10)
* unix-filename-rubout ():               Commands For Killing.
                                                              (line  43)
* unix-line-discard (C-u):               Commands For Killing.
                                                              (line  16)
* unix-word-rubout (C-w):                Commands For Killing.
                                                              (line  39)
* unset environment:                     Environment.         (line  65)
* unset substitute-path:                 Source Path.         (line 214)
* until:                                 Continuing and Stepping.
                                                              (line 124)
* until&:                                Background Execution.
                                                              (line  46)
* unwind-stop-reason-string:             Frames In Guile.     (line 163)
* up:                                    Selection.           (line  69)
* Up:                                    TUI Keys.            (line  67)
* up-silently:                           Selection.           (line 106)
* upcase-word (M-u):                     Commands For Text.   (line  61)
* update:                                TUI Commands.        (line 157)
* v (SingleKey TUI key):                 TUI Single Key Mode. (line  40)
* value->bool:                           Values From Inferior In Guile.
                                                              (line 246)
* value->bytevector:                     Values From Inferior In Guile.
                                                              (line 258)
* value->integer:                        Values From Inferior In Guile.
                                                              (line 250)
* value->lazy-string:                    Values From Inferior In Guile.
                                                              (line 303)
* value->real:                           Values From Inferior In Guile.
                                                              (line 254)
* value->string:                         Values From Inferior In Guile.
                                                              (line 262)
* value-abs:                             Arithmetic In Guile. (line  35)
* value-add:                             Arithmetic In Guile. (line  15)
* value-address:                         Values From Inferior In Guile.
                                                              (line 106)
* value-call:                            Values From Inferior In Guile.
                                                              (line 240)
* value-cast:                            Values From Inferior In Guile.
                                                              (line 129)
* value-const-value:                     Values From Inferior In Guile.
                                                              (line 229)
* value-dereference:                     Values From Inferior In Guile.
                                                              (line 143)
* value-div:                             Arithmetic In Guile. (line  21)
* value-dynamic-cast:                    Values From Inferior In Guile.
                                                              (line 135)
* value-dynamic-type:                    Values From Inferior In Guile.
                                                              (line 114)
* value-fetch-lazy!:                     Values From Inferior In Guile.
                                                              (line 345)
* value-field:                           Values From Inferior In Guile.
                                                              (line 233)
* value-lazy?:                           Values From Inferior In Guile.
                                                              (line 328)
* value-logand:                          Arithmetic In Guile. (line  47)
* value-logior:                          Arithmetic In Guile. (line  49)
* value-lognot:                          Arithmetic In Guile. (line  45)
* value-logxor:                          Arithmetic In Guile. (line  51)
* value-lsh:                             Arithmetic In Guile. (line  37)
* value-max:                             Arithmetic In Guile. (line  43)
* value-min:                             Arithmetic In Guile. (line  41)
* value-mod:                             Arithmetic In Guile. (line  25)
* value-mul:                             Arithmetic In Guile. (line  19)
* value-neg:                             Arithmetic In Guile. (line  31)
* value-not:                             Arithmetic In Guile. (line  29)
* value-optimized-out?:                  Values From Inferior In Guile.
                                                              (line 102)
* value-pos:                             Arithmetic In Guile. (line  33)
* value-pow:                             Arithmetic In Guile. (line  27)
* value-print:                           Values From Inferior In Guile.
                                                              (line 354)
* value-reference-value:                 Values From Inferior In Guile.
                                                              (line 221)
* value-referenced-value:                Values From Inferior In Guile.
                                                              (line 196)
* value-reinterpret-cast:                Values From Inferior In Guile.
                                                              (line 139)
* value-rem:                             Arithmetic In Guile. (line  23)
* value-rsh:                             Arithmetic In Guile. (line  39)
* value-rvalue-reference-value:          Values From Inferior In Guile.
                                                              (line 225)
* value-sub:                             Arithmetic In Guile. (line  17)
* value-subscript:                       Values From Inferior In Guile.
                                                              (line 236)
* value-type:                            Values From Inferior In Guile.
                                                              (line 110)
* Value.address:                         Values From Inferior.
                                                              (line  65)
* Value.cast:                            Values From Inferior.
                                                              (line 151)
* Value.const_value:                     Values From Inferior.
                                                              (line 239)
* Value.dereference:                     Values From Inferior.
                                                              (line 157)
* Value.dynamic_cast:                    Values From Inferior.
                                                              (line 243)
* Value.dynamic_type:                    Values From Inferior.
                                                              (line  79)
* Value.fetch_lazy:                      Values From Inferior.
                                                              (line 417)
* Value.format_string:                   Values From Inferior.
                                                              (line 251)
* Value.is_lazy:                         Values From Inferior.
                                                              (line  94)
* Value.is_optimized_out:                Values From Inferior.
                                                              (line  70)
* Value.lazy_string:                     Values From Inferior.
                                                              (line 395)
* Value.referenced_value:                Values From Inferior.
                                                              (line 210)
* Value.reference_value:                 Values From Inferior.
                                                              (line 235)
* Value.reinterpret_cast:                Values From Inferior.
                                                              (line 247)
* Value.string:                          Values From Inferior.
                                                              (line 363)
* Value.type:                            Values From Inferior.
                                                              (line  75)
* Value.__init__:                        Values From Inferior.
                                                              (line 107)
* Value.__init__ <1>:                    Values From Inferior.
                                                              (line 141)
* value<=?:                              Arithmetic In Guile. (line  57)
* value<?:                               Arithmetic In Guile. (line  55)
* value=?:                               Arithmetic In Guile. (line  53)
* value>=?:                              Arithmetic In Guile. (line  61)
* value>?:                               Arithmetic In Guile. (line  59)
* value?:                                Values From Inferior In Guile.
                                                              (line  41)
* vi-cmd-mode-string:                    Readline Init File Syntax.
                                                              (line 309)
* vi-editing-mode (M-C-j):               Miscellaneous Commands.
                                                              (line  92)
* vi-ins-mode-string:                    Readline Init File Syntax.
                                                              (line 320)
* visible-stats:                         Readline Init File Syntax.
                                                              (line 331)
* w (SingleKey TUI key):                 TUI Single Key Mode. (line  43)
* w (with):                              Command Settings.    (line  39)
* watch:                                 Set Watchpoints.     (line  42)
* watchpoint annotation:                 Annotations for Running.
                                                              (line  50)
* whatis:                                Symbols.             (line 138)
* where:                                 Backtrace.           (line  94)
* while:                                 Command Files.       (line  85)
* while-stepping (tracepoints):          Tracepoint Actions.  (line 126)
* Window.click:                          TUI Windows In Python.
                                                              (line 106)
* Window.close:                          TUI Windows In Python.
                                                              (line  73)
* Window.hscroll:                        TUI Windows In Python.
                                                              (line  92)
* Window.render:                         TUI Windows In Python.
                                                              (line  82)
* Window.vscroll:                        TUI Windows In Python.
                                                              (line  99)
* winheight:                             TUI Commands.        (line 159)
* winwidth:                              TUI Commands.        (line 174)
* with command:                          Command Settings.    (line  39)
* WP_ACCESS:                             Breakpoints In Python.
                                                              (line  95)
* WP_ACCESS <1>:                         Breakpoints In Guile.
                                                              (line  94)
* WP_READ:                               Breakpoints In Python.
                                                              (line  89)
* WP_READ <1>:                           Breakpoints In Guile.
                                                              (line  88)
* WP_WRITE:                              Breakpoints In Python.
                                                              (line  92)
* WP_WRITE <1>:                          Breakpoints In Guile.
                                                              (line  91)
* x (examine memory):                    Memory.              (line   9)
* x(examine), and info line:             Machine Code.        (line  35)
* XMethod.__init__:                      Xmethod API.         (line  38)
* XMethodMatcher.match:                  Xmethod API.         (line  47)
* XMethodMatcher.__init__:               Xmethod API.         (line  43)
* XMethodWorker.get_arg_types:           Xmethod API.         (line  60)
* XMethodWorker.get_result_type:         Xmethod API.         (line  67)
* XMethodWorker.__call__:                Xmethod API.         (line  73)
* yank (C-y):                            Commands For Killing.
                                                              (line  70)
* yank-last-arg (M-. or M-_):            Commands For History.
                                                              (line  83)
* yank-nth-arg (M-C-y):                  Commands For History.
                                                              (line  74)
* yank-pop (M-y):                        Commands For Killing.
                                                              (line  73)

