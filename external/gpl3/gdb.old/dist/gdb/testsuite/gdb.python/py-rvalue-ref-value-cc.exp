# Copyright (C) 2012-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the GDB testsuite.  It tests the mechanism
# exposing rvalue reference values to Python.  It is based on
# gdb.python/py-value-cc.exp.

if {[skip_cplus_tests]} { continue }

standard_testfile .cc

if {[prepare_for_testing $testfile.exp $testfile $srcfile \
    {debug c++ additional_flags="-std=c++11"}]} {
    return -1
}

# Skip all tests if Python scripting is not enabled.
if {[skip_python_tests]} { continue }

if {![runto_main]} {
   return -1
}

gdb_breakpoint [gdb_get_line_number "Break here."]
gdb_continue_to_breakpoint "Break here" ".*Break here.*"

gdb_test "python print (str(gdb.parse_and_eval(\"int_rref\").type))" "int &&"
gdb_test "python print (str(gdb.parse_and_eval(\"int_rref\").referenced_value().type))" "int"
gdb_test "python print (str(gdb.parse_and_eval(\"int_rref\").referenced_value()))" "10"

gdb_test "python print (str(gdb.parse_and_eval(\"int_ptr_rref\").dereference().type))" "int"
gdb_test "python print (str(gdb.parse_and_eval(\"int_ptr_rref\").referenced_value().type))" "int_ptr"
gdb_test "python print (str(gdb.parse_and_eval(\"int_ptr_rref\").referenced_value().dereference()))" "10"
gdb_test "python print (str(gdb.parse_and_eval(\"int_ptr_rref\").referenced_value().referenced_value()))" "10"

gdb_test_no_output "python b = gdb.parse_and_eval('b')" "init b"
gdb_test_no_output "python b_rref = gdb.parse_and_eval('b_rref')" "init b_rref"
gdb_test_no_output "python b_fields = b.type.fields()" "init b_fields"

gdb_test "python print(b_rref\[b_fields\[1\]\])" "98 'b'" "b_rref.a via field"
gdb_test "python print(b_rref\[b_fields\[0\]\].type.target())" "A" \
  "type of b_rref's base class via field"
gdb_test "python print(b_rref\[b_fields\[0\]\]\['a'\])" "100" \
  "b_rref.A::a via field"
