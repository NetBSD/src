# Copyright 2015-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Virtual method/inheritance tests for GDB's C++ compile feature.

load_lib compile-support.exp

standard_testfile .cc

if {[skip_cplus_tests]} {
    untested "skipping C++ tests"
    return
}

if {[prepare_for_testing $testfile $testfile $srcfile \
	 {debug nowarnings c++}]} {
    return -1
}

if {![runto_main]} {
    return -1
}

gdb_breakpoint [gdb_get_line_number "break here" $srcfile]
gdb_continue_to_breakpoint "testing location"

if {[skip_compile_feature_untested "var = 0"]} {
    return -1
}

CompileExpression::new "var"
CompileExpression::test "b.doit ()" 2
CompileExpression::test "c.doit ()" 3
CompileExpression::test "d.doit ()" 4
CompileExpression::test "ap->doit ()" 4
CompileExpression::test "b.doit2 ()" 22
CompileExpression::test "c.doit2 ()" 33
CompileExpression::test "d.doit2 ()" 44
CompileExpression::test "ap->doit2 ()" 44
CompileExpression::test "b.doit3 ()" -3
CompileExpression::test "c.doit3 ()" -3
CompileExpression::test "d.doit3 ()" -3

# These two tests are "disabled".  They represent new/future features.
# CompileExpression::test \
    [concat "struct ABC {int doit2() { return 3333; }} abc;" \
	 "var = abc.doit2()"] \
    3333 -explicit
# CompileExpression::test \
    [concat "struct ABC : A {int doit2() { return 4444; }} abc;" \
	 "var = abc.doit2()"] \
    4444 -explicit

# Test some error conditions
gdb_test "compile code A a;" \
    ".*cannot declare variable .a. to be of abstract type.*Compilation failed."
