# Copyright 2010-2016 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the gdb testsuite.

if { [skip_cplus_tests] } { continue }

standard_testfile .cc

if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug c++}]} {
    return -1
}

if {![runto_main]} then {
    perror "couldn't run to breakpoint"
    continue
}

gdb_breakpoint [gdb_get_line_number "breakpoint 1"]
gdb_continue_to_breakpoint "first breakpoint"

# In PR 11226, we failed to print x correctly in the "print *this"
# case.
gdb_test "print *this" " = {<mc::Base> = {x = 2}, _vptr.Middle = ${hex}( <\[^>]*>)?, y = 3}"
gdb_test "print x" " = 2" "print x in get_y"

gdb_breakpoint [gdb_get_line_number "breakpoint 2"]
gdb_continue_to_breakpoint "second breakpoint"

# In PR 11226, we could not find x here.
gdb_test "print x" " = 2" "print x in get_z"

gdb_breakpoint [gdb_get_line_number "breakpoint 3"]
gdb_continue_to_breakpoint "third breakpoint"

# In PR 9629, we failed to print v correctly here.
gdb_test "print *(D *) e" " = {<C> = {v = 11}, _vptr.D = ${hex}( <\[^>]*>)?}"

# A regression test reported to Red Hat bugzilla, see:
# https://bugzilla.redhat.com/show_bug.cgi?id=560741
gdb_test_no_output "set print object on"
gdb_test "print/x b->mA" " = 0xaaaaaaaa"

# A regression test reported to Red Hat bugzilla, see:
# https://bugzilla.redhat.com/show_bug.cgi?id=606660
# `set print object on' is expected.
gdb_test "print rtti_data" " = .*, data = 1\}"

# Printing a pointer into a virtual base of a larger object used to do
# pointer adjusment directly into the value being printed, in-place
# (and did it wrong, too).  Print the pointer, and then access the
# value history to check the pointer value is not changed.  If it had
# been changed, then we'd not be able to find the real type anymore.
gdb_test "print virtual_middle_b" \
    " = \\(Virtual \\*\\) $hex <virtual_o>" \
    "print pointer to virtual base at non-zero offset of larger object"
gdb_test "print $" \
    " = \\(Virtual \\*\\) $hex <virtual_o>" \
    "print same pointer from history value"
gdb_test "print *$$" \
    " = \\(Virtual\\) {<VirtualMiddleA> = {<VirtualBase> = {_vptr.VirtualBase = ${hex}( <\[^>]*>)?, x = 0}, _vptr.VirtualMiddleA = ${hex}( <\[^>]*>)?, y = \\{0 <repeats 300 times>\\}}, <VirtualMiddleB> = {_vptr.VirtualMiddleB = ${hex}( <\[^>]*>)?, y = 0}, _vptr.Virtual = ${hex}( <\[^>]*>)?, z = 0}" \
    "print whole pointed-to object, starting from the virtual base pointer"
