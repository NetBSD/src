# Copyright 2009-2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test breakpoints on extern "C" functions implemented in C++.

if { [skip_cplus_tests] } { continue }

standard_testfile .cc

if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug c++}]} {
    return -1
}

runto_main

if { [gdb_breakpoint "c_func"] == 1 } {
    pass "setting breakpoint at c_func"
}
gdb_continue_to_breakpoint "c_func" ".*c_func.*"

gdb_test_no_output "set \$counter = 0" "initialize counter"

gdb_test "rbreak c_funcs" \
    "Breakpoint.* at .*c_funcs_1.*Breakpoint.* at .*c_funcs_2.*"

# Test that "commands" without an argument puts commands on both
# breakpoints.
gdb_test_multiple "commands" "set commands on multiple breakpoints" {
  -re "Type commands for breakpoint\\(s\\) 3-4, one per line\.\r\nEnd with a line saying just \"end\".\r\n>$" {
    gdb_test_multiple "set \$counter = \$counter + 1\nend" \
      "command details for multiple breakpoints" {
	-re "$gdb_prompt $" {
	  pass "command details for multiple breakpoints"
	}
      }
    pass "set commands on multiple breakpoints"
  }
}

gdb_continue_to_breakpoint "c_funcs_1" ".*c_funcs_1.*"
gdb_test "print \$counter" " = 1" "verify counter at first breakpoint"
gdb_continue_to_breakpoint "c_funcs_2" ".*c_funcs_2.*"
gdb_test "print \$counter" " = 2" "verify counter at second breakpoint"
