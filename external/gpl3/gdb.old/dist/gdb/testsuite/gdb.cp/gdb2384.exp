# Copyright 2007-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# When gdb resolves type information for class "derived" from objfile
# gdb2384, it use to fill in the TYPE_VPTR_BASETYPE field with class "base"
# from objfile gdb2384-base.so.  When the program is rerun the type
# information for base-in-so-base.so is discarded leaving
# TYPE_VPTR_BASETYPE dangling.
#
# PR c++/9489.

if { [skip_cplus_tests] } { continue }
if { [skip_shlib_tests] } { continue }

standard_testfile .cc gdb2384-base.cc

set sofile [standard_output_file gdb2384-base.so]

if { [gdb_compile_shlib $srcdir/$subdir/$srcfile2 $sofile {debug c++}] != ""
     || [gdb_compile $srcdir/$subdir/$srcfile $binfile executable [list debug "c++" shlib=${sofile}]] != ""} {
    untested "failed to compile"
    return -1
}

clean_restart ${binfile}
gdb_load_shlib ${sofile}


if {![runto_main]} {
    return -1
}

gdb_breakpoint [gdb_get_line_number "First breakpoint"]
gdb_continue_to_breakpoint "run to 'First breakpoint', first time"

gdb_test "print d1.meth ()" \
    ".*42.*"

# Now try again.  gdb's without the fix will hopefully segv here

runto_main
gdb_breakpoint [gdb_get_line_number "First breakpoint"]
gdb_continue_to_breakpoint "run to 'First breakpoint', second time"
gdb_test "print d1.meth ()" \
    ".*42.*" \
    "gdb2384 at 'First breakpoint'"

# second case

runto_main
gdb_breakpoint [gdb_get_line_number "Second breakpoint"]
gdb_continue_to_breakpoint "run to 'Second breakpoint', first time"
gdb_test "print d2.meth ()" \
    ".*24.*" \
    "print d2.meth()"

runto_main
gdb_breakpoint [gdb_get_line_number "Second breakpoint"]
gdb_continue_to_breakpoint "run to 'Second breakpoint', second time"
gdb_test "print d2.meth ()" \
    ".*24.*" \
    "gdb2384 at 'Second breakpoint'"

