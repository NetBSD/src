# Copyright 2021-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# Set a breakpoint on libc's _exit, and verify that it triggers.  The function
# tends to do a syscall immediately after the prologue, and if the breakpoint is
# set past the syscall due to faulty prologue skipping, the breakpoint will not
# trigger.
#
# In particular, we're trying to excercise the instruction analysis
# functionality of prologue skipping.  If the non-minimal symbols are
# read for libc, then that functionality might not be used because f.i.
# line-info is used instead.  Also, if the minimal symbols are not read
# for libc, then the breakpoint is set on the exec-local _exit@plt instead,
# and that functionality will also not be used.
#
# We may get the required setup in case of a libc with misssing separate
# debuginfo, but we want the same effect if that debuginfo is installed.
#
# So, we use -readnever to read minimal symbols, but not non-miminal symbols.
#
# Because the code at _exit may be and usually is optimized, the test is in
# the gdb.opt directory.

standard_testfile

# See if we have target board readnow.exp or similar.
if {[readnow]} {
    untested "--readnever not allowed in combination with --readnow"
    return -1
}

save_vars { GDBFLAGS } {
    append GDBFLAGS " -readnever"

    if {[prepare_for_testing "failed to prepare" $testfile $srcfile nodebug]} {
	return -1
    }
}

if {![runto_main]} {
    return 0
}

gdb_breakpoint "_exit"

# Give some background information about the breakpoint(s) and corresponding
# the shared lib(s).
gdb_test "info breakpoints"
gdb_test "info shared"

# If the skip_prologue analysis of _exit is too eager, we may not hit the
# breakpoint.
gdb_continue_to_breakpoint "_exit" "_exit \\(\\) .*"
