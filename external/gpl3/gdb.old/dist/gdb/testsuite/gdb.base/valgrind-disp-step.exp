# Copyright 2012-2017 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Step over breakpoints with displaced stepping on, against Valgrind.
# We can't really use displaced stepping with Valgrind, so what this
# really tests is that GDB falls back to in-line stepping
# automatically instead of getting stuck or crashing.

if [is_remote target] {
    # The test always runs locally.
    return 0
}

standard_testfile .c
if {[build_executable "failed to build" $testfile $srcfile {debug}] == -1} {
    return -1
}

set test "spawn valgrind"
set cmd "valgrind --vgdb-error=0 $binfile"
set res [remote_spawn host $cmd]
if { $res < 0 || $res == "" } {
    verbose -log "Spawning $cmd failed."
    unsupported $test
    return -1
}
pass $test
# Declare GDB now as running.
set gdb_spawn_id $res

# GDB started by vgdb stops already after the startup is executed, like with
# non-extended gdbserver.  It is also not correct to run/attach the inferior.
set use_gdb_stub 1

set test "valgrind started"
# The trailing '.' differs for different memcheck versions.
gdb_test_multiple "" $test {
    -re "Memcheck, a memory error detector\\.?\r\n" {
	pass $test
    }
    -re "valgrind: failed to start tool 'memcheck' for platform '.*': No such file or directory" {
	unsupported $test
	return -1
    }
    -re "valgrind: wrong ELF executable class" {
	unsupported $test
	return -1
    }
    -re "command not found" {
	# The spawn succeeded, but then valgrind was not found - e.g. if
	# we spawned SSH to a remote system.
	unsupported $test
	return -1
    }
    -re "valgrind: Bad option.*--vgdb-error=0" {
	# valgrind is not >= 3.7.0.
	unsupported $test
	return -1
    }
}

set test "vgdb prompt"
# The trailing '.' differs for different memcheck versions.
gdb_test_multiple "" $test {
    -re "  (target remote | \[^\r\n\]*/vgdb \[^\r\n\]*)\r\n" {
	set vgdbcmd $expect_out(1,string)
	pass $test
    }
}

# Do not kill valgrind.
set valgrind_pid [exp_pid -i [board_info host fileid]]
unset gdb_spawn_id
set board [host_info name]
unset_board_info fileid

clean_restart $testfile

# Make sure we're disconnected, in case we're testing with the
# native-extended-gdbserver board, where gdb_start/gdb_load spawn
# gdbserver and connect to it.
gdb_test "disconnect" ".*"

gdb_test "$vgdbcmd" " in \\.?_start .*" "target remote for vgdb"

gdb_test "monitor v.set gdb_output" "valgrind output will go to gdb.*"

gdb_test_no_output "set displaced-stepping off"
gdb_breakpoint "main" "breakpoint at main"
gdb_test "continue" " stop 0 .*" "continue to main"
delete_breakpoints

set curr_stop 0
foreach displaced { "off" "on" } {
    with_test_prefix "displaced $displaced" {

	gdb_test_no_output "set displaced-stepping $displaced"

	foreach go { "once" "twice" } {
	    with_test_prefix $go {
		gdb_test "break" "Breakpoint .* at .*" "set breakpoint"

		# Whether we should see a warning.
		set should_warn [expr {$go == "once" && $displaced == "on"}]

		incr curr_stop

		set msg "step over breakpoint"
		set pattern " stop $curr_stop .*$gdb_prompt $"
		gdb_test_multiple "next" $msg {
		    -re "warning: disabling displaced stepping.*$pattern" {
			gdb_assert $should_warn $msg
		    }
		    -re "$pattern" {
			gdb_assert !$should_warn $msg
		    }
		}
	    }
	}
    }
}

# Only if valgrind got stuck.
remote_exec host "kill -9 ${valgrind_pid}"
