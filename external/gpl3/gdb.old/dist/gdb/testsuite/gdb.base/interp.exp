# Copyright 2004-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# interp.exp   Test interpreter-exec command

standard_testfile

if { [prepare_for_testing "failed to prepare" ${testfile} $srcfile {debug}] } {
    return -1
}

# Do not use gdb_test for this test, since it has two prompts.
gdb_test_multiple "interpreter-exec mi \"-var-update *\"" "" {
    -re "\\^done,changelist=\\\[\\\]\r\n$gdb_prompt " {
	pass $gdb_test_name
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}
gdb_test "interpreter-exec console \"show version\"" "GNU gdb .*"

# Regression test for crash when an exception occurs in mi_parse.
gdb_test_multiple "interpreter-exec mi \"-break-insert --thread a\"" \
    "regression test for mi_parse crash" {
	-re ".error,msg=.Invalid value for the '--thread' option.\r\n$gdb_prompt " {
	    pass $gdb_test_name
	    gdb_expect 1 {
		-re "\r\n$gdb_prompt $" { }
	    }
	}
    }

gdb_test_multiple "interpreter-exec mi \"-stack-info-frame\"" "" {
    -re ".error,msg=.No registers\..\r\n$gdb_prompt " {
	pass $gdb_test_name
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

gdb_test_multiple "interpreter-exec mi1 \"-break-insert main\"" "" {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass $gdb_test_name
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

gdb_test_multiple "interpreter-exec mi2 \"-break-insert main\"" "" {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass $gdb_test_name
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

gdb_test_multiple "interpreter-exec mi3 \"-break-insert main\"" "" {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass $gdb_test_name
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

set test "define hello command"
set commands "interpreter-exec mi3 \"-data-evaluate-expression 23\""
gdb_test_multiple "define hello" "$test" {
    -re "Type commands for definition of \"hello\".\r\nEnd with a line saying just \"end\".\r\n>$" {
	pass "$test"
    }
}
gdb_test "$commands\nend" "" "finish defining hello command"

gdb_test "hello" [string_to_regexp "^done,value=\"23\""]

if {![runto_main]} {
  return -1
}

gdb_test "list" ".*\[0-9\].*main \\(int argc.*" "can list sources"
gdb_exit
