# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test "until LINE", started in the "main()" frame, where the until
# command runs into a longjmp that lands in a frame that is inner than
# main.  GDB internally intercepts the longjmp, sets a breakpoint at
# the jump destination, and once there, decides whether to stop or
# ignore the breakpoint hit depending on whether the initiating frame
# is present on the frame chain.  GDB used to have a bug where it
# recorded the frame of the caller of main instead of the frame of
# main as the initiating frame, and then later on when deciding
# whether the longjmp landed somewhere inner than main, since
# unwinding normally stops at main, GDB would fail to find the
# initiating frame.

standard_testfile

if {[prepare_for_testing "failed to prepare" ${testfile} ${srcfile}]} {
    return
}

if {![runto_main]} {
    return
}

delete_breakpoints

set until_to_line [gdb_get_line_number "until to here"]

gdb_test "until $until_to_line" \
    " until to here .*" \
    "until \$line, in main"
