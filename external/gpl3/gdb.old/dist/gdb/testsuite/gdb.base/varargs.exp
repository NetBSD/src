# Copyright 1997-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# This file was written by Elena Zannoni (ezannoni@cygnus.com)


# this file tests command line calls with functions having variable
# args list
# corresponding source file: varargs.c

#print find_max1(5,1,2,3,4,5)
#print find_max1(1,3)
#call find_max1(10,1,2,3,4,5,6,7,8,29,0)
#print find_max2(3,1,2,3)
#print find_max_double(5,1.0,17.0,2.0,3.0,4.0)
#quit



standard_testfile .c

set skip_float_test [gdb_skip_float_test]

set additional_flags {debug}
if [support_complex_tests] {
    lappend additional_flags "additional_flags=-DTEST_COMPLEX"
}

# build the first test case
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	   executable ${additional_flags}] != "" } {
     untested "failed to compile"
     return -1
}

# Start with a fresh gdb.

clean_restart ${binfile}
gdb_test_no_output "set print sevenbit-strings"
gdb_test_no_output "set print address off"
gdb_test_no_output "set width 0"


if [gdb_skip_stdio_test "varargs.exp"] {
    # Nothing in this module is testable without printf.
    return
}

if {![runto test]} {
    return
}

gdb_test_stdio "print find_max1(5,1,2,3,4,5)" \
    "find_max\\(5, 1, 2, 3, 4, 5\\) returns 5\[ \r\n\]+" \
    ".\[0-9\]+ = 5" \
    "print find_max1(5,1,2,3,4,5)"

gdb_test_stdio "print find_max1(1,3)" \
    "find_max\\(1, 3\\) returns 3\[ \r\n\]+" \
    ".\[0-9\]+ = 3" \
    "print find_max1(1,3)"

gdb_test_stdio "print find_max1(10,1,2,3,4,5,6,7,8,29,0)" \
    "find_max\\(10, 1, 2, 3, 4, 5, 6, 7, 8, 29, 0\\) returns 29\[ \r\n\]+" \
    ".\[0-9\]+ = 29"

gdb_test_stdio "print find_max2(3,1,2,3)" \
    "find_max\\(3, 1, 2, 3\\) returns 3\[ \r\n\]+" \
    ".\[0-9\]+ = 3" \
    "print find_max2(3,1,2,3)"

if {!$skip_float_test} {
    gdb_test_stdio "print find_max_double(5,1.0,17.0,2.0,3.0,4.0)" \
	"find_max\\(.*\\) returns 17\\.000000\[ \r\n\]+" \
	".\[0-9\]+ = 17" \
	"print find_max_double(5,1.0,17.0,2.0,3.0,4.0)"
}


# Test _Complex type here if supported.
if [support_complex_tests] {
    global gdb_prompt

    set test "print find_max_float_real(4, fc1, fc2, fc3, fc4)"
    gdb_test $test ".*= 4 \\+ 4i"

    set test "print find_max_double_real(4, dc1, dc2, dc3, dc4)"
    gdb_test $test ".*= 4 \\+ 4i"

    set test "print find_max_long_double_real(4, ldc1, ldc2, ldc3, ldc4)"
    gdb_test $test ".*= 4 \\+ 4i"

    set test "print find_max_struct_long_double_real(4, sldc1, sldc2, sldc3, sldc4)"
    gdb_test $test ".*= 4 \\+ 4i"
}
