# Copyright 2010-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile .c watchpoint-cond-gone-stripped.c

# We need to generate a function without DWARF to crash older GDB.
# Stepping into a dynamic function trampoline or stepping out of MAIN may work
# but it is not a reliable FAIL case.

if {[prepare_for_testing_full "failed to prepare" \
	 [list $testfile debug $srcfile debug $srcfile2 {}]]} {
    return -1
}

# Problem does not occur otherwise.
gdb_test_no_output "set can-use-hw-watchpoints 0"

if ![runto_main] {
    return -1
}

gdb_breakpoint [gdb_get_line_number "watchpoint-here"]
gdb_continue_to_breakpoint "Place to set the watchpoint"

# The condition `c == 30' is the subject being tested.
gdb_test "watch c if c == 30" "atchpoint \[0-9\]*.*" "place the watchpoint"

# We may stay either in the function itself or only at the first instruction of
# its caller depending on the epilogue unwinder (or valid epilogue CFI) presence.

gdb_test "finish" \
	 "Watchpoint .* deleted because the program has left the block in.*which its expression is valid..*in (\\.?jumper|func).*" \
	 "catch the no longer valid watchpoint"
