# Copyright 2009-2014 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the GDB testsuite.  It tests precord debugging
# with shared libraries and a logfile.

# This test suitable only for process record-replay
if ![supports_process_record] {
    return
}
if {[skip_shlib_tests]} {
    return
}

standard_testfile solib-reverse.c
set precsave [standard_output_file solib.precsave]
set lib1file "shr1"
set lib1src  ${lib1file}.c
set library1 [standard_output_file ${lib1file}.sl]
set lib2file "shr2"
set lib2src  ${lib2file}.c
set library2 [standard_output_file ${lib2file}.sl]

if [get_compiler_info] {
    return -1
}

# Compile the first without debug info so that
# stepping and reverse stepping doesn't end up inside them.
if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib1src} ${library1} ""] != "" } {
    untested "Could not compile shared library1."
    return -1
}

if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib2src} ${library2} "debug"] != "" } {
    untested "Could not compile shared library2."
    return -1
}

set exec_opts [list debug shlib=${library1} shlib=${library2}]

# Attempt to prevent -Wl,-z,relro which may happen by default with some
# toolchain configurations.  Due to PR corefiles/11804 GDB will then produce
# invalid core file.

if { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable \
		     [concat $exec_opts additional_flags=-Wl,-z,norelro]] != ""
     && [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable $exec_opts] != "" } {
    untested "Could not compile $binfile."
    return -1
}
     
# Start with a fresh gdb.

gdb_exit
gdb_start

# Note: The test previously did "set debug-file-directory" to (try to)
# ensure the debug info for the dynamic loader and libc weren't found.
# This doesn't work if the debug info is in the .debug subdirectory.
# Avoiding debug info for system libraries is not germaine to this test
# and is no longer attempted.  Instead, the test does not make assumptions
# about whether the debug info is present or not.

gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}
gdb_load_shlibs $library1
gdb_load_shlibs $library2

runto main

if [supports_process_record] {
    # Activate process record/replay
    gdb_test_no_output "record" "Turn on process record"
}

set end_of_main [gdb_get_line_number "end of main" ]
gdb_test "break $end_of_main" \
    "Breakpoint $decimal at .*/$srcfile, line $end_of_main\." \
    "BP at end of main"

gdb_test "continue" "Breakpoint .* end of main .*" "run to end of main"

gdb_test "record save $precsave" \
    "Saved core file $precsave with execution log\."  \
    "save process recfile"

gdb_test "kill" "" "Kill process, prepare to debug log file" \
    "Kill the program being debugged\\? \\(y or n\\) " "y"

gdb_test "record restore $precsave" \
    "Program terminated with signal .*" \
    "reload core file"

#
# Test reverse-step over undebuggable solib functions.
#

# Run forward past some solib function calls.

set end_part_one [gdb_get_line_number " end part one" "$srcfile"]
set end_part_two [gdb_get_line_number " end part two" "$srcfile"]
gdb_test "until $end_part_one" " end part one.*" "run until end part one"

gdb_test "reverse-step" " shr1 three .*" "reverse-step third shr1"
gdb_test "reverse-step" " shr1 two .*"   "reverse-step second shr1"
gdb_test "reverse-step" " shr1 one .*"   "reverse-step first shr1"

gdb_test "reverse-step" " generic statement.*" "reverse-step generic"


#
# Test reverse-next over undebuggable solib functions.
#

# Run forward again...

gdb_test "until $end_part_one" " end part one.*" "forward to end part one"

gdb_test "reverse-next" " shr1 three .*" "reverse-next third shr1"
gdb_test "reverse-next" " shr1 two .*"   "reverse-next second shr1"
gdb_test "reverse-next" " shr1 one .*"   "reverse-next first shr1"

gdb_test "reverse-next" " generic statement.*" "reverse-next generic"


#
# Test reverse-step into debuggable solib function
#

gdb_test "reverse-step" "${lib2src}.*" "reverse-step into solib function one"
gdb_test "reverse-step" "return 2.x.*" "reverse-step within solib function one"
gdb_test "reverse-step" " middle part two.*" "reverse-step back to main one"

gdb_test "reverse-step" "${lib2src}.*" "reverse-step into solib function two"
gdb_test "reverse-step" "return 2.x.*" "reverse-step within solib function two"
gdb_test "reverse-step" " begin part two.*" "reverse-step back to main two"

#
# Test reverse-next over debuggable solib function
#

gdb_test "until $end_part_two" " end part two.*" "run until end part two"

gdb_test "reverse-next" " middle part two.*" "reverse-next over solib function one"
gdb_test "reverse-next" " begin part two.*" "reverse-next over solib function two"
