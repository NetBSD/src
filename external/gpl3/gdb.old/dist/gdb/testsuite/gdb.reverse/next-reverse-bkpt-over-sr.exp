# Copyright 2008-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# This file is part of the GDB testsuite.  It tests reverse stepping.
#
# reverse-next over a function call sets a step-resume breakpoint at
# callee's entry point, runs to it, and then does an extra single-step
# to get at the callee's caller.  Test that a user breakpoint set at
# the same location as the step-resume breakpoint isn't ignored.
#
# The test sets a breakpoint with the command break *callee to set a
# breakpoint on the first instruction of the function.  The issue is on
# PowerPC it uses Global Entry Points (GEP) and Local Entry Points (LEP).
# The GEP is the first instruction in the function.  It sets up register
# r2 and then reaches the LEP.
#
#  <callee>:
#   lis     r2,4098        <- GEP
#   addi    r2,r2,32512
#   mflr    r0             <- LEP
#   std     r0,16(r1)

#
# The command break *callee sets the breakpoint on the GEP.  Calling
# the function with callee() will enter the function via the LEP.  So,
# this test needs to use a function pointer to call callee() so the
# function will be entered via the GEP to work as designed on PowerPC in
# addition to non-PowerPC systems.  On non-PowerPC systems, the GEP and LEP
# are the same.

if ![supports_reverse] {
    return
}

standard_testfile

if { [prepare_for_testing "failed to prepare" $testfile $srcfile] } {
    return -1
}

if {![runto_main]} {
    return 0
}

if [supports_process_record] {
    # Activate process record/replay
    gdb_test_no_output "record" "turn on process record"
}

# Stop after the function pointer call to test the reverse-next command.
set lineno [gdb_get_line_number "END OF MAIN"]
gdb_test "advance $lineno" ".*END OF MAIN.*" \
    "get past callee call"

gdb_test "b \*callee" "" "set breakpoint at callee's entry"

set bpnum [get_integer_valueof "\$bpnum" 0]
gdb_test "reverse-next" \
    "Breakpoint $bpnum, callee.*" \
    "reverse-next over call trips user breakpoint at function entry"

gdb_test "up" \
    ".*FUNCTION PTR CALL TO CALLEE.*" \
    "stopped at the right callee call"
