# Copyright (C) 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test raw identifiers.

load_lib rust-support.exp
if {[skip_rust_tests]} {
    return
}

# Non-ASCII identifiers were allowed starting in 1.53.
set v [split [rust_compiler_version] .]
if {[lindex $v 0] == 1 && [lindex $v 1] < 53} {
    untested "this test requires rust 1.53 or greater"
    return -1
}

# Enable basic use of UTF-8.  LC_ALL gets reset for each testfile.
setenv LC_ALL C.UTF-8

standard_testfile .rs
if {[prepare_for_testing "failed to prepare" $testfile $srcfile {debug rust}]} {
    return -1
}

set line [gdb_get_line_number "set breakpoint here"]
if {![runto ${srcfile}:$line]} {
    untested "could not run to breakpoint"
    return -1
}

gdb_test "print 𝕯" " = 98" "print D"
gdb_test "print \"𝕯\"" " = \"𝕯\"" "print D in string"
# This output is maybe not ideal, but it also isn't incorrect.
gdb_test "print '𝕯'" " = 120175 '\\\\u\\\{01d56f\\\}'" \
    "print D as char"
gdb_test "print cç" " = 97" "print cc"

gdb_test "print 'çc'" "overlong character literal" "print cc as char"
