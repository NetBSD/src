# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013-2015 Free Software Foundation, Inc.
#
# Contributed by Intel Corp. <markus.t.metzger@intel.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# check for btrace support
if { [skip_btrace_tests] } { return -1 }

# start inferior
standard_testfile x86-tailcall.S

set opts {}
if [info exists COMPILE] {
    # make check RUNTESTFLAGS="gdb.btrace/tailcall.exp COMPILE=1"
    standard_testfile x86-tailcall.c
    lappend opts debug optimize=-O2
} elseif { ![istarget x86_64-*-* ] || ![is_lp64_target] } {
    verbose "Skipping ${testfile}."
    return
}

if [prepare_for_testing tailcall.exp $testfile $srcfile $opts] {
    return -1
}
if ![runto_main] {
    return -1
}

# we want to see the full trace for this test
gdb_test_no_output "set record function-call-history-size 0"

# trace the call to foo
gdb_test_no_output "record btrace"
gdb_test "next"

# show the flat branch trace
gdb_test "record function-call-history 1" [join [list \
  "1\tmain" \
  "2\tfoo" \
  "3\tbar" \
  "4\tmain" \
  ] "\r\n"] "flat"

# show the branch trace with calls indented
gdb_test "record function-call-history /c 1" [join [list \
  "1\tmain" \
  "2\t  foo" \
  "3\t    bar" \
  "4\tmain" \
  ] "\r\n"] "indented"

# go into bar
gdb_test "record goto 4" ".*bar \\(\\) at .*x86-tailcall.c:24\r\n.*"

# check the backtrace
gdb_test "backtrace" [join [list \
  "#0.*bar \\(\\) at x86-tailcall.c:24" \
  "#1.*foo \\(\\) at x86-tailcall.c:29" \
  "#2.*main \\(\\) at x86-tailcall.c:37" \
  "Backtrace stopped: not enough registers or memory available to unwind further" \
  ] "\r\n"]

# walk the backtrace
gdb_test "up" "#1\[^\r\n\]*foo \\(\\) at x86-tailcall.c:29\r\n.*" "up to foo"
gdb_test "up" "#2\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*" "up to main"
gdb_test "down" "#1\[^\r\n\]*foo \\(\\) at x86-tailcall.c:29\r\n.*" "down to foo"

# test stepping into and out of tailcalls.
gdb_test "finish" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*"
gdb_test "reverse-step" "\[^\r\n\]*bar \\(\\) at x86-tailcall.c:24\r\n.*"
gdb_test "reverse-finish" "\[^\r\n\]*foo \\(\\) at x86-tailcall.c:29\r\n.*"
gdb_test "reverse-step" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*"
gdb_test "next" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:39\r\n.*"
gdb_test "reverse-next" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*"
gdb_test "step" "\[^\r\n\]*foo \\(\\) at x86-tailcall.c:29\r\n.*"
gdb_test "finish" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*"
gdb_test "reverse-step" "\[^\r\n\]*bar \\(\\) at x86-tailcall.c:24\r\n.*"
gdb_test "finish" "\[^\r\n\]*main \\(\\) at x86-tailcall.c:37\r\n.*"
