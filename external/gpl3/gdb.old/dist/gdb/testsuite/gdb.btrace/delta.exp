# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013-2017 Free Software Foundation, Inc.
#
# Contributed by Intel Corp. <markus.t.metzger@intel.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if { [skip_btrace_tests] } {
    unsupported "target does not support record-btrace"
    return -1
}

standard_testfile record_goto.c
if [prepare_for_testing "failed to prepare" $testfile $srcfile] {
    return -1
}

if ![runto_main] {
    untested "failed to run to main"
    return -1
}

# proceed to some sequential code
gdb_test "next"

# start tracing
gdb_test_no_output "record btrace"

# we start without trace
with_test_prefix "no trace" {
  gdb_test "info record" [multi_line \
    "Active record target: record-btrace" \
    "Recording format: .*" \
    "Recorded 0 instructions in 0 functions \\\(0 gaps\\\) for .*" \
    ]
  gdb_test "record instruction-history" "No trace\."
  gdb_test "record function-call-history" "No trace\."
}

# we record each single-step, even if we have not seen a branch, yet.
gdb_test "stepi"

proc check_trace {} {
  gdb_test "info record" [multi_line \
    "Active record target: record-btrace" \
    "Recording format: .*" \
    "Recorded 1 instructions in 1 functions \\\(0 gaps\\\) for .*" \
    ]
  gdb_test "record instruction-history /f 1" \
    "1\t   0x\[0-9a-f\]+ <\\+\[0-9\]+>:\tmov *\\\$0x0,%eax\r"
  gdb_test "record function-call-history /c 1" "1\tmain"
}

# make sure we don't extend the trace when we ask twice.
with_test_prefix "once" {
  check_trace
}

with_test_prefix "twice" {
  check_trace
}

# check that we can reverse-stepi that instruction
gdb_test "reverse-stepi"
gdb_test "info record" [multi_line \
  "Active record target: record-btrace" \
  "Recording format: .*" \
  "Recorded 1 instructions in 1 functions \\\(0 gaps\\\) for .*" \
  "Replay in progress\.  At instruction 1\." \
  ] "reverse-stepi"

# and back
gdb_test "stepi"
gdb_test "info record" [multi_line \
  "Active record target: record-btrace" \
  "Recording format: .*" \
  "Recorded 1 instructions in 1 functions \\\(0 gaps\\\) for .*" \
  ] "and back"
