# Copyright (C) 2009-2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that GDB doesn't get stuck when stepping over an exec call done
# by a thread other than the main thread.

# There's no support for exec events in the remote protocol.
if { [is_remote target] } {
    return 0
}

standard_testfile

if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	 executable debug] != "" } {
    return -1
}

# Run the test proper.  SCHEDLOCK specifies what scheduler-locking
# should be set to.

proc do_test { schedlock } {
    global binfile

    if {$schedlock == "non-stop"} {
	set prefix $schedlock
    } else {
	set prefix "schedlock $schedlock"
    }
    with_test_prefix "$prefix" {
	clean_restart ${binfile}

	if {$schedlock == "non-stop"} {
	    gdb_test_no_output "set non-stop 1"
	}

	if ![runto_main] {
	    return 0
	}

	# Get ourselves to the thread that execs.
	gdb_breakpoint "thread_execler"
	gdb_test "continue" ".*thread_execler.*" "continue to thread start"

	if {$schedlock == "non-stop"} {
	    gdb_test "thread 2" \
		"Switching to .*thread_execler.*" \
		"switch to event thread"
	}

	# Now set a breakpoint at `main', and step over the execl call.  The
	# breakpoint at main should be reached.  GDB should not try to revert
	# back to the old thread from the old image and resume stepping it
	# (since it is gone).
	gdb_breakpoint "main"

	if {$schedlock != "non-stop"} {
	    gdb_test_no_output "set scheduler-locking $schedlock"
	}
	gdb_test "next" ".*main.*" "get to main in new image"
    }
}

foreach schedlock {"off" "step" "on" "non-stop"} {
    do_test $schedlock
}
