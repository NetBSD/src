# Copyright 2006-2014 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test variable objects treat non-zero offsets in Fortran arrays correctly.

load_lib mi-support.exp
set MIFLAGS "-i=mi"

if { [skip_fortran_tests] } { return -1 }

gdb_exit
if [mi_gdb_start] {
    continue
}

standard_testfile array.f

if {[gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	 executable {debug f90}] != ""} {
    return -1
}

mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load ${binfile}

mi_runto MAIN__

mi_create_varobj "array" "array" "create local variable array"


# Depending on the compiler version being used, the name of the 4-byte integer
# and real types can be printed differently.  For instance, gfortran-4.1 uses
# "int4" whereas gfortran-4.3 uses "integer(kind=4)".
set int4 "(int4|integer\\(kind=4\\))"

set children [list [list "array.-1" "-1" 2 "$int4 \\(2\\)"] \
		  [list "array.0" "0" 2 "$int4 \\(2\\)"] \
		  [list "array.1" "1" 2 "$int4 \\(2\\)"]]

mi_list_varobj_children "array" $children "get children of array"

mi_gdb_test "-var-list-children --all-values array.-1" \
    "\\^done,numchild=\"2\",children=\\\[child=\{name=\"array.-1.1\",exp=\"1\",numchild=\"0\",value=\"11\",type=\"$int4\"\},child=\{name=\"array.-1.2\",exp=\"2\",numchild=\"0\",value=\"21\",type=\"$int4\"\}\\\],has_more=\"0\"" \
    "get grandchildren of array (children of first element of second index)"
