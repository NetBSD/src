# Copyright 2015-2023 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib "ada.exp"

if { [skip_ada_tests] } { return -1 }

standard_ada_testfile foo

if {[gdb_compile_ada "${srcfile}" "${binfile}" executable [list debug ]] != "" } {
  return -1
}

clean_restart ${testfile}

set bp_location [gdb_get_line_number "STOP" ${testdir}/foo.adb]
if {![runto "foo.adb:$bp_location"]} {
  return -1
}

gdb_test "print A1(1)" \
         "\\(i => 0, s => \"\"\\)"

gdb_test "print A1(2)" \
         "\\(i => 1, s => \"A\"\\)"

gdb_test "print A1(3)" \
         "\\(i => 2, s => \"AB\"\\)"

gdb_test "print A1(1..3)" \
         "\\(\\(i => 0, s => \"\"\\), \\(i => 1, s => \"A\"\\), \\(i => 2, s => \"AB\"\\)\\)"

# Test the use of the "repeat" operator (@).
#
# Note that, in this case, the repeat operator makes little sense
# and is NOT equivalent to requesting an array slice. In the case
# of "print a1(1)@3", the size of each element in the array is
# variable from element to element.  So, when asked to repeat
# one element of the array a number of times, you're not guaranteed
# to get the same answer as in a slice; while the slice will
# take into account the array stride, the repeat operator uses
# the size of the object being repeated as its stride, which
# is often not the same. So, in the test below, the output for
# the second and third element is not entirely predictable, because
# it reads part of their contents from a memory region which has
# an undefined value (the "holes" between the each actual element
# of the array).

gdb_test "print a1(1)@3" \
         " = \\(\\(i => 0, s => \"\"\\), \\(i => -?$decimal, s => .*\\), \\(i => -?$decimal, s => .*\\)\\)"
