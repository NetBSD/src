# Copyright 2021-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib dwarf.exp

# This test can only be run on x86-64 targets.  It checks for a bug
# that existed in amd64-tdep.c, and depends on an error being produced
# from within that file.
if {![istarget x86_64-*] || ![is_lp64_target]} {
    return 0
}

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile .c -dw.S

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global srcfile

    get_func_info main
    get_func_info get_bar

    cu {} {
	DW_TAG_compile_unit {
	    {DW_AT_language @DW_LANG_C}
	    {DW_AT_name     $srcfile}
	    {DW_AT_comp_dir /tmp}
	} {
	    declare_labels integer_label foo_t_label bar_t_label

	    foo_t_label: DW_TAG_structure_type {
		{name foo_t}
		{byte_size 3 DW_FORM_sdata}
	    } {
		member {
		    {name field}
		    {type :$integer_label}
		    {data_member_location 0 DW_FORM_sdata}
		}
	    }

	    integer_label: DW_TAG_base_type {
		{DW_AT_byte_size 3 DW_FORM_sdata}
		{DW_AT_encoding  @DW_ATE_signed}
		{DW_AT_name      integer}
	    }

	    bar_t_label: DW_TAG_structure_type {
		{name bar_t}
		{byte_size 3 DW_FORM_sdata}
	    } {
		member {
		    {name f}
		    {type :$foo_t_label}
		    {data_member_location 0 DW_FORM_sdata}
		}
	    }

	    DW_TAG_subprogram {
		{name main}
		{low_pc $main_start addr}
		{high_pc $main_len data8}
		{DW_AT_type :$integer_label}
	    }

	    DW_TAG_subprogram {
		{name get_bar}
		{low_pc $get_bar_start addr}
		{high_pc $get_bar_len data8}
		{DW_AT_type :$bar_t_label}
	    }
	}
    }
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

if ![runto_main] {
    return -1
}

# At one point this would trigger a divide by zero inside GDB.  Now we
# just get an error message.
gdb_test "print get_bar ()" "could not determine alignment of type"

# Check GDB is still running.
gdb_test "p 1 + 2" " = 3"
