# Copyright 2014-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

standard_testfile .c -dw.S

# Make some DWARF for the test.

set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    global srcfile

    cu {} {
	DW_TAG_compile_unit {
                {DW_AT_language @DW_LANG_C11}
                {DW_AT_name     $srcfile}
                {DW_AT_comp_dir /tmp}
        } {
	    declare_labels i_l c_l c_c_l ac_c_l pac_c_l vpac_c_l avpac_c_l

            i_l: DW_TAG_base_type {
                {DW_AT_byte_size 4 DW_FORM_sdata}
                {DW_AT_encoding  @DW_ATE_signed}
                {DW_AT_name      int}
            }

            c_l: DW_TAG_base_type {
                {DW_AT_byte_size 2 DW_FORM_sdata}
                {DW_AT_encoding  @DW_ATE_unsigned}
                {DW_AT_name      char}
            }

            c_c_l: DW_TAG_const_type {
                {DW_AT_type :$c_l}
            }

            ac_c_l: DW_TAG_atomic_type {
                {DW_AT_type :$c_c_l}
            }

            pac_c_l: DW_TAG_pointer_type {
                {DW_AT_byte_size 8 DW_FORM_sdata}
                {DW_AT_type :$ac_c_l}
            }

            vpac_c_l: DW_TAG_volatile_type {
                {DW_AT_type :$pac_c_l}
            }

            avpac_c_l: DW_TAG_atomic_type {
                {DW_AT_type :$vpac_c_l}
            }

            DW_TAG_subprogram {
                {MACRO_AT_func {f}}
                {type :$i_l}
            } {
                DW_TAG_formal_parameter {
                    {type :$avpac_c_l}
                    {name x}
                }
            }
	}
    }
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

gdb_test "ptype f" "int \\(const _Atomic char \\\* volatile _Atomic\\)"
