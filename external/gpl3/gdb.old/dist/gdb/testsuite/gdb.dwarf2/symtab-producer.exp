# Copyright 2014-2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib dwarf.exp
load_lib gdb-python.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0
}

# This test can also only be run when we have python support in gdb,
# but that test can only be done after gdb has started, below.

standard_testfile main.c symtab-producer-dw.S

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    cu {} {
	DW_TAG_compile_unit {
	    {DW_AT_producer "ACME Compiler Company"}
	    {DW_AT_language @DW_LANG_C}
	    {DW_AT_name symtab-producer-dw.c}
	    {DW_AT_comp_dir /tmp}
        } {
	    declare_labels integer_label

	    integer_label: DW_TAG_base_type {
		{DW_AT_byte_size 4 DW_FORM_sdata}
		{DW_AT_encoding @DW_ATE_signed}
		{DW_AT_name integer}
	    }

	    DW_TAG_variable {
		{DW_AT_name with_producer}
		{DW_AT_type :$integer_label}
		{DW_AT_external 1 flag}
		{DW_AT_const_value 42 DW_FORM_sdata}
	    }
	}
    }
    cu {} {
	DW_TAG_compile_unit {
	    {DW_AT_language @DW_LANG_C}
	    {DW_AT_name symtab-producer2-dw.c}
	    {DW_AT_comp_dir /tmp}
        } {
	    declare_labels integer_label

	    integer_label: DW_TAG_base_type {
		{DW_AT_byte_size 4 DW_FORM_sdata}
		{DW_AT_encoding @DW_ATE_signed}
		{DW_AT_name integer}
	    }

	    DW_TAG_variable {
		{DW_AT_name without_producer}
		{DW_AT_type :$integer_label}
		{DW_AT_external 1 flag}
		{DW_AT_const_value 43 DW_FORM_sdata}
	    }
	}
    }
}

# We need --readnow because otherwise we never read in the CUs we
# created above.
set saved_gdbflags $GDBFLAGS
set GDBFLAGS "$GDBFLAGS -readnow"

if { [prepare_for_testing ${testfile}.exp ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    set GDBFLAGS $saved_gdbflags
    return -1
}

set GDBFLAGS $saved_gdbflags

# Skip all tests if Python scripting is not enabled.
if { [skip_python_tests] } { continue }

gdb_py_test_silent_cmd "python with_producer = gdb.lookup_global_symbol(\"with_producer\")" \
    "get with_producer symbol" 0

gdb_test "python print(with_producer.symtab.producer)" "ACME Compiler Company"

gdb_py_test_silent_cmd "python without_producer = gdb.lookup_global_symbol(\"without_producer\")" \
    "get without_producer symbol" 0

gdb_test "python print(without_producer.symtab.producer)" "None"
