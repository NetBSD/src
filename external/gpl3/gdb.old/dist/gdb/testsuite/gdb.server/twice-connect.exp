# This testcase is part of GDB, the GNU debugger.

# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib gdbserver-support.exp

standard_testfile

if { [skip_gdbserver_tests] } {
    return 0
}

if { [build_executable "failed to prepare" $::testfile $::srcfile \
	  {debug}] } {
    return -1
}

# Don't use $binfile arg, to make sure we use the remote file target:$binfile.
clean_restart

# Start gdbserver, and connect to it, twice.
foreach_with_prefix session {first second} {
    lassign [gdbserver_start "" "$binfile"] unused gdbserver_address
    gdb_test "disconnect"
    set res [gdb_target_cmd "remote" $gdbserver_address]
    gdb_assert { $res == 0 } "gdbserver started"
}

# Verify that we're not running into this warning, which triggers if
# find_program_interpreter returns something invalid.
set warning "warning: Unable to find dynamic linker breakpoint function"
gdb_assert { [regexp $warning $gdb_target_remote_cmd_msg] == 0 } \
    "found interpreter"
