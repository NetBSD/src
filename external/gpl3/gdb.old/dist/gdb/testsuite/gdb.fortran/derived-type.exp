# Copyright 2005-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Wu Zhou. (woodzltc@cn.ibm.com)

# This file is part of the gdb testsuite.  It contains tests for type-printing
# and value-printing Fortran derived types.

if { [skip_fortran_tests] } { return -1 }

standard_testfile .f90
load_lib "fortran.exp"

if {[prepare_for_testing "failed to prepare" $testfile $srcfile {debug f90}]} {
    return -1
}

if {![fortran_runto_main]} {
    return
}

# Depending on the compiler being used, the type names can be printed differently.
set int [fortran_int4]
set real [fortran_real4]

gdb_test "ptype p" "type = Type bar\r\n *$int :: c\r\n *$real :: d\r\n *End Type bar"

set test "type-printing for derived type"
gdb_test_multiple "ptype q" $test {
    -re "type = Type foo\r\n *$real :: a\r\n *Type bar :: x\r\n *character\\*7 :: b\r\n *End Type foo\r\n$gdb_prompt $" {
	pass $test
    }
    -re "type = Type foo\r\n *$real :: a\r\n *Type bar :: x\r\n *character :: b\\(7\\)\r\n *End Type foo\r\n$gdb_prompt $" {
	# Compiler should produce string, not an array of characters.
	setup_xfail "*-*-*"
	fail $test
    }
}

gdb_breakpoint [gdb_get_line_number "print"]
gdb_continue_to_breakpoint "print"

gdb_test "print p" "\\$\[0-9\]+ = \\( c = 1, d = 2\\.375 \\)"
gdb_test "print p%c" "\\$\[0-9\]+ = 1"
gdb_test "print p%d" "\\$\[0-9\]+ = 2\\.375"
gdb_test "print q%a" "\\$\[0-9\]+ = 3\\.125"

set test "print q%b"
gdb_test_multiple $test $test {
    -re "\\$\[0-9\]+ = 'abcdefg'\r\n$gdb_prompt $" {
	pass $test
    }
    -re "\\$\[0-9\]+ = \\(97 'a', 98 'b', 99 'c', 100 'd', 101 'e', 102 'f', 103 'g'\\)\r\n$gdb_prompt $" {
	# Compiler should produce string, not an array of characters.
	setup_xfail "*-*-*"
	fail $test
    }
}

gdb_test "print q%x%c" "\\$\[0-9\]+ = 1"
gdb_test "print q%x%d" "\\$\[0-9\]+ = 2\\.375"

set result_line "= \\( a = 3.125, x = \\( c = 1, d = 2\\.375 \\),\
b = 'abcdefg' \\)\r\n$gdb_prompt $"

# Used in case compiler generates an array of characters.
set result_line_2 " = \\( a = 3.125, x = \\( 1, 2\\.375 \\),\
b = \\('abcdefg'\\) \\)\r\n$gdb_prompt $"

set test "print q"
gdb_test_multiple $test $test {
    -re $result_line {
	pass $test
    }
    -re $result_line_2 {
	# Compiler should produce string, not an array of characters.
	setup_xfail "*-*-*"
	fail $test
    }
}

gdb_test "print this%a" " = 3\\.125"

set test "print this%b"
gdb_test_multiple $test $test {
    -re " = 'abcdefg'\r\n$gdb_prompt $" {
        pass $test
    }
    -re $result_line_2 {
        setup_xfail "*-*-*"
        fail $test
    }
}

set test "print this"
gdb_test_multiple $test $test {
    -re $result_line {
        pass $test
    }
    -re $result_line_2 {
         setup_xfail "*-*-*"
         fail $test
    }
}
