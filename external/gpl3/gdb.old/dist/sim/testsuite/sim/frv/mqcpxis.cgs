# frv testcase for mqcpxis $GRi,$GRj,$ACCk
# mach: all

	.include "testutils.inc"

	start

	.global mqcpxis
mqcpxis:
	; Positive operands
	set_fr_iimmed  	2,4,fr8		; multiply small numbers
	set_fr_iimmed  	5,3,fr10
	set_fr_iimmed  	3,1,fr9		; multiply by 0
	set_fr_iimmed  	0,2,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 0x00,accg0
	test_acc_immed 	26,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	6,acc1

	set_fr_iimmed  	2,1,fr8		; multiply by 1
	set_fr_iimmed  	1,1,fr10
	set_fr_iimmed	0x3fff,1,fr9	; 15 bit result
	set_fr_iimmed  	0x0001,2,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	3,acc0
	test_accg_immed 	0,accg1
	test_acc_limmed	0,0x7fff,acc1

	set_fr_iimmed	0x4000,2,fr8	; 16 bit result
	set_fr_iimmed  	0x2000,2,fr10
	set_fr_iimmed	0x7fff,0x0000,fr9	; max positive result
	set_fr_iimmed	0x7fff,0x7fff,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0,accg0
	test_acc_limmed	0x0000,0xc000,acc0
	test_accg_immed 	0,accg1
	test_acc_limmed 0x3fff,0x0001,acc1

	; Mixed operands
	set_fr_iimmed  	2,0xfffd,fr8		; multiply small numbers
	set_fr_iimmed  	1,0xfffd,fr10
	set_fr_iimmed  	0xfffe,2,fr9		; multiply by 1
	set_fr_iimmed  	0xfffe,1,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0xff,accg0
	test_acc_immed 	-9,acc0
	test_accg_immed 0xff,accg1
	test_acc_immed 	-6,acc1

	set_fr_iimmed  	0xfffe,0,fr8		; multiply by 0
	set_fr_iimmed  	0xfffe,1,fr10
	set_fr_iimmed  	0x2001,0xffff,fr9	; 15 bit result
	set_fr_iimmed  	0xffff,0xfffe,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0xff,accg0
	test_acc_immed 	-2,acc0
	test_accg_immed 	0xff,accg1
	test_acc_limmed	0xffff,0xbfff,acc1

	set_fr_iimmed	0x4000,0xfffe,fr8	; 16 bit result
	set_fr_iimmed  	0x0003,0xfffe,fr10
	set_fr_iimmed	0x7fff,0x7fff,fr9	; max negative result
	set_fr_iimmed	0x8000,0x8000,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0xff,accg0
	test_acc_limmed	0xffff,0x7ffa,acc0
	test_accg_immed 	0xff,accg1
	test_acc_limmed	0x8001,0x0000,acc1

	; Negative operands
	set_fr_iimmed	0x8000,0x8000,fr8	; max positive result
	set_fr_iimmed	0x8000,0x8000,fr10
	set_fr_iimmed  	0xfffe,0xfffc,fr9		; multiply small numbers
	set_fr_iimmed  	0xfffb,0xfffd,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 0x00,accg0
	test_acc_limmed	0x8000,0x0000,acc0
	test_accg_immed 0x00,accg1
	test_acc_immed 	26,acc1

	set_fr_iimmed  	0xffff,0xffff,fr8		; multiply by -1
	set_fr_iimmed  	0xffff,0xfffe,fr10
	set_fr_iimmed	0x7fff,0x0000,fr9	; almost max positive result
	set_fr_iimmed	0x8001,0x7fff,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	3,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0x3fff0001,acc1

	set_fr_iimmed	0x8000,0x0000,fr8	; max positive result
	set_fr_iimmed	0x8000,0x8000,fr10
	set_fr_iimmed	0x8000,0x0000,fr9	; max positive result
	set_fr_iimmed	0x8000,0x8000,fr11
	mqcpxis      	fr8,fr10,acc0
	test_accg_immed 	0,accg0
	test_acc_immed 	0x40000000,acc0
	test_accg_immed 	0,accg1
	test_acc_immed 	0x40000000,acc1

	pass
