#  Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
#
#  This file is free software; you can redistribute it and/or modify it under
#  the terms of the GNU General Public License as published by the Free
#  Software Foundation; either version 3 of the License, or (at your option) 
#  any later version.
#
#  This file is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with GCC; see the file COPYING3.  If not see
#  <http://www.gnu.org/licenses/>.

# Define system directory to match STANDARD_INCLUDE_DIR in spu-elf.h,
# allowing combined SPU/PPU sysroot builds.
NATIVE_SYSTEM_HEADER_DIR = /include

# Suppress building libgcc1.a
LIBGCC1 =
CROSS_LIBGCC1 =

TARGET_LIBGCC2_CFLAGS = -fPIC -mwarn-reloc -D__IN_LIBGCC2

# We exclude those because the libgcc2.c default versions do not support
# the SPU single-precision format (round towards zero).  We provide our
# own versions below.
LIB2FUNCS_EXCLUDE = _floatdisf _floatundisf

# We provide our own version of __divdf3 that performs better and has
# better support for non-default rounding modes.
DPBIT_FUNCS := $(filter-out _div_df, $(DPBIT_FUNCS))

LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \
			 $(srcdir)/config/spu/float_unsdidf.c \
			 $(srcdir)/config/spu/float_unsdisf.c \
			 $(srcdir)/config/spu/float_disf.c \
			 $(srcdir)/config/spu/mfc_tag_table.c \
			 $(srcdir)/config/spu/mfc_tag_reserve.c \
			 $(srcdir)/config/spu/mfc_tag_release.c \
			 $(srcdir)/config/spu/mfc_multi_tag_reserve.c \
			 $(srcdir)/config/spu/mfc_multi_tag_release.c \
			 $(srcdir)/config/spu/multi3.c \
			 $(srcdir)/config/spu/divmodti4.c \
			 $(srcdir)/config/spu/divv2df3.c

LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \
   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c

# We want fine grained libraries, so use the new code to build the
# floating point emulation libraries.
FPBIT = fp-bit.c
DPBIT = dp-bit.c

dp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/spu/t-spu-elf
	echo '#undef US_SOFTWARE_GOFAST' > dp-bit.c
	cat $(srcdir)/config/fp-bit.c >> dp-bit.c

fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/spu/t-spu-elf
	echo '#define FLOAT' > fp-bit.c
	echo '#undef US_SOFTWARE_GOFAST' >> fp-bit.c
	cat $(srcdir)/config/fp-bit.c >> fp-bit.c

# Don't let CTOR_LIST end up in sdata section.
CRTSTUFF_T_CFLAGS =

# Multi-lib support.
MULTILIB_OPTIONS=mea64

# Neither gcc or newlib seem to have a standard way to generate multiple
# crt*.o files.  So we don't use the standard crt0.o name anymore.

EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o libgcc_cachemgr.a libgcc_cachemgr_nonatomic.a \
	libgcc_cache8k.a libgcc_cache16k.a libgcc_cache32k.a libgcc_cache64k.a libgcc_cache128k.a

$(T)cachemgr.o: $(srcdir)/config/spu/cachemgr.c
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(MULTILIB_CFLAGS) -c $< -o $@

# Specialised rule to add a -D flag.
$(T)cachemgr_nonatomic.o: $(srcdir)/config/spu/cachemgr.c
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(MULTILIB_CFLAGS) -DNONATOMIC -c $< -o $@

$(T)libgcc_%.a: $(T)%.o
	$(AR_FOR_TARGET) -rcs $@ $<

$(T)cache8k.o: $(srcdir)/config/spu/cache.S
	$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=8 -o $@ -c $<

$(T)cache16k.o: $(srcdir)/config/spu/cache.S
	$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=16 -o $@ -c $<

$(T)cache32k.o: $(srcdir)/config/spu/cache.S
	$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=32 -o $@ -c $<

$(T)cache64k.o: $(srcdir)/config/spu/cache.S
	$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=64 -o $@ -c $<

$(T)cache128k.o: $(srcdir)/config/spu/cache.S
	$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=128 -o $@ -c $<

LIBGCC = stmp-multilib
INSTALL_LIBGCC = install-multilib

spu.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \
  $(RTL_H) $(REGS_H) hard-reg-set.h \
  real.h insn-config.h conditions.h insn-attr.h flags.h $(RECOG_H) \
  $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \
  output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \
  $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h cfglayout.h \
  $(srcdir)/config/spu/spu-protos.h \
  $(srcdir)/config/spu/spu-builtins.def 

spu-c.o: $(srcdir)/config/spu/spu-c.c \
    $(srcdir)/config/spu/spu-protos.h \
    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) \
    $(TM_P_H) c-pragma.h coretypes.h $(TM_H) insn-codes.h
	$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
		$(srcdir)/config/spu/spu-c.c
