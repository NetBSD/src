2012-07-02  Release Manager

	* GCC 4.5.4 released.

2012-01-19  Kai Tietz  <ktietz@redhat.com>

	PR c++/51344
	* decl2.c (save_template_attributes): Use merge_attributes
	instead of chaining up via TREE_CHAIN.

2011-12-20  Dodji Seketeli  <dodji@redhat.com>

	PR debug/49951
	* decl.c (cxx_maybe_build_cleanup): Don't set location of the call
	to the destructor.

2011-12-13  Jason Merrill  <jason@redhat.com>

	PR c++/51406
	PR c++/51161
	* typeck.c (build_static_cast_1): Fix cast of lvalue to
	base rvalue reference.

2011-10-19  Jason Merrill  <jason@redhat.com>

	PR c++/50793
	* tree.c (bot_manip): Propagate AGGR_INIT_ZERO_FIRST.

2011-10-13  Jason Merrill  <jason@redhat.com>

	PR c++/50618
	* init.c (expand_aggr_init_1): Don't zero-initialize virtual
	bases of a base subobject.

2011-10-11  Janis Johnson  <janisjo@codesourcery.com>

	PR c++/44473
	* mangle.c (write_type): Handle CV qualifiers for decimal classes.

2011-07-19  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline
	2011-07-07  Jakub Jelinek  <jakub@redhat.com>

	PR c/49644
	* typeck.c (cp_build_binary_op): For MULT_EXPR and TRUNC_DIV_EXPR with
	one non-complex and one complex argument, call save_expr on both
	operands.

2011-06-23  Jason Merrill  <jason@redhat.com>

	PR c++/49440
	* class.c (set_linkage_according_to_type): Hand off to
	determine_visibility.

2011-05-31  Duncan Sands  <baldrick@free.fr>

	Backported from 4.6 branch
	2011-03-09  Martin Jambor  <mjambor@suse.cz>

	PR tree-optimization/47714
	* method.c (use_thunk): Clear addressable flag of thunk arguments.

2011-05-20  Jason Merrill  <jason@redhat.com>

	PR c++/48873
	* tree.c (stabilize_expr): Don't make gratuitous copies of classes.

2011-05-09  Jason Merrill  <jason@redhat.com>

	PR c++/48936
	* decl2.c (mark_used): Instantiate constant variables even
	in unevaluated context.

2011-04-27  Jason Merrill  <jason@redhat.com>

	PR c++/48046
	* parser.c (cp_parser_diagnose_invalid_type_name): Commit
	to tentative parse sooner.

2011-04-28  Release Manager

	* GCC 4.5.3 released.

2011-04-26  Dodji Seketeli  <dodji@redhat.com>

	PR c++/46824
	* call.c (add_builtin_candidate)<case INDIRECT_REF>: The type of
	the argument of the indirection operator should not be dependent.
	Fix the comment.

2011-04-26  Jason Merrill  <jason@redhat.com>

	PR c++/42687
	* parser.c (cp_parser_primary_expression): Set *idk to
	CP_ID_KIND_NONE for a parenthesized identifier.

2011-04-20  Jason Merrill  <jason@redhat.com>

	PR c++/48594
	* decl2.c (build_offset_ref_call_from_tree): Fix calling a functor
	or pointer to (non-member) function.

2011-04-19  Jason Merrill  <jason@redhat.com>

	PR c++/46304
	* typeck.c (cp_build_binary_op): Fold COMPLEX_EXPR.

2011-04-19  Jason Merrill  <jason@redhat.com>

	PR c++/45267
	* decl.c (duplicate_decls): Keep always_inline attribute
	in sync with DECL_DISREGARD_INLINE_LIMITS.

2011-04-18  Richard Guenther  <rguenther@suse.de>

	Backported from 4.6 branch 
	2011-03-11  Jakub Jelinek  <jakub@redhat.com>

	PR c++/48035
	* init.c (build_zero_init_1): Extracted from build_zero_init.
	Add FIELD_SIZE argument, if non-NULL and field bit_position
	as not smaller than that, don't add that field's initializer.
	Pass DECL_SIZE as last argument to build_zero_init_1
	for DECL_FIELD_IS_BASE fields.
	(build_zero_init): Use build_zero_init_1.

2011-03-28  Jason Merrill  <jason@redhat.com>

	Revert:
	PR c++/48289
	* pt.c (build_non_dependent_expr): Keep dereferences outside the
	NON_DEPENDENT_EXPR.

2011-03-25  Jason Merrill  <jason@redhat.com>

	PR c++/48289
	* pt.c (build_non_dependent_expr): Keep dereferences outside the
	NON_DEPENDENT_EXPR.

2011-03-11  Jason Merrill  <jason@redhat.com>

	PR c++/47125
	* pt.c (tsubst) [TYPENAME_TYPE]: Only give errors if tf_error.

2011-03-10  Jason Merrill  <jason@redhat.com>

	PR c++/48029
	* pt.c (iterative_hash_template_arg): Remove special case for
	ARRAY_TYPE.

2011-03-09  Jason Merrill  <jason@redhat.com>

	PR c++/44629
	* pt.c (unify): An unresolved overload is a nondeduced context.

2011-03-08  Jason Merrill  <jason@redhat.com>

	PR c++/45651
	* pt.c (instantiate_decl): Don't clear DECL_INTERFACE_KNOWN on
	!TREE_PUBLIC decls.

2011-03-08  Jason Merrill  <jason@redhat.com>

	PR c++/47289
	* pt.c (coerce_template_parms): Fix error recovery.

2011-03-08  Dodji Seketeli  <dodji@redhat.com>

	PR c++/47705
	* pt.c (convert_nontype_argument): Only call decay_conversion on
	arrays.

2011-03-08  Dodji Seketeli  <dodji@redhat.com>

	* name-lookup.c (binding_to_template_parms_of_scope_p): Only
	consider scopes of primary template definitions.  Adjust comments.

2011-03-08  Jason Merrill  <jason@redhat.com>

	PR c++/47488
	* mangle.c (write_template_arg_literal) [STRING_CST]: Sorry.

2011-03-08  Richard Guenther  <rguenther@suse.de>

	PR tree-optimization/47278
	* decl.c (finish_function): Use decl_replaceable_p.

2011-03-01  Jason Merrill  <jason@redhat.com>

	PR c++/46159
	* parser.c (cp_parser_primary_expression): Don't warn about a
	failed tentative parse.

2011-02-26  Jason Merrill  <jason@redhat.com>

	PR c++/47904
	* tree.c (cp_tree_equal) [PARM_DECL]: Don't crash on
	DECL_ARTIFICIAL parms.

2010-12-16  Release Manager

	* GCC 4.5.2 released.

2010-12-07  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline
	2010-11-20  Jakub Jelinek  <jakub@redhat.com>
 
	PR c++/46538
	* decl.c (cp_make_fname_decl): Return error_mark_node if
	current_binding_level has already sk_function_parms kind.

2010-12-03  Jason Merrill  <jason@redhat.com>

	PR c++/46058
	* tree.c (lvalue_kind) [SCOPE_REF]: Handle non-dependent case.

2010-11-11  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline
	2010-11-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/45894
	* tree.c (lvalue_p_1): Don't crash if ref has NULL type.

	2010-11-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/46160
	* cp-gimplify.c (cp_gimplify_expr): Drop volatile INDIRECT_REFs
	on the RHS to avoid infinite recursion with gimplify_expr.

2010-10-15  Jason Merrill  <jason@redhat.com>

	PR c++/45983
	* tree.c (cp_build_qualified_type_real): Don't reuse a variant
	with a different typedef variant of the element type.

2010-09-06  Dodji Seketeli  <dodji@redhat.com>

    	PR c++/45200
    	PR c++/45293
    	PR c++/45558
	* tree.c (strip_typedefs): Strip typedefs from the context of
    	TYPENAME_TYPEs.

2010-08-30  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/45423
	* parser.c (cp_parser_omp_atomic): Handle boolean
	{PRE,POST}_INCREMENT.

2010-08-29  Jason Merrill  <jason@redhat.com>

	PR c++/44991
	* parser.c (cp_parser_parameter_declaration): Pop parameter decls
	after tentative parsing.

2010-08-19  Jason Merrill  <jason@redhat.com>

	PR c++/45315
	* init.c (build_new_1): Don't use build_value_init in a template.

2010-07-31  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>

	PR c++/45112
	* decl.c (duplicate_decls): Merge DECL_USER_ALIGN and DECL_PACKED.

2010-07-31  Release Manager

	* GCC 4.5.1 released.

2010-07-23  Jason Merrill  <jason@redhat.com>

	PR c++/43016
	PR c++/45008
	* decl.c (start_preparsed_function): Do defer nested functions.

2010-07-19  Jason Merrill  <jason@redhat.com>

	PR c++/44996
	* semantics.c (finish_decltype_type): Correct decltype
	of parenthesized rvalue reference variable.

2010-07-08  Jason Merrill  <jason@redhat.com>

	PR c++/44703
	* call.c (is_std_init_list): Look through typedefs.

2010-07-02  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/44039
	* pt.c (tsubst_baselink): Return error_mark_node if lookup_fnfields
	returns NULL_TREE.

2010-06-30  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/44628
	* typeck.c (cp_build_unary_op): Early return error_mark_node when
	arg is NULL_TREE too.
	* call.c (convert_class_to_reference): Return error_mark_node when
	expr is NULL_TREE.

2010-06-29  Jason Merrill  <jason@redhat.com>

	PR c++/44587
	* pt.c (has_value_dependent_address): New.
	(value_dependent_expression_p): Check it.
	(convert_nontype_argument): Likewise.  Call decay_conversion before
	folding if we want a pointer.
	* semantics.c (finish_id_expression): Don't add SCOPE_REF if the
	scope is the current instantiation.

2010-06-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/44627
	* error.c (dump_expr): Don't look at CALL_EXPR_ARG (t, 0) if
	the CALL_EXPR has no arguments.

2010-06-07  Jason Merrill  <jason@redhat.com>

	PR c++/44366
	* error.c (dump_simple_decl): Don't print the scope of a
	PARM_DECL.

2010-06-07  Jason Merrill  <jason@redhat.com>

	PR c++/44401
	* parser.c (cp_parser_lookup_name): Fix naming the constructor.

2010-06-01  Jason Merrill  <jason@redhat.com>

	PR c++/44358
	* call.c (build_list_conv): Set list-initialization flags properly.

2010-05-27  Jason Merrill  <jason@redhat.com>

	PR c++/43555
	* decl.c (grokdeclarator) [cdk_pointer et al]: Force evaluation of
	anonymous VLA size.

2010-05-26  Jason Merrill  <jason@redhat.com>

	PR c++/43382
	* pt.c (tsubst_pack_expansion): Don't get confused by recursive
	unification.

2010-05-24  Jason Merrill  <jason@redhat.com>

	PR c++/41510
	* decl.c (check_initializer): Don't wrap an init-list in a
	TREE_LIST.
	* init.c (build_aggr_init): Don't assume copy-initialization if
	init has CONSTRUCTOR_IS_DIRECT_INIT.
	* call.c (build_new_method_call): Sanity check.

2010-05-19  Jason Merrill  <jason@redhat.com>

	PR c++/44193
	* pt.c (tsubst) [TYPENAME_TYPE]: Discard cv-quals on
	function/reference type.

	* call.c (struct z_candidate): Add explicit_targs field.
	(add_template_candidate_real): Set it.
	(build_over_call): Use it to control init-list warning.

	PR c++/44157
	* call.c (build_over_call): Limit init-list deduction warning to
	cases where the argument is actually an init-list.

	PR c++/44158
	* call.c (build_over_call): Don't do bitwise copy for move ctor.

2010-05-14  Jason Merrill  <jason@redhat.com>

	PR c++/44127
	* except.c (dtor_nothrow): Return nonzero for type with
	trivial destructor.

	PR c++/44127
	* cp-gimplify.c (gimplify_must_not_throw_expr): Use
	gimple_build_eh_must_not_throw.

2010-05-13  Jason Merrill  <jason@redhat.com>

	PR c++/43787
	* cp-gimplify.c (cp_gimplify_expr): Remove copies of empty classes.
	* call.c (build_over_call): Don't try to avoid INIT_EXPR copies here.

2010-05-04  Jason Merrill  <jason@redhat.com>

	PR c++/38064
	* typeck.c (cp_build_binary_op): Allow enums for <> as well.

2010-05-03  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43953
	* pt.c (most_specialized_class): Pretend we are processing
	a template decl during the call to coerce_template_parms.

2010-04-30  Jason Merrill  <jason@redhat.com>

	PR c++/43868
	* cxx-pretty-print.c (pp_cxx_type_specifier_seq): Handle pmfs.

2010-04-27  Jason Merrill  <jason@redhat.com>

	PR c++/43856
	* name-lookup.c (qualify_lookup): Disqualify lambda op().
	* semantics.c (nonlambda_method_basetype): New.
	* cp-tree.h: Declare them.
	* tree.c (maybe_dummy_object): Handle implicit 'this' capture.

	PR c++/43875
	* semantics.c (lambda_return_type): Complain about
	braced-init-list.

	* parser.c (cp_parser_lambda_expression): Complain about lambda in
	unevaluated context.
	* pt.c (iterative_hash_template_arg): Don't crash on lambda.

2010-04-19  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43704
	* typeck.c (structural_comptypes): Test dependent typedefs
	incompatibility before testing for their main variant based
	equivalence.
	(incompatible_dependent_types_p): If one of the
	compared types if not a typedef then honour their main variant
	equivalence.

2010-04-16  Jason Merrill  <jason@redhat.com>

	PR c++/43641
	* semantics.c (maybe_add_lambda_conv_op): Use build_call_a and tweak
	return value directly.

	PR c++/43621
	* pt.c (maybe_update_decl_type): Check the return value from
	push_scope.

2010-04-15  Richard Guenther  <rguenther@suse.de>

	PR c++/43611
	* semantics.c (expand_or_defer_fn_1): Do not keep extern
	template inline functions.

2010-04-14  Release Manager

	* GCC 4.5.0 released.

2010-04-06  Jason Merrill  <jason@redhat.com>

	PR c++/43648
	* name-lookup.c (constructor_name_p): Allow X::~X even for typedefs.

2010-04-01  Jason Merrill  <jason@redhat.com>

	* decl.c (next_initializable_field): No longer static.
	* cp-tree.h: Declare it.
	* call.c (build_aggr_conv): Fail if there are more initializers
	than initializable fields.

	* semantics.c (maybe_add_lambda_conv_op): Use null_pointer_node
	instead of void_zero_node.

2010-03-31  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43558
	* cp-tree.h (TEMPLATE_TYPE_PARM_SIBLING_PARMS): New accessor macro.
	* pt.c (end_template_parm_list): Store sibling template parms of
	each TEMPLATE_TYPE_PARMs into its TEMPLATE_TYPE_PARM_SIBLING_PARMS.
	(push_template_decl_real): Don't store the containing template decl
	into the DECL_CONTEXT of TEMPLATE_TYPE_PARMs anymore.
	* typeck.c (get_template_parms_of_dependent_type): Get sibling parms
	of a TEMPLATE_TYPE_PARM from TEMPLATE_TYPE_PARM_SIBLING_PARMS.
	Simplify the logic.

2010-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/43076
	* pt.c (push_template_decl_real): Deal better with running out of
	scopes before running out of template parms.

	PR c++/41185
	PR c++/41786
	* parser.c (cp_parser_direct_declarator): Don't allow VLAs in
	function parameter context.  Don't print an error if parsing
	tentatively.

	PR c++/43559
	* pt.c (more_specialized_fn): Don't control cv-qualifier check
	with same_type_p.

2010-03-26  Jason Merrill  <jason@redhat.com>

	PR c++/43509
	* parser.c (cp_parser_qualifying_entity): Do accept enum names in
	c++0x mode, but not other type-names.

2010-03-26  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43327
	* pt.c (add_to_template_args): Support NULL ARGS;
	(most_specialized_class): call coerce_template_parms on
	template arguments passed to get_class_bindings. Use
	add_to_template_args.
	(unify): Handle VAR_DECLs.

2010-03-26  Dodji Seketeli  <dodji@redhat.com>

	* cp-tree.h (get_template_parms_at_level): Change unsigned parm
	into int.
	* pt.c (get_template_parms_at_level): Adjust.

2010-03-25  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43206
	* cp-tree.h (get_template_parms_at_level): Declare ...
	* pt.c (get_template_parms_at_level): ... new function.
	* typeck.c (get_template_parms_of_dependent_type): If a template
	type parm's DECL_CONTEXT isn't yet set, get its siblings from
	current_template_parms. Use get_template_parms_at_level. Remove
	useless test.
	(incompatible_dependent_types_p): If we get empty parms from just one
	of the template type parms we are comparing then the template parms are
	incompatible.

2010-03-24  Jason Merrill  <jason@redhat.com>

	PR c++/43502
	* parser.c (make_declarator): Initialize id_loc.
	(cp_parser_lambda_declarator_opt): And set it.

2010-03-23  Jason Merrill  <jason@redhat.com>

	Make lambda conversion op and op() non-static.
	* semantics.c (maybe_add_lambda_conv_op): Make non-static.
	Also add the thunk function returned by the conversion op.
	Mark the conversion deleted if the op() is variadic.
	* decl2.c (mark_used): Give helpful message about deleted conversion.
	* parser.c (cp_parser_lambda_declarator_opt): Don't make op() static.
	* semantics.c (finish_this_expr): Adjust.
	* mangle.c (write_closure_type_name): Adjust.
	* decl.c (grok_op_properties): Don't allow it.
	* call.c (build_user_type_conversion_1): No static conversion ops.
	(build_op_call): Or op().

	* decl2.c (change_return_type): Fix 'this' quals.

2010-03-22  Jason Merrill  <jason@redhat.com>

	PR c++/43333
	* tree.c (pod_type_p): Use old meaning in C++98 mode.

	PR c++/43281
	* pt.c (contains_auto_r): New fn.
	(do_auto_deduction): Use it.
	(tsubst): Don't look at TREE_TYPE of a TEMPLATE_TYPE_PARM.

2010-03-20  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/43081:
	* decl2.c (grokfield): Handle invalid initializers for member
	functions.

2010-03-20  Dodji Seketeli  <dodji@redhat.com>

	PR c++/43375
	* method.c (make_alias_for): Avoid crashing when DECL_LANG_SPECIFIC
	is NULL.
	* decl2.c (vague_linkage_p): Likewise.

2010-03-18  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/43418
	* parser.c (cp_parser_for_init_statement): Use NULL_TREE, not
	false, in the cp_parser_expression_statement call.

2010-03-05  Jason Merrill  <jason@redhat.com>

	* mangle.c (mangle_decl): Give name collision error even without
	ASM_OUTPUT_DEF.

2010-03-04  Marco Poletti  <poletti.marco@gmail.com>

	* pt.c (process_partial_specialization): Use error_n instead of
	error.

2010-03-03  Jason Merrill  <jason@redhat.com>

	PR c++/12909
	* mangle.c (mangle_decl): Handle VAR_DECL, too.

2010-03-03  Jason Merrill  <jason@redhat.com>

	PR c++/12909
	* mangle.c: Include cgraph.h.
	(mangle_decl): If the mangled name will change in a later
	ABI version, make the later mangled name an alias.
	* method.c (make_alias_for): Copy DECL_ARGUMENTS.
	* Make-lang.in (mangle.o): Depend on cgraph.h.
	* method.c (make_alias_for): Handle VAR_DECL, too.
	* decl2.c (vague_linkage_p): Rename from vague_linkage_fn_p.
	* tree.c (no_linkage_check): Adjust.
	* decl.c (maybe_commonize_var): Adjust.
	* cp-tree.h: Adjust.

2010-03-01  Marco Poletti  <poletti.marco@gmail.com>

	* pt.c (redeclare_class_template): Use error_n and inform_n.

2010-02-27  Mark Mitchell  <mark@codesourcery.com>

	PR c++/42748
	* cp-tree.h (push_tinst_level): Declare.
	(pop_tinst_level): Likewise.
	* pt.c (push_tinst_level): Give it external linkage.
	(pop_tinst_level): Likewise.
	* mangle.c (mangle_decl_string): Set the source location to that
	of the decl while mangling.

2010-02-27  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/42054
	* pt.c (redeclare_class_template): Return false if there are erroneous
	template parameters.

2010-02-24  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	* pt.c (push_tinst_level): Replace -ftemplate-depth- with 
	-ftemplate-depth=.

2010-02-24  Jason Merrill  <jason@redhat.com>

	PR c++/12909
	* mangle.c (write_type): Give -Wabi warning for old vector mangling.

	* class.c (layout_class_type): Don't give -Wabi warning for a bug
	in a previous ABI version.

2010-02-23  Jason Merrill  <jason@redhat.com>

	PR c++/43143
	* typeck2.c (digest_init_r): Accept value init of array.

2010-02-22  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/43126
	* typeck.c (convert_arguments): Update error message.

2010-02-22  Mike Stump  <mikestump@comcast.net>

	PR c++/43125
	* decl.c (duplicate_decls): Merge DECL_PRESERVE_P.

2010-02-21  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/23510
	* error.c (print_instantiation_partial_context_line): New.
	(print_instantiation_partial_context): Print at most 12 contexts,
	skip the rest with a message.

2010-02-21  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42824
	* pt.c (lookup_template_class): Better support of specialization
	of member of class template implicit instantiation.

2010-02-20  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/35669
	* call.c (conversion_null_warnings): Replace -Wconversion with
	-Wconversion-null.
	* cvt.c (build_expr_type_conversion): Likewise.

2010-02-18  Jason Merrill  <jason@redhat.com>

	PR c++/42837
	* class.c (create_vtable_ptr): Set DECL_PACKED if type is packed.

	PR c++/43108
	* typeck.c (cp_build_binary_op): Adapt mixed complex/non handling from
	C build_binary_op.
	* cp-tree.h (WANT_VECTOR_OR_COMPLEX): Rename from WANT_VECTOR.
	* cvt.c (build_expr_type_conversion): Allow COMPLEX_TYPE.

	PR c++/43070
	* semantics.c (finish_goto_stmt): Don't call decay_conversion.

	PR c++/26261
	PR c++/43101
	* pt.c (tsubst_qualified_id): Do normal lookup in non-dependent scope.
	(maybe_update_decl_type): New fn.
	* parser.c (cp_parser_init_declarator): Use it.

	PR c++/43109
	* semantics.c (begin_class_definition): Don't crash on unnamed ns.

2010-02-17  Jason Merrill  <jason@redhat.com>

	PR c++/43075
	* call.c (build_over_call): Don't create zero-sized assignments.
	* cp-gimplify.c (cp_genericize_r): Don't remove them here.
	* cp-objcp-common.c (cp_expr_size): Remove.
	* cp-tree.h: Remove prototype.

	PR c++/43069
	* name-lookup.c (set_decl_namespace): Don't copy DECL_CONTEXT if the
	decl we looked up doesn't match.

	PR c++/43093
	* cp-gimplify.c (cp_gimplify_expr) [INIT_EXPR]: Return if we don't
	have an INIT_EXPR anymore.

	PR c++/43079
	* pt.c (convert_nontype_argument): Change assert to test.

2010-02-16  Jason Merrill  <jason@redhat.com>

	* cp-gimplify.c (cp_gimplify_expr): Fix error recovery.

	PR c++/43031
	* cp-gimplify.c (cp_gimplify_expr) [MODIFY_EXPR]: Use
	VIEW_CONVERT_EXPR for conversions between structural equality types
	that the back end can't tell are the same.

	PR c++/43036
	* tree.c (build_cplus_array_type): Set TYPE_MAIN_VARIANT to strip
	cv-quals from element here.
	(cp_build_qualified_type_real): Not here.  Preserve typedef name.

2010-02-14  Jason Merrill  <jason@redhat.com>

	PR c++/41997
	* semantics.c (finish_compound_literal): Use
	cp_apply_type_quals_to_decl when creating a static variable.

2010-02-12  Jason Merrill  <jason@redhat.com>

	PR c++/43024
	* name-lookup.h (current_binding_level): Check for null
	cp_function_chain.

2010-02-12  Jason Merrill  <jason@redhat.com>

	PR c++/43054
	* tree.c (cp_tree_equal): Correct CALL_EXPR logic.

2010-02-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/43033
	* name-lookup.c (pushdecl_maybe_friend): Check default args of t
	instead of x.

2010-02-10  Jason Merrill  <jason@redhat.com>

	PR c++/41896
	* semantics.c (outer_lambda_capture_p): Revert.
	(add_capture): Only finish_member_declaration if
	we're in the lambda class.
	(register_capture_members): New.
	* cp-tree.h: Declare it.
	* parser.c (cp_parser_lambda_expression): Call it.

2010-02-10  Jason Merrill  <jason@redhat.com>

	PR c++/41896
	* semantics.c (outer_lambda_capture_p): Use current_function_decl
	instead of current_class_type.

2010-02-10  Jason Merrill  <jason@redhat.com>

	PR c++/42983, core issue 906
	* method.c (defaultable_fn_check): Check virtualness.

2010-02-10  Jason Merrill  <jason@redhat.com>

	PR c++/43016
	* semantics.c (maybe_add_lambda_conv_op): Set DECL_INTERFACE_KNOWN.

2010-02-10  Shujing Zhao  <pearly.zhao@oracle.com>

	* Make-lang.in (cp/cvt.o, cp/parser.o, cp/search.o): Depend on intl.h.
	* cvt.c (warn_ref_binding): Wrap the messages into G_() for easy
	translation.
	* parser.c (cp_parser_postfix_expression, cp_parser_new_type_id)
	(cp_parser_cast_expression, cp_parser_condition, cp_parser_decltype)
	(cp_parser_parameter_declaration)
	(cp_parser_exception_specification_opt)
	(cp_parser_exception_declaration): Likewise.
	* pt.c (check_default_tmpl_args): Likewise.
	* search.c (lookup_field_r): Likewise.

2010-02-09  Jason Merrill  <jason@redhat.com>

	PR c++/42399
	* pt.c (tsubst_copy_and_build): Propagate LAMBDA_EXPR_LOCATION.

2010-02-09  Jason Merrill  <jason@redhat.com>

	PR c++/42370
	* decl2.c (change_return_type): New fn.
	* semantics.c (apply_lambda_return_type): Use it.
	* cp-tree.h: Declare it.

2010-02-05  Richard Guenther  <rguenther@suse.de>

	* Make-lang.in (cp/cp-lang.o): Depend on gt-cp-cp-lang.h.
	* cp-lang.c: Include gt-cp-cp-lang.h.
	* config-lang.in (gtfiles): Add cp/cp-lang.c.

2010-02-05  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42915
	* typeck.c (get_template_parms_of_dependent_type): Try getting
	the template parameters fromt the type itself first.

2010-02-03  Jason Merrill  <jason@redhat.com>

	PR c++/4926
	PR c++/38600
	* mangle.c (write_unqualified_id): Split out from write_expression.
	(write_unqualified_name): Call it.
	(write_member_name): Likewise.
	(write_expression): Support TEMPLATE_ID_EXPR.
	Disambiguate operator names.

	PR c++/12909
	* mangle.c (write_type) [VECTOR_TYPE]: Change mangling with
	-fabi-version=4.

2010-02-02  Jason Merrill  <jason@redhat.com>

	PR c++/41090
	* decl.c (cp_finish_decl): Add local statics to cfun->local_decls.
	* optimize.c (clone_body): Remap their initializers when making base
	variants.
	(maybe_clone_body): Complain if multiple clones aren't safe.

2010-01-29  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42758
	PR c++/42634
	PR c++/42336
	PR c++/42797
	PR c++/42880
	* cp-tree.h (NON_DEFAULT_TEMPLATE_ARGS_COUNT,
	SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT,
	GET_NON_DEFAULT_TEMPLATE_ARGS_COUNT): New accessor macros.
	* pt.c (coerce_template_parms, type_unification_real,
	expand_template_argument_pack, coerce_template_parameter_pack):
	Set the non default template args count.
	(current_template_args): Always set non defaulted
	template args count when compiled with --enable-checking
	(tsubst_template_args, type_unification_real): Propagate the non
	defaulted template args count.
	* error.c (get_non_default_template_args_count): Renamed
	count_non_default_template_args into this. Don't calculate the
	non default template argument count anymore. Use the new
	accessor macros above to get it.
	(dump_template_argument_list, dump_type, dump_decl,
	dump_template_parms): Adjust.
	* parser.c (cp_parser_template_argument_list): Always set defaulted
	template args count when compiled with --enable-checking.

2010-01-29  Shujing Zhao  <pearly.zhao@oracle.com>

	* decl.c (redeclaration_error_message): Wrap the return messages into
	G_() for easy translation.

2010-01-28  Jason Merrill  <jason@redhat.com>

	PR c++/42880
	* semantics.c (begin_class_definition): Don't use type_as_string.

2010-01-28  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42713
	PR c++/42820
	* typeck.c (get_template_parms_of_dependent_type): Factorized
	this out of incompatible_template_type_parms_p
	(incompatible_dependent_types_p): Renamed
	incompatible_template_type_parms_p into this. Make it detect
	two incompatible dependent typedefs too.
	(structural_comptypes): Use incompatible_dependent_types_p.
	* pt.c (get_template_info):
	Handle BOUND_TEMPLATE_TEMPLATE_PARAM.

2010-01-20  Janis Johnson  <janis187@us.ibm.com>
	    Jason Merrill  <jason@redhat.com>

	* mangle.c (write_type): Mangle transparent record as member type.
	* semantics.c (begin_class_definition): Recognize decimal classes
	and set TYPE_TRANSPARENT_AGGR.

2010-01-20  Jason Merrill  <jason@redhat.com>

	PR c++/42338
	* mangle.c (write_expression): Handle tree codes that have extra
	arguments in the middle-end.

2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/42038
	* except.c (expand_start_catch_block): Deal correctly with
	do_begin_catch returning error_mark_node.

2010-01-20  Jason Merrill  <jason@redhat.com>

	PR c++/41788
	* class.c (layout_class_type): Set packed_maybe_necessary for packed
	non-PODs.

	PR c++/41920
	* semantics.c (build_lambda_object): Call mark_used on captured
	variables.

	PR c++/40750
	* decl.c (grokdeclarator): Clear type_quals for a member function
	declared using a typedef.  Don't complain about adding cv-quals
	to a function typedef in C++0x mode.

2010-01-20  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (create_array_type_for_decl): Remove set but not used
	variable error_msg.  Remove break stmts after return stmts.

2010-01-19  Dodji Seketeli  <dodji@redhat.com>

	* error.c (dump_template_parms, count_non_default_template_args):
	Revert fix of PR c++/42634.

2010-01-18  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42634
	* error.c (dump_template_parms): Use innermost template
	arguments before calling count_non_default_template_args.
	(count_non_default_template_args): We are being called with
	template innermost arguments now. There is no need to ensure
	that again.

2010-01-18  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42766
	* cvt.c (build_expr_type_conversion): Look through OVERLOAD.

2010-01-17  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42697
	*pt.c (tsubst_decl):  Revert commit for PR c++/42697.

2010-01-17  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42697
	*pt.c (tsubst_decl): Get the arguments of a specialization from
	the specialization template, not from the most general template.

2010-01-16  Jason Merrill  <jason@redhat.com>

	PR c++/42761
	* semantics.c (finish_decltype_type): Within a template, treat
	unresolved CALL_EXPR as dependent.

2010-01-15  Dodji Seketeli  <dodji@redhat.com>

	* error.c (dump_template_parms,count_non_default_template_args):
	Revert changes of PR c++/42634.

2010-01-14  Jakub Jelinek  <jakub@redhat.com>

	PR middle-end/42674
	* decl.c (finish_function): Don't emit -Wreturn-type warnings in
	functions with noreturn attribute.

2010-01-14  Jason Merrill  <jason@redhat.com>

	PR c++/42701
	* call.c (build_new_method_call): Don't free the vec here.

	PR c++/42655
	* call.c (convert_like_real): Do full decay_conversion for ck_rvalue.

2010-01-13  Dodji Seketeli  <dodji@redhat.com>

	PR c++/42634
	* error.c (dump_template_parms): Use innermost template
	arguments before calling count_non_default_template_args.
	(count_non_default_template_args): We are being called with
	template innermost arguments now. There is no need to ensure
	that again.

2010-01-07  Dodji Seketeli  <dodji@redhat.com>

	c++/40155
	* pt.c (unify_pack_expansion): In non-deduced contexts, re-use template
	arguments that were previously deduced.

2010-01-05  Jason Merrill  <jason@redhat.com>

	* pt.c (unify_pack_expansion): Handle deduction from init-list.
	* call.c (build_over_call): Don't complain about it.

2010-01-04  Jason Merrill  <jason@redhat.com>

	PR c++/42555
	* pt.c (tsubst_decl): Don't apply type attributes in place.

	PR c++/42567
	* semantics.c (describable_type): Remove decltype comment and
	semantics.



Copyright (C) 2010 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
