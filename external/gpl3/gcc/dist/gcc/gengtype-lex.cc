#ifdef HOST_GENERATOR_FILE
#include "config.h"
#else
#include "bconfig.h"
#endif
#line 1 "gengtype-lex.cc"

#line 3 "gengtype-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[567] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   54,   41,
       38,   50,   41,   50,   39,   41,   41,   39,   39,   39,
       39,   39,   35,    9,    9,   33,   35,   15,   35,   33,
       33,   25,   35,   35,   35,   35,   35,   35,   35,   35,
       14,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   13,    9,   35,   46,   44,
       51,   51,    0,   42,    0,    0,    0,   43,   36,   43,
        0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   39,   39,   39,   39,   39,    9,    0,   29,
        0,    0,    0,    0,    7,    0,   25,   28,   28,    0,

       28,    0,    0,    0,    0,    0,    0,    0,   30,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    9,    0,    0,    0,    0,   47,   49,
       48,   40,    0,   37,    0,    0,    0,    0,    0,    0,
        0,   39,   39,   39,   39,   39,   39,   31,   32,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       34,    0,    0,    0,   39,    0,    0,    0,    0,    0,
        0,    0,   39,   39,   39,   39,   39,   39,    0,    0,
        0,    0,    0,   16,   16,   16,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,   26,   26,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       39,    0,    0,    0,    0,    0,    0,    0,   39,   39,
       39,   39,   39,   39,    0,    0,    0,    0,    0,    0,
        0,    0,   21,   21,   21,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,   24,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    4,    4,   39,
       39,   39,   39,    3,    3,    3,    0,    0,    0,    0,
        0,   19,   19,   19,   11,   11,   11,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   17,   17,   17,    0,    0,    0,    0,
        0,    0,    5,    5,    5,    6,    6,    6,    2,    2,
        2,   39,    0,    0,    0,    0,    0,   12,   12,   12,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,   18,   18,   18,    0,    0,    0,    0,    0,    0,
        1,    1,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   12,   12,   20,   20,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,   22,   22,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   23,   23,
       23,    0,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,   28,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   27,    0,    0,    0,    0,    0,   45,    0,    0,
        0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    7,    8,    9,
       10,   11,    4,    4,    4,   12,   13,   14,   14,   14,
       14,   15,   14,   16,   14,   14,   14,   17,    4,    4,
        4,    4,    4,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   29,   30,   31,   32,
       27,   33,   34,   35,   36,   27,   37,   27,   38,   27,
       39,   40,   41,   42,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   53,   54,   55,   56,
       57,   58,   53,   59,   60,   61,   62,   63,   53,   64,
       65,   66,    4,    4,    4,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    4,
        5,    1,    1,    6,    6,    7,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,    1
    } ;

static const flex_int16_t yy_base[614] =
    {   0,
        0,   67,  134,   16,   16,   17,   18,   20, 1259, 2411,
     2411,   19, 1217,   19,   31,   41,   43,   32,   33,   34,
       35,   36, 2411,   23,   52, 2411,   51, 2411, 1216, 1243,
       33,   46,  201,  268,   26,   33,   63,   81, 1199, 1236,
     2411,   54,   65,   57,   62,   73,  188,  189,  185,   83,
      190,  191,  184,  186,  202, 2411,  118, 1236,    0, 2411,
     1224, 1223,  219, 2411,    0, 1227, 1231, 2411, 2411, 1230,
      108,  221, 1215,  254,  235, 1177, 1166, 1168, 1163, 1171,
      237, 1178,  247,  281,  284,  286,  287,   63,  221, 2411,
     1222, 1216, 1220, 1210, 2411, 1218,  213, 2411,  288, 1189,

     1202, 1187,  199,  256,   92,  224,  232, 1176, 2411, 2411,
      236,  275,  280,  264,  234,  263,  265,  291,  281,  290,
      287,  282,  298,  295,  296,  292,  303,  302,  301,  300,
      307,  305,  328,  364, 1210, 1209,  374,    0, 2411, 2411,
     2411, 2411, 1207, 2411, 1207, 1164, 1146,  316, 1148, 1153,
     1155,  381,  362,  382,  380,  398,  387, 2411, 2411, 1200,
     2411,  369, 1185, 1199,  350,  342,  343,  446,  359,  356,
      354,  309,  385,  429,  362,  357,  361,  430,  363,  513,
      364,  431,  433,  434,  435,  436,  370,  437,  440,  439,
      442,  441,  438,  443,  448,  445,  446,  452,  449, 1197,

     2411,  578,    0, 1197,  394, 1138, 1149, 1135, 1133, 1146,
     1136, 1140,  490,  510,  526,  529,  530,  531, 1188,  644,
      506,  453,  508, 2411,  539, 1172,  514,  527, 1172,  450,
      474,  503,  711,  480,  507,  511, 2411,  777,  542,  102,
     1156,  529,  531,  540,  542,  534,  545,  509,  535,  537,
      552,  536,  559,  560,  561,  578,  562,  566,  839,    0,
      596, 1112, 1112, 1118, 1123, 1121, 1111, 1110,  906,  602,
      657,  664,  658,  973, 1040,  580,  584,  581,  570,  631,
     1107, 1174, 2411,  661, 1148,  633,  634,    0,  670, 1133,
     1131,  589, 1105, 1110, 1112, 1103, 1101,  351,  554,  636,

      638,  642,  639,  640,  645,  673,  659,  646,  665,  663,
      668,  664,  699,  717, 1241, 2411,  729, 1140,    0,    0,
     1100, 1109, 1093, 1105,    0, 1104, 2411,  732, 1134, 1308,
     1375, 1442,  737, 2411,  738, 1133,  671,  702,  710,  676,
      711, 2411,  741, 1128, 2411,  742, 1127, 1509, 1112, 1110,
     1108, 1106, 1082, 1094, 1074,  699, 1080, 1078,  695, 1078,
     1073,  707,  726,  732,  731,  733,  734,  735,  752, 1576,
      739,  736,  741, 2411,  774, 1115,    0,    0,    0,    0,
     1082,  787, 2411,  775, 1113, 2411,  791, 1112, 2411,  796,
     1111, 1643,  768,  773,  770,  201,  786, 2411,  804, 1110,

     1098, 1105, 1102, 1087, 1067, 1047, 1062, 1061,  809, 1053,
     1043, 1045, 1052, 1038, 1046,  751,  779,  797,  784,  789,
     1080, 2411,  817, 1079,  787, 1710,  796,    0,    0,  851,
     2411,  853, 1078,  835,  828,  837,  830,  841, 1051, 1068,
     1049, 1048,  874, 1029, 1028, 2411,  865, 1073, 1026, 1038,
     1042, 1068, 1033,  833,  838,  805, 2411, 1076, 2411,  869,
     1060,    0, 1041,  857,  858,  861,  862,  860, 1056, 1056,
     1040, 1035, 1028, 1023, 1008, 1053,  843,  903, 1777,    0,
     1029,  873,  874,  899,  900,  898, 1040, 1032, 1042, 1037,
     1001, 1018, 1844, 2411,  923, 1043,    0, 1050,  869,  896,

      904,  795,  906, 1023, 1013, 1031, 1033,  978, 2411,  926,
     1020,    0, 2411,  918,  911,  920,  919, 1012,  999,  989,
     1008,    0,  931,  956, 1002, 1000,  976,  965,    0,  913,
      986,  958,  961,  985,  981,  977,  946,    0,  922,  989,
      991,  966,  968,  994,  938,  925,  903,  871,    0,  999,
     1015, 2411, 1017,  882,  752,  749,  675, 2411,  686,  596,
      507, 1019,  364, 1021,   91, 2411, 1911, 1922, 1933, 1944,
     1955, 1965, 1976, 1987, 1998, 2009, 2019, 2030, 2041, 2052,
     2063, 2074, 2085, 2095, 2105, 2116, 2126, 2137, 2148, 2159,
     2170, 2180, 2190, 2201, 2211, 2221, 2231, 2241, 2251, 2262,

     2271, 2282, 2293, 2304, 2315, 2326, 2337, 2347, 2358, 2368,
     2379, 2389, 2399
    } ;

static const flex_int16_t yy_def[614] =
    {   0,
      567,  567,  566,    3,  568,  568,  568,  568,  566,  566,
      566,  569,  570,  571,  572,  566,  566,  572,  572,  572,
      572,  572,  566,  566,  566,  566,  573,  566,  574,  566,
      566,  566,  575,  575,   34,   34,   34,   34,  576,  566,
      566,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  566,  566,  577,  578,  566,
      579,  579,  569,  566,  569,  566,  570,  566,  566,  580,
      566,  572,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  572,  572,  572,  572,  572,  566,  573,  566,
      573,  566,  574,  566,  566,  581,  566,  566,  566,   34,

      566,   34,   34,   34,   34,   34,   34,  576,  566,  566,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  566,  577,  577,  582,  583,  566,  566,
      566,  566,  580,  566,  584,  566,  566,  566,  566,  566,
      566,  572,  572,  572,  572,  572,  572,  566,  566,  581,
      566,  566,  566,  585,   34,   34,   34,  575,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  575,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  582,

      566,  582,  586,  584,  587,  566,  566,  566,  566,  566,
      566,  566,  572,  572,  572,  572,  572,  572,  585,  588,
       34,   34,   34,  566,  566,  566,   34,   34,  180,   34,
       34,   34,  575,   34,   34,   34,  566,  566,  238,   34,
      566,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,  575,  589,
      587,  566,  566,  566,  566,  566,  566,  566,  572,  572,
      572,  572,  572,  572,  588,   34,   34,   34,   34,   34,
      575,  575,  566,  566,  566,   34,   34,  238,  238,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  575,  566,  566,  566,  590,  591,
      566,  566,  566,  566,  592,  566,  566,  566,  566,  572,
      572,  572,  572,  566,  566,  566,   34,   34,   34,   34,
       34,  566,  566,  566,  566,  566,  566,  575,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,   34,   34,   34,   34,   34,   34,   34,   34,  575,
       34,   34,   34,  566,  566,  566,  593,  594,  595,  596,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  572,   34,   34,   34,   34,   34,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  597,  566,
      566,  566,  566,  566,  566,   34,   34,   34,   34,   34,
      598,  566,  566,  566,   34,  575,   34,  599,  600,  566,
      566,  566,  566,   34,   34,   34,   34,   34,  566,  566,
      566,  566,  597,  566,  566,  566,  238,  566,  566,  566,
      566,  566,  566,   34,   34,   34,  566,  601,  566,  566,
      566,  602,  566,   34,   34,   34,   34,   34,  566,  566,
      566,  566,  566,  566,  566,  566,   34,   34,  575,  603,
      566,   34,   34,   34,   34,   34,  566,  566,  566,  566,
      566,  566,  575,  566,  566,  566,  604,  566,   34,   34,

       34,   34,   34,  566,  566,  566,  566,  566,  566,  566,
      566,  605,  566,   34,   34,   34,   34,  566,  566,  566,
      566,  606,   34,   34,  566,  566,  566,  566,  607,   34,
      566,  566,  608,  566,  566,  566,  566,  609,   34,  566,
      566,  608,  608,  610,  566,  566,  566,  566,  611,  566,
      566,  566,  610,  566,  566,  566,  566,  566,  612,  566,
      612,  613,  566,  613,  566,    0,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566
    } ;

static const flex_int16_t yy_nxt[2479] =
    {   0,
       10,   10,   11,   10,   12,   10,   10,   13,   10,   10,
       10,   10,   14,   10,   10,   10,   10,   57,   60,   60,
       60,   58,   60,   64,   88,   88,   61,   61,   62,   69,
       62,   70,   71,   71,   71,   71,   71,   71,   10,   10,
       10,   10,   74,   95,   81,   96,   75,   73,   73,   73,
       73,   73,   73,   88,   88,   90,  100,  103,   65,   97,
       97,   97,  104,  100,   88,   88,   10,   10,   16,   11,
       10,   12,   17,   10,   13,   10,   10,   10,   10,   14,
       10,   10,   10,   10,  100,   83,   76,  100,   77,   82,
       91,   87,  100,  100,   85,  100,   84,  105,  106,   86,

       78,   79,   80,  100,  115,   10,   10,   10,   10,   71,
      111,  107,   18,  100,   19,  112,  300,  116,  113,  134,
       88,  114,  100,  135,   73,  443,   20,   21,   22,  168,
      121,  117,  100,   10,   23,   24,   25,   26,   27,   23,
       28,   29,   26,   26,   26,   30,   31,   32,   32,   32,
       26,   33,   34,   35,   33,   36,   33,   37,   38,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   39,   40,   23,   41,   33,   33,   42,   43,
       44,   45,   46,   33,   33,   47,   33,   48,   49,   50,
       51,   52,   33,   53,   54,   55,   33,   33,   33,   33,

       56,   98,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  100,  100,  100,  101,  100,  100,
      100,  100,   71,   64,  437,   90,   97,   97,   97,  100,
      166,  100,  100,  129,  126,  127,   81,   73,   81,   98,
       98,   98,   98,  118,  128,  119,  120,  122,   71,  123,
      130,  124,  125,  131,  100,   74,  169,  132,   65,   75,
       91,  133,  100,   73,  100,  170,  100,   98,   98,   99,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   82,   71,   82,  101,   71,  100,   71,   71,  162,
      152,  167,  171,  100,  100,  100,  175,   73,  102,   76,

       73,   77,   73,   73,  163,  100,   98,   98,   98,   98,
      100,  100,  100,   78,   79,   80,  177,  100,  172,  174,
      100,  100,  100,  173,  176,  100,  100,  154,  100,  184,
      100,  100,  100,  100,   98,  100,  181,  100,  157,  100,
      188,  153,  155,  156,  178,  192,  183,  179,  189,  185,
      182,  180,  190,  187,  186,  194,  197,  195,  100,  208,
      193,  222,  196,   71,  198,  134,   88,  229,  191,  135,
      162,  223,  100,  100,  209,  199,  201,  221,   73,  227,
      100,   71,   71,   71,  100,  163,  100,  100,   71,  100,
      228,  100,  100,  100,  100,   71,   73,   73,   73,   71,

      100,  358,  359,   73,  232,  236,  565,  229,  234,  214,
       73,  233,  247,  229,   73,  100,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      213,  216,  215,  218,  230,  217,  224,  225,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  100,
      100,  100,  226,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  242,  100,  100,  277,  100,  100,
      100,  235,  100,  100,  224,  224,  224,  224,  231,  251,
      248,   71,  244,  243,  250,  255,  246,  245,  249,  253,

      254,  252,  257,  258,  100,  256,   73,  259,  561,  281,
      100,   71,  224,  237,  238,  239,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,   73,   71,  240,  241,
       71,   71,   71,  100,  282,  286,  100,  100,  100,  100,
      162,  100,   73,  289,  100,   73,   73,   73,  276,  269,
      278,  237,  237,  237,  237,  163,  279,  100,  566,  100,
      307,  100,  287,  229,  100,  100,  100,  100,  270,  280,
      100,  229,  100,  301,  272,  100,  273,  271,  302,  237,
      201,  305,  100,  303,  308,  304,  274,  310,  306,  100,
      100,  100,  100,  314,  309,  229,  100,   71,  337,  339,

      100,  338,  340,   71,  311,  360,  351,  313,  100,  361,
      100,  100,   73,  312,  100,  190,  563,  315,   73,  352,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,   98,   99,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  330,   71,   71,
      101,  100,  162,  100,  100,   71,  100,  341,  100,  100,
      100,  289,  100,   73,   73,  100,  100,  163,  362,  348,
       73,  348,   98,   98,   98,   98,  566,  561,  364,  100,
      367,  363,  229,  100,  100,  100,  393,  396,  100,  365,

      366,  100,  331,  100,  369,  333,  100,  371,  348,  443,
       98,  283,  284,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  332,  229,  368,  285,  370,  100,
      162,  373,  100,   71,  394,  395,  397,  100,   71,   71,
      100,  100,  162,  162,  412,  163,  372,  100,   73,  283,
      283,  283,  283,   73,   73,  408,  100,  163,  163,  409,
      413,  100,  100,  100,  100,  100,  100,  229,  421,  100,
      560,  100,  443,  348,  416,  162,   71,  283,  288,  289,
      418,  100,  100,  427,  426,  392,  420,  417,  430,  430,
      163,   73,   71,  163,  419,  290,  291,   71,  100,  425,

      100,  292,  434,  100,  436,  162,  438,   73,  454,  100,
      447,  447,   73,  421,  100,  435,  100,  100,  162,  100,
      163,  293,  294,  295,  448,  100,  100,  100,  296,  229,
      297,  455,  456,  163,  348,  100,  298,  348,  299,  316,
      317,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  430,  430,   71,  318,  229,  464,  100,  466,
      100,  465,  468,  100,  479,  100,  289,  100,  100,   73,
      162,  100,  467,  100,  463,  447,  447,  316,  316,  316,
      316,  566,  482,  483,  478,  163,  484,  100,  100,  566,
      100,  100,  100,  477,  499,  485,  514,  500,  559,  100,

      557,  493,  486,  100,  100,  316,  327,  328,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  421,
      501,  502,  329,  503,  162,  515,  100,  162,  100,  100,
      100,  516,  523,  100,  100,  517,  100,  443,  229,  163,
      524,  100,  163,  100,  327,  327,  327,  327,  100,  100,
      100,  530,  100,  229,  556,  539,  229,  531,  532,  541,
      541,  100,  543,  543,  533,  555,  542,  543,  543,  543,
      543,  548,  327,  334,  335,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  100,  540,  541,  336,
      540,  541,  541,  541,  542,  550,  551,  542,  547,  542,

      550,  551,  163,  552,  546,  163,  545,  537,  552,  536,
      554,  334,  334,  334,  334,  554,  551,  551,  550,  551,
      550,  551,  550,  551,  552,  535,  552,  534,  552,  528,
      552,  527,  526,  554,  525,  554,  164,  554,  443,  334,
       98,   99,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  521,  520,  519,  101,  518,  513,  164,
      508,  443,  507,  506,  505,  504,  498,  492,  443,  443,
      491,  490,  489,  488,  487,  481,  164,  219,   98,   98,
       98,   98,  412,  476,  475,  474,  443,  473,  443,  443,
      472,  471,  470,  469,  145,  164,  458,  453,  452,  451,

      450,  449,  443,  445,  444,  443,   98,  342,  343,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      443,  442,  441,  344,  440,  439,  164,  145,  145,  145,
      429,  164,  415,  414,  411,  410,  407,  406,  405,  404,
      403,  402,  401,  164,  164,  342,  342,  342,  342,  145,
      145,  382,  381,  380,  379,  378,  164,  357,  356,  355,
      354,  353,  350,  349,  164,  326,  325,  324,  323,  322,
      321,  320,  164,  342,  345,  346,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  100,  164,  219,
      347,  268,  267,  266,  265,  264,  263,  262,  204,  201,

      219,  164,  161,  212,  211,  210,  207,  206,  204,  144,
      136,  136,  345,  345,  345,  345,  109,  165,  164,  100,
      161,  159,  566,  158,  566,  151,  150,  149,  148,  147,
      146,  145,  144,  566,  142,  141,  140,  136,  110,  109,
      345,  374,  375,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,   94,   93,   67,  376,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  374,
      374,  374,  374,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  374,  383,  384,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  566,  566,  566,  385,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  383,  383,  383,  383,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  383,  386,  387,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  566,  566,
      566,  388,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  386,  386,  386,  386,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  386,  389,  390,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  566,  566,  566,  391,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      389,  389,  389,  389,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  389,  398,
      399,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  566,  566,  566,  400,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  398,  398,  398,
      398,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  398,  422,  423,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  566,
      566,  566,  424,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  422,  422,  422,  422,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  422,  431,  432,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  566,  566,  566,  433,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  431,  431,  431,  431,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  431,
      459,  460,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  566,  566,  566,  461,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  459,  459,
      459,  459,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  459,  494,  495,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      566,  566,  566,  496,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  494,  494,  494,  494,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  494,  509,  510,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  566,  566,  566,
      511,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  509,  509,  509,  509,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      509,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   72,  566,  566,  566,
       72,   72,   72,   72,  566,   72,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  566,  108,
      137,  566,  566,  566,  566,  566,  566,  566,  566,  137,
      138,  138,  566,  138,  566,  138,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  203,  203,  566,  203,  566,
      203,  203,  203,  203,  203,  203,  205,  566,  566,  566,

      566,  566,  566,  205,  566,  205,  220,  566,  566,  566,
      566,  566,  566,  220,  566,  220,  260,  260,  566,  260,
      566,  260,  260,  260,  260,  260,  260,  261,  566,  566,
      566,  261,  261,  261,  261,  566,  261,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  319,  319,
      566,  319,  566,  319,  319,  319,  319,  319,  319,  377,
      377,  566,  377,  566,  377,  377,  377,  377,  377,  377,
      327,  327,  327,  327,  327,  566,  566,  327,  566,  327,
      334,  334,  334,  334,  334,  566,  566,  334,  566,  334,
      428,  428,  566,  428,  566,  428,  428,  428,  428,  428,

      428,  383,  383,  383,  383,  383,  566,  566,  383,  566,
      383,  386,  386,  386,  386,  386,  566,  566,  386,  566,
      386,  389,  389,  389,  389,  389,  566,  566,  389,  566,
      389,  446,  446,  446,  446,  446,  566,  446,  446,  566,
      446,  457,  457,  457,  457,  457,  566,  566,  457,  566,
      457,  462,  462,  566,  462,  566,  462,  462,  462,  462,
      462,  462,  431,  431,  431,  431,  431,  566,  566,  431,
      566,  431,  220,  566,  566,  566,  566,  566,  566,  220,
      566,  220,  480,  480,  566,  480,  566,  480,  480,  480,
      480,  480,  480,  497,  497,  566,  497,  566,  497,  497,

      497,  497,  497,  497,  512,  512,  566,  512,  566,  512,
      512,  512,  512,  512,  512,  522,  522,  566,  522,  566,
      522,  522,  522,  522,  522,  522,  529,  529,  566,  529,
      566,  529,  529,  529,  529,  529,  529,  538,  538,  566,
      538,  566,  538,  538,  538,  538,  538,  538,  544,  544,
      566,  566,  566,  566,  566,  544,  566,  544,  549,  549,
      566,  549,  566,  549,  549,  549,  549,  549,  549,  553,
      553,  553,  566,  553,  553,  553,  553,  566,  553,  558,
      558,  566,  558,  566,  558,  558,  558,  558,  558,  558,
      562,  566,  566,  566,  566,  566,  566,  562,  566,  562,

      564,  564,  564,  566,  564,  564,  564,  564,  566,  564,
        9,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

static const flex_int16_t yy_chk[2479] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    5,    6,
        7,    4,    8,   12,   24,   24,    5,    6,    7,   14,
        8,   14,   15,   18,   19,   20,   21,   22,    1,    1,
        1,    1,   16,   31,   17,   31,   16,   15,   18,   19,
       20,   21,   22,   25,   25,   27,   35,   35,   12,   32,
       32,   32,   36,   36,   88,   88,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   42,   18,   16,   44,   16,   17,
       27,   22,   45,   37,   20,   43,   19,   37,   38,   21,

       16,   16,   16,   46,   44,    2,    2,    2,    2,   71,
       42,   38,    2,   50,    2,   43,  240,   45,   43,   57,
       57,   43,  105,   57,   71,  565,    2,    2,    2,  105,
       50,   46,  240,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   53,   49,   54,   33,   47,   48,
       51,   52,   72,   63,  396,   89,   97,   97,   97,  103,
      103,  396,   55,   54,   53,   53,   75,   72,   81,   33,
       33,   33,   33,   47,   53,   48,   49,   51,   83,   52,
       54,   52,   52,   55,  106,   74,  106,   55,   63,   74,
       89,   55,  107,   83,  115,  107,  111,   33,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   75,   84,   81,   34,   85,  104,   86,   87,   99,
       83,  104,  111,  116,  114,  117,  115,   84,   34,   74,

       85,   74,   86,   87,   99,  112,   34,   34,   34,   34,
      113,  119,  122,   74,   74,   74,  117,  121,  112,  114,
      120,  118,  126,  113,  116,  124,  125,   85,  123,  122,
      130,  129,  128,  127,   34,  132,  119,  131,   87,  172,
      125,   84,   85,   86,  118,  128,  121,  118,  126,  123,
      120,  118,  127,  124,  123,  129,  132,  130,  133,  148,
      128,  166,  131,  153,  132,  134,  134,  172,  127,  134,
      162,  167,  166,  167,  148,  133,  137,  165,  153,  169,
      165,  155,  152,  154,  171,  162,  170,  176,  157,  169,
      170,  177,  175,  179,  181,  205,  155,  152,  154,  156,

      187,  298,  298,  157,  175,  179,  563,  171,  177,  153,
      205,  176,  187,  181,  156,  173,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      152,  155,  154,  157,  173,  156,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  174,
      178,  182,  168,  183,  184,  185,  186,  188,  193,  190,
      189,  192,  191,  194,  182,  196,  197,  222,  195,  199,
      230,  178,  198,  222,  168,  168,  168,  168,  174,  191,
      188,  213,  184,  183,  190,  195,  186,  185,  189,  193,

      194,  192,  197,  198,  231,  196,  213,  199,  561,  230,
      234,  214,  168,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  214,  215,  180,  180,
      216,  217,  218,  232,  231,  234,  221,  235,  223,  248,
      225,  236,  215,  239,  227,  216,  217,  218,  221,  213,
      223,  180,  180,  180,  180,  225,  227,  228,  239,  242,
      248,  243,  235,  232,  246,  249,  252,  250,  214,  228,
      244,  236,  245,  242,  216,  247,  217,  215,  243,  180,
      202,  246,  251,  244,  250,  245,  218,  252,  247,  253,
      254,  255,  257,  256,  251,  249,  258,  261,  276,  278,

      279,  277,  279,  270,  253,  299,  292,  255,  256,  299,
      276,  278,  261,  254,  277,  258,  560,  257,  270,  292,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  270,  271,  273,
      220,  280,  284,  286,  287,  272,  300,  280,  301,  303,
      304,  289,  302,  271,  273,  305,  308,  284,  300,  286,
      272,  287,  220,  220,  220,  220,  289,  559,  302,  307,
      305,  301,  308,  310,  312,  309,  337,  340,  311,  303,

      304,  337,  271,  306,  307,  273,  340,  312,  310,  557,
      220,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  272,  309,  306,  233,  311,  313,
      317,  314,  338,  328,  338,  339,  341,  362,  333,  335,
      339,  341,  343,  346,  359,  317,  313,  314,  328,  233,
      233,  233,  233,  333,  335,  356,  363,  343,  346,  356,
      359,  365,  364,  366,  367,  368,  372,  362,  369,  371,
      556,  373,  555,  363,  364,  375,  384,  233,  238,  238,
      366,  416,  369,  373,  372,  333,  368,  365,  382,  382,
      375,  384,  387,  238,  367,  238,  238,  390,  393,  371,

      395,  238,  393,  394,  395,  399,  397,  387,  416,  417,
      409,  409,  390,  418,  419,  394,  397,  425,  423,  420,
      399,  238,  238,  238,  409,  502,  427,  418,  238,  502,
      238,  419,  420,  423,  425,  456,  238,  417,  238,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  430,  430,  432,  259,  427,  434,  435,  436,
      437,  435,  438,  454,  456,  434,  447,  436,  455,  432,
      460,  438,  437,  477,  430,  443,  443,  259,  259,  259,
      259,  447,  464,  465,  455,  460,  466,  464,  465,  443,
      468,  466,  467,  454,  482,  467,  499,  483,  554,  499,

      548,  477,  468,  482,  483,  259,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  478,
      484,  485,  269,  486,  495,  500,  500,  510,  486,  484,
      485,  501,  515,  478,  501,  503,  503,  547,  514,  495,
      516,  515,  510,  530,  269,  269,  269,  269,  514,  517,
      516,  523,  539,  517,  546,  530,  539,  524,  524,  532,
      532,  523,  533,  533,  524,  545,  532,  542,  542,  543,
      543,  537,  269,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  524,  531,  531,  274,
      540,  540,  541,  541,  531,  544,  544,  540,  536,  541,

      550,  550,  531,  544,  535,  540,  534,  528,  550,  527,
      544,  274,  274,  274,  274,  550,  551,  551,  553,  553,
      562,  562,  564,  564,  551,  526,  553,  525,  562,  521,
      564,  520,  519,  553,  518,  562,  511,  564,  508,  274,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  507,  506,  505,  275,  504,  498,  496,
      492,  491,  490,  489,  488,  487,  481,  476,  475,  474,
      473,  472,  471,  470,  469,  463,  461,  458,  275,  275,
      275,  275,  453,  452,  451,  450,  449,  448,  445,  444,
      442,  441,  440,  439,  433,  424,  421,  415,  414,  413,

      412,  411,  410,  408,  407,  406,  275,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      405,  404,  403,  281,  402,  401,  400,  391,  388,  385,
      381,  376,  361,  360,  358,  357,  355,  354,  353,  352,
      351,  350,  349,  347,  344,  281,  281,  281,  281,  336,
      329,  326,  324,  323,  322,  321,  318,  297,  296,  295,
      294,  293,  291,  290,  285,  268,  267,  266,  265,  264,
      263,  262,  241,  281,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  229,  226,  219,
      282,  212,  211,  210,  209,  208,  207,  206,  204,  200,

      164,  163,  160,  151,  150,  149,  147,  146,  145,  143,
      136,  135,  282,  282,  282,  282,  108,  102,  101,  100,
       96,   94,   93,   92,   91,   82,   80,   79,   78,   77,
       76,   73,   70,   67,   66,   62,   61,   58,   40,   39,
      282,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,   30,   29,   13,  315,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  315,
      315,  315,  315,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  315,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,    0,    0,    0,  330,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  330,  330,  330,  330,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  330,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,    0,    0,
        0,  331,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  331,  331,  331,  331,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  331,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,    0,    0,    0,  332,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      332,  332,  332,  332,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  332,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,    0,    0,    0,  348,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  348,  348,  348,
      348,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  348,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,    0,
        0,    0,  370,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  370,  370,  370,  370,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  370,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,    0,    0,    0,  392,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  392,  392,  392,  392,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  392,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,    0,    0,    0,  426,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  426,  426,
      426,  426,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  426,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
        0,    0,    0,  479,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  479,  479,  479,  479,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  479,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,    0,    0,    0,
      493,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  493,  493,  493,  493,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      493,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  572,    0,    0,    0,
      572,  572,  572,  572,    0,  572,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  576,
      576,  576,  576,  576,  576,  576,  576,  576,    0,  576,
      577,    0,    0,    0,    0,    0,    0,    0,    0,  577,
      578,  578,    0,  578,    0,  578,  578,  578,  578,  578,
      578,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  583,  583,    0,  583,    0,
      583,  583,  583,  583,  583,  583,  584,    0,    0,    0,

        0,    0,    0,  584,    0,  584,  585,    0,    0,    0,
        0,    0,    0,  585,    0,  585,  586,  586,    0,  586,
        0,  586,  586,  586,  586,  586,  586,  587,    0,    0,
        0,  587,  587,  587,  587,    0,  587,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  589,  589,
        0,  589,    0,  589,  589,  589,  589,  589,  589,  590,
      590,    0,  590,    0,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,    0,    0,  591,    0,  591,
      592,  592,  592,  592,  592,    0,    0,  592,    0,  592,
      593,  593,    0,  593,    0,  593,  593,  593,  593,  593,

      593,  594,  594,  594,  594,  594,    0,    0,  594,    0,
      594,  595,  595,  595,  595,  595,    0,    0,  595,    0,
      595,  596,  596,  596,  596,  596,    0,    0,  596,    0,
      596,  597,  597,  597,  597,  597,    0,  597,  597,    0,
      597,  598,  598,  598,  598,  598,    0,    0,  598,    0,
      598,  599,  599,    0,  599,    0,  599,  599,  599,  599,
      599,  599,  600,  600,  600,  600,  600,    0,    0,  600,
        0,  600,  601,    0,    0,    0,    0,    0,    0,  601,
        0,  601,  602,  602,    0,  602,    0,  602,  602,  602,
      602,  602,  602,  603,  603,    0,  603,    0,  603,  603,

      603,  603,  603,  603,  604,  604,    0,  604,    0,  604,
      604,  604,  604,  604,  604,  605,  605,    0,  605,    0,
      605,  605,  605,  605,  605,  605,  606,  606,    0,  606,
        0,  606,  606,  606,  606,  606,  606,  607,  607,    0,
      607,    0,  607,  607,  607,  607,  607,  607,  608,  608,
        0,    0,    0,    0,    0,  608,    0,  608,  609,  609,
        0,  609,    0,  609,  609,  609,  609,  609,  609,  610,
      610,  610,    0,  610,  610,  610,  610,    0,  610,  611,
      611,    0,  611,    0,  611,  611,  611,  611,  611,  611,
      612,    0,    0,    0,    0,    0,    0,  612,    0,  612,

      613,  613,  613,    0,  613,  613,  613,  613,    0,  613,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* -*- indented-text -*- */
/* Process source files and output type information.
   Copyright (C) 2002-2022 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */
#define YY_NO_INPUT 1
#line 24 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
#ifdef HOST_GENERATOR_FILE
#include "config.h"
#define GENERATOR_FILE 1
#else
#include "bconfig.h"
#endif
#include "system.h"

#define malloc xmalloc
#define realloc xrealloc

#include "gengtype.h"

#define YY_DECL int yylex (const char **yylval)
#define yyterminate() return EOF_TOKEN

struct fileloc lexer_line;
int lexer_toplevel_done;

static void 
update_lineno (const char *l, size_t len)
{
  while (len-- > 0)
    if (*l++ == '\n')
      lexer_line.line++;
}

#line 1235 "gengtype-lex.cc"
#line 59 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
    /* Include '::' in identifiers to capture C++ scope qualifiers.  */

#line 1239 "gengtype-lex.cc"

#define INITIAL 0
#define in_struct 1
#define in_struct_comment 2
#define in_comment 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 67 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"

  /* Do this on entry to yylex():  */
  *yylval = 0;
  if (lexer_toplevel_done)
    {
      BEGIN(INITIAL);
      lexer_toplevel_done = 0;
    }

  /* Things we look for in skipping mode: */
#line 1471 "gengtype-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 567 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 566 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 78 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return TYPEDEF;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 82 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return STRUCT;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 86 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return UNION;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 90 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return STRUCT;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return EXTERN;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  BEGIN(in_struct);
  return STATIC;
}
	YY_BREAK

/* Parsing inside a struct, union or class declaration.  */

case 7:
YY_RULE_SETUP
#line 106 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ BEGIN(in_struct_comment); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 107 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ lexer_line.line++; }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 109 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ update_lineno (yytext, yyleng); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 110 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ lexer_line.line++; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 112 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* don't care */
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 114 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 13:
/* rule 13 can match eol */
#line 115 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 14:
/* rule 14 can match eol */
#line 116 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 116 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
    *yylval = XDUPVAR (const char, yytext, yyleng, yyleng + 1);
    return IGNORABLE_CXX_KEYWORD;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 120 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return GTY_TOKEN; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 121 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return UNION; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 122 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return STRUCT; }
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 123 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return STRUCT; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 124 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return TYPEDEF; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 125 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return ENUM; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 126 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return PTR_ALIAS; }
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 127 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return NESTED_PTR; }
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 128 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return USER_GTY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 129 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  *yylval = XDUPVAR (const char, yytext, yyleng, yyleng+1);
  return NUM;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 135 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 135 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  size_t len;

  for (len = yyleng; ISSPACE (yytext[len-1]); len--)
    ;

  *yylval = XDUPVAR (const char, yytext, len, len+1);
  update_lineno (yytext, yyleng);
  return SCALAR;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 146 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  *yylval = XDUPVAR (const char, yytext, yyleng, yyleng+1);
  return ID;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 151 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  *yylval = XDUPVAR (const char, yytext+1, yyleng-2, yyleng-1);
  return STRING;
}
	YY_BREAK
/* This "terminal" avoids having to parse integer constant expressions.  */
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 156 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  *yylval = XDUPVAR (const char, yytext+1, yyleng-2, yyleng-1);
  return ARRAY;
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 160 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  *yylval = XDUPVAR (const char, yytext+1, yyleng-2, yyleng);
  return CHAR;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 165 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return ELLIPSIS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 166 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ return yytext[0]; }
	YY_BREAK
/* ignore pp-directives */
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 169 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{lexer_line.line++;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  error_at_line (&lexer_line, "unexpected character `%s'", yytext);
}
	YY_BREAK

case 36:
YY_RULE_SETUP
#line 176 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ BEGIN(in_comment); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 177 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ lexer_line.line++; }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 178 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ lexer_line.line++; }
	YY_BREAK
case 39:
#line 180 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 40:
/* rule 40 can match eol */
#line 181 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 181 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* do nothing */
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 182 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ update_lineno (yytext, yyleng); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 183 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* do nothing */
	YY_BREAK

case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 186 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ lexer_line.line++; }
	YY_BREAK
case 45:
#line 188 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 46:
YY_RULE_SETUP
#line 188 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* do nothing */
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 189 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* do nothing */
	YY_BREAK

case 48:
YY_RULE_SETUP
#line 192 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ BEGIN(INITIAL); } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 193 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{ BEGIN(in_struct); }
	YY_BREAK
case 50:
#line 196 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
case 51:
YY_RULE_SETUP
#line 196 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
{
  error_at_line (&lexer_line, 
		 "unterminated comment or string; unexpected EOF");
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 201 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
/* do nothing */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 203 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1947 "gengtype-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(in_struct):
case YY_STATE_EOF(in_struct_comment):
case YY_STATE_EOF(in_comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 567 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 566);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 203 "/home/rguenther/src/releases/gcc-12.3.0/gcc-12.3.0/gcc/gengtype-lex.l"


void
yybegin (const char *fname)
{
  yyin = fopen (fname, "r");
  if (yyin == NULL)
    {
      perror (fname);
      exit (1);
    }
  lexer_line.file = input_file_by_name (fname);
  lexer_line.line = 1;
}

void
yyend (void)
{
  fclose (yyin);
}

