#! /bin/sh

# Test of gettext facilities in the C++ language.
# Assumes an fr_FR locale is installed.
# Assumes the following packages are installed: gcc g++.

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

# Test whether a C++ compiler is found and libasprintf is built.
test "${CXX}" != ":" || {
  echo "Skipping test: no C++ compiler found"
  exit 77
}
test "${TESTLIBASPRINTF}" = yes || {
  echo "Skipping test: configured with --disable-libasprintf"
  exit 77
}

tmpfiles="$tmpfiles prog.cc"
cat <<\EOF > prog.cc
#include "config.h"

/* Avoid deprecation warnings from g++ 3.1 or newer.  */
#if defined __GNUG__ && defined __DEPRECATED
# include <iostream>
using namespace std;
#else
# include <iostream.h>
#endif

#include <libintl.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include "xsetenv.h"
#include "autosprintf.h"
using gnu::autosprintf;
#define _(string) gettext (string)

int main (int argc, char *argv[])
{
  int n = atoi (argv[2]);

  xsetenv ("LC_ALL", argv[1], 1);
  if (setlocale (LC_ALL, "") == NULL)
    // Couldn't set locale.
    exit (77);

  textdomain ("prog");
  bindtextdomain ("prog", ".");

  cout << _("'Your command, please?', asked the waiter.") << endl;

  cout << autosprintf (ngettext ("a piece of cake", "%d pieces of cake", n), n)
       << endl;

  cout << autosprintf (_("%s is replaced by %s."), "FF", "EUR") << endl;
}
EOF

# Variable needed by LTLIBINTL.
top_builddir=..

tmpfiles="$tmpfiles prog.${OBJEXT} prog${EXEEXT}"
# Compile in two steps from .cc to .o and from .o to 'prog'. This way,
# relinking is faster because doesn't need to redo the first step.
# Put the -I flags before ${CXXFLAGS} ${CPPFLAGS}, to make sure that libintl.h
# is found in the build directory, regardless of -I options present in
# ${CXXFLAGS} or ${CPPFLAGS}.
${CXX} -I.. -I../../gettext-runtime/libasprintf -I$top_srcdir/gnulib-lib -I../intl ${CXXFLAGS} ${CPPFLAGS} -c prog.cc \
  || exit 1
${LIBTOOL} --quiet --mode=link ${CXX} ${CXXFLAGS} ${LDFLAGS} -o prog prog.${OBJEXT} ../../gettext-runtime/libasprintf/libasprintf.la ../gnulib-lib/libgettextlib.la ${LTLIBINTL} \
  || exit 1

tmpfiles="$tmpfiles prog.pot"
: ${XGETTEXT=xgettext}
${XGETTEXT} -o prog.pot --omit-header --no-location -k_ prog.cc

tmpfiles="$tmpfiles prog.ok"
cat <<EOF > prog.ok
msgid "'Your command, please?', asked the waiter."
msgstr ""

#, c-format
msgid "a piece of cake"
msgid_plural "%d pieces of cake"
msgstr[0] ""
msgstr[1] ""

#, c-format
msgid "%s is replaced by %s."
msgstr ""
EOF

: ${DIFF=diff}
${DIFF} prog.ok prog.pot || exit 1

tmpfiles="$tmpfiles fr.po"
cat <<\EOF > fr.po
msgid ""
msgstr ""
"Content-Type: text/plain; charset=ISO-8859-1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

msgid "'Your command, please?', asked the waiter."
msgstr "«Votre commande, s'il vous plait», dit le garçon."

# Les gateaux allemands sont les meilleurs du monde.
#, c-format
msgid "a piece of cake"
msgid_plural "%d pieces of cake"
msgstr[0] "un morceau de gateau"
msgstr[1] "%d morceaux de gateau"

# Reverse the arguments.
#, c-format
msgid "%s is replaced by %s."
msgstr "%2$s remplace %1$s."
EOF

tmpfiles="$tmpfiles fr.po.new"
: ${MSGMERGE=msgmerge}
${MSGMERGE} -q -o fr.po.new fr.po prog.pot

: ${DIFF=diff}
${DIFF} fr.po fr.po.new || exit 1

tmpfiles="$tmpfiles fr"
test -d fr || mkdir fr
test -d fr/LC_MESSAGES || mkdir fr/LC_MESSAGES

: ${MSGFMT=msgfmt}
${MSGFMT} -o fr/LC_MESSAGES/prog.mo fr.po

tmpfiles="$tmpfiles prog.ok prog.oku prog.out"
: ${DIFF=diff}
cat <<\EOF > prog.ok
«Votre commande, s'il vous plait», dit le garçon.
2 morceaux de gateau
EUR remplace FF.
EOF
cat <<\EOF > prog.oku
Â«Votre commande, s'il vous plaitÂ», dit le garÃ§on.
2 morceaux de gateau
EUR remplace FF.
EOF

: ${LOCALE_FR=fr_FR}
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR != none; then
  LANGUAGE= ./prog $LOCALE_FR 2 > prog.out
  case $? in
    0) ${DIFF} prog.ok prog.out || exit 1;;
    77) LOCALE_FR=none;;
    *) exit 1;;
  esac
fi
if test $LOCALE_FR_UTF8 != none; then
  LANGUAGE= ./prog $LOCALE_FR_UTF8 2 > prog.out
  case $? in
    0) ${DIFF} prog.oku prog.out || exit 1;;
    77) LOCALE_FR_UTF8=none;;
    *) exit 1;;
  esac
fi
if test $LOCALE_FR = none && test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french locale is installed"
  else
    echo "Skipping test: no french locale is supported"
  fi
  rm -fr $tmpfiles; exit 77
fi

rm -fr $tmpfiles

exit 0
