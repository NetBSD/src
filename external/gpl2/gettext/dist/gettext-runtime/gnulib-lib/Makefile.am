## DO NOT EDIT! GENERATED AUTOMATICALLY!
## Process this file with automake to produce Makefile.in.
# Copyright (C) 2004-2006 Free Software Foundation, Inc.
#
# This file is free software, distributed under the terms of the GNU
# General Public License.  As a special exception to the GNU General
# Public License, this file may be distributed as part of a program
# that contains a configuration script generated by Autoconf, under
# the same distribution terms as the rest of that program.
#
# Generated by gnulib-tool.
# Reproduce by: gnulib-tool --import --dir=gettext-runtime --local-dir=gnulib-local --lib=libgrt --source-base=gnulib-lib --m4-base=gnulib-m4 --doc-base=doc --aux-dir=../build-aux --no-libtool --macro-prefix=gl atexit basename closeout csharpcomp-script error exit getopt gettext-h gettext-runtime-misc java javacomp-script memmove progname propername relocatable relocwrapper stdbool strtoul unlocked-io xalloc

AUTOMAKE_OPTIONS = 1.5 gnits

noinst_LIBRARIES = libgrt.a

libgrt_a_SOURCES =
libgrt_a_LIBADD = $(gl_LIBOBJS)
libgrt_a_DEPENDENCIES = $(gl_LIBOBJS)
noinst_HEADERS =
EXTRA_DIST =
BUILT_SOURCES =
SUFFIXES =
MOSTLYCLEANFILES = core *.stackdump
MOSTLYCLEANDIRS =
CLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

AM_CPPFLAGS =

## begin gnulib module alloca-opt

BUILT_SOURCES += $(ALLOCA_H)

# We need the following in order to create <alloca.h> when the system
# doesn't have one that works with the given compiler.
alloca.h: alloca_.h
	{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
	  cat $(srcdir)/alloca_.h; \
	} > $@-t
	mv -f $@-t $@
MOSTLYCLEANFILES += alloca.h alloca.h-t

EXTRA_DIST += alloca_.h

## end   gnulib module alloca-opt

## begin gnulib module allocsa

libgrt_a_SOURCES += allocsa.h allocsa.c

EXTRA_DIST += allocsa.valgrind

## end   gnulib module allocsa

## begin gnulib module atexit


EXTRA_DIST += atexit.c

## end   gnulib module atexit

## begin gnulib module basename

libgrt_a_SOURCES += basename.h basename.c

## end   gnulib module basename

## begin gnulib module c-ctype

libgrt_a_SOURCES += c-ctype.h c-ctype.c

## end   gnulib module c-ctype

## begin gnulib module c-strcase

libgrt_a_SOURCES += c-strcase.h c-strcasecmp.c c-strncasecmp.c

## end   gnulib module c-strcase

## begin gnulib module c-strstr

libgrt_a_SOURCES += c-strstr.h c-strstr.c

## end   gnulib module c-strstr

## begin gnulib module canonicalize


EXTRA_DIST += canonicalize.c canonicalize.h

## end   gnulib module canonicalize

## begin gnulib module closeout

libgrt_a_SOURCES += closeout.h closeout.c

## end   gnulib module closeout

## begin gnulib module configmake

# Retrieve values of the variables through 'configure' followed by
# 'make', not directly through 'configure', so that a user who
# sets some of these variables consistently on the 'make' command
# line gets correct results.
#
# One advantage of this approach, compared to the classical
# approach of adding -DLIBDIR=\"$(libdir)\" etc. to AM_CPPFLAGS,
# is that it protects against the use of undefined variables.
# If, say, $(libdir) is not set in the Makefile, LIBDIR is not
# defined by this module, and code using LIBDIR gives a
# compilation error.
#
# Another advantage is that 'make' output is shorter.
#
# Listed in the same order as the GNU makefile conventions.
# The Automake-defined pkg* macros are appended, in the order
# listed in the Automake 1.10a+ documentation.
configmake.h: Makefile
	rm -f $@-t $@
	{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
	  echo '#define PREFIX "$(prefix)"'; \
	  echo '#define EXEC_PREFIX "$(exec_prefix)"'; \
	  echo '#define BINDIR "$(bindir)"'; \
	  echo '#define SBINDIR "$(sbindir)"'; \
	  echo '#define LIBEXECDIR "$(libexecdir)"'; \
	  echo '#define DATAROOTDIR "$(datarootdir)"'; \
	  echo '#define DATADIR "$(datadir)"'; \
	  echo '#define SYSCONFDIR "$(sysconfdir)"'; \
	  echo '#define SHAREDSTATEDIR "$(sharedstatedir)"'; \
	  echo '#define LOCALSTATEDIR "$(localstatedir)"'; \
	  echo '#define INCLUDEDIR "$(includedir)"'; \
	  echo '#define OLDINCLUDEDIR "$(oldincludedir)"'; \
	  echo '#define DOCDIR "$(docdir)"'; \
	  echo '#define INFODIR "$(infodir)"'; \
	  echo '#define HTMLDIR "$(htmldir)"'; \
	  echo '#define DVIDIR "$(dvidir)"'; \
	  echo '#define PDFDIR "$(pdfdir)"'; \
	  echo '#define PSDIR "$(psdir)"'; \
	  echo '#define LIBDIR "$(libdir)"'; \
	  echo '#define LISPDIR "$(lispdir)"'; \
	  echo '#define LOCALEDIR "$(localedir)"'; \
	  echo '#define MANDIR "$(mandir)"'; \
	  echo '#define MANEXT "$(manext)"'; \
	  echo '#define PKGDATADIR "$(pkgdatadir)"'; \
	  echo '#define PKGINCLUDEDIR "$(pkgincludedir)"'; \
	  echo '#define PKGLIBDIR "$(pkglibdir)"'; \
	  echo '#define PKGLIBEXECDIR "$(pkglibexecdir)"'; \
	} | sed '/""/d' > $@-t
	mv $@-t $@
BUILT_SOURCES += configmake.h
CLEANFILES += configmake.h configmake.h-t

## end   gnulib module configmake

## begin gnulib module error


EXTRA_DIST += error.c error.h

## end   gnulib module error

## begin gnulib module exit

libgrt_a_SOURCES += exit.h

## end   gnulib module exit

## begin gnulib module fwriteerror

libgrt_a_SOURCES += fwriteerror.h fwriteerror.c

## end   gnulib module fwriteerror

## begin gnulib module getopt

BUILT_SOURCES += $(GETOPT_H)

# We need the following in order to create <getopt.h> when the system
# doesn't have one that works with the given compiler.
getopt.h: getopt_.h
	{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
	  cat $(srcdir)/getopt_.h; \
	} > $@-t
	mv -f $@-t $@
MOSTLYCLEANFILES += getopt.h getopt.h-t

EXTRA_DIST += getopt.c getopt1.c getopt_.h getopt_int.h

## end   gnulib module getopt

## begin gnulib module gettext-h

libgrt_a_SOURCES += gettext.h

## end   gnulib module gettext-h

## begin gnulib module gettext-runtime-misc

AUTOMAKE_OPTIONS += no-dependencies

# Hmm... is this still necessary?
AM_CPPFLAGS += -I$(top_builddir)/intl -I$(top_srcdir)/intl

# Parametrization of the 'relocatable' module.
AM_CPPFLAGS += -DDEPENDS_ON_LIBICONV=1 -DDEPENDS_ON_LIBINTL=1

## end   gnulib module gettext-runtime-misc

## begin gnulib module localcharset

libgrt_a_SOURCES += localcharset.h localcharset.c

# We need the following in order to install a simple file in $(libdir)
# which is shared with other installed packages. We use a list of referencing
# packages so that "make uninstall" will remove the file if and only if it
# is not used by another installed package.
# On systems with glibc-2.1 or newer, the file is redundant, therefore we
# avoid installing it.

all-local: charset.alias ref-add.sed ref-del.sed

charset_alias = $(DESTDIR)$(libdir)/charset.alias
charset_tmp = $(DESTDIR)$(libdir)/charset.tmp
install-exec-local: all-local
	test $(GLIBC21) != no || $(mkinstalldirs) $(DESTDIR)$(libdir)
	if test -f $(charset_alias); then \
	  sed -f ref-add.sed $(charset_alias) > $(charset_tmp) ; \
	  $(INSTALL_DATA) $(charset_tmp) $(charset_alias) ; \
	  rm -f $(charset_tmp) ; \
	else \
	  if test $(GLIBC21) = no; then \
	    sed -f ref-add.sed charset.alias > $(charset_tmp) ; \
	    $(INSTALL_DATA) $(charset_tmp) $(charset_alias) ; \
	    rm -f $(charset_tmp) ; \
	  fi ; \
	fi

uninstall-local: all-local
	if test -f $(charset_alias); then \
	  sed -f ref-del.sed $(charset_alias) > $(charset_tmp); \
	  if grep '^# Packages using this file: $$' $(charset_tmp) \
	      > /dev/null; then \
	    rm -f $(charset_alias); \
	  else \
	    $(INSTALL_DATA) $(charset_tmp) $(charset_alias); \
	  fi; \
	  rm -f $(charset_tmp); \
	fi

charset.alias: config.charset
	rm -f t-$@ $@
	$(SHELL) $(srcdir)/config.charset '$(host)' > t-$@
	mv t-$@ $@

SUFFIXES += .sed .sin
.sin.sed:
	rm -f t-$@ $@
	sed -e '/^#/d' -e 's/@''PACKAGE''@/$(PACKAGE)/g' $< > t-$@
	mv t-$@ $@

CLEANFILES += charset.alias ref-add.sed ref-del.sed

EXTRA_DIST += config.charset ref-add.sin ref-del.sin

## end   gnulib module localcharset

## begin gnulib module mbchar


EXTRA_DIST += mbchar.c mbchar.h

## end   gnulib module mbchar

## begin gnulib module mbuiter

libgrt_a_SOURCES += mbuiter.h

## end   gnulib module mbuiter

## begin gnulib module memchr


EXTRA_DIST += memchr.c

## end   gnulib module memchr

## begin gnulib module memmove


EXTRA_DIST += memmove.c

## end   gnulib module memmove

## begin gnulib module pathmax


EXTRA_DIST += pathmax.h

## end   gnulib module pathmax

## begin gnulib module progname

libgrt_a_SOURCES += progname.h progname.c

## end   gnulib module progname

## begin gnulib module progreloc

AM_CPPFLAGS += -DEXEEXT=\"$(EXEEXT)\"
libgrt_a_SOURCES += progreloc.c

## end   gnulib module progreloc

## begin gnulib module propername

libgrt_a_SOURCES += propername.h propername.c

## end   gnulib module propername

## begin gnulib module readlink


EXTRA_DIST += readlink.c

## end   gnulib module readlink

## begin gnulib module relocatable


EXTRA_DIST += relocatable.c relocatable.h

## end   gnulib module relocatable

## begin gnulib module relocwrapper


EXTRA_DIST += relocwrapper.c

## end   gnulib module relocwrapper

## begin gnulib module setenv


EXTRA_DIST += setenv.c setenv.h unsetenv.c

## end   gnulib module setenv

## begin gnulib module stdbool

BUILT_SOURCES += $(STDBOOL_H)

# We need the following in order to create <stdbool.h> when the system
# doesn't have one that works.
stdbool.h: stdbool_.h
	rm -f $@-t $@
	{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
	  sed -e 's/@''HAVE__BOOL''@/$(HAVE__BOOL)/g' < $(srcdir)/stdbool_.h; \
	} > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdbool.h stdbool.h-t

EXTRA_DIST += stdbool_.h

## end   gnulib module stdbool

## begin gnulib module strdup


EXTRA_DIST += strdup.c strdup.h

## end   gnulib module strdup

## begin gnulib module strerror


EXTRA_DIST += strerror.c

## end   gnulib module strerror

## begin gnulib module striconv

libgrt_a_SOURCES += striconv.h striconv.c
if GL_COND_LIBTOOL
endif

## end   gnulib module striconv

## begin gnulib module strnlen1

libgrt_a_SOURCES += strnlen1.h strnlen1.c

## end   gnulib module strnlen1

## begin gnulib module strstr


EXTRA_DIST += strstr.c strstr.h

## end   gnulib module strstr

## begin gnulib module strtol


EXTRA_DIST += strtol.c

## end   gnulib module strtol

## begin gnulib module strtoul


EXTRA_DIST += strtoul.c

## end   gnulib module strtoul

## begin gnulib module unistd

BUILT_SOURCES += $(UNISTD_H)

# We need the following in order to create an empty placeholder for
# <unistd.h> when the system doesn't have one.
unistd.h:
	{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
	  echo '/* Empty placeholder for $@.  */'; \
	} > $@
MOSTLYCLEANFILES += unistd.h

## end   gnulib module unistd

## begin gnulib module unlocked-io


EXTRA_DIST += unlocked-io.h

## end   gnulib module unlocked-io

## begin gnulib module wcwidth

libgrt_a_SOURCES += wcwidth.h

## end   gnulib module wcwidth

## begin gnulib module xalloc

libgrt_a_SOURCES += xalloc.h xmalloc.c xstrdup.c

## end   gnulib module xalloc

## begin gnulib module xreadlink

libgrt_a_SOURCES += xreadlink.h xreadlink.c

## end   gnulib module xreadlink

## begin gnulib module xstriconv

libgrt_a_SOURCES += xstriconv.h xstriconv.c

## end   gnulib module xstriconv


mostlyclean-local: mostlyclean-generic
	@for dir in '' $(MOSTLYCLEANDIRS); do \
	  if test -n "$$dir" && test -d $$dir; then \
	    echo "rmdir $$dir"; rmdir $$dir; \
	  fi; \
	done
