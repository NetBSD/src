.Dd $Mdocdate$
.Dt SQLITE3_BLOB_OPEN 3
.Os
.Sh NAME
.Nm sqlite3_blob_open
.Nd Open A BLOB For Incremental I/O
.Sh SYNOPSIS
.Ft int 
.Fo sqlite3_blob_open
.Fa "sqlite3*"
.Fa "const char *zDb"
.Fa "const char *zTable"
.Fa "const char *zColumn"
.Fa "sqlite3_int64 iRow"
.Fa "int flags"
.Fa "sqlite3_blob **ppBlob "
.Fc
.Sh DESCRIPTION
This interfaces opens a  handle to the BLOB located in row iRow,
column zColumn, table zTable in database zDb; in other words, the same
BLOB that would be selected by: 
.Bd -literal
SELECT zColumn FROM zDb.zTable WHERE rowid = iRow; 
.Ed
.Pp
If the flags parameter is non-zero, then the BLOB is opened for read
and write access.
If it is zero, the BLOB is opened for read access.
It is not possible to open a column that is part of an index or primary
key for writing.
If foreign key constraints are enabled, it is
not possible to open a column that is part of a child key
for writing.
.Pp
Note that the database name is not the filename that contains the database
but rather the symbolic name of the database that appears after the
AS keyword when the database is connected using ATTACH.
For the main database file, the database name is "main".
For TEMP tables, the database name is "temp".
.Pp
On success, SQLITE_OK is returned and the new BLOB handle
is written to *ppBlob.
Otherwise an error code is returned and *ppBlob is set to
be a null pointer.
This function sets the database connection error
code and message accessible via sqlite3_errcode()
and sqlite3_errmsg() and related functions.
Note that the *ppBlob variable is always initialized in a way that
makes it safe to invoke sqlite3_blob_close() on
*ppBlob regardless of the success or failure of this routine.
.Pp
If the row that a BLOB handle points to is modified by an UPDATE,
DELETE, or by ON CONFLICT side-effects then the BLOB
handle is marked as "expired".
This is true if any column of the row is changed, even a column other
than the one the BLOB handle is open on.
Calls to sqlite3_blob_read() and sqlite3_blob_write()
for an expired BLOB handle fail with a return code of SQLITE_ABORT.
Changes written into a BLOB prior to the BLOB expiring are not rolled
back by the expiration of the BLOB.
Such changes will eventually commit if the transaction continues to
completion.
.Pp
Use the sqlite3_blob_bytes() interface to determine
the size of the opened blob.
The size of a blob may not be changed by this interface.
Use the UPDATE SQL command to change the size of a blob.
.Pp
The sqlite3_blob_open() interface will fail for
a WITHOUT ROWID table.
Incremental BLOB I/O is not possible on WITHOUT ROWID
tables.
.Pp
The sqlite3_bind_zeroblob() and sqlite3_result_zeroblob()
interfaces and the built-in zeroblob SQL function can be used,
if desired, to create an empty, zero-filled blob in which to read or
write using this interface.
.Pp
To avoid a resource leak, every open BLOB handle should
eventually be released by a call to sqlite3_blob_close().
.Sh SEE ALSO
.Xr sqlite3_blob 3 ,
.Xr sqlite3 3 ,
.Xr SQLITE_OK 3 ,
.Xr sqlite3_bind_blob 3 ,
.Xr sqlite3_blob_bytes 3 ,
.Xr sqlite3_blob_close 3 ,
.Xr sqlite3_blob_open 3 ,
.Xr sqlite3_blob_read 3 ,
.Xr sqlite3_blob_write 3 ,
.Xr sqlite3_errcode 3 ,
.Xr sqlite3_result_blob 3 ,
.Xr SQLITE_OK 3
