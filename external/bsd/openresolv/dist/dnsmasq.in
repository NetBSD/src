#!/bin/sh
# Copyright (c) 2007-2012 Roy Marples
# All rights reserved

# dnsmasq subscriber for resolvconf

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

[ -f "@SYSCONFDIR@"/resolvconf.conf ] || exit 0
. "@SYSCONFDIR@/resolvconf.conf" || exit 1
[ -z "$dnsmasq_conf" -a -z "$dnsmasq_resolv" ] && exit 0
[ -z "$RESOLVCONF" ] && eval "$(@PREFIX@/sbin/resolvconf -v)"
NL="
"

: ${dnsmasq_pid:=/var/run/dnsmasq.pid}
[ -s "$dnsmasq_pid" ] || dnsmasq_pid=/var/run/dnsmasq/dnsmasq.pid
: ${dnsmasq_service:=dnsmasq}
: ${dnsmasq_restart:=@RESTARTCMD ${dnsmasq_service}@}
newconf="# Generated by resolvconf$NL"
newresolv="$newconf"

# Using dbus means that we never have to restart the daemon
# This is important as it means we should not drop DNS queries
# whilst changing DNS options around. However, dbus support is optional
# so we need to validate a few things first.
# Check for DBus support in the binary
dbus=false
: ${dbus_pid:=/var/run/dbus/dbus.pid}
[ -s "$dbus_pid" ] || dbus_pid=/var/run/dbus.pid
[ -s "$dbus_pid" ] || dbus_pid=/var/run/dbus/pid
if [ -s "$dbus_pid" -a -s "$dnsmasq_pid" ]; then
	if dnsmasq --version 2>/dev/null | \
		grep -q "^Compile time options.*[[:space:]]DBus[[:space:]]"
	then
		# Sanity - check that dnsmasq and dbus are running
		if kill -0 $(cat "$dbus_pid") 2>/dev/null && \
			kill -0 $(cat "$dnsmasq_pid") 2>/dev/null
		then
			dbus=true
		fi
	fi
fi

for n in $NAMESERVERS; do
	newresolv="${newresolv}nameserver $n$NL"
done

dbusdest=
conf=
for d in $DOMAINS; do
	dn="${d%%:*}"
	ns="${d#*:}"
	n="${ns%%,*}"
	while [ -n "$ns" ]; do
		case "$n" in
		*.*.*.*)
			SIFS=${IFS-y} OIFS=$IFS
			IFS=.
			set -- $n
			num="0x$(printf %02x $1 $2 $3 $4)"
			if [ "$SIFS" = y ]; then
				unset IFS
			else
				IFS=$OIFS
			fi
			dbusdest="$dbusdest uint32:$(printf %u $num)"
			dbusdest="$dbusdest string:$dn"
			;;
		*:*:*:*:*:*:*:*)
			SIFS=${IFS-y} OIFS=$IFS bytes=
			IFS=:
			set -- $n
			while [ -n "$1" ]; do
				addr="$1"
				shift
				while [ ${#addr} -lt 4 ]; do
					addr="0${addr}"
				done
				byte1="$(printf %d 0x${addr%??})"
				byte2="$(printf %d 0x${addr#??})"
				dbusdest="$dbusdest byte:$byte1 byte:$byte2"
			done
			if [ "$SIFS" = y ]; then
				unset IFS
			else
				IFS=$OIFS
			fi
			dbusdest="$dbusdest string:$dn"
			;;
		*)
			dbus=false
			;;
		esac
		conf="${conf}server=/$dn/$n$NL"
		[ "$ns" = "${ns#*,}" ] && break
		ns="${ns#*,}"
	done
done

if $dbus; then
	newconf="$newconf$NL# Domain specific servers will"
	newconf="$newconf be sent over dbus${NL}enable-dbus$NL"
else
	newconf="$newconf$conf"
fi

# Try to ensure that config dirs exist
if type config_mkdirs >/dev/null 2>&1; then
	config_mkdirs "$dnsmasq_conf" "$dnsmasq_resolv"
else
	@PREFIX@/sbin/resolvconf -D "$dnsmasq_conf" "$dnsmasq_resolv"
fi

changed=false
if [ -n "$dnsmasq_conf" ]; then
	if [ ! -f "$dnsmasq_conf" ] || \
		[ "$(cat "$dnsmasq_conf")" != "$(printf %s "$newconf")" ]
	then
		changed=true
		printf %s "$newconf" >"$dnsmasq_conf"
	fi
fi
if [ -n "$dnsmasq_resolv" ]; then
	if [ -f "$dnsmasq_resolv" ]; then
		if [ "$(cat "$dnsmasq_resolv")" != "$(printf %s "$newresolv")" ]
		then
			changed=true
			printf %s "$newresolv" >"$dnsmasq_resolv"
		fi
	else
		# dnsmasq polls this file so no need to set changed=true
		printf %s "$newresolv" >"$dnsmasq_resolv"
	fi
fi

if $changed; then
	eval $dnsmasq_restart
fi
if $dbus; then
	$changed || kill -HUP $(cat "$dnsmasq_pid")
	# Send even if empty so old servers are cleared
	dbus-send --system --dest=uk.org.thekelleys.dnsmasq \
 		/uk/org/thekelleys/dnsmasq uk.org.thekelleys.SetServers \
  		$dbusdest
fi
