RESOLVER(3)            FreeBSD Library Functions Manual            RESOLVER(3)

NNAAMMEE
     rreess__nniinniitt, rreess__oouurrsseerrvveerr__pp, ffpp__rreessssttaatt, rreess__hhoossttaalliiaass, rreess__ppqquueerryy,
     rreess__nnqquueerryy, rreess__nnsseeaarrcchh, rreess__nnqquueerryyddoommaaiinn, rreess__nnmmkkqquueerryy, rreess__nnsseenndd,
     rreess__nnuuppddaattee, rreess__nnmmkkuuppddaattee, rreess__nncclloossee, rreess__nnsseennddssiiggnneedd, rreess__ffiinnddzzoonneeccuutt,
     rreess__ggeettsseerrvveerrss, rreess__sseettsseerrvveerrss, rreess__nnddeessttrrooyy, ddnn__ccoommpp, ddnn__eexxppaanndd,
     hhssttrreerrrroorr, rreess__iinniitt, rreess__iissoouurrsseerrvveerr, ffpp__nnqquueerryy, pp__qquueerryy, hhoossttaalliiaass,
     rreess__qquueerryy, rreess__sseeaarrcchh, rreess__qquueerryyddoommaaiinn, rreess__mmkkqquueerryy, rreess__sseenndd,
     rreess__uuppddaattee, rreess__cclloossee, hheerrrroorr -- resolver routines

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<nneettiinneett//iinn..hh>>
     ##iinncclluuddee <<aarrppaa//nnaammeesseerr..hh>>
     ##iinncclluuddee <<rreessoollvv..hh>>
     ##iinncclluuddee <<rreess__uuppddaattee..hh>>

     _t_y_p_e_d_e_f _s_t_r_u_c_t _____r_e_s___s_t_a_t_e _*_r_e_s___s_t_a_t_e;

     _i_n_t
     rreess__nniinniitt(_r_e_s___s_t_a_t_e _s_t_a_t_p);

     _i_n_t
     rreess__oouurrsseerrvveerr__pp(_c_o_n_s_t _r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _s_t_r_u_c_t _s_o_c_k_a_d_d_r___i_n _*_a_d_d_r);

     _v_o_i_d
     ffpp__rreessssttaatt(_c_o_n_s_t _r_e_s___s_t_a_t_e _s_t_a_t_p, _F_I_L_E _*_f_p);

     _c_o_n_s_t _c_h_a_r _*
     rreess__hhoossttaalliiaass(_c_o_n_s_t _r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _c_h_a_r _*_n_a_m_e, _c_h_a_r _*_b_u_f,
         _s_i_z_e___t _b_u_f_l_e_n);

     _i_n_t
     rreess__ppqquueerryy(_c_o_n_s_t _r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _u___c_h_a_r _*_m_s_g, _i_n_t _m_s_g_l_e_n,
         _F_I_L_E _*_f_p);

     _i_n_t
     rreess__nnqquueerryy(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e,
         _u___c_h_a_r _*_a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__nnsseeaarrcchh(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e,
         _u___c_h_a_r _* _a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__nnqquueerryyddoommaaiinn(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _c_h_a_r _*_n_a_m_e, _c_o_n_s_t _c_h_a_r _*_d_o_m_a_i_n,
         _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e, _u___c_h_a_r _*_a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__nnmmkkqquueerryy(_r_e_s___s_t_a_t_e _s_t_a_t_p, _i_n_t _o_p, _c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s,
         _i_n_t _t_y_p_e, _c_o_n_s_t _u___c_h_a_r _*_d_a_t_a, _i_n_t _d_a_t_a_l_e_n, _c_o_n_s_t _u___c_h_a_r _*_n_e_w_r_r,
         _u___c_h_a_r _*_b_u_f, _i_n_t _b_u_f_l_e_n);

     _i_n_t
     rreess__nnsseenndd(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _u___c_h_a_r _*_m_s_g, _i_n_t _m_s_g_l_e_n, _u___c_h_a_r _*_a_n_s_w_e_r,
         _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__nnuuppddaattee(_r_e_s___s_t_a_t_e _s_t_a_t_p, _n_s___u_p_d_r_e_c _*_r_r_e_c_p___i_n);

     _i_n_t
     rreess__nnmmkkuuppddaattee(_r_e_s___s_t_a_t_e _s_t_a_t_p, _n_s___u_p_d_r_e_c _*_r_r_e_c_p___i_n, _u___c_h_a_r _*_b_u_f,
         _i_n_t _b_u_f_l_e_n);

     _v_o_i_d
     rreess__nncclloossee(_r_e_s___s_t_a_t_e _s_t_a_t_p);

     _i_n_t
     rreess__nnsseennddssiiggnneedd(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _u___c_h_a_r _*_m_s_g, _i_n_t _m_s_g_l_e_n,
         _n_s___t_s_i_g___k_e_y _*_k_e_y, _u___c_h_a_r _*_a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__ffiinnddzzoonneeccuutt(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _n_s___c_l_a_s_s _c_l_a_s_s,
         _i_n_t _o_p_t_i_o_n_s, _c_h_a_r _*_z_n_a_m_e, _s_i_z_e___t _z_s_i_z_e, _s_t_r_u_c_t _i_n___a_d_d_r _*_a_d_d_r_s,
         _i_n_t _n_a_d_d_r_s);

     _i_n_t
     rreess__ggeettsseerrvveerrss(_r_e_s___s_t_a_t_e _s_t_a_t_p, _u_n_i_o_n _r_e_s___s_o_c_k_a_d_d_r___u_n_i_o_n _*_s_e_t, _i_n_t _c_n_t);

     _v_o_i_d
     rreess__sseettsseerrvveerrss(_r_e_s___s_t_a_t_e _s_t_a_t_p, _c_o_n_s_t _u_n_i_o_n _r_e_s___s_o_c_k_a_d_d_r___u_n_i_o_n _*_s_e_t,
         _i_n_t _c_n_t);

     _v_o_i_d
     rreess__nnddeessttrrooyy(_r_e_s___s_t_a_t_e _s_t_a_t_p);

     _i_n_t
     ddnn__ccoommpp(_c_o_n_s_t _c_h_a_r _*_e_x_p___d_n, _u___c_h_a_r _*_c_o_m_p___d_n, _i_n_t _l_e_n_g_t_h, _u___c_h_a_r _*_*_d_n_p_t_r_s,
         _u___c_h_a_r _*_*_l_a_s_t_d_n_p_t_r);

     _i_n_t
     ddnn__eexxppaanndd(_c_o_n_s_t _u___c_h_a_r _*_m_s_g, _c_o_n_s_t _u___c_h_a_r _*_e_o_m_o_r_i_g,
         _c_o_n_s_t _u___c_h_a_r _*_c_o_m_p___d_n, _c_h_a_r _*_e_x_p___d_n, _i_n_t _l_e_n_g_t_h);

     _c_o_n_s_t _c_h_a_r _*
     hhssttrreerrrroorr(_i_n_t _e_r_r);

   DDEEPPRREECCAATTEEDD
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<nneettiinneett//iinn..hh>>
     ##iinncclluuddee <<aarrppaa//nnaammeesseerr..hh>>
     ##iinncclluuddee <<rreessoollvv..hh>>
     ##iinncclluuddee <<rreess__uuppddaattee..hh>>

     _i_n_t
     rreess__iinniitt(_v_o_i_d);

     _i_n_t
     rreess__iissoouurrsseerrvveerr(_c_o_n_s_t _s_t_r_u_c_t _s_o_c_k_a_d_d_r___i_n _*_a_d_d_r);

     _i_n_t
     ffpp__nnqquueerryy(_c_o_n_s_t _u___c_h_a_r _*_m_s_g, _i_n_t _m_s_g_l_e_n, _F_I_L_E _*_f_p);

     _v_o_i_d
     pp__qquueerryy(_c_o_n_s_t _u___c_h_a_r _*_m_s_g, _F_I_L_E _*_f_p);

     _c_o_n_s_t _c_h_a_r _*
     hhoossttaalliiaass(_c_o_n_s_t _c_h_a_r _*_n_a_m_e);

     _i_n_t
     rreess__qquueerryy(_c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e, _u___c_h_a_r _*_a_n_s_w_e_r,
         _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__sseeaarrcchh(_c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e, _u___c_h_a_r _*_a_n_s_w_e_r,
         _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__qquueerryyddoommaaiinn(_c_o_n_s_t _c_h_a_r _*_n_a_m_e, _c_o_n_s_t _c_h_a_r _*_d_o_m_a_i_n, _i_n_t _c_l_a_s_s,
         _i_n_t _t_y_p_e, _u___c_h_a_r _*_a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__mmkkqquueerryy(_i_n_t _o_p, _c_o_n_s_t _c_h_a_r _*_d_n_a_m_e, _i_n_t _c_l_a_s_s, _i_n_t _t_y_p_e,
         _c_o_n_s_t _c_h_a_r _*_d_a_t_a, _i_n_t _d_a_t_a_l_e_n, _s_t_r_u_c_t _r_r_e_c _*_n_e_w_r_r, _u___c_h_a_r _*_b_u_f,
         _i_n_t _b_u_f_l_e_n);

     _i_n_t
     rreess__sseenndd(_c_o_n_s_t _u___c_h_a_r _*_m_s_g, _i_n_t _m_s_g_l_e_n, _u___c_h_a_r _*_a_n_s_w_e_r, _i_n_t _a_n_s_l_e_n);

     _i_n_t
     rreess__uuppddaattee(_n_s___u_p_d_r_e_c _*_r_r_e_c_p___i_n);

     _v_o_i_d
     rreess__cclloossee(_v_o_i_d);

     _v_o_i_d
     hheerrrroorr(_c_o_n_s_t _c_h_a_r _*_s);

DDEESSCCRRIIPPTTIIOONN
     These routines are used for making, sending and interpreting query and
     reply messages with Internet domain name servers.

     State information is kept in _s_t_a_t_p and is used to control the behavior of
     these functions.  _s_t_a_t_p should be set to all zeros prior to the first
     call to any of these functions.

     The functions rreess__iinniitt(), rreess__iissoouurrsseerrvveerr(), ffpp__nnqquueerryy(), pp__qquueerryy(),
     hhoossttaalliiaass(), rreess__qquueerryy(), rreess__sseeaarrcchh(), rreess__qquueerryyddoommaaiinn(), rreess__mmkkqquueerryy(),
     rreess__sseenndd(), rreess__uuppddaattee(), rreess__cclloossee() and hheerrrroorr() are deprecated and are
     supplied for compatability with old source code.  They use global config-
     uration and state information that is kept in the structure ___r_e_s rather
     than that referenced through _s_t_a_t_p.

     Most of the values in _s_t_a_t_p and ___r_e_s are initialized on the first call to
     rreess__nniinniitt() / rreess__iinniitt() to reasonable defaults and can be ignored.
     Options stored in _s_t_a_t_p_-_>_o_p_t_i_o_n_s / ___r_e_s_._o_p_t_i_o_n_s are defined in _r_e_s_o_l_v_._h
     and are as follows.  Options are stored as a simple bit mask containing
     the bitwise ``OR'' of the options enabled.

     RES_INIT
              True if the initial name server address and default domain name
              are initialized (i.e., rreess__nniinniitt() / rreess__iinniitt() has been
              called).

     RES_DEBUG
              Print debugging messages.

     RES_AAONLY
              Accept authoritative answers only.  Should continue until it
              finds an authoritative answer or finds an error.  Currently this
              is not implemented.

     RES_USEVC
              Use TCP connections for queries instead of UDP datagrams.

     RES_STAYOPEN
              Used with RES_USEVC to keep the TCP connection open between
              queries.  This is useful only in programs that regularly do many
              queries.  UDP should be the normal mode used.

     RES_IGNTC
              Ignore truncation errors, i.e., don't retry with TCP.

     RES_RECURSE
              Set the recursion-desired bit in queries.  This is the default.
              (rreess__nnsseenndd() / rreess__sseenndd() does not do iterative queries and
              expects the name server to handle recursion.)

     RES_DEFNAMES
              If set, rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() will append the default
              domain name to single-component names (those that do not contain
              a dot).  This option is enabled by default.

     RES_DNSRCH
              If this option is set, rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() will search
              for host names in the current domain and in parent domains; see
              hostname(7).  This is used by the standard host lookup routine
              gethostbyname(3).  This option is enabled by default.

     RES_NOALIASES
              This option turns off the user level aliasing feature controlled
              by the HOSTALIASES environment variable.  Network daemons should
              set this option.

     RES_USE_INET6
              This option causes gethostbyname(3) to look for AAAA records
              before looking for A records if none are found.

     RES_ROTATE
              This options causes the rreess__nnsseenndd() / rreess__sseenndd() to rotate the
              list of nameservers in _s_t_a_t_p_-_>_n_s_a_d_d_r___l_i_s_t / ___r_e_s_._n_s_a_d_d_r___l_i_s_t.

     RES_KEEPTSIG
              This option causes rreess__nnsseennddssiiggnneedd() to leave the message
              unchanged after TSIG verification; otherwise the TSIG record
              would be removed and the header updated.

     RES_NOTLDQUERY
              This option causes rreess__nnsseeaarrcchh() to not attempt to resolve a
              unqualified name as if it were a top level domain (TLD).  This
              option can cause problems if the site has "localhost" as a TLD
              rather than having localhost on one or more elements of the
              search list.  This option has no effect if neither RES_DEFNAMES
              or RES_DNSRCH is set.

     The rreess__nniinniitt() / rreess__iinniitt() routine reads the configuration file (if
     any; see resolver(5)) to get the default domain name, search list and the
     Internet address of the local name server(s).  If no server is config-
     ured, the host running the resolver is tried.  The current domain name is
     defined by the hostname if not specified in the configuration file; it
     can be overridden by the environment variable LOCALDOMAIN.  This environ-
     ment variable may contain several blank-separated tokens if you wish to
     override the ``search list'' on a per-process basis.  This is similar to
     the sseeaarrcchh command in the configuration file.  Another environment vari-
     able (``RES_OPTIONS'') can be set to override certain internal resolver
     options which are otherwise set by changing fields in the _s_t_a_t_p / ___r_e_s
     structure or are inherited from the configuration file's ooppttiioonnss command.
     The syntax of the ``RES_OPTIONS'' environment variable is explained in
     resolver(5).  Initialization normally occurs on the first call to one of
     the other resolver routines.

     The memory referred to by _s_t_a_t_p must be set to all zeros prior to the
     first call to rreess__nniinniitt().  rreess__nnddeessttrrooyy() should be call to free memory
     allocated by rreess__nniinniitt() after last use.

     The rreess__nnqquueerryy() / rreess__qquueerryy() functions provides interfaces to the
     server query mechanism.  They constructs a query, sends it to the local
     server, awaits a response, and makes preliminary checks on the reply.
     The query requests information of the specified _t_y_p_e and _c_l_a_s_s for the
     specified fully-qualified domain name _d_n_a_m_e.  The reply message is left
     in the _a_n_s_w_e_r buffer with length _a_n_s_l_e_n supplied by the caller.
     rreess__nnqquueerryy() / rreess__qquueerryy() return -1 on error or the length of the
     answer.

     The rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() routines make a query and awaits a
     response like rreess__nnqquueerryy() / rreess__qquueerryy(), but in addition, it implements
     the default and search rules controlled by the RES_DEFNAMES and
     RES_DNSRCH options.  It returns the length of the first successful reply
     which is stored in _a_n_s_w_e_r or -1 on error.

     The remaining routines are lower-level routines used by rreess__nnqquueerryy() /
     rreess__qquueerryy().  The rreess__nnmmkkqquueerryy() / rreess__mmkkqquueerryy() functions constructs a
     standard query message and places it in _b_u_f.  It returns the size of the
     query, or -1 if the query is larger than _b_u_f_l_e_n.  The query type _o_p is
     usually QUERY, but can be any of the query types defined in
     _<_a_r_p_a_/_n_a_m_e_s_e_r_._h_>.  The domain name for the query is given by _d_n_a_m_e.
     _N_e_w_r_r is currently unused but is intended for making update messages.

     The rreess__nnsseenndd() / rreess__sseenndd() / rreess__nnsseennddssiiggnneedd() routines sends a pre-
     formatted query and returns an answer.  It will call rreess__nniinniitt() /
     rreess__iinniitt() if RES_INIT is not set, send the query to the local name
     server, and handle timeouts and retries.  Additionally, rreess__nnsseennddssiiggnneedd()
     will use TSIG signatures to add authentication to the query and verify
     the response.  In this case, only one nameserver will be contacted.  The
     length of the reply message is returned, or -1 if there were errors.

     rreess__nnqquueerryy() / rreess__qquueerryy(), rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() and rreess__nnsseenndd()
     / rreess__sseenndd() return a length that may be bigger than _a_n_s_l_e_n.  In that
     case the query should be retried with a bigger buffer.  NOTE the answer
     to the second query may be larger still so supplying a buffer that bigger
     that the answer returned by the previous query is recommended.

     _a_n_s_w_e_r MUST be big enough to receive a maximum UDP response from the
     server or parts of the answer will be silently discarded.  The default
     maximum UDP response size is 512 bytes.

     The function rreess__oouurrsseerrvveerr__pp() returns true when _i_n_p is one of the
     servers in _s_t_a_t_p_-_>_n_s_a_d_d_r___l_i_s_t / ___r_e_s_._n_s_a_d_d_r___l_i_s_t.

     The functions ffpp__nnqquueerryy() / pp__qquueerryy() print out the query and any answer
     in _m_s_g on _f_p.  pp__qquueerryy() is equivalent to ffpp__nnqquueerryy() with _m_s_g_l_e_n set to
     512.

     The function ffpp__rreessssttaatt() prints out the active flag bits in
     _s_t_a_t_p_-_>_o_p_t_i_o_n_s preceeded by the text ";; res options:" on _f_i_l_e.

     The functions rreess__hhoossttaalliiaass() / hhoossttaalliiaass() lookup up name in the file
     referred to by the HOSTALIASES files return a fully qualified hostname if
     found or NULL if not found or an error occurred.  rreess__hhoossttaalliiaass() uses
     _b_u_f to store the result in, hhoossttaalliiaass() uses a static buffer.

     The functions rreess__ggeettsseerrvveerrss() and rreess__sseettsseerrvveerrss() are used to get and
     set the list of server to be queried.

     The functions rreess__nnuuppddaattee() / rreess__uuppddaattee() take a list of ns_updrec
     _r_r_e_c_p___i_n.  Identifies the containing zone for each record and groups the
     records according to containing zone maintaining in zone order then sends
     and update request to the servers for these zones.  The number of zones
     updated is returned or -1 on error.  Note that rreess__nnuuppddaattee() will perform
     TSIG authenticated dynamic update operations if the key is not NULL.

     The function rreess__ffiinnddzzoonneeccuutt() discovers the closest enclosing zone cut
     for a specified domain name, and finds the IP addresses of the zone's
     master servers.

     The functions rreess__nnmmkkuuppddaattee() / rreess__mmkkuuppddaattee() take a linked list of
     ns_updrec _r_r_e_c_p___i_n and construct a UPDATE message in _b_u_f.
     rreess__nnmmkkuuppddaattee() / rreess__mmkkuuppddaattee() return the length of the constructed
     message on no error or one of the following error values.

     -1 An error occurred parsing _r_r_e_c_p___i_n.

     -2 The buffer _b_u_f was too small.

     -3 The first record was not a zone section or there was a section order
     problem.  The section order is S_ZONE, S_PREREQ and S_UPDATE.

     -4 A number overflow occurred.

     -5 Unknown operation or no records.

     The functions rreess__nncclloossee() / rreess__cclloossee() close any open files referenced
     through _s_t_a_t_p / ___r_e_s.

     The function rreess__nnddeessttrrooyy() calls rreess__nncclloossee() then frees any memory
     allocated by rreess__nniinniitt().

     The ddnn__ccoommpp() function compresses the domain name _e_x_p___d_n and stores it in
     _c_o_m_p___d_n.  The size of the compressed name is returned or -1 if there were
     errors.  The size of the array pointed to by _c_o_m_p___d_n is given by _l_e_n_g_t_h.
     The compression uses an array of pointers _d_n_p_t_r_s to previously-compressed
     names in the current message.  The first pointer points to to the begin-
     ning of the message and the list ends with NULL.  The limit to the array
     is specified by _l_a_s_t_d_n_p_t_r.  A side effect of ddnn__ccoommpp() is to update the
     list of pointers for labels inserted into the message as the name is com-
     pressed.  If _d_n_p_t_r is NULL, names are not compressed.  If _l_a_s_t_d_n_p_t_r is
     NULL, the list of labels is not updated.

     The ddnn__eexxppaanndd() entry expands the compressed domain name _c_o_m_p___d_n to a
     full domain name.  The compressed name is contained in a query or reply
     message; _m_s_g is a pointer to the beginning of the message.  _e_o_m_o_r_i_g is a
     pointer to the first location after the message.  The uncompressed name
     is placed in the buffer indicated by _e_x_p___d_n which is of size _l_e_n_g_t_h.  The
     size of compressed name is returned or -1 if there was an error.

     The variables _s_t_a_t_p_-_>_r_e_s___h___e_r_r_n_o / ___r_e_s_._r_e_s___h___e_r_r_n_o and external variable
     _h___e_r_r_n_o is set whenever an error occurs during resolver operation.  The
     following definitions are given in _<_n_e_t_d_b_._h_>:

     #define NETDB_INTERNAL -1  /* see errno */
     #define NETDB_SUCCESS  0   /* no problem */
     #define HOST_NOT_FOUND 1   /* Authoritative Answer Host not found */
     #define TRY_AGAIN      2   /* Non-Authoritative not found, or SERVFAIL */
     #define NO_RECOVERY    3   /* Non-Recoverable: FORMERR, REFUSED, NOTIMP */
     #define NO_DATA        4   /* Valid name, no data for requested type */

     The hheerrrroorr() function writes a message to the diagnostic output consist-
     ing of the string parameter _s, the constant string ": ", and a message
     corresponding to the value of _h___e_r_r_n_o.

     The hhssttrreerrrroorr() function returns a string which is the message text cor-
     responding to the value of the _e_r_r parameter.

FFIILLEESS
     /etc/resolv.conf      See resolver(5).

SSEEEE AALLSSOO
     gethostbyname(3), hostname(7), resolver(5); RFC1032, RFC1033, RFC1034,
     RFC1035, RFC974; SMM:11, ``Name Server Operations Guide for BIND''

4th Berkeley Distribution        July 4, 2000        4th Berkeley Distribution
